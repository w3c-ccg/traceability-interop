{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5d5414bd-1b1b-4470-b3b4-d0ae1e57f255",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c5b9816a-eeb6-4262-a84a-b06fcda8b9a3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c708567b-131c-412f-a67c-7ff3d3782d50",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8f07ce41-653a-4e1a-8562-7a5b4f86b97c"
                }
              }
            ]
          },
          {
            "id": "95f99fa6-67ae-4443-9205-fbde00d013a5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "58b8dc26-51c2-4039-8600-b3de95bd438a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6bb6e302-4ae8-4109-907f-6e96f1b70d09"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "42fcc49d-ee00-4202-a435-92758cf67cd5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7e7273ba-7f32-4024-9fc4-9dbb80b3f19b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "87fb3e99-b01e-4096-b8bc-44996f74550e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be449717-ab19-41e6-8345-0b239e92e264",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "14373037-ce0a-4689-ade4-b9a0cfad6ec5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1436d691-1735-4885-ad41-233b9b4a7d26",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "071f6419-efb1-4c9e-b2b9-3095d58f684d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f11fdf0d-4360-4303-9bc0-23e03c2ebe0d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "60f27a43-f297-4e4f-859c-ec87c79005a6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f2d20e8-36d3-401c-a3a5-321f988c6afc",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "50ea043f-d03b-4757-913d-1812247d3359"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b75528a6-bdbe-479c-a5be-f8eaea866b34",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d14cb376-c801-4ca0-bdbf-e98cc31c610a"
            }
          }
        ]
      },
      {
        "id": "0691d5bf-0e87-4717-ab6a-343364997975",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a7a87909-02c5-4e7d-86f8-8b00899ed144",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c09905d1-2f54-4a38-8ce4-dd518fe71ae9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a99671eb-94b4-4b7c-98bc-ed43dba1ee51",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f913bb-71b6-496d-9615-fee12a214ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "785032eb-3e26-4e1b-b9c3-2bfd516b38f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0fe0721-37bc-4d6c-bde8-b98b609c6481",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ee6310-23c7-4201-a40f-bbe3503ec677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1589e58a-05a3-4d42-bb9c-84c933a88bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323c4ef1-b22f-45e9-aa83-88692da91011",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ccd3ef1-0d9a-4c9e-a48a-56b1b5bff286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c44bbb8-d13c-404a-90ca-7d852be76e90"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "05775377-1252-4f02-b8f4-04b935a3bc54",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fca95e5e-853c-43c2-a1ea-f20d916f6c1a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280bcc7e-cd5f-407b-9304-4fd40fc5ef55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5fd25bd0-4fec-4acb-8b28-b07de6cb3933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a365836f-8ebd-4443-a3c1-d68ed5c0d97b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ea4ea8-fc72-4b5a-8efe-73ebb2b8729a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1740d0c1-3d39-445c-a354-96912242c97a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "557106f7-e620-4020-9109-a788dfed2195",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1f60395-50d2-4154-b350-89bfccb6faa9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1c8fa8e9-245c-4a2a-b62e-a25911d8f5d1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed21e09d-261e-4704-8274-1736db4bde0b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "cf78a003-710c-41c6-8a78-320b341dade9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7c2bafa-0a44-4003-9bf7-62375bfc1dd1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2352f0ee-7a93-48cd-9295-4589098965c2"
            }
          }
        ]
      },
      {
        "id": "565cfdde-b173-42b3-852b-2512a817b3c2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "09df7eca-0706-4e32-a94f-4601f43d0d76",
            "name": "Negative Testing",
            "item": [
              {
                "id": "56578d23-a660-4884-bd7a-df387d2e2087",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "41945b59-4a2d-4ca4-8ec1-ac4b313faad5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae15194-34cd-4397-a0c2-7a3e67b49502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d89a677a-4607-4bb0-b5c1-0bbf67c18659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ff46e3-0518-436b-8d4f-90d43f07ce5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b7c638d-ca71-460d-8667-6db035a31615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b8b77f3-c7c8-4b7f-8e76-ac9bb798c241",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "351c1d43-4676-4226-96ca-dc6cbe79f144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8de3e1a3-56b5-44d9-8b0c-7ab490ba92a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec421bf1-baf0-4fac-b8e2-b075b106e9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46fb290d-ff68-447d-b035-bcbf478af6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0581f546-17ad-4d54-97c1-92341da9b3ee",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8db8ee-65c5-447d-9903-4216a862363a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d62ce0-c53c-4b7f-951a-b9163a799d89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d8d7d58-259f-414b-bb01-8a9ddf61c67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38bfc56c-3917-4710-9b28-aaa383fee34c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13799b8d-110b-443b-9c9f-ec04dd0253af",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1000ba07-15d4-4af0-8183-855fec5971bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90cc88f6-7afa-43d0-bcd8-9b1a4dafbb1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54dd2db8-0d52-4db3-941f-cc9419803d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "818f2fc5-5f53-4265-a8d5-ad76ccd85120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ac85f2-9116-4f6e-b06d-84160b6c1923",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6170df30-6eba-43d8-ac88-3719d8be29d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e530e28-bb97-4e23-9ccb-ab002a2eb096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9746ab-b101-4b79-8278-596fa87383f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "617f0ed1-64b0-43c7-a875-8a92b89b028f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26faa0e2-e3ee-4d6d-b11c-68fb41253efa",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1216cf-9141-4c96-9530-053bee838abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd5a2ede-69fe-4e8e-9ccf-65967545cc9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a8c40e-df02-45a9-98ae-8fbb950a426d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8089b2a2-2956-4441-9a21-cca1de04ae82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a8f9c7-21b4-43ef-9dc5-8e8e4f595a51",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dada7ba-3723-4fbd-9ec1-7a2deab1651a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bada5c4-d948-4f0a-90cb-4e55c3d5ac91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d586e44e-f827-407d-9886-bdba24d7afa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "725d41cf-c6d9-466d-a2e9-0482657c66d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1872aed7-80f1-415d-89ae-536fb0eeddab",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b8c7cd-ec62-4c71-b49a-1be40f8f2a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ca9e1a-d2cc-4138-8346-606661179d7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b43889-7c17-4072-846e-6d9689358e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbd8615c-87fb-43d8-a2ea-a7dbfd4072b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973886fa-9b55-46f6-9135-0e8c0935dcc4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9883fec-0e65-4fb6-9df9-6675448a8fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b52bac3e-c033-42fb-91fc-4930385a2300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dbf5da8-a9fe-45a1-89bc-5c9407206154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba59e251-3eda-49e3-a41f-aa81faf4700d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5617df7-de5c-40c1-96b3-d386af87f93b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16b6c4c-13f4-429f-bf97-fd069573de77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45a349c6-1be7-4793-9fb1-97ee464abd5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b6c7d3-240a-41a5-b681-e454480007dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbc2a370-116d-48f8-b461-c760b9514575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782c93b7-18a9-46f7-be63-faf570f6342b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df95c400-a7ae-4abb-bae0-b2e1aa4b01f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b7e3cf8-c078-4e66-aa29-2043995f8cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b53ec29-5e31-4218-8390-2d9a1979b5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b1e0825-6838-43dc-9479-000cd0192df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "502a6c92-c36b-4e13-a3a5-07f4c01ce2c4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2136d5fe-2cc1-406f-afe0-f98b48c803dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61da9544-8a74-47a0-9b1b-05a12ec23a83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2daac09-9323-4ecb-aa69-059ca84d7826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76d3c703-2673-48ba-ad76-90952cdc4219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5991268f-7cd0-4ecf-950e-ca762e28b976",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37966f88-f6ba-4e8b-bd39-f072bbfbbef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24ae6855-9554-44f0-93c7-49ec9565a8f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907fc307-70f8-4ff2-99fb-8f76aa207cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c31b6d6e-de31-4700-9c58-cce3729fc22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef076a35-30c6-435c-9b21-ea9dfc794427",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d2dc2d-204a-4afa-8fbd-2542bdffa318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1a1a547-bb85-4224-a985-1e4d1e76e707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7bc6419-5b81-4e51-a193-d528d919467f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fcd80f7-686e-4ccb-9e0c-56550fe47798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7f3e2a-8f71-4381-9d6d-0d62f32ddf33",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5822846d-f398-45b1-8216-9ac68aa9ab09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23e429fb-a2b3-44fe-a6ed-8355fcd1b164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf93ed2-dc54-4077-8e6f-5267f37eb09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70eb28d3-73e6-476e-b9a7-c70177d1eba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5466f154-73aa-493d-a667-0d24da9981a7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf7bb2d-0a8a-4ac9-81f8-e07c90ac7561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f16af3be-d09f-45ca-b9bb-aaacf88acdfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a84f9a-e5fb-49ec-b9d9-201030f9f78c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "774c3b52-d3b3-40f4-ac94-b2cc46824874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3272feed-39f2-4ed2-acc3-f23bea307151",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e0f4c7-a978-433b-85ef-abeb17aca8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fba5d24-49ef-4c24-87d6-4231d0714568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1352086-ec25-4f6f-b7bc-902bbabe1247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74957994-cf59-4ce6-a40b-013926069caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f679958-fd9d-4fad-8890-fc5732d3a172",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ca7a3f-db52-4233-9404-bfa72259f5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "678ebe55-aa46-4455-8621-437fcad33697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9322b52-bffa-4109-baf5-a0f206a8d568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "074c82d0-822b-4c1c-a522-c25a45e7911b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af6e9bf-4b0c-4bf2-a0ef-02edf54640dd",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcdcec71-5030-437a-a6c4-2e5c46b2d507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27fa1273-1355-4f26-a922-79fa7744333f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2ca5c7-0a42-4d95-a702-61184ef32465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "97692434-752f-4f2d-983a-4d05396f033d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90cde9f-4052-4cff-bbe7-0e3bdc24d5fe",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ab4df8-79ba-4b33-9002-ff3df74567d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "946c2e89-bc1d-4f18-99d0-b865607889cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df7a2a00-f84b-40e7-aa8b-4073098c3d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "517d7179-c69f-4650-b0c4-b079b63c032e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746a1b90-1841-430e-abe3-54b1f422e39c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "015a7381-c401-4f90-87f5-7b3b1bdb0dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27098100-8635-4689-8ff3-7b0b29a934cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea80c07-bef2-49cf-b542-6997b4bcd69d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e1f2a3-a6d7-47df-b324-144ebf8cac62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcab40c1-71c6-4dbb-8f02-e8975f92ccf0",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f92a122-6b5d-4d3d-852d-eaf4c17be5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db086843-520d-4760-9589-1eb76a61f043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2633dcdf-595c-4ae9-b354-66746e9136c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4cefd0f-86fc-4378-a64b-7addba855b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e049d3ef-6f33-4d76-9b0b-1455e10fc833",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efacc0b5-3ba1-493e-b677-d1605b21d6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cd7594d-4b86-4816-848d-1afb36999ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02840472-d961-4079-90d2-4f449815b553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "011e34d0-75ee-4b17-975a-9cd5fc931d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2004630c-a71f-4df3-a75f-6c8ab95b5fca",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89119652-7ccd-41de-b210-7e6af0c05c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ae0e88-92b3-4421-ae10-c1a6e76bfdbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd37a86-f401-4393-bc04-87614b8fc597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "710759ac-7807-4fc4-a455-4833289835f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d34c69f-6024-45bc-95cd-e6c33c3d8cbd",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6abd4555-cd24-4a40-a927-8ed4b1c1c7ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7840400-5800-49d1-b55b-2957889ddd85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8cd9ce-a033-418f-b3e1-ddf22d839cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b5107bc-611d-48aa-9ae3-7dc799b412c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81189b33-f251-4c98-b07e-83609445dd33",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "addb2b61-09df-4839-8b86-130477ee4b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c080ef5-88d4-4f84-b2f9-9be27970d9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b13326b-ea51-41fa-a477-94e06c376e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8ef8b9e-1754-4101-b09a-bfcefc4fe749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328cbe93-d8f9-4b9a-a9cc-7731383c1380",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b880d8-3839-47a6-8556-d36d596f9c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b30097e-46a1-4bfe-ac25-9800011f8e11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee3d525-036d-4fce-bb90-8c563094e6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "21581c62-bc54-4fcf-9080-19add034abf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b7027f-ffab-49fd-ad13-eac5a4e7b94c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8cf22b7-5075-4ffe-8c34-79e9a1da9338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccaf2473-aabd-4b87-a16c-42a17798d1cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9174334c-b3db-466c-8720-8f3b9130b87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "580f1b1a-069d-4b5d-af7a-057f2a6879ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e0f0d8-76d0-4c4a-bafb-957a8ef88aa4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72e1766-8416-4ad8-8242-191ee3c78921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9faf3399-ceb1-4736-a98f-330eec7c2469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea1e272-6930-48d2-87db-bf7c5798caa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cfb2db0-59f9-4d59-9afe-d4e39fc03076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7556e838-18a2-474d-b834-6ba990a76c1b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e82bbd-8d3b-49f5-98f3-f3a2b205252f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c68ee38-a1cf-4e14-9d98-c6b093de4546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2291c677-8a07-4ea2-ade4-80803be6d6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebbf1f08-7369-4dc1-a9d5-4137ff851b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a56fa2-0645-4b7e-b70d-6101ebdb9ad0",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15af88dd-db6c-4c81-aa27-8b2cf88ec1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2becabbe-3452-42aa-b4f2-327ce5d07ff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c40cf9-9a19-4a54-9646-a7cc05ddd9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "130e699e-52bc-4d74-bb9d-85778aefc84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24eed3f9-2cec-440f-ae20-1e1c720507e2",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac61328f-714c-4844-97a6-792c6287b975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9583f04e-9b52-47a0-b2ee-bf3a85932578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d765242f-c4ac-404a-99da-b4d1926eafc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd3aa54-a04f-4730-9e06-b28775fbb4ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a275256-6d6b-44b5-ba64-0c01a2dde7a3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14e84dd-680b-4a04-971b-4279cbab2770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a792e63-dd03-49d9-a35a-002e56442603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444499f6-2d25-4c09-981b-7fdfb93dcc73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f29c698f-42ff-4da7-bf29-99888d1bd3d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c3a2f3-65ab-4880-bbfd-bce852ac07eb",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834afd2a-5613-460b-9605-fd339b689b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f4c8e1-48e9-4085-ae9b-f405a1bac973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3822fa7-62ac-432b-aef9-df504d860c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8478f07f-189f-4eb6-a950-c1295e6f9889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11235d54-e08c-4b13-9c94-24caf3ff8e21",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f204c694-39c8-4a54-8733-9449f84010b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d03641ea-7830-4a55-8788-6587115d9960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88aaa331-1e9a-4276-85f8-3ef9e24894c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6fd4f87f-6582-4f69-bd4d-3ea4a4f953b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5ec068-a950-47ea-ad6e-f549939c7a34",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e9ff5f0-f921-4cd1-85e7-2b8118cdb428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6dd87ee4-b43c-47cc-8d05-29d238816eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e5ef61-948e-411d-aa2e-a43799c0cb7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7534f90f-b03a-4274-b814-8cd81cabb299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189eb440-0d85-436c-a544-be1e2b0c9895",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3ca612-5d38-4789-af5f-c890dd75f91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f74fb8-ea80-461f-a73e-068cee2e167e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199522c5-4ee7-42ba-853b-b80f34cbb2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e542071a-bd60-4193-872f-c2ef6790c58c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551ef203-a736-43fc-bc29-dd596f4b4e06",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8166dbb-7825-446f-b124-9fc4f30de86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eac6b9d-620d-4caf-a67b-a6eb0edba15d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302ca812-c518-4cd5-847b-bb9f50a84f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2e2f23e-06ac-4878-8d69-7b6ad5843f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfbb1ef9-a31b-4a4e-aa58-d61e9ea8d383",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfda2fc-bb84-446e-881b-f12595256a14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99079bc3-d199-4f0f-bd0c-5b89c4323511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c48710-f7b9-41d9-bf6a-2eb55d1ce4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "03098244-d67d-4bee-ad31-2cd54e67e2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e69516-796e-406b-8ecd-a08a9c102668",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f854f2-87f5-4d48-bedc-afbf96c9ec48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ac36de5-d943-4765-ac79-b55b8c22c666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01762ef3-c974-40f9-a970-1daf1c42368d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "695f3da3-98f8-4f14-a31a-392f8b224b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4210101-6ad1-4f7d-8672-75efc94e5bb1",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3fcfa8-520b-4c33-aeac-371d3c886a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31339660-b421-4762-aaca-4596cb132810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6fc9cc-8800-466a-a2ad-22ac651756b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7306a626-5bea-4f18-b60f-67a37d30fe88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed08cbc1-b609-49a0-a20f-5ab3604ac644",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe7eb1e-af55-4f3e-a704-7deb09c25389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "928b4cd3-06b8-40dc-9e7b-8b900b09ce2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b058d8-308e-4f39-a2ca-e5451d41e873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "64bb40e5-2224-4d9e-92cd-b6d0670fdedb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20dc4276-7c96-4661-8281-2ba9365c1738",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "815272a7-01e1-4c88-a6d3-b6740885753f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e2f16bf-3460-4567-8dae-c9e06d121689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe81b54b-40b0-48e3-ba05-29469905ff62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1464b741-de3a-485e-9e9c-92b4cde37a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a8ce41-8655-48e6-af0c-be56640ba529",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "657d3afd-f799-4153-a4c3-fe5b86715d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01c4ae66-78a2-457d-8ce9-a1b6829a20c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8549de-a94d-49ed-8219-2bab6cd56556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "16805a33-18a6-44d6-80d9-0481f88f5051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "260d6dde-8dc1-4f7d-b165-7edeea037f0d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0374ef6-7b8b-45da-80a6-f00671fffecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7796f26-0f46-446f-b527-5d807c267eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28f7ab2-22af-4e37-89ca-c9b21c860790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "48e9cb4f-5d6c-4e54-9107-508332394f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94145e68-d174-45b8-a641-bc76ccb5dd0e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43e6444-4a20-4230-aec5-906e9098f464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f95b98c-1abe-4c51-a8cc-2b788de67b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e254282b-5928-49cd-a5e7-0002eff53afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d0b5449-8029-4d90-83f6-6596cd6880b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5916f98-a72f-4db8-827a-b240979bc366",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98af38a6-bd72-4fd9-a17c-7d4a0a674c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d31f5e8-84a0-4151-b17a-d53a95866147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db0cbca-d776-47f9-b626-1307f9826e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d5d013c-0357-4348-a220-81a3d45f8ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06732b08-8d26-465d-9252-c394dad5b07f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d784335e-84df-416e-a1fc-04d68496b2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f9fd1bd-4cc1-4200-b5c1-d93c1fc9ea92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17500f4b-652c-4197-bf71-9c0d9196d02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "65e66013-f126-481e-90fc-abe2d0616df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1042363f-9768-4bfc-bfd3-067211a7d704",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a9dd64-5336-4502-842c-1ba54c8bc673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8aac535-6977-41eb-a1bb-903c8faf87d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "864bdcad-9555-4c11-aaa8-27674f7e8c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8645e65-bd0f-4ca1-8586-a4ad010c98e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7cad45b-c0c1-4211-9773-cc6509e54bc4",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e71401-ae17-4d74-94eb-a3135d546b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee2755be-6f82-4791-baa1-beb5a77c1546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32b492b-17a7-47b2-9921-9587b88ad345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0b1995f8-c02c-4f96-94f4-9e26b0c0dc5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9c34ea-c18b-4f56-8c59-aafad4575894",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9b50aa-50e9-4609-a0db-a29f885010ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5553bcf2-6d36-4809-aef9-3fe8bd037af7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3298fdaa-991e-4188-b419-439f24bf8373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d7b1668-9a39-49d6-a7f5-a06f61d5f331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761147aa-bc8d-4949-834f-a7f8dba4742b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "302339db-dcd6-4dd8-ab68-74d3174f0994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03cc87ad-3928-440f-bf1d-b92528e389be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4f0802-f9b3-4faa-a05e-1fd219e6206e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fde30131-4638-47a7-a3b9-c3a6bd072625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd70739-4eae-48f7-9eae-85de41dca584",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c521905-7b5b-4c62-a291-904b3d7997a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75068562-35f6-4178-86c1-5f0ce591e8c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed4694a-95ba-46a7-baf9-796ed7cf180d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e569d71-dfca-4c43-9ee8-daa46802ce9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e57525-d1c0-41c3-b570-c9c86f780895",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f534f0a-7ccc-40f0-a9fe-bdd5e8d90eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d78bbecf-50ed-401d-a731-985b4af5b1f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f2ca61-8030-45a7-8976-3cc8dfbc1852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba890ecb-a2e8-48c5-8f06-ce48c7f978a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb76aeb-6842-4930-a10f-305511c00da9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "759b2a83-3861-4e80-8938-579f5281366c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "157ff453-33bf-4292-8c2e-494843d595ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e3f165-c6e0-4cce-8c12-746a1fa15c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3aa6b0f-3eb7-4470-a7a8-675f2b8c9202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ec74f9-bcab-4422-9476-4a8f2a20c98f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "484c269e-f503-421b-b485-eb534b8c541b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9bf6fe7-8190-4e8f-aaa0-97f324774332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4482fcbd-0643-4ae3-a516-8d251b1af806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "baf1d683-1120-4b42-bb76-0e90eeac75db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f5480a-9e50-4b86-8abe-b50cf7b72ae4",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e8665e-62fa-4efb-b98b-0f5ea3cbc914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a98e5af3-6ff8-4873-bc61-39b497ebd711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec37addb-6eb0-4917-96fc-847450428cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c2e55c7-8671-41eb-9afa-ef1feaf51e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3076b37e-1cf5-485a-957a-dd86147df466",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6aee4d3-a050-4aa6-af69-4bec816a9cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7beb0c82-69e4-4c91-9662-93d2594773d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a53d539-0ba2-4a95-bd08-9cba8483ffbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "963d2dac-eab3-40c8-a340-bd18bf325141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46b67e2-1016-4302-9d3b-56dd3ec33008",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7f8a7d-c7b9-4c9b-bef4-f96e7063ed17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb0d5bb-ab10-4819-b2f1-7ba8ca1c629a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755c4649-21b0-4f4f-9edd-c711d4f6b827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fcde0452-c712-48e4-ab65-fe4d8a19b52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ae1796-27a2-4f2b-bbea-2510e357e9de",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b730f0f-9c20-480f-8a36-6da895d9b44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e252bc-75d1-40f2-9d14-7184b36648c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b803519f-7e13-42a2-943c-d7f77d023a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "95f1bd7b-1efa-4d65-80e0-b709aa933ce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff422714-588f-41eb-9c24-8ac5353c8113",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7dbf86-9a9a-4d35-ba80-2f8c05543a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90d42484-73fb-4317-814e-d6d53ad12630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3d5b22-b606-4473-a4c2-f1b73c581714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3a8d844-2529-4129-b2c5-113657547161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a5fc99-11f3-4cde-a9f4-d91f5c0877ad",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1cffd2-b57a-4105-8735-0da891c2d5e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "154a42f7-75b8-456d-b47d-6e7a5de9b40a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e6512c6-e1e5-4315-b176-fcc5aa1900b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "71d5a1ed-c54d-4a03-9eb1-9625e5c60318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5626d2e3-441f-4491-9dbd-78decc624a2c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "101a7033-b382-4cbd-8926-13f2a64dee20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8e4f43e-a2b4-40bb-936c-44084f5d4fde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92db18f7-75db-47af-8c3b-cd9449f1c30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e16086c9-a24b-4fbe-915a-acf092234f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42afcec8-0e07-4523-a216-0a1e779233c5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a2603a-fbcf-48c1-bbd1-a99420fbb53a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1d7253-20e0-4530-870f-20c793137d0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac75464-6ef1-401e-bf9a-0d61128ef83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34cf430f-62fc-4dd5-9c37-347c0276b4ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6562600-f3e9-44c8-ae2b-1567c0cc100a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef705ea-27b1-4456-8c35-baeab087d9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db27a53c-b769-4af2-87e6-1fab3b7ec4e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c43f05-356b-4639-b972-d54d85184b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "918363e4-b1cc-4f84-8410-ee93fc3943d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a70513-ad6d-4946-89f6-912e216e856f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4d7bd6-9cff-421e-b37a-b62b369bf789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96852a8e-bac2-474f-8a68-2882a68a8aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c60364-8640-48aa-898e-eac1b57c40f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2eac36aa-2efc-41f4-afa3-d1358a30d425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f128122b-960a-4293-b3be-fc1677af5f89",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adabdbc5-d149-4985-9cbf-7dc599dc8d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "389c9afd-7d19-47bd-985c-efc5c8b3d02b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c74dd3a-3d26-4d43-bc28-68c5b2e27b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a0129135-1105-4c59-9325-9a032f6c1b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f4e1bd4-ff9d-4be9-82e6-e504174621a8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f0c9f9-e561-4dd4-9b61-10b950fd0173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3058ff3-c937-4ca6-90d3-39fc9b029609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb92ed6c-ad8f-4171-b38b-2f10009dd28d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "52f3bcad-df6c-457f-8ed5-7a5ce38f9eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e88c3c-4e6e-47e0-b682-cab013f1c3dd",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "368dca3b-6a33-43af-a99b-c3278499bc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82ed169f-632e-4cb2-a452-a6ec69ae2a63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5768e5-b9ea-4db9-b474-dd643727b7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cc5e4c1-e902-4206-90db-f861167e9118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d90e6f-221b-4b09-99f3-198f335469da",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b00861d-1a88-4199-9d0a-ae9ed9aa0b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "751ede27-9e38-4218-bd98-95ba64f94dd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4277d6b-10c4-4601-b82e-587c3e7483c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa5882c-272d-48b1-9cb4-22baa41b31c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "148b7b73-11d1-4d0b-8478-dd89faab604b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a139de3e-698c-413b-aef1-54a52e8ee3b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99885454-bc2d-4e92-9ef8-1475875d30de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea01aa18-0be8-4f0d-80cc-0053b62b578a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "98c23e1c-ac3e-4e23-be2f-e07fa6252f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132493d5-aab4-4a7f-8ff0-50f5ec0e377d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0456310b-a89d-4ab4-8675-7740c9dd6d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf1dd242-7638-4081-ae0c-c5901bd1c0ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd4d919-508d-4d68-8f12-969bc97d0b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0a0155f-1669-493a-ac43-199913229dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be8b628-e8f7-412c-87c2-fbe7938ad145",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f881f4-11ef-4a4c-9ac0-e28550fd2ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec78f5a5-44af-4be3-96eb-7ad416434286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "accd312e-be2a-48af-9227-586751eb93db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5a92d26-939f-473b-8da5-2e7068195cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b0a1c0-c405-416b-bbc2-2015610ba0d5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97760044-2aba-4235-8e92-2d818eb9a9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eac42120-2dd2-42cb-ad09-4cd67355d2ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa193bf-02c7-4aaf-abd9-6dd6cfbc8a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ee5c35-9b3c-4c8e-8551-aead90a70250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b44e459-b854-45e2-af2f-51322cc0d1c8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "147c383e-488d-4dbe-b107-680a89f6deec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d436d9-8931-4ca3-b225-8abf5b3a7b9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16897998-51a9-4b14-abce-82c5ef572bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f37d737-8699-49a7-9491-e85d65e177d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "218ce33b-a2af-45f2-a899-3982cda4e353",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e657e0b5-f467-4030-8e4d-f2a2397938c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d8b3f98-7313-4ca7-b48f-c68c2f17f579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a882952f-7a51-48f8-9887-d1627ded22d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a2534a6-b2cf-4212-bd58-4fe48b0a95d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eeaccbd-c8c9-44f2-875b-67bd938bc7c4",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e73208-1226-4512-bda7-8e359e4b7563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7ed643f-651c-44e6-ab99-90d7e738e995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69538102-dace-4678-a09a-53cad682ec5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79ee252c-a286-4ce7-b71b-fc4df9abfef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213b4104-e10e-4ffb-a8a4-7519fc8cd91e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28440c65-c377-4cdd-b5a5-6add7886d9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6074987c-b27c-457a-aa16-dc4c7ba84fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591c0ec9-2c0e-4f64-84e8-444de83a7885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d5763ed-7616-40c6-923b-53ad7477c4b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7b697b-d556-4967-bd71-73c5ea6457ee",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52be3a4c-10fd-4661-9228-b13c0b2e8607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c1c3d8-ed3c-4df6-8a53-e12d369aa66e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503c533f-93a0-4c0c-9020-1312046b7ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1aa0c2cd-c371-4199-985a-637a75a48e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac4d228-bfe4-40de-b457-1b89afcf4990",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ad408e-d4f8-4d31-89c3-a64429bca8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcb7d068-5229-4256-89ee-e700c0e3b233"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e51b6008-ec79-4af1-93f0-a10e1e93f910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bcd72507-5789-4dcc-98cb-c0c342292e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf281645-0811-479f-9355-46a3966bc16c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "104eda78-2a29-4401-86a4-f12076c630a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "595c9742-07ee-424a-87ad-a32f5ae1421a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bcf96f8-31c9-4ff3-9243-810fcbe6b695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5141124a-b0e8-46bd-b8a1-5ee795ea8b29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a00cd9-82f5-4156-807f-bc7e6725c8b4",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b064e776-7aaf-4d99-80bd-88cddb1a4085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b22188-3621-4875-89a0-cf2522e1da27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ea4ff4-afbe-4694-a639-eff02841cac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e545a24a-1825-4080-b43a-9d92c59ea5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ceea7d8-9c8b-49fb-8a59-3cfb22ce5c44",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312b6d9c-cd46-4c20-8b22-be75a370232a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bda28367-b057-4d42-aae1-dba245973d11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f7fb5c-7137-4d76-b04d-eaf8b3273317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61bb98c6-ee2d-45f4-b9d4-00ff1d090fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df19ef06-8dfe-4cda-a375-92fd5e5ee417",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7debcc-2e23-4506-b380-cec6de1971c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97b882f-5866-42f4-9106-7867ef952afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856001c0-bcf7-46be-bf42-0b595edc88c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be6462c8-6487-4725-812e-1e5d8253b6db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc927b25-5a35-4ed9-9867-cbf34db6dd4a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca25e3a-7144-4998-89d7-8ac5dfb7d6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78844408-7128-4316-8bb6-7653db0bbdfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4606c8c5-b21f-4818-ab20-474e570fd68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6a03cd9c-c3dd-435a-95a7-1588f80e95b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e023d488-6b71-4d37-b028-a9259fda7478",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "694e3538-0b15-45f6-a12a-b662bf79cd6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ddcc5cb-57f4-4a91-b2be-a29d45fbffc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c4f726-25d3-4b09-b79b-897a3b5ebe68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8021435c-f78b-43cf-9cda-c99fcbd1f9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff7dfc4-564e-453b-8277-67f908abcaff",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45afe39-dd65-4007-add6-c49434cd9911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64d1da8e-7c5f-45ca-b338-ef07c6ed14f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ac6d1f-b569-4eb6-8d32-e6ec928e51bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a9ab311-b212-4745-9ccb-941ca7b91d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c6f422-f22c-4aa2-889f-ddc7f4894599",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b6fca5-e505-470c-b1c3-b856c6c9e384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cafecd7-5915-4438-9bed-07b8c7ee014b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd7d9f1-19da-4045-b821-176060a55087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "74ae4855-177e-49ca-9780-3c5422f8371d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a4ffbf-c4d9-4283-84ad-e9e222532add",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72cc189e-dec4-4018-8fb6-270bd0e35228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c705b95-d7e7-4902-8393-8967b2cd388d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "289c71fc-d5c1-41c9-9f41-d569cd7aa338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "11612b78-9811-429c-b074-2e8436509f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f24bd4d-cd28-4ca4-b575-3f5ed546c519",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a55ee2-6cf2-4d32-ab5c-c78bbea4159e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4645bb7c-d7e5-4814-b2a0-f26a99191591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d8bf65-2efc-4d36-abb2-cd1b16118e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "17210b22-fab8-4673-a537-2f3da0854b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653826e3-1dbb-4cce-a522-20581f7d88be",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f0fcf6-2c47-4d4a-9a43-8451105e52f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "727afc83-8d32-44c0-a779-5e54b15f9be5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41f1e7d-3f74-4860-8824-d5a75d1be581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "abd3b32e-1477-4c19-b517-aba60215f67a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849f2757-705b-458f-853e-a10157851fa7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3af716e-2a71-418e-af0f-72cc70f5cecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c79534cc-0480-4961-a374-8ce3870f1ca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f70c98-01ce-4624-bf61-cc620b2def56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a5d58e3-81e8-4524-9f76-c5d621e08215"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "01ec5598-d4d7-4fc3-9eb4-4a3d907f0783",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "972945cd-6738-47ec-9a57-9dcbd5dcada9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a3fabf-d420-4aa4-b1a9-d43bd97af52d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33554377-c618-40b1-9d10-47f504788cb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e44ed69-ecd0-4046-824a-0a51269d9cd7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c61c2bd7-fd0e-4039-83c8-ad2e99b1a323"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a4a062f-8368-4cab-8f9e-c917bf0a8ee4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "848de4ec-22d3-4b1d-aa5b-e29af8e5e351"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d97bfd5-ae18-44e1-b71b-4e03278a7c22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "371a07e6-0ec0-43b1-ae8e-bec09728af9a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "05efcdcc-6672-463b-b10d-5d8fbfb3400b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c01c00b-4b3a-4ba3-8a9e-0f226e32880d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d0628a93-fe88-4dc1-90d4-1002c3e7793e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ab0921f7-42e0-4cad-bd02-2cfe0228cba5"
                }
              }
            ]
          },
          {
            "id": "387c87a4-12be-47d8-81e4-bddc0d30a1f2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c207e4ab-819c-4162-aed1-2d221b9508ce",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "056e6118-a6ba-455b-bf55-b08575ba30e8",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde77875-bc25-43e4-afad-a52525ce3a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6ebdaf36-4ea6-4e7a-9b56-8bd31c8437c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fdb425e-f690-4977-85be-4a5c053b7005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bf05bf9-c851-429f-9699-2dc7bf416b79"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "387c18dd-ff35-4ea7-b528-c223908d0a45",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c037589-1d36-4ea9-bb48-30341cb91463",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "51c9608a-3d67-448d-94af-3337acc315a9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b62e64a-ef50-4b21-97c4-8737a7a5287a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fb85a294-3133-44f0-b0e3-823a7d8da056"
                    }
                  }
                ]
              },
              {
                "id": "80aaa33c-89f0-41c9-9c81-3d03545f6d73",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "22e79535-833a-4e5b-a80b-c1cf5e0eac77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e96a7514-0163-480c-8f83-b2077274b10a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2581da32-a1bb-4764-be66-33fa2d6230b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0716bb83-863f-4648-a369-0775f63f3ac7"
                    }
                  }
                ]
              },
              {
                "id": "cf1c9b0e-ddcd-414d-8b49-e1b1d87e8bce",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77636c3d-1aeb-478f-8862-244f04997107",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b9203c0-4dc9-4307-a01f-1d25bfa25b79"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e54af04f-2d43-4940-8420-c9d1c5776a69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "22b9c5d8-d94a-4bcd-9b03-d935b2cdde87"
                    }
                  }
                ]
              },
              {
                "id": "f6fbf2b4-19d1-4399-8050-ed0dc515e0dc",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "48c4085b-10ab-478e-8e45-35358d285931",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "07cbfcf0-1d94-4cc8-a0c7-f0a60f0cadda"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "baccbd41-0d2a-4c8d-97e7-ab48eb09bc39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e116dbb9-68c6-4cb8-812b-6abcb136b6a9"
                    }
                  }
                ]
              },
              {
                "id": "024636d5-2fe8-4b76-b33d-c10776ce6b53",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5da5421e-83b4-4114-a947-e928b7a73922",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e7dbec9-be7f-401a-bce0-75e03f99b69b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d56f949f-ec89-41e5-aa6f-8121309591b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ebf60b7e-0a3b-4894-836d-04d05313c265"
                    }
                  }
                ]
              },
              {
                "id": "78a4c760-9770-459c-b15b-a87b60713729",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cbfde03d-aaa6-4dc5-aad3-e58e80974ecd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c720f4b5-c553-4ad2-b23b-23ab68397c83"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54e163cf-7769-49fc-90ed-d35750d43f14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f3870359-387b-43ee-b26d-8180e9188269"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fb255231-1af5-4c42-8d0f-2cefc1eb394e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c95f891a-cb05-43f9-9eca-7583e61157d7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b3588648-b36c-4a6f-8e79-42daa2b0bc1b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c827cd66-dc1a-4603-ae7a-d48ed5b15bf1"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cfc6bb7b-266c-4702-bff7-7c0b4309db0e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "966cd9f5-0647-4475-be0e-5f2a04aed295"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "28325ebc-db7e-4a1d-b4ca-6c8ddab0fab1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a251f47d-8fb2-4965-9b55-4bd5320b542d"
            }
          }
        ]
      },
      {
        "id": "2de91cb4-c3ef-47e0-83f2-bc2358f646f0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d217a945-77d0-43de-8bd9-c059ff0be279",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7262dc63-cfaa-4b00-8f90-011b39753892",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "355bd726-bc0d-4005-a376-e5e14ef5bb4c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db28d74-bf69-4307-8149-9cfb7c0e0e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53f68b13-40f5-43dd-ae2b-a1d838b39ddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77aa9260-34ff-4e65-beba-e64daa37fab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4ca8aa2-7b08-4222-adf6-11e8cb11ea79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4b78b9-70fe-43e9-9864-9e99959aae82",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d472e61-57ab-442a-9073-08ecfb6db2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4b1fc70-17d1-4c78-8fe7-f7a90f94a88c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0471f271-ba40-468c-99de-65d68d5247aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b931b4c-b7d7-47e0-801b-3ec8cd7b3b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62345078-1482-40d1-9a56-55a3a9227a5e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a997c50c-f16a-4401-ac35-68ccb3d0ee85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0ed5daf-7156-4657-a80e-c9edd8ba7465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5228924b-60a8-45c4-9f0a-af0cddb54eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ecc58936-fd56-4e9b-bd82-739cb62e4ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cac8b07-76be-4013-a044-8f213968d382",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b115df-d2bf-4145-91db-77b2b5c789ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40e5f6c5-96cd-4471-9c7a-7a16ed3b63b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc9752b-e92a-48f7-836b-5a94305f8588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a33150e-7d2e-4916-b370-5a59bf74f8da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726362bf-1cf8-4884-95f3-0af7cd3d7a79",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da021db-2532-4fbb-a35b-2ddec282963a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b77bc2c-ba5d-4f4e-8157-95a70cb425f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c120fef-443b-4935-b0f4-721d132f97ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10494d2d-28ab-4f9c-afae-04db3b17a82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6240f4-9f32-4043-bb1b-149ececa681e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b301d2-91ad-4c9b-b6de-b13fc275af6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb11f6a1-57c6-4c2c-86a8-26d17f0d9d75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d0b5b2-ed1d-4019-a9c1-2802bda76edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d53b80ed-70c9-4399-86f4-e8fce3eca54d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de022a2-5ab0-4be9-a53b-ae653c6d450c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e840e59f-f930-409e-a917-7eadc7e76aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fe6bfd4-9294-4081-8566-4cb216ed79d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d783ec8b-e457-4bda-9872-3238964dcca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "04e69bfb-0692-4e8a-aa24-d50ae6a4a76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09857e7a-8a5e-4bd1-88f0-c5dbbb991084",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e802d47-2031-40b8-9300-2385d2404b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b65b8ad-b4b0-4114-ab10-88106656c413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a1a8239-7887-430f-a068-8475b8afbe88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a457a7e5-e70d-4c31-86ad-19ffb393d329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b37b8231-1e15-4e23-add7-a27da0fe5754",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8cd3cdb-d689-41da-a4f5-e7c9baaf5b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e37507-e6f4-4396-961a-543dff1dd2eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719ba847-2925-43e0-b3f2-85a4ad6e03c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8392a43-473f-4706-b25a-5322c4dbef2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef5c242-1d4e-4661-aa1a-c75cf62e8512",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44263638-d02a-47d8-b1bb-55b195475d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f68b5f-4120-42bd-91cc-4df0173d9deb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e2a83f-0951-456e-8875-f279fe0c5130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae9c94d3-811c-4b9c-b81e-14bb484b6307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf618e62-ec14-45c0-b68a-a3e9478e6c2e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12e663f-560e-4e85-bc61-52c54a092def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c90b4ae-7272-4382-b343-8f5448ff1f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7557ae2d-334d-4b1d-b7ab-5b6594e6d0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5b5947-546c-4052-90e5-0bbb1f22f963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320d0a76-341b-4aa0-a7b2-ca1d1f323e6c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4dc2d4-577e-4684-876e-bfcbb6874d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaaa05ff-7457-455e-b337-6cf88843021a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629361e7-2ac1-4485-a888-93b80948d831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e5629167-2310-415d-a34f-c816586c210f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4d2de5-90c5-4ecb-9b4c-e9baff41f6b6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3759655d-fedf-4591-b9a0-059c1a7cd3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35e166fe-d656-4788-a1ad-d5c9f1f0adcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa74408-68a5-47d3-b1a3-14c44e37386f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "96f53171-57e1-4af3-a883-2ff2914ee950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6bbbdc-a7b9-46e0-adee-8a548b05cd27",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ed4bc7-ffae-4800-96a0-9a2bc7d8220b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00b622c8-c6f2-4ca6-be90-75b497ddf55e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d61872b-12d0-4da6-a216-b12b6479b3b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "be70357c-9701-4f3d-bc5a-81c3eb76766a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f74a8e9-9f72-4ccc-951f-57d5d1f19ecf",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "483606a6-46a1-4dd3-90e2-8cb803a85d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc4c9756-ea2d-4e84-a0cd-fb4deee9c7bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9807b4c9-b6ab-4a62-9d0d-dc2a3c0b491e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "79e0c26d-ad0a-4546-bf8b-eeeaef3522e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed9aaddc-cd84-4855-bc79-5df3899feea0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f87a0918-f785-4293-9b2d-95ac2686fa0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49b9fc2-9dfe-429f-8cae-dc3d8bbc03f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ec4783-7b03-4d76-9045-69024e287e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7de68d19-18ac-4851-9707-66285fb9353a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15e1406-52be-4fe2-995b-108cb28d8206",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5216511-f6b6-43c3-beb7-c0a1942ff413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1a7a4f2-a30c-483c-a371-48dbdda45914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd7c90e-72c3-4e98-b016-e24455f316d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee9fa9b0-7a83-46ac-a054-1f1c2b96a62c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ff824a-5dfe-4a51-93cb-dff2e329dbf6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51bfaa3-e341-4cc1-83e6-3636f547e887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "976607cb-406b-4bae-a46f-acf61bce86bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a29a8c6-b5e1-452d-b6f2-ee42db8ab19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "623b7a2d-e890-4624-b6c4-3e676db52d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50288fe-fc67-43ac-9385-3e3a912a775e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19fa5daf-18d9-4624-ad8c-4b09dde19ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b71ca46-2edb-4c49-b36e-a86186c72fd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33104d95-475f-4aae-9ec2-6fe2f4519dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cb5fbe9-cd20-48c1-88fd-2c6250d15df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6c815c-1207-4a90-a17f-97d146aff6f0",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed04bfb5-0c4f-4fd8-a842-18471e5186f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fae0bf0b-6eb3-45ae-a995-29df9ccfe699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ce1a68-30a8-4363-8e3c-c5e4c5ea9dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a807dba8-0208-4dde-bd0e-053a0e3f68a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e080bf4-2ba4-4aa8-b9ce-a501fbc1d150",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "854c3c79-e1dc-4764-b496-a9dc1431df9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5609577a-2e7f-41c6-bf1f-ac2cc8f4ea2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803c3a80-ad9e-45df-b8ec-8bc0afd7c095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80b06a27-23fe-4b62-8563-d08c7522cfbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d012a587-2a52-4915-8ac4-9b04e06b6971",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24789690-bb4a-42bc-be2a-5b1e03c566fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99417c1a-d2db-4c2e-bdce-1c5a197ca1a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a643bc-4152-414b-a079-6bee4610969e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae0a46e0-ef83-4402-a294-6de018b9b174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d845d3b1-f0c3-4c64-ad34-5357bf59bcfb",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef49a4d-cbd1-4a85-a979-9aafeba6fed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09cdc961-c76b-4476-b04f-582b4a96f594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e18795-ece9-4836-93ea-dda1119e6d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eadbcb9c-65d0-4077-add1-0f5bcbe98cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca67a9f-4d2e-4fed-9f62-5d394d90cd94",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b953ef6-4706-4e42-9aa9-d587ce47b0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7263b615-249d-4c65-adf5-121e7e9bbc1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5738a387-ecf7-42ac-9207-ae809d1b1903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "094cf6ed-d281-4804-8a18-e9709bc012db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2724165d-a029-4451-af7f-04aa99abb2ae",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9bb6d3-c7ac-4470-bb45-5ca188713156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb35d530-f005-42d6-a437-9692c0fe4a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd28f8c0-e665-4c10-86db-5add4c1b13a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce8a007c-d088-450e-a804-12f8bd8c740e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7261d5-930a-417e-8a2f-c175969e550d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9231834-03a5-4d2e-9add-087164805d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b0d30c2-234c-4672-8a74-7bda2b87953c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d392207d-2742-4606-a202-3e3a2d2d582c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90ca5b55-6294-4ae7-806f-6721f9277c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6560b88f-9e22-4740-aa23-9e382199c6b4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ca65d3-692c-4ead-8c4b-c2d5a8a5f603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3cc8b8-1b6e-4282-abb9-881bbedd2721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60138df1-a3db-4555-ad74-59c45a129dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47c1524e-fd93-48f7-9f3b-9034abe9f00a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937093e8-f2a3-411a-92fa-94ed6949e932",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8155a7b6-c270-4750-a0fc-78cfdd3a37b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0020f3de-ebcc-4683-8977-2ae23dfd5af3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d974fead-b8dc-476a-9fc5-85ebf2cb1247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b96107c6-2eca-436b-ae89-c7c9a5cc1b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b2cf87-76f3-47a0-9f0c-825a9479b173",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751b3917-7997-4329-9f61-ad728895d635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b870445e-8b29-45b5-88fc-2bace49f5893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975c5787-e4c4-46eb-8aa3-f4e8515a7996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c50962-0ba6-44bc-98d1-98a4b7699ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f20ab6d-dca8-4d02-9ecd-53e5bae1bac3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a8db06-9517-4c70-8d9b-86f3db7850d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ee47ff-2691-4e32-b89a-1d552f855cb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "402006e3-7926-4b3e-a4d0-451574c814fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d77a75c-5115-4b46-8a78-dd331b3e6a80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9b5890-2c63-41fd-8fe2-ce8386837af2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be56cbe9-802c-4c10-8332-af9ee2434482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e52738-6db6-4fec-9bd6-58b6d93e5ae9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d426dfa8-e02d-4260-bf22-68656fd526bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f1893e2-5d63-4e14-b8ef-dc68514bfdfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3652c4-3b04-4b65-a076-eab9148bc48d",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0e6ee9-6138-4d89-abf1-f6107e7536bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19fa9636-126c-4184-82f8-d20c7adcfbfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fa4e201-98a6-424a-a7b5-7d0948b27a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75a8cc19-fa4d-40ea-968b-379c0ce19aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a7f016-498a-4316-a471-0937c10b0952",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce128fb-823d-477b-b6c0-83fc6c618ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1504bee0-1011-40c9-b9ab-4ae9e7764f98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed375a9d-4767-4328-a71e-b4a9d9a3c023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bea1b960-6762-4572-9a7f-4532a647e17b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d989da62-1260-45f9-aa8b-70ab09ff2849",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1f7705-802a-4ef0-83d7-ad8659a1a01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b2b6f5-23aa-4e8d-be37-59cb43f2e1e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe97c7b-4763-4aae-adcf-e403f0acc20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d08a755e-6718-4c5c-b2a8-da02f7f0aa67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f066d048-a0d1-473f-b420-530ca06f881c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7dd45e7-f276-4720-8ccd-b1de5f12b02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "315bf62c-8c35-43ce-a2c1-9638d2030888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933c2f91-0390-41a2-bc62-4346d55f87bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da3dbf3c-4f43-452d-b1c6-1e9a6eadcd90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851e86a0-a6c2-481c-8620-771445038a5a",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2612675b-8257-4673-82eb-e5d3b131f14c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9886ad0a-52c1-4ce5-9116-3d4c4ec7115e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3bbafde-5e7a-45bc-9ffe-73ee960c1a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "468fca73-6393-4c52-91e7-42833f8723a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb20d78-95a2-471d-93a7-dda2b2aa8692",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342cb23c-1e6e-4e6b-b044-b96aeb1249f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6be3e3ef-c20e-41f8-b9eb-e0bdab6ac19e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be94ef04-d882-4450-ae89-05b7c1cb436f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c140692e-af5a-4c9b-b49c-d59258bbe960"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "711a6493-d330-45c6-a373-1bdd4752d408",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "49b5f26a-05b7-4ea4-ba88-81ef40a031a3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d21332-933a-412e-ae84-387e4e421a78",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "0ec0c44a-7ec1-42d5-b22f-42ee63c97368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "217fb692-a185-466c-a3d9-99de6c25135a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e448a6b8-42a0-4a74-a0d1-64b22fa9a79c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71aeadd1-2c54-44e8-88cb-c77dbbf0bd36",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a007719-26db-47e4-ad0a-bc81f7f4466e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "74fac1b8-b75b-4cd5-8a39-c07bedd69e22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a2da65d-cdbb-44bf-a572-23dfd71a107f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9aefd7d3-a5c2-4e98-91d6-686fec8c2f79",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c051c4f3-c117-4a91-bfc6-28f74a3a1ac6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9afd4b05-8c36-4ab0-8dfc-7aa099f587ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "493b6360-8dd3-41b6-b745-a382c6d00c4d"
            }
          }
        ]
      },
      {
        "id": "a04861e1-a04e-4ab8-afd2-eab2cd77e707",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bd934c79-a797-4c31-a03d-6954d9e2fe28",
            "name": "Negative Testing",
            "item": [
              {
                "id": "50629fee-68cb-4253-bb19-a7e8e3c19217",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4cb4d019-e3ab-4974-9349-0e93536388cc",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24bf34ba-8bed-45b3-a830-439dab4a3479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b7a3327-6315-4abf-9d45-9601082c4aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58401ffd-91c5-41ef-af6d-be3d2440bdd7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36aa75c0-683a-4c2b-ba38-e3d0c1c32271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd43f4d-903c-49f3-b37b-707f3a7de131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeff9cfa-55f4-4f43-b328-9bf578863460",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c7c028-6cef-4ebc-9d32-846091c57edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eb78b73-02f1-4eee-b285-186d7c875db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6641f710-35e6-4ddd-81bf-66ba6d09d310",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e882a2b-4461-426f-a1fd-2eea994c5c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82de55ef-2a8d-4ee7-95cf-e076cb38dec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6cdca2-0148-426a-969b-8ce068253e78",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b48fec-167a-47d3-944f-376c1ef644d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "857aad0a-d676-41e8-a54c-bb2ce1715f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a88557-008f-42bf-a0e0-f7b6a31da6fe",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31feb93-df10-4671-9f95-fe372b6fd127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7c6185d-50a6-499a-b66c-67ab192302ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949dfe09-9680-4b43-8629-24741a0ce7f7",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5b1aaa-d817-48ce-aecb-830d04515117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59bf46a3-32f9-4ac5-8178-4cbcb4dcc52f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cabd36f-020d-4062-be43-929baa1df52b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad481f9-b9ab-4e35-90f0-865199126bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea940474-a75c-4e1a-9ab5-437d56718502",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e954cf7-6b85-4817-ac79-e36f0842a7ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8a4e32a-8380-4ebe-ae61-ece09bdfac66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73e4191-99fa-448f-abc7-ef331de2c20e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47a8b5bc-c20a-41f1-a0e7-62bfe85534c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "723d29d4-e9b6-4cee-8518-bc0a04e57e48",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "817df3eb-e3a9-46a3-b6c1-8db0667d5dab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbf1c38d-e9aa-4760-8f4b-986785ef029c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1dbfee-077d-495c-95be-2ded28a28742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc2fc94f-ab69-4ef5-931f-01641380f21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee13a74-61bc-4a38-9e7b-929a0704190f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd7b6607-07de-404f-9cf7-d16523245f42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d429b43-f360-4859-b4ce-5a88fe02d03e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c5ed41-a64c-4e25-9073-e7bce2e19dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af13a4d9-b72d-4dda-98a0-11239947ca1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6285f3d0-15fa-43eb-8d56-2aef8d4b580f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c071e360-0361-40f3-9b68-7237065e6f5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c45f1b19-5781-4a74-95b1-686027c26fe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa9db32-eb60-435b-9b4a-164c54687378",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afdbca1e-f5e3-4968-ac95-02c7ece34b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfeb5975-aa43-4d6d-bfc1-846b6a688065",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a3c659-2f26-49f9-9fa4-6717f55905cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "401dc5a9-fd41-4bab-93b4-b80f76f08fc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4957130-d1bc-421e-8c73-9bb50139dea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b413d7-8ede-4664-9c5c-0894e9b63daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db263238-6d51-4ce3-baec-20a34ff1e144",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a58876-444f-4b51-bd88-0d7148645cca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49a9c9ad-0362-4fdb-a920-ae53b86556a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a2af307-5c32-49ea-9942-00131488cb2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63ef2afc-62da-47aa-811f-5eeb124030f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fcba0d6-1640-40f0-be17-aae9f8b26036",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03bf8b3-2567-4422-b912-aa13101d967c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3a32adf-f69e-4ec4-8856-dc21e851b430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f92ca06-c36d-4440-a08e-acf45ee40abb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8428cacb-71e1-450d-b9de-fb5a7dc53084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbaf3f4d-ac0b-4e82-b417-6da04aa9ea16",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1dd818-2bf1-4bb9-b8e5-333629e156a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc5bfe53-1dac-4e66-88f8-58bca87ac599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "644c0e4d-d887-4fac-9659-1570fb712430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c56c0de-657e-418c-8bdc-0095b5f6aa04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1025ee5-bafc-42c5-8c70-03be298808ce",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad1900f-4fa0-4489-b90c-99bb1e3b0a92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56d1e41e-297a-4278-bede-4702325b1f9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa57434-8731-4063-97de-8b2e60c999ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3717dd82-149b-4964-9698-972651d2adae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c84d10a-ccd8-4fe3-ba09-9b9fdd655802",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86fd6dc-42e1-49c5-a25a-e30c0a8fdf21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "914865ca-7251-4b6d-82e6-a49a9d5869e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e677e793-781f-4ac4-9fdb-4f6a4fed3f43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b17b2d8f-c9ac-400e-a779-4d46e8cef52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a593fd58-51f2-4328-9b16-cf75d67a210b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52bbcc8-f98e-4f94-9c18-4a2c51ae0a43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1dbf267-ea62-4f84-a0f8-df1e24070910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4d143b-1a05-4e16-96e7-5d802c23a54d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380903c2-9db6-4faf-9d85-75e6c4bf5050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6431e43-6d37-4ca4-91d8-848e0cbc1c1f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5921792-8737-4973-88c7-62740f21095d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba5b1c8-93e4-4d63-bdb0-3d55c3500f47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc872955-14d6-4daf-8959-f59333f17bce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf031002-c153-4e06-9ab5-dfc552a97531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9170ebf5-4e78-410f-9db1-1cb0c27f43e5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b02c5e-7c0f-4f82-a2a0-91515bcbb2ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4320cc7a-4a8a-41bf-9b8f-40302c3b5b0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aebbca38-f444-4f20-a118-f9cf9e66a75d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "520fc16e-d57f-4355-ac72-6734c137520e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c579b2-8f09-4e8a-982b-f2eb8a3333fe",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0a88a5-4440-4a60-a699-bc8492e4b22c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dce530dc-e358-49a4-b771-fa4f2cdab3f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94297d74-3470-43cc-ae31-f21124b0bde1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13bd7e04-9740-4959-b68b-3953b5e897ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b4dc6b-f380-4122-bbd8-0b4b5dd07a89",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fffbcff-be1c-4c35-9892-a4f2527eb049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "740bd4eb-03ed-4f20-9025-8a75a7298b2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2327c5d7-c345-4fcd-adcc-d703ef88b74d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60944808-583a-4863-88ec-e1aa9c793db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77e0332-39e3-4ead-954d-5d726cefb085",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56410750-4529-4a24-b5d7-c0f7ae99bb8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11e46bfb-7c2f-4eae-9bae-50d18f13f866"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7e79f1-957f-47ae-808f-2d5dda995e97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd75c73-01f1-43b6-96b5-6ff398d016dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e29dd1b-7b56-4c79-b59c-29d2adcf460b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc308719-04cc-45b1-8138-4121dc3d6938",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcc7e78e-c2d9-4d64-81f0-6e8b376b798b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "093afeeb-91c4-4cc2-a1a8-36b79c1f14e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01896840-50f1-4fb2-8f8e-bad9ecfe6b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ed370f-b973-4271-894c-bdf7ad69fe0a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c89de6-cbd5-4f22-9b49-ab7570136918",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d9e4534-1682-44f9-9764-3a14e922dc6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "715d4f51-4e3f-42cd-878a-af7e73987dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cadf3680-6848-42b2-a866-d1d7fa1d6513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103fd055-c3bf-416a-8a56-ca163ddebacc",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff1da61-d0e6-458a-96ea-c402d46d952a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8b930c3-1c14-4bb9-9891-4f0e60ca5b26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4450cd-6f2a-42ff-95c0-c7eb88b2485f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4311c2a1-de4d-4c72-ac5a-ed6c18e97462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75fed44-939a-4e20-af2c-d1e7b1938f65",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5b8265-0e03-45f2-b280-19e882c354fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc0d24dd-269f-48c5-b4d3-16bf50ab5e29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff7e01cd-f438-44cb-8d5c-3849f24f1d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fbf01ce-7971-4840-b8b2-0ded412c8647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "591eeb50-8e84-4113-a0ce-7d49457c0ce2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d474ea2-858a-451d-a885-032d43446411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3f054a4-9de8-497b-a6d8-7018ae4ed52c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71259f4-d234-4e53-8053-3bc08a3956d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "051270b6-fd5d-49c1-bc7a-53cdc6f0671d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ee20e7-8a37-48b0-b36b-a9471c9f13d2",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee4b3d67-2cd5-411d-bbdd-308849020d47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82bbfedf-bd3a-403d-9b2b-8bc7effdcc29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1fda6f-e429-46fc-9ad1-4915ae05d916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30a3a4b6-1b9d-45e7-93ce-7d5515ed1e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8364b05f-c80f-4799-a21f-80f87add358a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859c1753-bd87-49a8-b673-116fd471b263",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5190f91a-a2e7-45cc-9f69-2908ee7f2b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56d49d5-94e8-4098-87c3-8da2ae5e2e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "691d2a35-be35-4b3c-9c80-658733634af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f577df2-8b97-4e2d-99e5-b41fa22beca1",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da54339-26c3-4224-b523-2bc319bf614c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03fe8fd1-ffe9-49e5-adf1-e5b0bf837c7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86043b4-6754-444d-8ff1-59f043f814e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46717e1d-5e7e-465f-935a-cf320f9c2753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8cb2e36-ce11-425c-aeda-46588f25f8ed",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3360657-36ad-47cc-8e46-882706702b9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c01c3de5-8d04-4c99-b4bc-a7b7b66ba5e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "023df6bd-3dad-4d6b-80a7-27c1e53b5dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49122e49-b619-4495-9b75-235ccce5b085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f45cbd-7b14-4d19-a669-a37cf1fb54e8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6940473f-359e-4e98-9206-e7e4937b107e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8408e932-a287-4b45-a378-18df1d25b875"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aade3550-8ae7-4321-8220-560be4d0e128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32986091-5fbc-4cd3-842d-344c7d21a7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06a0c57-da86-4697-a735-2c601ec83593",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d00d7e4-5341-445e-b16e-28a845fdb295",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a518a05f-0894-464a-9f51-7df06e57005c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca94c11-0f78-435c-bf8f-f36c6016a8ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f54347dc-3a43-4aa0-a4ab-c14c930f6267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc285e4-66d8-467c-9c23-b61375995544",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67cfcef4-31fa-4ceb-886f-1b6b84476a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8cc0c01-0a13-4a1b-a6ec-950e93cda40b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4058927-edd0-404f-b2b9-4778c3249703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed99fb21-1a1a-46d1-a138-b30be0f94bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a7e7c5-4eec-43f2-8e6d-abe06bfa164e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cafeaad-a060-4bd4-a42a-1a6c45b106d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a75f426-cd7c-40c2-a8aa-e0abd996f82b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9742e4-3f2c-4a06-ae9b-a9edd2c66d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de3ea408-6eb1-43c4-8332-0ce000d38814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35c66b6-1eeb-4797-80c7-fcbfad1c0645",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5ac17e-156d-4a7b-bffe-2f4383630f6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e17bbad-20e8-4a86-8daa-405df00066e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a209bfd-cf05-4592-8cea-9f3dbb9f9013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5905573-2b4a-43af-b8de-4a89937a0420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e152f291-0b86-43ca-b426-524783134ce1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1f997b-c6e1-4fb4-ac74-f99df3975e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a455c202-8daa-47aa-aa1f-efa7ae6eb1af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb24966-1116-40ea-89cd-5077d3fc4507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac9f9bf0-39a8-4728-be78-08f3feaa5599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed74a597-c8d7-4dc9-8ef0-9a76531ecfae",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9643b136-0bb5-483a-a579-fb4bedd940a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b177825-8048-4c4c-b1ae-1f9fea301a08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c757be37-537f-4505-aa22-9137e9cfccc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1303491-51b1-4df2-9306-3d08fce3f43e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "465f47c6-65e4-414b-a2aa-31acaaa680f4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8daa023-f044-4fc3-86f5-8d5847bbfe36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9a735f2-1c94-417d-b169-e5b9dee1eae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0670d4ce-78e3-44c5-b6f3-6f5eeb187d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd58be22-11c6-47c6-8a1b-491492768cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b6089d-5900-43d9-b2c1-7affc39314f4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11673fba-5fd2-41bc-85f1-3c7c48ab6997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61328305-a270-4384-bd6f-430242036cc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e21110-dad0-4ef6-a9b6-96880e56b4a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ff034c0-c523-44c6-97a7-015eee79790e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37c97f9-8fc9-43c6-80d9-d0a8e9afeb97",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62192b74-f874-4326-9e52-ed56286b0728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bb5e540-ddd3-4933-8645-2ec6bbf20996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7cc0a7b-1c4f-488a-8b38-e5bf8e55951a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59026848-06a9-4ac3-81ad-bcf075744f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfea2110-d204-4050-ad8e-dda15f4bc954",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a947f89a-be85-42fb-bf20-6e6d6cc40931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78b4c628-6bd7-4528-be52-c0855dfa307f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28dc503d-87e5-4029-9842-36c6ef44d47e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f14eede-8854-40b9-b2f4-2ecd51cffce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5960d1e0-1363-4d15-981c-04ff0b9206db",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4560a4de-2429-4b0c-b296-8fb3ca311542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f61fa16f-525a-46cf-b5e7-f46e2e3d46bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8284f88f-ec65-411d-b09e-4a374cd18920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93085022-4333-44f0-8120-69d63a6b0a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79080623-8b77-40b2-9a6b-b10aecb2aee7",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8740108-52b6-4ab3-bcca-05b5fcd5359d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce54eba2-36a5-46c0-8376-a5d8479d44c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0efd20b4-6770-4862-a3bb-6373ddc97639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4437f4cf-5e5e-422c-ad57-672dfc8527f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0911cfd-332a-457e-9167-705b79c4ddc0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39776a15-b569-4818-baaf-c9f9929f9740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6658e51a-d8c8-49bc-8184-7cdaec388016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27832ab-5cb5-4611-931c-52ac25fb7936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0472ac5-4bb9-4cdc-ae9c-d96ab29385f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04092085-0065-4092-8fbb-1ad18b9a2028",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0b23ca-497d-4729-9275-1809131dab8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc3dd09-79b6-461a-8e15-0aa9dcad601a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c932b4a-3ec3-4fb6-8710-e9b08311b0f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe7a5ce8-c869-4bd2-8e75-5d8cf5c83ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7822539-54ed-4dcf-9ad4-57ee8704227f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288c70d2-e9e9-494e-a44a-e38146df6681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1722b388-cd0a-4746-a9ba-1bba699f6032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c834840f-5fb4-4b64-bd7c-90d935ddee87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e97726-2799-4d19-bec0-7e50c0988325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e706c2-37c8-4cb2-8322-86f984457229",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ad8fce-01f9-464d-b87c-939271e4f726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48605ee3-f826-4bf8-b0fc-3532bec2b6b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0292f1b9-7f6b-4739-87d4-61fd4783a46f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11fff283-c454-4753-8028-edb043a4ed8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2cf05f0-f022-4cef-b61c-f8cb26008a20",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a9828f-a59f-4fdc-9b64-9bf8f1168d72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6a33228-2290-4cf0-b7b8-859b0ad89245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "584fb4fe-0c3d-47c0-af9d-bcc89f542a0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae3fe90a-48e9-4448-a486-06d6ac3d477c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1213a766-5a92-4806-9961-f8ee885d7edb",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9119b4-d8e4-42d0-8cfe-a791c0647f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb6dff4-95b8-4879-92c9-fd5130c09ac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "530406ac-1293-4984-acc8-0216bff6b09c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff630629-4f25-43c1-93d7-9c13c6291622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ead3bae-8e3d-4297-a8c2-7fcd1bda1695",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca83a0d-26f3-4944-88a9-0aa074d70688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84a48823-2a04-4255-8e5a-b82b3d2cf250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbf1bc9-89a8-43ef-aa49-21bf6f2e846f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d831bfa8-843a-4e4a-ac56-30f4086d9806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b335c55f-91b3-45a0-b7f4-271ca68242b1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63922cb0-6832-495f-841d-1c803af593b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9704c29-1e5d-4649-b0e7-b8065bec1653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2043316-5d50-4531-8e67-313da4297247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07497b8f-41b6-49a9-ab90-926a7c43f3a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb36a61-6f30-444a-9391-7306b4a3f8fd",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394ed488-77b5-4352-9210-96638888f77c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e32295e-e4b9-491d-b02f-410b53a4356a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9998b60-5a66-4b7f-8009-f8673ef57759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "551a7c19-2443-4e18-a447-10214773d6e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac48373-c1e8-4c96-9319-144b95f1bb6f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6962da-a39d-4ca4-a414-cb39f623d834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45604d68-a958-45f8-addc-9fe4b1bb09bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f21804c-4d56-4329-b02f-44eb779adb12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3126c8d7-15d5-4d79-a601-7d368708ce54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55b40a1-e580-492e-8153-d8bff4547ef1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5455a869-0c3e-499f-99cc-6d8816dda594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba2db600-0812-4c4a-8f1a-f8d686eef26c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0bd0141-906c-4d44-b127-221501644be4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e6ffed1-cb2b-469e-8dd3-b7ff9f265a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0fd83e9-3ccf-41e7-b61b-1d59a114a597",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d78cb3-5abd-4b76-a38a-263bc6b72cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e383e8-866d-472c-9892-3dcd5b55297c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ae7a26-b5b0-4b20-a266-4b7b1b6b42d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dddf10c1-2194-4744-9612-c978f58dcc61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a655bc1d-a286-48ab-9231-3f925f263630",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfeba85-9cdf-490e-968b-8b3cc3588b13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e96de8-3886-4958-bfe4-16f5b2b73a85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa97a736-9f7a-42ad-bd80-b4e1f073f364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4992f6b4-f455-4eff-95f5-38189a2cdc89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902dc1bf-a966-4f9e-952c-af1539c24281",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80431fed-f144-400d-b3a2-7d9074645607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21a42f5a-71f4-4c86-9442-5ed0cf7ca486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30dd9c7-d863-4936-be9f-246b8c157126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6814130-587d-4985-b100-22ebf183c2d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24843729-96b4-4666-aef3-702de66cca2c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1211ea5-8f84-495f-b6a6-91e84dc5ab6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ee0d430-075b-4944-a282-5d3bfde8864a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd30f862-1fba-4fbd-9b90-188d624be656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8f946f3-1217-4b4a-a71d-a8cb1edbdc40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b759cc3-eddb-41ba-a6bb-85f126c9f21a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ab5023-88f4-4f57-a2ca-18169736f933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e442810b-8c5e-4c5a-8b24-93f8a3971ceb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f671a00d-9787-49ab-b31c-8666fd493363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3843866-6f02-4235-860c-b90ecc1e0aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34603499-da01-415d-b240-a211af358859",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c92daa-2222-4367-bf11-28da562634e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eca2850-9384-41eb-a2d8-99447c1b202b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d4bda8-1a04-455d-b333-c822dea247af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5b9df38-dd12-49bf-9c5d-d1c65cca3582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f297547c-dbf0-4fb7-9a64-3f6a39fa70e7",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1e7495-2480-483b-bae1-d08d0eafddfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2c9a7d6-eb0b-4a5a-a4d1-8da05f04322d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a8f89c-61be-4dc2-9fd8-290b36bd7c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7369b849-19a1-452f-9a21-0dc1c1d19006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58514fb3-7693-41ae-962a-4770dc9f1f24",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01886fc1-c5d0-41dc-83d3-000db0a5af1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abe61bbd-36f9-43ce-8b34-ae8f5689c31a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76318b3b-ca49-4a45-a1e4-ba9b3a07259e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbd65f1e-1a11-47b5-a653-1926dbed6547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35888be-af47-40e4-92e7-fb2d27ab4613",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ff0998-1446-4f62-b8c1-3dfcc8244346",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76657718-7949-47d2-8174-1a2e0e7c8aa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b437936f-43d5-4b25-a2f1-13eb2db531ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6c37ff-dac5-4fb4-8f30-fe7f2a37fde4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be802a9b-15a2-44ad-87c9-188aa5f07376",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9252fbee-d7b8-4f19-a845-fb443e7ef31b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccfd9c1e-0f8d-47ee-95d1-be0fc207df7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a430a39d-64f8-4828-ae63-b70911b004ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bc2240e-da44-493f-9c4e-a357fd26fb6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7271d5-0a51-48af-bf11-5134da45ebd1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d455df63-c2eb-4cf6-b57e-46f140791342",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a756d747-bfba-44a0-9848-f04ae6713a1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eef6f01-5c71-47a5-be94-9ba6274e6c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47bb4014-bf1b-4a6d-b640-a4293b8941bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0549b30c-a5a7-4def-b1d8-b52c6220dd06",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ae4753-b826-46b2-92dd-54ffb8cbb9d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "448e203e-2cf1-48ab-988e-32e1da399af1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e64cdc-6e0e-4491-b67b-5521974891c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74d90ed5-5984-473d-8df8-626f3a9bbf8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2c8a97-abc4-4444-9026-2c9870246a95",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606543a0-e1e6-4c0b-9013-8989513b99ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51a59c0a-e43f-4b7e-9584-f8967c2f72fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada8ad96-6a34-4b29-8e03-8115e70b5b51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f67ef35-a372-488e-8e78-19c87d4081f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b6ee0ec-0a38-4a8f-8f13-1e13aa3ddc9e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd85ee9-a3ab-4813-8796-3fc9dee6833c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d78a2d21-11f4-4ce9-9590-124a55a60620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "736eb93f-9bb6-4bfd-93d6-3d47a1a242d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3efebd7a-82f0-413f-a0da-87d244beb54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2655af87-a151-4e71-8238-ad45d239400a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0bb3ea-1825-41d7-810d-57d9c3058045",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0612f532-1081-4ee4-8c4e-3f5f814fd06a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8953b8-b94d-4128-b263-2336f4be27d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dc99861-6384-4cd0-a757-541a0428f95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfed01d-21e3-40fd-ace3-1a1a7714098f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b89ac4-7d9e-459d-90f9-20132c8499f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36830343-2205-4ceb-b2e5-46c1da3ee4be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16220ff6-ddbf-4894-aa8c-39f24dc5dfb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e9bb4d-4b7c-428c-9862-b91969368bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3199a1-2446-4eb4-926a-e8af0b783230",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a3260f-833d-4d9e-a9da-a6bd556fcc8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cc4fee0-5eb4-4b95-a84a-137f774557ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "238afd68-6600-4c91-88b1-84e78d69bedd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "789d4826-6380-4c06-861a-0ec0d1c90a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04623fb7-0d58-4eb0-8ae1-b9c69543b5f1",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da1080e-2560-4b55-82a1-9dbbcb0bacfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61570ff9-0cbb-443b-bbde-73a7ae49fd68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f4650c-23a1-4c94-a92c-c4f6f3691e4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86400890-09f6-41d9-91d1-2d4c0181e36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab91e97e-3dd3-4e7e-8a68-ee6e62f60a7b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b7c5f4-af3f-4cb9-a0d2-735cd2155ad1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "881d6a86-c4ae-4c0b-a371-330055a3c389"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c78856-dc77-4826-8911-34176957e8cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b4c1829-9aba-4d2c-825a-6fbcd5a2e14e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae94a5e5-c59d-4205-b60c-2bc316f66f0e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05976382-920c-4d89-9920-29e806edd168",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bd31174-3004-4be9-9d70-77e1d9c35f3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf758a8-73dc-43be-b28e-d0dfa2f0b12a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6415ce82-30f6-4c34-bbbd-20533565570e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172f0edc-c9fd-448a-a508-37ca1a7c5af9",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0635a3d-e876-446e-adc8-03d28f7e615f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a5b2fc7-fb94-4737-84c1-af1235be0896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b9c9ad-4251-4199-8688-3876e1e92887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "867bf947-1038-45d1-8ef1-4c0614f3b18d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03fa27e-f9f2-4025-a9af-ca043e960653",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b014e91-8316-434e-ba4a-7172b7486ea7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48a45881-cd3d-4745-80fa-0b6418a6d7f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "076132bc-694b-40b4-ad15-14198bfd3a6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0015f190-7e1b-4bce-a467-8109521d6b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89486b9-3ea1-41c9-b146-5e615794b3da",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05467414-0b90-4a51-96ea-12ddaf293557",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6488f0cb-4e19-4b45-b937-0bb188870a39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6247394-02cf-4584-8b52-c009c7c6c0d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc22245c-a097-4ad8-bde3-3c54ee1441f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad746bd5-7a17-4ded-b565-39f46790ad70",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a37f051-43c3-4459-8c36-df0832725f8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ca6ce37-9aa6-487e-91ab-1ecedfd07932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b9d28a-b8a5-46ff-a11e-9b081c94f595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae45e37-7401-4ed9-ae01-da45981062a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922a33c1-ef4b-4410-ad3f-9c1f5d226212",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db766673-b3b8-4358-b6d3-1426ce9c0296",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ed69802-7fdc-4bf4-b3b2-1a8a5c9610f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2f6303-613f-46f9-b0cd-c16bebd9ace4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "831406cd-4bef-45f5-b2f2-992ff2b6cf4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac9f67a7-5d75-4ef3-b49d-5e3315117a28",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba3ce6b-c086-465d-a86b-7461a75c46e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6506a477-b12e-411c-b7b9-71a8202eebc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2735ee7-8287-47c9-a7c5-58615375222c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "284cddcc-3c89-4f23-a37c-6fd18081b097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8fab7a3-3129-4081-871f-c56269044248",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2b9c59-8af8-448e-b44f-045e74bdaaa3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "352f91e3-d807-4863-86d9-9d5359ee7dfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e73226-cef0-47fd-afe2-2699e37f15c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ae8f876-683c-4295-a075-961633d41605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400e2113-9889-4690-97d6-0aa71a81b29d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d72530-ab19-467c-847c-b3d08898cdf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5488f0bf-d2dc-4715-93b1-ebe87f5cd6f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ac55da-a600-4bad-be33-db0ddf8b6225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ab53f5-b96a-43cb-a484-c1258f50cd62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48dc2473-08e0-4b6e-8c52-7196d62506ee",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29043ed0-f928-46e2-a653-06539f6eeca7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad364e88-7422-411c-8d6a-04c35c006a4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0347fa2-7750-417d-80f2-eaa146993fac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e84bb3ba-5fc0-4906-9702-3ff8a55c9d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae19731c-605f-4ae7-b44f-0fe8c0f994c6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa9fc7f-0aac-4de1-b095-59cb8306b480",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64f6b169-be06-4168-802d-457b61daf50a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "018109a6-0d2e-4bf4-8628-6f288f0ef191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a39fda0f-c49b-41eb-ab32-979278979b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9db1a9f-1bb5-4bac-b4d8-e50c22fa6ef9",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed2cb80-106c-4a09-9f19-937dacdc6300",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6db049ea-55f5-47c2-902d-7ab7dda5eea7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42acaac2-cc89-4cd7-a643-d51b45b94177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eff961c8-9c7a-4a68-8e51-f731a2d6a35b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac78ffe-cf70-4aa9-aa1f-6d2095880c26",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac0a437-5bc3-4ada-93ed-2b48524b07fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8dada8b-3f8f-4437-84f1-245d7fd8dab9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc8ab44-6e7d-43f5-a687-c84a9a41cb3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7247decf-50c7-4fbf-b06c-f51e5f8dc878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3f3cb8-b7c5-4122-a19d-a8035ba7150a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da14c72-6020-4bbb-b46a-e64a03e6e7cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8580e3a-c3b2-4537-bf26-64da052747f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c51076-e66d-4f30-b40e-144e9d6d2a79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71762b8d-9646-4cbd-9bc6-28887d088704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9bb2666-8ca1-4bdd-82b8-fbcdf270d6f3",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b84ecc-8a87-4e46-8b8d-246a79d54b95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab2afbdf-fba6-467a-b967-15ebb66d2ebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6f2b2f-86a1-4a21-b82d-3343933a4594",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b20090f3-edb4-4dfa-b190-4d2fd4e2ba92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a5e182-441c-4af5-ade4-f0a76bab4838",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa6f812-5563-4aa2-a349-379747f5a2c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d782ade-ef38-411c-bfc2-d2467591a797"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7cc776d-7278-499f-bdc1-243a6159e427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a3508e6-7bd8-4496-941c-d98c0ed287b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16cff304-3669-4e5e-a3de-f926560cdcd5",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7322e4cb-eecb-4df1-8533-ca67fdc97901",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61a2473f-b784-4cec-8d45-ca63d2bbc8fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7281e80-bcf2-445b-9ddd-a95bc34ed3e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b5d3b4f-3c60-4721-a24b-7a4b252db6a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0e45c0-c3b1-4d6c-9120-13bb25690d24",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0bbf48-7d01-4baa-be48-6d6914260edb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf620814-c2af-4f9a-9adc-7731a077a43b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fed188-63d8-4cf1-a327-bda54c5bb8af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca9c13d-212f-4a2c-ad6e-f2b5e59a1be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f67199-93b0-4d08-a6ab-197872357ed3",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c98254a-eca2-45cf-87d8-d1502f2c4968",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a70cc10-968e-4680-9731-48f89b97fe59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f431ff-42b8-4582-aaff-e8840faebe2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad585d7d-00b7-4d70-b44a-ff09e30fb416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32f873f-d9db-4cc0-9714-2eee98595b95",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ee6b58-d107-4e76-adb7-aaffa339c195",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57910f16-9bdf-4335-b56b-d047c0b4d988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08740e90-6f49-4915-aa76-b6ba80a5dc59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad3f4b2a-e892-49b8-91b8-56e573613730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5dbffe1-0d0d-4f2b-aca5-5c835f7091b6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0a1510-92b0-4ea7-9195-af92ad4c0145",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "182025c3-d62a-4528-bdc8-fff181be1f7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6eb5d40-94f7-44f0-bea4-2c8976df0099",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5bd35e2-c10e-44f3-bf3e-f4ded395cd68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3dfad3-7b70-4bed-b668-c7cd37c9d891",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b30275a-582d-4271-93af-ecfb1135fdbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6e4a842-6152-4b9a-8819-3be3bb5e6215"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ee96a9-77f2-4a30-84a4-06bd8f5e6b5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53a2180c-50a2-481c-a8e5-cd879764d3a3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40eade70-557e-4249-99a8-534278b870e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa8b57a1-2008-4e5b-95b8-2bcf954fbe6e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfd21c83-f17f-4fdb-ab43-771ae75420d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1ff3e4f-526d-4ab1-9723-95a36962a23f"
                    }
                  }
                ]
              },
              {
                "id": "062326f8-dce1-4ff8-b2cf-d24064625379",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8a2d869f-79ef-44c1-8461-97c521e7f458",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9258f6e-9ec5-4a50-872d-f31ada591146",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5aa8c09b-381c-48f4-bd32-4392429c73bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac83d82a-ceb3-4c62-a2cf-d934252cdf72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aaf8e27a-53fb-4e71-90e0-ab0ed62659a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a605f95-7c9b-474b-91eb-3b17269d43d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "017c1bfc-5e9f-40d3-8aa5-bfb7ea789e09"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d4cded3-2ef3-4608-940a-f2b381971239",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ebd3833d-c3d9-4a69-8eb4-b1377838711c"
                    }
                  }
                ]
              },
              {
                "id": "9cff9531-7ed8-4928-878e-0ca06b8635f9",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f1d113be-19e8-4138-bb5e-8e83c224df01",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f75700-54dc-4b6e-9cb6-b56c81d0dad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "926628a7-11c9-430c-b5c4-ee13d9f34af5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c296a678-b669-4a5e-9cff-98cea72304cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8bf6ec5-0b12-4972-880e-6f77a808da17"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f43b6893-3ef2-46b2-a36e-30290acbaf6f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2ef10ec0-8710-4816-a956-7c037095fcc5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "70bad3ac-ee28-4fce-89fa-d16ad08e0e3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9860813c-95ba-451b-a827-bbebab1d0365"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4d5a388-93ef-4ce2-bc2d-461eeebf77a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e30b998-538e-420a-8c06-43043a1e36c0"
                    }
                  }
                ]
              },
              {
                "id": "c4bb91cc-dc88-4385-94d1-5dec9c085ce7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b27b1b25-f776-4439-a7c0-12dd78a2d6f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8581d26a-d443-4a5f-82b0-e9ef642e6c94"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a90c13c1-8130-4173-a906-69c861476cd6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48f66952-19ab-4952-93c7-8e74082eeffd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5795b8da-a280-44fd-be7c-076789d7f5fb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b37ce5e5-acda-44c0-8778-b04da580d4d6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd81245d-59ff-41a7-b035-4215463938d5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c8ce86c3-19e0-481a-b494-7c5a079c6731"
            }
          }
        ]
      },
      {
        "id": "a8d68cc3-d6f6-465e-ae22-bfb61341052a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "48a8c13c-0fc9-48fb-9788-a5026cad94d2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9933ea63-bbab-4a5a-b344-f7d07b3bd9df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "98f4b94d-3ddf-46c5-8a03-549cbb950d48",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0984b930-fbd3-4acd-9f50-c5fff4daa64b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "680c1c8b-4d4e-4ca4-b663-ebaba39bacfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6dad19d-1511-4b3f-8234-fba4cc56931b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36c0d1b1-d78b-4ae2-abec-fd4156ef7e07"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e4f92fa-2148-487e-917e-71149f40c18e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49ec372a-ef45-4e8d-9caa-eb88df480b17"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "48911b9b-efc0-4e5c-8588-04f4806cae04",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b207d999-e600-4e4b-82f4-3e4f028e299d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a8d9b90a-f48d-4c9c-9204-a4a6bea31f75",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "eca262ce-ae28-4217-b6b1-f83ba0e9eec2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5c179c3-3630-4e22-b455-518d650716b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3d303df7-2c27-4ab2-bb1c-17751f1abdf7"
            }
          }
        ]
      },
      {
        "id": "ada9167c-0a9c-4e58-a607-1683fd061f1c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c57551aa-6599-48e1-ab96-b8b698542e27",
            "name": "Negative Testing",
            "item": [
              {
                "id": "83ecaacc-c69a-4785-ab8f-56daa65ddf2a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cb4f4ed5-b3bf-4bf9-8282-c1d1fcfa5d2c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058a28c7-92c0-48bc-9d01-c4b80061fb6d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7a26779-0421-4d9a-afcd-6a921da42397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b77beb7-0da3-48ef-a330-32119d35e8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "106bf291-2847-4722-af17-68284271cba8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d643187-ef6d-4490-955f-51740e9163f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1aeb94cf-b996-4e85-a275-fa94a76bfc10"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "70e685e0-ea40-44d9-879b-f82f15e86b94",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91f00485-7ad7-43a0-88b2-0cae1069f9ef"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c2283a8-8876-471f-8dc1-b84da08ef46b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4375149d-5c76-47cb-bced-1918c69f75d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b40d159-95f7-4396-86a6-58df9c7556c5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3da5a3fd-dbc3-469d-909e-3511d05298e4"
            }
          }
        ]
      },
      {
        "id": "92fd1167-e1de-436b-aa88-ae2d6bcd23ea",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "14ac5ba0-7d4e-447b-bf01-1665b0a04d00",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10adcb8b-1c2c-434c-9a37-ee4989352f0c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e5311d0f-f8c3-46dc-a58c-4cfed8f84828",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46528f4c-a9b4-4aa7-a433-a1256df41ae8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "484b9f11-5707-4b42-97af-d62406e86638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23267452-d804-4a3a-98b5-822f84088a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cefe6ee3-d58d-4b18-b384-ac05eda342f0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f3e3f7b-82f8-4e75-a8bf-3fb2b1b3c189",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c677071-08c4-47d8-811d-8bc00bc73473"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8faa0dca-7541-44db-bba7-0d5c75fc6310",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72123681-98e9-4e17-8fac-cbfe55005578"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff77c5b8-71e9-448e-9312-e43c2a3cbadc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cd873001-94b3-474c-af82-17b0f73d45be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22bfb2ec-56be-4327-ac62-68f89afadcd8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62696daa-6df3-4f47-8787-02da19b0b552"
            }
          }
        ]
      },
      {
        "id": "0d732ea9-74e7-4e38-9e0c-a77de79ce096",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "768de49a-398b-4562-a2e0-b4217d1facc6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ffd2154-40d9-4e56-8e98-530712895b67",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b9c8e9cd-c507-4090-acf2-f55a482fe614",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c709b298-554b-4c1f-b7aa-5357475c57d1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cce83129-c2e4-489f-b47b-ed3fa1152824",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 51.26984126984125,
      "responseMin": 8,
      "responseMax": 687,
      "responseSd": 75.10996305929356,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1714869503367,
      "completed": 1714869524540
    },
    "executions": [
      {
        "id": "c5b9816a-eeb6-4262-a84a-b06fcda8b9a3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6c52c70c-12b0-4947-b066-293126c36ecf",
          "httpRequestId": "5327d7db-2ded-48a2-bf32-bf57e0b87dba"
        },
        "item": {
          "id": "c5b9816a-eeb6-4262-a84a-b06fcda8b9a3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2fa921ee-c965-453c-a7b7-cedbd2ef5cf6",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 0
        }
      },
      {
        "id": "95f99fa6-67ae-4443-9205-fbde00d013a5",
        "cursor": {
          "ref": "15989254-5540-408a-81e0-c34b4cb22b81",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3f4ea88f-7058-4c17-b126-8d41da226ada"
        },
        "item": {
          "id": "95f99fa6-67ae-4443-9205-fbde00d013a5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9fc2e398-5695-40b3-9e3a-8005384654bb",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "87fb3e99-b01e-4096-b8bc-44996f74550e",
        "cursor": {
          "ref": "d758400c-310a-4431-ab86-dab274c9b522",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4732e9ab-26dc-434f-94ed-4742c9dc4896"
        },
        "item": {
          "id": "87fb3e99-b01e-4096-b8bc-44996f74550e",
          "name": "did_json"
        },
        "response": {
          "id": "8ee73fe9-1c3f-49ce-a170-59e1ebd4b0ef",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a99671eb-94b4-4b7c-98bc-ed43dba1ee51",
        "cursor": {
          "ref": "8d0c45b3-ee79-4295-a71c-51cbcae4e839",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "89168eb3-66d9-4962-a7bc-18d9195d42ce"
        },
        "item": {
          "id": "a99671eb-94b4-4b7c-98bc-ed43dba1ee51",
          "name": "did:invalid"
        },
        "response": {
          "id": "ad31f8cb-e455-4c80-bbbc-5cdf0a4aeaf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a99671eb-94b4-4b7c-98bc-ed43dba1ee51",
        "cursor": {
          "ref": "8d0c45b3-ee79-4295-a71c-51cbcae4e839",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "89168eb3-66d9-4962-a7bc-18d9195d42ce"
        },
        "item": {
          "id": "a99671eb-94b4-4b7c-98bc-ed43dba1ee51",
          "name": "did:invalid"
        },
        "response": {
          "id": "ad31f8cb-e455-4c80-bbbc-5cdf0a4aeaf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0fe0721-37bc-4d6c-bde8-b98b609c6481",
        "cursor": {
          "ref": "5f999a3b-4c21-4c4a-909c-2e94f991cf30",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "bbf7229e-04a4-42c3-84d8-e57b18e317bc"
        },
        "item": {
          "id": "b0fe0721-37bc-4d6c-bde8-b98b609c6481",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c2701a89-914c-4dcf-90a4-4418dee647f2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 142,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323c4ef1-b22f-45e9-aa83-88692da91011",
        "cursor": {
          "ref": "a144a40e-7c6f-4b81-840c-681531fd43ca",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8f33c439-4902-4a24-81c1-625c2f459f5f"
        },
        "item": {
          "id": "323c4ef1-b22f-45e9-aa83-88692da91011",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "67b5b385-32c1-471f-837e-619daf6fd63f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 26,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca95e5e-853c-43c2-a1ea-f20d916f6c1a",
        "cursor": {
          "ref": "60fe5d83-ad5f-452e-ab8a-0e3b291bcd0a",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bd916d97-def3-42fd-9d89-6e199a365106"
        },
        "item": {
          "id": "fca95e5e-853c-43c2-a1ea-f20d916f6c1a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4b62bdd7-1b2b-49fd-a136-571b6bac824a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "557106f7-e620-4020-9109-a788dfed2195",
        "cursor": {
          "ref": "21cd8475-9132-4786-9009-55c28d8956c8",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1f2fc9f1-c719-4a1c-b245-6b2afadedace"
        },
        "item": {
          "id": "557106f7-e620-4020-9109-a788dfed2195",
          "name": "identifiers"
        },
        "response": {
          "id": "6288918c-79d4-41bf-ace8-54c4f9dd8a06",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41945b59-4a2d-4ca4-8ec1-ac4b313faad5",
        "cursor": {
          "ref": "9ab9a603-6547-4598-9dd2-62f3265e2bf1",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7765421e-a5cc-4e4e-a5c4-1e3c1e119588"
        },
        "item": {
          "id": "41945b59-4a2d-4ca4-8ec1-ac4b313faad5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "20fb59ae-2864-492c-a72c-cff7bd922962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b8b77f3-c7c8-4b7f-8e76-ac9bb798c241",
        "cursor": {
          "ref": "f99f28d8-d72a-4de5-8f11-93105e7a6096",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "684f00ee-190d-4f9e-9e3c-6e206258e588"
        },
        "item": {
          "id": "3b8b77f3-c7c8-4b7f-8e76-ac9bb798c241",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "93211068-b1c6-4cd0-9b60-bd230b7df68c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0581f546-17ad-4d54-97c1-92341da9b3ee",
        "cursor": {
          "ref": "fe4c3014-73a2-49be-864f-00b437d5b3d4",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "afed7a09-19c9-4ae9-b70a-a6a8993cc194"
        },
        "item": {
          "id": "0581f546-17ad-4d54-97c1-92341da9b3ee",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0ad92191-3c72-40eb-a76b-07a715b2f234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13799b8d-110b-443b-9c9f-ec04dd0253af",
        "cursor": {
          "ref": "35441472-a10c-44c1-bc95-7bc35a145610",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0259326f-7261-4d94-b127-11b02db15883"
        },
        "item": {
          "id": "13799b8d-110b-443b-9c9f-ec04dd0253af",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a32609ed-13b8-4c4c-924b-b0a1c7baee9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ac85f2-9116-4f6e-b06d-84160b6c1923",
        "cursor": {
          "ref": "65b0b6d2-38d8-4f34-b8e3-27c7c7b6388e",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6681d36f-63b1-416b-811f-82d03579d487"
        },
        "item": {
          "id": "49ac85f2-9116-4f6e-b06d-84160b6c1923",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d1a25b1b-cd81-4b06-b783-903b5eab1d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26faa0e2-e3ee-4d6d-b11c-68fb41253efa",
        "cursor": {
          "ref": "64d0a273-837c-4deb-b954-20247feff8bf",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2ef77ef3-9cc0-4d01-9466-f6d9adaf1553"
        },
        "item": {
          "id": "26faa0e2-e3ee-4d6d-b11c-68fb41253efa",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c6a56610-aecb-4b42-acc5-88cbb219233a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a8f9c7-21b4-43ef-9dc5-8e8e4f595a51",
        "cursor": {
          "ref": "87cb6cbc-2489-47c3-9e96-13f50b6ea9e5",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "11a1284c-9f95-45fe-9ea2-7b5fa53ba375"
        },
        "item": {
          "id": "49a8f9c7-21b4-43ef-9dc5-8e8e4f595a51",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "72911f19-5dba-459a-a9ce-1bdb14e6a17b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1872aed7-80f1-415d-89ae-536fb0eeddab",
        "cursor": {
          "ref": "53f914aa-6d01-47d6-88bc-f870a676db30",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f0a378c2-fb01-4e5e-8b49-e90758913144"
        },
        "item": {
          "id": "1872aed7-80f1-415d-89ae-536fb0eeddab",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b9286e5e-4319-4c90-b3dd-3db580e4061e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973886fa-9b55-46f6-9135-0e8c0935dcc4",
        "cursor": {
          "ref": "78166726-f061-4a94-9e80-b172a8ffb569",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5632ffde-f520-48b7-94ea-687cb657cb04"
        },
        "item": {
          "id": "973886fa-9b55-46f6-9135-0e8c0935dcc4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c8de3039-707d-478c-a60a-7c8e94e85d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5617df7-de5c-40c1-96b3-d386af87f93b",
        "cursor": {
          "ref": "49ad8875-70ad-45e9-8e8a-4c7f2623f99e",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "43cddb93-f4bf-4da6-b74b-96ff2bd164ee"
        },
        "item": {
          "id": "e5617df7-de5c-40c1-96b3-d386af87f93b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "aac8b63f-bec3-4399-9f39-736e2d789899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782c93b7-18a9-46f7-be63-faf570f6342b",
        "cursor": {
          "ref": "1c3b2a8e-2183-4e9e-ae7d-7636bccdad1e",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "28f7b764-c7d6-467d-9d93-115166b0813a"
        },
        "item": {
          "id": "782c93b7-18a9-46f7-be63-faf570f6342b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d25db93d-1199-4a3a-8c38-285608e7e731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "502a6c92-c36b-4e13-a3a5-07f4c01ce2c4",
        "cursor": {
          "ref": "c30983b5-f04a-4bc6-887d-5b79a4abf074",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "861cf19f-7bf4-4292-b214-8fcb6ed2b0b0"
        },
        "item": {
          "id": "502a6c92-c36b-4e13-a3a5-07f4c01ce2c4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2eb778ab-1ad7-4973-8054-b6ab9864cfe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5991268f-7cd0-4ecf-950e-ca762e28b976",
        "cursor": {
          "ref": "dcbfd51e-058b-4f38-86c0-239295b7c424",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "77eb1b70-10a8-42e4-a55d-47835788c3c6"
        },
        "item": {
          "id": "5991268f-7cd0-4ecf-950e-ca762e28b976",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "91d06f3c-73e3-4797-9c52-3835e60c2585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef076a35-30c6-435c-9b21-ea9dfc794427",
        "cursor": {
          "ref": "7d3d1063-5ff7-4616-b8a3-d4879c574c8e",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d6178fd7-9e0c-42e6-b87e-0db7750ae47c"
        },
        "item": {
          "id": "ef076a35-30c6-435c-9b21-ea9dfc794427",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "62ceb994-ebc2-4a81-9d4a-04a90c2d85b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a7f3e2a-8f71-4381-9d6d-0d62f32ddf33",
        "cursor": {
          "ref": "047f179f-d2cc-42d9-a928-b0c8dd9b5c98",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "38dd939d-f856-49a5-9df4-29304e3bccf8"
        },
        "item": {
          "id": "7a7f3e2a-8f71-4381-9d6d-0d62f32ddf33",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9e8cbfa2-3f28-4ed1-8b72-070a75df635c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5466f154-73aa-493d-a667-0d24da9981a7",
        "cursor": {
          "ref": "5c9b3890-0bbc-43d1-9428-f3ad6513e3e7",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6ea77ef4-d576-49ee-aa4f-8dc3fd7df53c"
        },
        "item": {
          "id": "5466f154-73aa-493d-a667-0d24da9981a7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "75feaeb5-95f4-42ad-8cb9-1e993047291a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3272feed-39f2-4ed2-acc3-f23bea307151",
        "cursor": {
          "ref": "a17f0419-6b0c-4c8a-bd11-a2d7d6d94dcc",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "bef29d5c-bd49-4bd5-965d-4ac29e390ae3"
        },
        "item": {
          "id": "3272feed-39f2-4ed2-acc3-f23bea307151",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d1b721af-513b-463d-b538-8f350130def0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f679958-fd9d-4fad-8890-fc5732d3a172",
        "cursor": {
          "ref": "a2f8ca25-642b-4146-810c-2fcf65ade7f5",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3de3cf2d-fdec-4a56-a53f-37e4ccc6fe10"
        },
        "item": {
          "id": "0f679958-fd9d-4fad-8890-fc5732d3a172",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f34a88ad-74a4-418b-b4dc-e248a70f6264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af6e9bf-4b0c-4bf2-a0ef-02edf54640dd",
        "cursor": {
          "ref": "b295ff61-0cff-41db-8a2d-081774abf09b",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "399bb4da-a0c3-428f-9c37-726140bd442e"
        },
        "item": {
          "id": "1af6e9bf-4b0c-4bf2-a0ef-02edf54640dd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "953a8f70-464e-425e-ae4b-d0da4f367ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90cde9f-4052-4cff-bbe7-0e3bdc24d5fe",
        "cursor": {
          "ref": "9f63ecff-9681-4307-8f74-6b62e1f7b2f1",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "81c3f494-af41-4494-9dfe-ab90eece5586"
        },
        "item": {
          "id": "d90cde9f-4052-4cff-bbe7-0e3bdc24d5fe",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0eac81ab-7fad-4ae0-89d6-6fac50cad4d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746a1b90-1841-430e-abe3-54b1f422e39c",
        "cursor": {
          "ref": "8e8bb285-e7e7-4336-af28-bba1b136b539",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c0e01d5b-8b35-4d9b-a1ec-17382a32ab84"
        },
        "item": {
          "id": "746a1b90-1841-430e-abe3-54b1f422e39c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a4ab0a63-d992-4252-ae99-c86946d3e293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcab40c1-71c6-4dbb-8f02-e8975f92ccf0",
        "cursor": {
          "ref": "767cf301-c881-4fb3-bb64-552add3deacb",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "47019aca-e624-464f-b946-094fa7dca4da"
        },
        "item": {
          "id": "bcab40c1-71c6-4dbb-8f02-e8975f92ccf0",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "15944203-1204-4ec5-96c5-a7163fc3bef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e049d3ef-6f33-4d76-9b0b-1455e10fc833",
        "cursor": {
          "ref": "f4eb84c5-dfdd-4e9f-a710-9b5b36e97db3",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c1a00b5a-81df-4fd2-8f4f-1d539f96e3ec"
        },
        "item": {
          "id": "e049d3ef-6f33-4d76-9b0b-1455e10fc833",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0066713d-c516-4e12-be35-98d8d73c6db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2004630c-a71f-4df3-a75f-6c8ab95b5fca",
        "cursor": {
          "ref": "af77728a-d872-454b-a985-0058705bbdf4",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cc9837a0-55b3-436a-b951-da64b18238b0"
        },
        "item": {
          "id": "2004630c-a71f-4df3-a75f-6c8ab95b5fca",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f1986029-0a66-4d44-a9f1-084fe034ed7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d34c69f-6024-45bc-95cd-e6c33c3d8cbd",
        "cursor": {
          "ref": "55c33c9d-3313-48c6-b522-d3c26009667d",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c0f56e62-6f6b-4bbf-bf2d-8bcddec0b036"
        },
        "item": {
          "id": "6d34c69f-6024-45bc-95cd-e6c33c3d8cbd",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "27389f08-7b40-4fa0-84d5-4bcd2d7a468a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81189b33-f251-4c98-b07e-83609445dd33",
        "cursor": {
          "ref": "80ef4f6d-94ed-49f4-8b9d-81238cbfe986",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "af4a5571-a813-4c73-9874-5d8b29db7b3b"
        },
        "item": {
          "id": "81189b33-f251-4c98-b07e-83609445dd33",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "dca724ac-5ba3-483f-9be2-252427209eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328cbe93-d8f9-4b9a-a9cc-7731383c1380",
        "cursor": {
          "ref": "4b230991-3a0f-433c-a429-9517316b7e7b",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "654f2367-d9fe-4073-96cd-28b61f8a75cc"
        },
        "item": {
          "id": "328cbe93-d8f9-4b9a-a9cc-7731383c1380",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b14d7036-5f2b-4bb9-b5ee-7a34c64bf544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b7027f-ffab-49fd-ad13-eac5a4e7b94c",
        "cursor": {
          "ref": "fcc67e74-20f0-4c45-ac6e-233f6d8cde0d",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9b79b972-44ef-486c-a8d8-5abb597b52e8"
        },
        "item": {
          "id": "a8b7027f-ffab-49fd-ad13-eac5a4e7b94c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "cdfce382-9118-4f28-8225-ddf126d5391b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e0f0d8-76d0-4c4a-bafb-957a8ef88aa4",
        "cursor": {
          "ref": "5d5022b2-0672-475d-89b5-ff334a312e94",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "81aa37ed-e93b-4f84-90a6-e7d157631482"
        },
        "item": {
          "id": "75e0f0d8-76d0-4c4a-bafb-957a8ef88aa4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "14bb311f-9678-45c7-b8df-60c88ad614e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7556e838-18a2-474d-b834-6ba990a76c1b",
        "cursor": {
          "ref": "37974c87-889a-408f-b9e1-c520f7ee4a64",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "32d87376-e2a3-4c12-8928-cef244246a5a"
        },
        "item": {
          "id": "7556e838-18a2-474d-b834-6ba990a76c1b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "890853b1-0a4d-4914-aefc-cf9d4e781d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a56fa2-0645-4b7e-b70d-6101ebdb9ad0",
        "cursor": {
          "ref": "9fdccb5c-45ba-43ee-b2c0-3573feef9e17",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "99b46f83-79b9-4516-8875-833fbd8e736b"
        },
        "item": {
          "id": "e8a56fa2-0645-4b7e-b70d-6101ebdb9ad0",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a817e197-27ff-405c-83dc-b4fac6e98bae",
          "status": "Created",
          "code": 201,
          "responseTime": 687,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "24eed3f9-2cec-440f-ae20-1e1c720507e2",
        "cursor": {
          "ref": "2b27e58b-b091-4a05-a2a6-423e07fc3a5e",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "fd3d3e85-ce17-48f4-ae10-aacd6a750553"
        },
        "item": {
          "id": "24eed3f9-2cec-440f-ae20-1e1c720507e2",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2998de3c-a630-4913-b0a5-552a9ca101d5",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3a275256-6d6b-44b5-ba64-0c01a2dde7a3",
        "cursor": {
          "ref": "a144e09c-89af-425f-b483-a1ee9d68933b",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "80cbcbb0-6310-46c7-b209-78009b523269"
        },
        "item": {
          "id": "3a275256-6d6b-44b5-ba64-0c01a2dde7a3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c4b52ece-02d0-4196-b49e-bced0c66e504",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "53c3a2f3-65ab-4880-bbfd-bce852ac07eb",
        "cursor": {
          "ref": "0ab77a92-cc3f-4e6b-955d-971534934d8b",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "62903bd5-ccec-4e39-9098-171263f15a3a"
        },
        "item": {
          "id": "53c3a2f3-65ab-4880-bbfd-bce852ac07eb",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c2eeb644-ba73-4f82-91e9-14334e4d407c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11235d54-e08c-4b13-9c94-24caf3ff8e21",
        "cursor": {
          "ref": "c2c73fe6-fa4e-46bd-bbf0-c68ec2523102",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f555cbbe-bdfc-479e-a3c3-a04a8a850536"
        },
        "item": {
          "id": "11235d54-e08c-4b13-9c94-24caf3ff8e21",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ae18af98-826f-4b62-9b18-4cc581ea6cb0",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5d5ec068-a950-47ea-ad6e-f549939c7a34",
        "cursor": {
          "ref": "e6240a0a-6529-4752-b137-3c81565146b6",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1600ff20-3eb9-4187-8752-2cf1eeb832c0"
        },
        "item": {
          "id": "5d5ec068-a950-47ea-ad6e-f549939c7a34",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0543d4f1-2545-4c7e-88a0-1f825916ba52",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "189eb440-0d85-436c-a544-be1e2b0c9895",
        "cursor": {
          "ref": "24c23a81-2516-4a96-a263-2dc83c6c8d02",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "eb2e1c46-a9d8-46ed-9208-e9ded5850bf7"
        },
        "item": {
          "id": "189eb440-0d85-436c-a544-be1e2b0c9895",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7820a0a8-4ce6-4eef-869b-d3dab3d5a025",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "551ef203-a736-43fc-bc29-dd596f4b4e06",
        "cursor": {
          "ref": "579f6af4-7fd5-4d26-b9ca-07018a742867",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "554a1724-2787-4449-b34e-fb1f718e9652"
        },
        "item": {
          "id": "551ef203-a736-43fc-bc29-dd596f4b4e06",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9dfee550-05b9-4174-a662-f046a9f7381b",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "dfbb1ef9-a31b-4a4e-aa58-d61e9ea8d383",
        "cursor": {
          "ref": "19350630-f81a-4adb-8a0d-1795bfcdb89c",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8a6785bd-f789-4d64-b0db-abf72a994c0a"
        },
        "item": {
          "id": "dfbb1ef9-a31b-4a4e-aa58-d61e9ea8d383",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "da55fd79-e1fb-4e59-aa87-b0550b5a0b6c",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d3e69516-796e-406b-8ecd-a08a9c102668",
        "cursor": {
          "ref": "28346b8b-2870-4705-8364-fde9f329c64c",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3f44e21c-7b96-4a30-a0a2-8634f56dbbde"
        },
        "item": {
          "id": "d3e69516-796e-406b-8ecd-a08a9c102668",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8b2d2c76-fca4-4511-904a-a1b7b8f0a630",
          "status": "Created",
          "code": 201,
          "responseTime": 214,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f4210101-6ad1-4f7d-8672-75efc94e5bb1",
        "cursor": {
          "ref": "c7491032-2ef8-4509-adb8-a166f27032a6",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "067ba247-f52e-483f-a499-1d3c2f259a96"
        },
        "item": {
          "id": "f4210101-6ad1-4f7d-8672-75efc94e5bb1",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8b067e3b-088f-4de9-ac05-edfa00cdfcf4",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ed08cbc1-b609-49a0-a20f-5ab3604ac644",
        "cursor": {
          "ref": "0564734c-2e92-4837-87f8-20a6b34d3fb4",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "59d55d64-3f6e-4d37-8519-59c900d36d6b"
        },
        "item": {
          "id": "ed08cbc1-b609-49a0-a20f-5ab3604ac644",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c3755877-ad8a-4612-9f4c-a56c7e388b5c",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "20dc4276-7c96-4661-8281-2ba9365c1738",
        "cursor": {
          "ref": "04b54d83-4d51-4af7-bf88-a247331a174c",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "72c0b57a-be04-4a62-a2fb-78179520bde7"
        },
        "item": {
          "id": "20dc4276-7c96-4661-8281-2ba9365c1738",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "780b9965-4c10-4728-8859-19c21d4a611c",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "91a8ce41-8655-48e6-af0c-be56640ba529",
        "cursor": {
          "ref": "8a4f45a9-60a1-4b2b-a96e-bbc410ece7c4",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5560b25f-c980-405f-9daf-cd7a5d3a15d2"
        },
        "item": {
          "id": "91a8ce41-8655-48e6-af0c-be56640ba529",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e7f564eb-9e49-4baa-892d-11593536d076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "260d6dde-8dc1-4f7d-b165-7edeea037f0d",
        "cursor": {
          "ref": "8547bfdd-4f1d-4f4e-be98-00de5154c9c3",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "62ff593e-baec-4bd8-8f27-aab19f1559bf"
        },
        "item": {
          "id": "260d6dde-8dc1-4f7d-b165-7edeea037f0d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "75b649d6-9c58-47da-9dfc-21b6e8745d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94145e68-d174-45b8-a641-bc76ccb5dd0e",
        "cursor": {
          "ref": "5acfea0d-b40b-4430-a903-21107815327c",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8dd41e0c-e00d-4e87-b466-247431b2f2d3"
        },
        "item": {
          "id": "94145e68-d174-45b8-a641-bc76ccb5dd0e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "31386dde-d05a-42a7-a9bc-1f790905ef02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5916f98-a72f-4db8-827a-b240979bc366",
        "cursor": {
          "ref": "11ee820d-1c55-492b-985c-5d4d70b48075",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0b930557-d620-471c-a47a-1f0be29b0884"
        },
        "item": {
          "id": "f5916f98-a72f-4db8-827a-b240979bc366",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "41f6b3d9-6edd-4b1f-9213-762be7df19eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06732b08-8d26-465d-9252-c394dad5b07f",
        "cursor": {
          "ref": "1e5cf1ae-9445-4ba3-8c6b-26c1804a0ccf",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6d500fc0-5769-42cb-b31a-64a4b2c43ba0"
        },
        "item": {
          "id": "06732b08-8d26-465d-9252-c394dad5b07f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7ec002df-b165-49a8-916c-6bc1d460a4f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1042363f-9768-4bfc-bfd3-067211a7d704",
        "cursor": {
          "ref": "ec87d950-64ab-4206-aac7-857bea69e677",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8acc33d2-2305-4f84-b695-ae59377e3612"
        },
        "item": {
          "id": "1042363f-9768-4bfc-bfd3-067211a7d704",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bf99f597-885a-4a52-b4d5-f6649f13bb22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7cad45b-c0c1-4211-9773-cc6509e54bc4",
        "cursor": {
          "ref": "edba2453-d2be-459f-816a-f04fe2ee2625",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "adc0194c-37e3-4aa8-bbff-8c9619c7a05f"
        },
        "item": {
          "id": "d7cad45b-c0c1-4211-9773-cc6509e54bc4",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0283a93a-dea0-47cb-adbb-233db86067a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9c34ea-c18b-4f56-8c59-aafad4575894",
        "cursor": {
          "ref": "01eaa4fa-a952-4d95-a408-66dacefb8a0a",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7d9a72d6-1031-409b-b026-399a5006a39f"
        },
        "item": {
          "id": "6f9c34ea-c18b-4f56-8c59-aafad4575894",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "49a0e839-7900-4419-8de7-454384327098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "761147aa-bc8d-4949-834f-a7f8dba4742b",
        "cursor": {
          "ref": "73a523db-abd2-46ca-850d-eba39df085e6",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e04941b7-83bf-4920-af76-cffc3df34e99"
        },
        "item": {
          "id": "761147aa-bc8d-4949-834f-a7f8dba4742b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7bbb2f34-9858-443e-bb86-642f7ec57d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd70739-4eae-48f7-9eae-85de41dca584",
        "cursor": {
          "ref": "a761b11d-8c0f-4539-9caa-a83539652a6a",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "64a75078-aa04-46b9-b0ac-97712d086f5c"
        },
        "item": {
          "id": "bdd70739-4eae-48f7-9eae-85de41dca584",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a2312e41-20d4-4c3a-880d-5e75ec925c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e57525-d1c0-41c3-b570-c9c86f780895",
        "cursor": {
          "ref": "2fbd5ce3-19c7-4995-b863-330f8b54dec9",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "eeacba67-c596-48b6-9499-c53a53a88f51"
        },
        "item": {
          "id": "02e57525-d1c0-41c3-b570-c9c86f780895",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "dee4c32e-61e3-4165-b322-9972578adf91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb76aeb-6842-4930-a10f-305511c00da9",
        "cursor": {
          "ref": "26954e71-a3f5-41b6-b478-4e06292d8e69",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5654e2ab-1eb6-4e8d-9dfe-9a04bd120413"
        },
        "item": {
          "id": "3eb76aeb-6842-4930-a10f-305511c00da9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a46efa88-d21c-48af-a821-e798bcf23fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ec74f9-bcab-4422-9476-4a8f2a20c98f",
        "cursor": {
          "ref": "a35cb10f-8cb4-408e-9150-a6f0356f6a37",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b540d7a4-da88-42fd-b6e6-56babbc1faf7"
        },
        "item": {
          "id": "a9ec74f9-bcab-4422-9476-4a8f2a20c98f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a5bde3b3-c1ee-483d-afb5-f8e079c2b687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f5480a-9e50-4b86-8abe-b50cf7b72ae4",
        "cursor": {
          "ref": "1f859eaf-a19c-4c7f-9020-f1f07d4da57a",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "31ba0ced-98a9-49f0-a987-91c0d2d9d082"
        },
        "item": {
          "id": "04f5480a-9e50-4b86-8abe-b50cf7b72ae4",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e4f63403-80c0-49a9-828e-af56e82d8297",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "3076b37e-1cf5-485a-957a-dd86147df466",
        "cursor": {
          "ref": "5d6af283-d8b7-4fd6-a116-98c606d80213",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e57122e2-33b3-4396-a8a1-28d613720466"
        },
        "item": {
          "id": "3076b37e-1cf5-485a-957a-dd86147df466",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ed8f65ed-5f80-4d9a-afc6-64951cc633d8",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "e46b67e2-1016-4302-9d3b-56dd3ec33008",
        "cursor": {
          "ref": "20056382-50e8-4d06-b9d4-c0b2b536ab1a",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "fcefe37d-0e14-4871-b6c2-daf32d572ca4"
        },
        "item": {
          "id": "e46b67e2-1016-4302-9d3b-56dd3ec33008",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0c93fb97-2a23-4d5f-8bdd-14816525aa96",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "f9ae1796-27a2-4f2b-bbea-2510e357e9de",
        "cursor": {
          "ref": "085ce158-7eed-4ca5-9c14-d7f7282e5705",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f450634f-a21b-4a7b-81f6-173a32fb2f60"
        },
        "item": {
          "id": "f9ae1796-27a2-4f2b-bbea-2510e357e9de",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fdc1d218-17b2-4693-89c9-eccb0903e1de",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "ff422714-588f-41eb-9c24-8ac5353c8113",
        "cursor": {
          "ref": "a2c7027d-e17c-43d4-9026-a80a0968c13a",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "34c74317-39c4-4c0d-a08b-c3a79afcdacb"
        },
        "item": {
          "id": "ff422714-588f-41eb-9c24-8ac5353c8113",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c888f154-a8c8-41c3-996c-e8eb893c8847",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "38a5fc99-11f3-4cde-a9f4-d91f5c0877ad",
        "cursor": {
          "ref": "d1f860d2-d224-44dd-9148-e8ca8b216f72",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "99c00533-9993-4ce4-93cb-89724236a449"
        },
        "item": {
          "id": "38a5fc99-11f3-4cde-a9f4-d91f5c0877ad",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1b542eb7-2384-4425-804d-d3c460d391d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5626d2e3-441f-4491-9dbd-78decc624a2c",
        "cursor": {
          "ref": "3eacfab1-f0c9-4c92-a041-8045337c9c90",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2a0c52f8-181a-42ec-af2b-02e5e32a429f"
        },
        "item": {
          "id": "5626d2e3-441f-4491-9dbd-78decc624a2c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e79be994-111e-482b-81d6-9f8cc421a625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42afcec8-0e07-4523-a216-0a1e779233c5",
        "cursor": {
          "ref": "e93604b0-4d92-4fef-8bc9-da293a333878",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "244e34d8-b9b8-452e-ab73-0419f3627fc5"
        },
        "item": {
          "id": "42afcec8-0e07-4523-a216-0a1e779233c5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6377c9c5-316c-40a8-a962-f5a68e99308b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6562600-f3e9-44c8-ae2b-1567c0cc100a",
        "cursor": {
          "ref": "43d151b9-937c-4ff5-ac4f-55611b6f5445",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2fd7f523-532c-4f23-84c6-bef73ba5778e"
        },
        "item": {
          "id": "c6562600-f3e9-44c8-ae2b-1567c0cc100a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "79a22e64-bd3c-499d-be08-52d30fe775a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a70513-ad6d-4946-89f6-912e216e856f",
        "cursor": {
          "ref": "71ba3bfc-8030-47fb-9d0a-f01b77bad93d",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c96889ec-d22b-40cc-9b1a-7131dc33da39"
        },
        "item": {
          "id": "92a70513-ad6d-4946-89f6-912e216e856f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d5dd50b0-d9fb-4cfa-8cdd-08940ebc0c61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f128122b-960a-4293-b3be-fc1677af5f89",
        "cursor": {
          "ref": "c6ba497c-001a-417a-8b9f-f85c6988ab7a",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e165df66-f513-4554-8288-aa49c875339e"
        },
        "item": {
          "id": "f128122b-960a-4293-b3be-fc1677af5f89",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1f1e9316-ab72-47f0-b731-b1ad8461e400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f4e1bd4-ff9d-4be9-82e6-e504174621a8",
        "cursor": {
          "ref": "a4af8c7f-cf66-4fb2-ac27-011c774c6008",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e58b72e2-fa96-424e-b8cf-43944df32dd8"
        },
        "item": {
          "id": "2f4e1bd4-ff9d-4be9-82e6-e504174621a8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a8fbeb68-1547-48bc-a817-0212c2a5ea9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e88c3c-4e6e-47e0-b682-cab013f1c3dd",
        "cursor": {
          "ref": "6d014aed-589f-4059-a0dd-22f34ded8593",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "bb5c647f-78dc-4f97-986e-33284be3d39c"
        },
        "item": {
          "id": "f6e88c3c-4e6e-47e0-b682-cab013f1c3dd",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "573cfc24-e7da-4a53-a670-016957e7443d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d90e6f-221b-4b09-99f3-198f335469da",
        "cursor": {
          "ref": "9bf5222b-889d-4364-938b-095ac297cd0e",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "46af8e64-81c9-4e75-94c7-e7bbfe6b7fea"
        },
        "item": {
          "id": "d9d90e6f-221b-4b09-99f3-198f335469da",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2f8f94fd-80ef-47bd-a99e-4c4c9a452c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "148b7b73-11d1-4d0b-8478-dd89faab604b",
        "cursor": {
          "ref": "5cfde7e3-4b0c-4650-a30e-2df8ce2662fd",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a595904c-bd20-4c8e-922d-cd2023ea3f38"
        },
        "item": {
          "id": "148b7b73-11d1-4d0b-8478-dd89faab604b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8eacf46e-da0b-439b-87a9-6b6c0f3f595a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132493d5-aab4-4a7f-8ff0-50f5ec0e377d",
        "cursor": {
          "ref": "c067ab43-b1ab-41c8-b829-474466775f72",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5978eb55-f489-4b09-a6ef-a0a4429eb276"
        },
        "item": {
          "id": "132493d5-aab4-4a7f-8ff0-50f5ec0e377d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "87512831-a851-40fa-afbc-57aecefdc7ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1be8b628-e8f7-412c-87c2-fbe7938ad145",
        "cursor": {
          "ref": "836095a2-cf9a-41bc-9b66-07aa1727b2ed",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e44a579b-d943-4454-a3b3-34ae6e965def"
        },
        "item": {
          "id": "1be8b628-e8f7-412c-87c2-fbe7938ad145",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d2a4de94-d73e-4621-a360-e3d2925cda0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b0a1c0-c405-416b-bbc2-2015610ba0d5",
        "cursor": {
          "ref": "53152a8b-0b93-4abc-a096-2fd3a3de57e6",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8d45c155-844a-49fe-904c-3b3c64f66bd5"
        },
        "item": {
          "id": "a9b0a1c0-c405-416b-bbc2-2015610ba0d5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5a2b24db-5813-4f1f-82d5-d83cfa0289b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b44e459-b854-45e2-af2f-51322cc0d1c8",
        "cursor": {
          "ref": "c5563ad5-6fd6-4f34-923e-c2581b9c05a3",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1e9a6eb9-9b83-43a0-b8e4-f67367ca9717"
        },
        "item": {
          "id": "9b44e459-b854-45e2-af2f-51322cc0d1c8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "04be3624-7020-427a-9186-00abcbc63fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "218ce33b-a2af-45f2-a899-3982cda4e353",
        "cursor": {
          "ref": "369aa667-f444-48a3-b4c8-7d58d91a3822",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ca0bac99-0832-4dba-a46f-9b17b8b439fe"
        },
        "item": {
          "id": "218ce33b-a2af-45f2-a899-3982cda4e353",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ac6a998e-77c5-4699-af07-a1a2b9586002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eeaccbd-c8c9-44f2-875b-67bd938bc7c4",
        "cursor": {
          "ref": "65e28e02-7e7f-4fd8-bbe5-8dffbdb9a281",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2cadcf00-d5ea-4417-b176-53a0e12da8ed"
        },
        "item": {
          "id": "0eeaccbd-c8c9-44f2-875b-67bd938bc7c4",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1aec488f-6db8-4a71-b2b3-54da9f94412e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213b4104-e10e-4ffb-a8a4-7519fc8cd91e",
        "cursor": {
          "ref": "17040ead-5578-4321-8637-2f3d702c9a7e",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2334a705-d53a-4cf7-afe5-5aba09c4a025"
        },
        "item": {
          "id": "213b4104-e10e-4ffb-a8a4-7519fc8cd91e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d9316d05-4ce3-43e6-ab19-c3ea05b4f77b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7b697b-d556-4967-bd71-73c5ea6457ee",
        "cursor": {
          "ref": "fbd8db79-66e0-4404-bf24-f0bc42125874",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d655a78d-3b62-4de8-9482-0ebb2b63bdbd"
        },
        "item": {
          "id": "3c7b697b-d556-4967-bd71-73c5ea6457ee",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d73f0f3a-133b-4fb5-9a09-03f874e13cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac4d228-bfe4-40de-b457-1b89afcf4990",
        "cursor": {
          "ref": "892b17b8-7646-484e-a055-9887c8b313c6",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "04b24f3b-c05c-442b-bbbb-431e5bf3e338"
        },
        "item": {
          "id": "6ac4d228-bfe4-40de-b457-1b89afcf4990",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "52dd06ce-f4d4-4e11-bfbc-0bcc61cff237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf281645-0811-479f-9355-46a3966bc16c",
        "cursor": {
          "ref": "b24c3783-9a6a-46bc-98fe-f07c6099b99e",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "828edb1f-53f0-4f0f-8f1b-ab91ff32269d"
        },
        "item": {
          "id": "cf281645-0811-479f-9355-46a3966bc16c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8ecdcf07-3ef2-4ba7-917d-aa62b06ce000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a00cd9-82f5-4156-807f-bc7e6725c8b4",
        "cursor": {
          "ref": "2994bfff-aab8-4796-a381-94b087ee19a2",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b1453beb-f3b9-4723-9846-b4f06c360f04"
        },
        "item": {
          "id": "b5a00cd9-82f5-4156-807f-bc7e6725c8b4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d01e588a-175c-4ed7-9d88-4fb754e6f640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ceea7d8-9c8b-49fb-8a59-3cfb22ce5c44",
        "cursor": {
          "ref": "beeded9f-217c-4206-a87e-8dfb5781f23a",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2ce66a23-546a-45c9-a80f-8cc754458aed"
        },
        "item": {
          "id": "7ceea7d8-9c8b-49fb-8a59-3cfb22ce5c44",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "50b9d7b2-d33e-454c-bef1-a7d6b1a6c55d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df19ef06-8dfe-4cda-a375-92fd5e5ee417",
        "cursor": {
          "ref": "eaa19bbd-c305-4c08-8ffa-0a4e4ec980e1",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "794e7d33-9814-47b9-9001-7eedb2c79a34"
        },
        "item": {
          "id": "df19ef06-8dfe-4cda-a375-92fd5e5ee417",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4a100efd-2596-437b-b74b-5251cfd0b418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc927b25-5a35-4ed9-9867-cbf34db6dd4a",
        "cursor": {
          "ref": "1a4f80a3-1fdd-47df-88e3-20fa875d9523",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3887c80a-4bf3-4ddd-afad-2d7ee3712a12"
        },
        "item": {
          "id": "bc927b25-5a35-4ed9-9867-cbf34db6dd4a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d4b5ce1d-a517-4397-bffe-950208a1c4cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e023d488-6b71-4d37-b028-a9259fda7478",
        "cursor": {
          "ref": "24ded7bb-6801-4c2c-9c78-707e2ff7110c",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "17447bb3-9b16-4ee7-bfa7-881b11cb4864"
        },
        "item": {
          "id": "e023d488-6b71-4d37-b028-a9259fda7478",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8a1b6c97-f4a0-46c2-9039-f2bad9b9b526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff7dfc4-564e-453b-8277-67f908abcaff",
        "cursor": {
          "ref": "07f9ec28-4c17-4147-9c2c-689b73458d77",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7af19487-d7a6-422e-a2dc-115e6604ecde"
        },
        "item": {
          "id": "cff7dfc4-564e-453b-8277-67f908abcaff",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3ffbe780-d199-4ff2-8574-dbb72a75830e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c6f422-f22c-4aa2-889f-ddc7f4894599",
        "cursor": {
          "ref": "83cb956f-20c1-4c9c-840f-0df261557608",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4d991f6b-825e-461a-8a58-a7ee884e64c4"
        },
        "item": {
          "id": "c8c6f422-f22c-4aa2-889f-ddc7f4894599",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e0251483-8304-4c88-8ff0-87e6527b8097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a4ffbf-c4d9-4283-84ad-e9e222532add",
        "cursor": {
          "ref": "e9a179f9-16b1-4b66-95be-ecbe5b84151a",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f269679a-94c6-46c3-ad46-ac26545730bc"
        },
        "item": {
          "id": "a0a4ffbf-c4d9-4283-84ad-e9e222532add",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "532da9c0-a960-48b8-bdea-373fd0b4e8d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f24bd4d-cd28-4ca4-b575-3f5ed546c519",
        "cursor": {
          "ref": "bc40171e-369e-4acb-85a8-1e1dc78a109e",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1d6e527a-f656-4f5c-9919-8883670b053a"
        },
        "item": {
          "id": "9f24bd4d-cd28-4ca4-b575-3f5ed546c519",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e5e14af0-c371-4b2b-a61c-a6dba4814958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653826e3-1dbb-4cce-a522-20581f7d88be",
        "cursor": {
          "ref": "ef3b346d-7075-4741-a5e3-dc87f0a64054",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0c8a5d9e-20c8-4c98-8314-b3e86271931b"
        },
        "item": {
          "id": "653826e3-1dbb-4cce-a522-20581f7d88be",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5e29b2cc-a749-4f70-bc26-0cb51a34dd6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849f2757-705b-458f-853e-a10157851fa7",
        "cursor": {
          "ref": "6e342492-e405-4763-bf81-3fc5bcaf1745",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "eeef8961-e66f-4e24-b06f-403f9c899ed4"
        },
        "item": {
          "id": "849f2757-705b-458f-853e-a10157851fa7",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e1181431-17c8-4f80-9d2f-e31f764c63a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972945cd-6738-47ec-9a57-9dcbd5dcada9",
        "cursor": {
          "ref": "878a9fd3-0c7c-4050-9ab8-bb074ad13613",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "047a4b0d-c70b-457c-b69d-5ddb7b8d10a4"
        },
        "item": {
          "id": "972945cd-6738-47ec-9a57-9dcbd5dcada9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8e9dc475-8cb7-4849-a97b-98c0913da31a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056e6118-a6ba-455b-bf55-b08575ba30e8",
        "cursor": {
          "ref": "0c70f207-ed32-407e-a18f-841b88aeae23",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "428e58eb-6df3-4c08-980a-ec68c674d7e7"
        },
        "item": {
          "id": "056e6118-a6ba-455b-bf55-b08575ba30e8",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "32973b25-8a85-4360-a214-bc4d90b9955e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "387c18dd-ff35-4ea7-b528-c223908d0a45",
        "cursor": {
          "ref": "bb1773a0-bb7f-4a14-9835-ad2eac66ce49",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c5657912-cfd2-4acf-9d23-9032dbc7e54d"
        },
        "item": {
          "id": "387c18dd-ff35-4ea7-b528-c223908d0a45",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8901be47-cab8-4626-bed0-18cf9ed11372",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "80aaa33c-89f0-41c9-9c81-3d03545f6d73",
        "cursor": {
          "ref": "16e66f66-bef0-42c3-9cd4-a36ceeeb602d",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3542bafe-20d0-4d03-a74c-74993ca804e6"
        },
        "item": {
          "id": "80aaa33c-89f0-41c9-9c81-3d03545f6d73",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "0035bd3c-c7fb-4aee-a3ea-d17152892e49",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1c9b0e-ddcd-414d-8b49-e1b1d87e8bce",
        "cursor": {
          "ref": "3f22484b-dff3-4ba0-8121-1a9358ba0837",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a5f26dae-2b82-4eac-aa21-ea934f909e30"
        },
        "item": {
          "id": "cf1c9b0e-ddcd-414d-8b49-e1b1d87e8bce",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "dd791238-38fc-4a1b-8d18-ef62fc963851",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6fbf2b4-19d1-4399-8050-ed0dc515e0dc",
        "cursor": {
          "ref": "96ed0c1a-25c2-4d54-ab72-4f2fe6e03a3b",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7470e68c-9d26-4691-a4b1-29f9f1353bfb"
        },
        "item": {
          "id": "f6fbf2b4-19d1-4399-8050-ed0dc515e0dc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "789a1b54-2754-4696-87c7-b575494652b8",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "024636d5-2fe8-4b76-b33d-c10776ce6b53",
        "cursor": {
          "ref": "7172fe6d-aaca-4a6d-ad69-ca8d64e7976a",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a8cb31f4-2de4-42c9-8517-413a0df502dd"
        },
        "item": {
          "id": "024636d5-2fe8-4b76-b33d-c10776ce6b53",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ac5c0bbb-b57f-4fdd-b544-27bc33682272",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-05T00:38:35.364Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-05T00:38:35.364Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "78a4c760-9770-459c-b15b-a87b60713729",
        "cursor": {
          "ref": "17af2e9a-0963-4435-b71f-32057d60b851",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c7e9f29f-429e-4de4-9306-6fb2dee23043"
        },
        "item": {
          "id": "78a4c760-9770-459c-b15b-a87b60713729",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "48db49eb-dbab-4fa6-8511-7e7b8c117da1",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355bd726-bc0d-4005-a376-e5e14ef5bb4c",
        "cursor": {
          "ref": "b3d3a4a6-7f57-4e38-910f-0b71020e2dc9",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "cd924bd0-1b78-4a3c-9efd-d3ef041a7911"
        },
        "item": {
          "id": "355bd726-bc0d-4005-a376-e5e14ef5bb4c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "525560f5-a3a7-4477-a767-50f6931ee60b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a4b78b9-70fe-43e9-9864-9e99959aae82",
        "cursor": {
          "ref": "13dc1032-17ae-40a5-aa8d-769439f0f36d",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f19d852e-14e0-4a46-9348-271d2de90d75"
        },
        "item": {
          "id": "4a4b78b9-70fe-43e9-9864-9e99959aae82",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6259b9ad-9123-415f-b7de-50b89fc37206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62345078-1482-40d1-9a56-55a3a9227a5e",
        "cursor": {
          "ref": "bc972f40-96d0-4785-8d06-74b041aa0e9d",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ed722e11-96ae-4c23-8792-07d7b6ade146"
        },
        "item": {
          "id": "62345078-1482-40d1-9a56-55a3a9227a5e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2986a275-59f5-4aca-966f-0cf2291075c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cac8b07-76be-4013-a044-8f213968d382",
        "cursor": {
          "ref": "4f5aeaae-a7d4-4256-a0a3-bcc7dce5e9c5",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "61739dbf-959c-45b9-90eb-6ea69c1feb67"
        },
        "item": {
          "id": "1cac8b07-76be-4013-a044-8f213968d382",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "55cb9952-f9c1-4132-9804-e0b54f5dc5fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726362bf-1cf8-4884-95f3-0af7cd3d7a79",
        "cursor": {
          "ref": "2d3a72c7-5246-4810-936d-f723121051f9",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e29f6aae-52a4-475b-b1d9-ab1d1be5a009"
        },
        "item": {
          "id": "726362bf-1cf8-4884-95f3-0af7cd3d7a79",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a4459ade-309d-4810-a287-ddf4ff55838a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e6240f4-9f32-4043-bb1b-149ececa681e",
        "cursor": {
          "ref": "532c6a3c-0ed9-4389-a9ec-c1b2551eeee0",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "cd2aa75c-3532-47ac-b2f8-1a5b5fb74c0d"
        },
        "item": {
          "id": "1e6240f4-9f32-4043-bb1b-149ececa681e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3dcc6ae9-290d-4842-a24c-942c92b583d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de022a2-5ab0-4be9-a53b-ae653c6d450c",
        "cursor": {
          "ref": "36e41b65-2be1-4e00-9c3d-8917a80aa452",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3f93786f-0695-4896-b200-57d2cdfbd4b3"
        },
        "item": {
          "id": "5de022a2-5ab0-4be9-a53b-ae653c6d450c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4a4a33e3-4992-47bc-907a-286557c2d796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09857e7a-8a5e-4bd1-88f0-c5dbbb991084",
        "cursor": {
          "ref": "5e9269f0-e2fd-4451-974d-4835cc191385",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "86df4f26-97c5-40cd-a04f-fc30833804d8"
        },
        "item": {
          "id": "09857e7a-8a5e-4bd1-88f0-c5dbbb991084",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "815f832c-3494-421d-9913-ace6c5932ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b37b8231-1e15-4e23-add7-a27da0fe5754",
        "cursor": {
          "ref": "69d4fb27-c44f-4a18-a522-5d4eb8b73498",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8e54a0db-f8a9-414f-b873-86e079d5297c"
        },
        "item": {
          "id": "b37b8231-1e15-4e23-add7-a27da0fe5754",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "5d3a7cc4-6d3e-46d0-9fdf-03e425f9619c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef5c242-1d4e-4661-aa1a-c75cf62e8512",
        "cursor": {
          "ref": "fced798a-186e-4f97-b9d6-837ef2dcc7dc",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a2798f3d-8023-4e85-9786-1890d721916d"
        },
        "item": {
          "id": "8ef5c242-1d4e-4661-aa1a-c75cf62e8512",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d3195395-5b0c-43db-85fa-7c5d4696aa3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf618e62-ec14-45c0-b68a-a3e9478e6c2e",
        "cursor": {
          "ref": "78367d0e-eb53-40c6-a36e-e7d6ef5a4b61",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "19dfaa99-4c03-438f-b9d3-bb4f021bd5fa"
        },
        "item": {
          "id": "bf618e62-ec14-45c0-b68a-a3e9478e6c2e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6da42b14-f5be-42f8-a6bb-9d00c6a9b003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320d0a76-341b-4aa0-a7b2-ca1d1f323e6c",
        "cursor": {
          "ref": "7f628306-cea5-48c2-9190-5a114bb18cb6",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a4d37688-6197-47b1-9ffe-4854a7b23d3b"
        },
        "item": {
          "id": "320d0a76-341b-4aa0-a7b2-ca1d1f323e6c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "44b9d3ac-455f-46d2-8a9a-2eb93f2b5d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4d2de5-90c5-4ecb-9b4c-e9baff41f6b6",
        "cursor": {
          "ref": "ecdf374e-dbbb-4750-83a1-ec7f283acc00",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f8394a9e-b125-409e-8c05-e0a3234db232"
        },
        "item": {
          "id": "5b4d2de5-90c5-4ecb-9b4c-e9baff41f6b6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4c14c5b9-c8bd-4191-8b53-fcf2b21991d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de6bbbdc-a7b9-46e0-adee-8a548b05cd27",
        "cursor": {
          "ref": "bfdd3561-c3d9-4394-a357-2979118cff2d",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8400c8d5-360f-4eec-b74d-23ee1b339e2f"
        },
        "item": {
          "id": "de6bbbdc-a7b9-46e0-adee-8a548b05cd27",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a6014cb6-e635-4bad-9d9e-235cb469fdbb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "6f74a8e9-9f72-4ccc-951f-57d5d1f19ecf",
        "cursor": {
          "ref": "5f77bd58-c358-40b8-824f-a4dd57e17b53",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "aded7a44-456c-4465-8286-d26bfab8fe5f"
        },
        "item": {
          "id": "6f74a8e9-9f72-4ccc-951f-57d5d1f19ecf",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "73adea67-08ff-4cf6-bdf0-2e4321cf9893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed9aaddc-cd84-4855-bc79-5df3899feea0",
        "cursor": {
          "ref": "68d89453-35b2-4cf0-a3ff-b973258b9346",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6bb9e76d-a4d2-478a-92a4-a3aabd2c1fbd"
        },
        "item": {
          "id": "ed9aaddc-cd84-4855-bc79-5df3899feea0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1261a029-6305-40da-a668-99a684137f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15e1406-52be-4fe2-995b-108cb28d8206",
        "cursor": {
          "ref": "bff1c9e5-b8ea-4671-b73a-87c53dfa3fd6",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "25972d0c-3850-4236-8da0-ad98b2404d0c"
        },
        "item": {
          "id": "c15e1406-52be-4fe2-995b-108cb28d8206",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "379fac3b-b031-4ecd-909b-5a608573f7f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ff824a-5dfe-4a51-93cb-dff2e329dbf6",
        "cursor": {
          "ref": "4a171d36-9314-47e3-a489-1a1a47c747f4",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1a45a6a6-e64a-4f70-bc43-60d61bd511bf"
        },
        "item": {
          "id": "72ff824a-5dfe-4a51-93cb-dff2e329dbf6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "32ba7d5f-6bce-4eb9-81b3-835d126737ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b50288fe-fc67-43ac-9385-3e3a912a775e",
        "cursor": {
          "ref": "a9827ee6-b676-48a9-b1cf-08ae2a1999fc",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3dfaeaea-1287-4460-a570-446dd7de67da"
        },
        "item": {
          "id": "b50288fe-fc67-43ac-9385-3e3a912a775e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "df0bfe8b-1f42-4275-9470-83a32a3c3ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6c815c-1207-4a90-a17f-97d146aff6f0",
        "cursor": {
          "ref": "42f20a60-20a8-473d-92ea-ee77be367621",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1e9936fd-c19b-47c8-a491-e2203a087133"
        },
        "item": {
          "id": "2f6c815c-1207-4a90-a17f-97d146aff6f0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "120a9885-33dc-43a4-9390-61441c1f4b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e080bf4-2ba4-4aa8-b9ce-a501fbc1d150",
        "cursor": {
          "ref": "720a190d-c912-4ad8-a6b5-a001c71bbb71",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6d6d75e4-8908-480b-9b22-ac6e8127f1dd"
        },
        "item": {
          "id": "5e080bf4-2ba4-4aa8-b9ce-a501fbc1d150",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f152e831-2c35-40d5-a3aa-b6d27b03c590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d012a587-2a52-4915-8ac4-9b04e06b6971",
        "cursor": {
          "ref": "f5dd84ed-f6fb-45f2-a2b5-101d1aebc84b",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2d58aa7f-7443-4887-86b3-7334d643bf2b"
        },
        "item": {
          "id": "d012a587-2a52-4915-8ac4-9b04e06b6971",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bc9cf1cc-e29f-4092-b2d1-a859101d85c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d845d3b1-f0c3-4c64-ad34-5357bf59bcfb",
        "cursor": {
          "ref": "dd204fbf-9e26-47e2-bad2-7feb496d9535",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d2c1a60b-8ee3-417e-8d43-44ccc2a64778"
        },
        "item": {
          "id": "d845d3b1-f0c3-4c64-ad34-5357bf59bcfb",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ff5cb854-ccb8-451e-99f7-e0b92dbcf674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca67a9f-4d2e-4fed-9f62-5d394d90cd94",
        "cursor": {
          "ref": "9006ac88-5a4c-49ba-b9b6-996e4ddbfff4",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5c5b7a30-56c1-4326-bcb7-1925019d4271"
        },
        "item": {
          "id": "1ca67a9f-4d2e-4fed-9f62-5d394d90cd94",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d1a82ec5-2b4b-4b62-8f02-89e941d5049c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2724165d-a029-4451-af7f-04aa99abb2ae",
        "cursor": {
          "ref": "25e9e29d-e212-47c9-a9f8-b1ad8a688e26",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5cdcaace-10ed-4f8c-9f65-1ec6932995d6"
        },
        "item": {
          "id": "2724165d-a029-4451-af7f-04aa99abb2ae",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "98d920ab-1dd7-41b5-859e-5aa905df7bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7261d5-930a-417e-8a2f-c175969e550d",
        "cursor": {
          "ref": "eed8a00e-cee7-4c87-83b9-b46d33cda382",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "27fe90c2-46ad-4988-97e3-88d5a394ab22"
        },
        "item": {
          "id": "ea7261d5-930a-417e-8a2f-c175969e550d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "28b2c513-99ac-4fc6-bd7e-bc193dfcebc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6560b88f-9e22-4740-aa23-9e382199c6b4",
        "cursor": {
          "ref": "786bd1b8-8190-4ada-9e6e-bbada373fd3c",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0617c167-6735-46f0-abb1-83b483af92e3"
        },
        "item": {
          "id": "6560b88f-9e22-4740-aa23-9e382199c6b4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ba171b93-1fd9-48c7-8ecd-1717a3be9dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "937093e8-f2a3-411a-92fa-94ed6949e932",
        "cursor": {
          "ref": "4c9153c1-d7a1-4061-b66a-45591eff320f",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "bad2b98e-68fe-4d7b-8dcc-6ef5713dffa7"
        },
        "item": {
          "id": "937093e8-f2a3-411a-92fa-94ed6949e932",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8ac59bd8-1502-4da7-9add-9f660b5a2a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b2cf87-76f3-47a0-9f0c-825a9479b173",
        "cursor": {
          "ref": "3c37bc10-e5b3-44e3-b249-a4da5823fc6b",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b96d0c35-af3c-4a98-8cea-d5feeab0c39a"
        },
        "item": {
          "id": "b0b2cf87-76f3-47a0-9f0c-825a9479b173",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e981c385-2385-411a-8017-40f324fd84f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f20ab6d-dca8-4d02-9ecd-53e5bae1bac3",
        "cursor": {
          "ref": "cf2a8647-85d3-457c-a991-a5e93dd03a74",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9bf50605-d625-4bdd-a0cb-84540a6fe5e5"
        },
        "item": {
          "id": "8f20ab6d-dca8-4d02-9ecd-53e5bae1bac3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5ed4342e-3c5f-4760-95d9-1ab9ec4f4078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e9b5890-2c63-41fd-8fe2-ce8386837af2",
        "cursor": {
          "ref": "ef9236f7-ec8b-44b4-9a65-83f4f8d8d1ba",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8d7f2501-6df5-4729-84e4-b4fd8b79a32b"
        },
        "item": {
          "id": "1e9b5890-2c63-41fd-8fe2-ce8386837af2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f40cb49b-1f8c-42f8-90cc-bdeba751863e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3652c4-3b04-4b65-a076-eab9148bc48d",
        "cursor": {
          "ref": "e705b966-ee7b-4956-b01f-c38ddecfd50e",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "cadd78d6-f0b3-4f74-8e9c-5788f5e956d3"
        },
        "item": {
          "id": "3c3652c4-3b04-4b65-a076-eab9148bc48d",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "dff83fe1-5437-4e44-9161-b831bd135b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a7f016-498a-4316-a471-0937c10b0952",
        "cursor": {
          "ref": "1f36084b-2d5d-40c6-8b6f-9ca084944121",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "08ea992c-e2df-414b-9273-2a4bd4d9ff94"
        },
        "item": {
          "id": "a6a7f016-498a-4316-a471-0937c10b0952",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "c0b964ee-a75c-402d-a05f-5393b0de3c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d989da62-1260-45f9-aa8b-70ab09ff2849",
        "cursor": {
          "ref": "ec1316fc-0efa-4dc7-9518-375091118750",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ef096b31-f469-4ce7-b748-df16649325c1"
        },
        "item": {
          "id": "d989da62-1260-45f9-aa8b-70ab09ff2849",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "71a5c4c0-1e19-4d4b-bbf8-6288568c88e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f066d048-a0d1-473f-b420-530ca06f881c",
        "cursor": {
          "ref": "d4c49ac5-de43-41bf-8137-b20ede57e3ba",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c57698c7-73a2-4fe0-a86b-71f966bac179"
        },
        "item": {
          "id": "f066d048-a0d1-473f-b420-530ca06f881c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7c6f6d86-38c7-4a91-bd12-1cf1baf84835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851e86a0-a6c2-481c-8620-771445038a5a",
        "cursor": {
          "ref": "36d15c49-9c9b-4c17-afef-b24e1c45adcc",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "dfb2a419-ea86-40cf-bba8-a9c8d453ece0"
        },
        "item": {
          "id": "851e86a0-a6c2-481c-8620-771445038a5a",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3dfe265f-44fe-4b52-ac43-4c6a4907879b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb20d78-95a2-471d-93a7-dda2b2aa8692",
        "cursor": {
          "ref": "d2f8fb6e-34aa-46c2-b64f-80a23a537703",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "419ba7f2-5a52-4336-ad46-7fa82e618175"
        },
        "item": {
          "id": "fcb20d78-95a2-471d-93a7-dda2b2aa8692",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "105d9100-9fbc-4ca0-a170-38ef546e0a7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b5f26a-05b7-4ea4-ba88-81ef40a031a3",
        "cursor": {
          "ref": "bce1d90c-8d72-4983-b149-3dc2f63115ef",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "413f1bfe-d96c-49d9-90aa-35e5e31d4a7a"
        },
        "item": {
          "id": "49b5f26a-05b7-4ea4-ba88-81ef40a031a3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "dadf9584-c20e-4578-afd3-df4b881b7361",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb4d019-e3ab-4974-9349-0e93536388cc",
        "cursor": {
          "ref": "727cc976-7aed-4e4b-bc2a-a1acd17fce53",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "dd8023e2-2874-4716-8b21-9e472ad9413a"
        },
        "item": {
          "id": "4cb4d019-e3ab-4974-9349-0e93536388cc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "12af318d-e30f-4a4a-9063-aec0c31d68f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58401ffd-91c5-41ef-af6d-be3d2440bdd7",
        "cursor": {
          "ref": "70b0b0c4-ba72-4055-beb4-a1aefb2cca27",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "92d711a6-3fcd-44f8-b77c-9270436cf2fc"
        },
        "item": {
          "id": "58401ffd-91c5-41ef-af6d-be3d2440bdd7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "da620e0b-4d1d-4da2-ae8d-3da6d82b95f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeff9cfa-55f4-4f43-b328-9bf578863460",
        "cursor": {
          "ref": "f1828418-3b04-405a-91db-6d5a0919f7ca",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a437d4d1-5dbe-4ade-bc6c-ae749b4f0b21"
        },
        "item": {
          "id": "eeff9cfa-55f4-4f43-b328-9bf578863460",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "7e00111b-6f49-4060-8069-4dfea3adb3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6641f710-35e6-4ddd-81bf-66ba6d09d310",
        "cursor": {
          "ref": "1b9582e4-403c-4024-bca5-126334defa28",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4ee40189-a06d-4d59-a801-1db75f77ac1a"
        },
        "item": {
          "id": "6641f710-35e6-4ddd-81bf-66ba6d09d310",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "cea4dd3d-1a04-4fa2-b7e3-19692c803405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6cdca2-0148-426a-969b-8ce068253e78",
        "cursor": {
          "ref": "9a52f025-523d-4d25-b9eb-d643f635e215",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6052ad6d-f6aa-40cd-abe2-bae61bb07e17"
        },
        "item": {
          "id": "ba6cdca2-0148-426a-969b-8ce068253e78",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d4e22716-db20-4314-a34f-fac43a372efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a88557-008f-42bf-a0e0-f7b6a31da6fe",
        "cursor": {
          "ref": "f0e5c526-1a93-4af8-9d6b-2bc4bd65cfa6",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "38d012e7-15dd-435a-a074-925683242591"
        },
        "item": {
          "id": "a8a88557-008f-42bf-a0e0-f7b6a31da6fe",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "47d8f73a-cea9-465d-b783-8f5ae82ae1ff",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "949dfe09-9680-4b43-8629-24741a0ce7f7",
        "cursor": {
          "ref": "88411387-6cd7-4da2-8548-93843c92ca83",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "10eb0cf6-6855-45f5-8acf-58f9c32c4da7"
        },
        "item": {
          "id": "949dfe09-9680-4b43-8629-24741a0ce7f7",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "896093b2-5e1f-4f37-aab9-1d9626bc9321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea940474-a75c-4e1a-9ab5-437d56718502",
        "cursor": {
          "ref": "819f7f37-f219-4c38-859e-78c8951ac6e1",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "405dae63-0b7c-4519-888e-165bc4fac0e5"
        },
        "item": {
          "id": "ea940474-a75c-4e1a-9ab5-437d56718502",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4de9e005-d978-431b-95b5-1661ce4fba33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "723d29d4-e9b6-4cee-8518-bc0a04e57e48",
        "cursor": {
          "ref": "92c6bbea-982a-4ef6-b05d-bb5398072c33",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f43214bb-8c86-440c-b165-a67b83327c65"
        },
        "item": {
          "id": "723d29d4-e9b6-4cee-8518-bc0a04e57e48",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e4020139-37cc-4ee0-87ac-75ee2692db11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee13a74-61bc-4a38-9e7b-929a0704190f",
        "cursor": {
          "ref": "97343604-5a1d-40eb-917e-05a712df30ed",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0be31aad-5f6a-40d3-86ed-7692cb7d656e"
        },
        "item": {
          "id": "6ee13a74-61bc-4a38-9e7b-929a0704190f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "14425f66-eb1e-4eba-95db-222d7889a76f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6285f3d0-15fa-43eb-8d56-2aef8d4b580f",
        "cursor": {
          "ref": "3ac7deb9-2d29-4f00-a80d-6c8a15ad22a2",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "90411124-7601-4518-8786-4e15d1e0b29a"
        },
        "item": {
          "id": "6285f3d0-15fa-43eb-8d56-2aef8d4b580f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6d54902f-3750-4465-b8a5-bb2e2f4c667e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfeb5975-aa43-4d6d-bfc1-846b6a688065",
        "cursor": {
          "ref": "d09d488b-707b-4170-8e8e-0e27d176284a",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "5699617e-a466-41dc-8cf7-ec230d130ed8"
        },
        "item": {
          "id": "dfeb5975-aa43-4d6d-bfc1-846b6a688065",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "399f670d-06e7-4a84-96aa-fa7b1f77da29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db263238-6d51-4ce3-baec-20a34ff1e144",
        "cursor": {
          "ref": "9e3e1f57-97e0-4be6-a888-37a852cf1158",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "cdb74875-20e9-4c48-8fe5-46c50af2b2ad"
        },
        "item": {
          "id": "db263238-6d51-4ce3-baec-20a34ff1e144",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9fad3f86-004f-4047-bd73-2f626f10bf64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fcba0d6-1640-40f0-be17-aae9f8b26036",
        "cursor": {
          "ref": "10f2f42b-d60f-49ae-83f2-2db050194c8e",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2423e791-e9ba-4f86-8008-6b2205109fed"
        },
        "item": {
          "id": "8fcba0d6-1640-40f0-be17-aae9f8b26036",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3f3bc6fa-3275-4b36-9027-246693f5d65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbaf3f4d-ac0b-4e82-b417-6da04aa9ea16",
        "cursor": {
          "ref": "d11b8d01-c837-4a3b-ae34-a4ca9930e91b",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a129ab99-a6d6-40c4-bcd6-62fd045a5f46"
        },
        "item": {
          "id": "bbaf3f4d-ac0b-4e82-b417-6da04aa9ea16",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0f2a2852-c1d3-48d3-99c7-db24a00e92bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1025ee5-bafc-42c5-8c70-03be298808ce",
        "cursor": {
          "ref": "e4468332-ad96-49fe-be2e-2027d5da67e0",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f2d2f054-2d78-47d6-acb1-067a4c14f4ce"
        },
        "item": {
          "id": "f1025ee5-bafc-42c5-8c70-03be298808ce",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0301201f-9099-4f84-a64f-5f06b48336b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c84d10a-ccd8-4fe3-ba09-9b9fdd655802",
        "cursor": {
          "ref": "49098ef1-8441-4189-bd80-8e1dc1ac8edf",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "737e8922-4ceb-4dc8-866c-4f61ba112eba"
        },
        "item": {
          "id": "1c84d10a-ccd8-4fe3-ba09-9b9fdd655802",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "31795d01-8b0c-49b3-be5e-78986b483e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a593fd58-51f2-4328-9b16-cf75d67a210b",
        "cursor": {
          "ref": "aa7ea806-2cbe-4d93-99b7-dd2a08fd19d6",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "457e1927-4948-40fb-8c0f-3c30e29fddf7"
        },
        "item": {
          "id": "a593fd58-51f2-4328-9b16-cf75d67a210b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ab281958-c5e0-4952-a63b-bdec8cacd1a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6431e43-6d37-4ca4-91d8-848e0cbc1c1f",
        "cursor": {
          "ref": "0db602f9-506b-41cf-831f-3f0261672fef",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d795ce74-660d-4ddf-b74b-0ea623c82be7"
        },
        "item": {
          "id": "f6431e43-6d37-4ca4-91d8-848e0cbc1c1f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c25d9e20-19c5-4944-8c28-e51d103037b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9170ebf5-4e78-410f-9db1-1cb0c27f43e5",
        "cursor": {
          "ref": "8a464d32-6e6d-4004-9a31-3c8532f211da",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "65281be1-80c1-4522-9908-3bee5a0879d7"
        },
        "item": {
          "id": "9170ebf5-4e78-410f-9db1-1cb0c27f43e5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9d35d74c-1b1e-4d69-8151-f5ab04541a65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c579b2-8f09-4e8a-982b-f2eb8a3333fe",
        "cursor": {
          "ref": "88f3f679-eda5-48d2-8fd3-b4050c5039cd",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "054bd794-5575-4363-99a7-245b8b1f6e02"
        },
        "item": {
          "id": "52c579b2-8f09-4e8a-982b-f2eb8a3333fe",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d4be6e44-5eac-4abe-a0d1-77cf92570fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b4dc6b-f380-4122-bbd8-0b4b5dd07a89",
        "cursor": {
          "ref": "0f40e06f-8a19-492b-bc35-cd75ed1da1df",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0cf3aedd-a798-4b23-b822-f025b338f691"
        },
        "item": {
          "id": "72b4dc6b-f380-4122-bbd8-0b4b5dd07a89",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "67e09fce-6cad-4950-b5c9-0c011c74f499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77e0332-39e3-4ead-954d-5d726cefb085",
        "cursor": {
          "ref": "629b1204-5196-4f28-b233-955914b75890",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "edb63751-6e71-46db-a758-7d95fdeabc1d"
        },
        "item": {
          "id": "e77e0332-39e3-4ead-954d-5d726cefb085",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5eac5d0d-7810-408b-af04-3a7640b4131c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e29dd1b-7b56-4c79-b59c-29d2adcf460b",
        "cursor": {
          "ref": "ec0228ac-942a-4d81-9305-618b917bc465",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f57977d2-8a76-4bf3-b07e-972a2f64405b"
        },
        "item": {
          "id": "2e29dd1b-7b56-4c79-b59c-29d2adcf460b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c14c59b4-d31a-44cf-84cf-b0afc4ad1389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ed370f-b973-4271-894c-bdf7ad69fe0a",
        "cursor": {
          "ref": "5df5da80-a0e4-4fb5-a136-c60cd2cf2fae",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "de57e508-c672-4d09-abdd-9a13d675addf"
        },
        "item": {
          "id": "d4ed370f-b973-4271-894c-bdf7ad69fe0a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5565a9f3-7cc5-402c-a617-80477dfc9e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103fd055-c3bf-416a-8a56-ca163ddebacc",
        "cursor": {
          "ref": "988cbd39-55cf-48ce-8bca-c3462c39be5f",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e5f18ebc-fa01-4aa1-bea3-66d54a3e0fd7"
        },
        "item": {
          "id": "103fd055-c3bf-416a-8a56-ca163ddebacc",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4a518a5b-757a-4dad-89d7-e514169bd128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f75fed44-939a-4e20-af2c-d1e7b1938f65",
        "cursor": {
          "ref": "f798ab8e-faeb-4705-a90b-d49dd5f296b0",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "237ce82c-6544-463b-bb4e-ad80cbbcef1b"
        },
        "item": {
          "id": "f75fed44-939a-4e20-af2c-d1e7b1938f65",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "68b680f3-7086-4e4a-ac71-96e8e12ceb1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "591eeb50-8e84-4113-a0ce-7d49457c0ce2",
        "cursor": {
          "ref": "68b1f04e-f965-4017-aebf-27f69a86010e",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2556bc6f-3e59-4d5b-9e18-febf71f4aaab"
        },
        "item": {
          "id": "591eeb50-8e84-4113-a0ce-7d49457c0ce2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4d7a70b5-3ae1-4b70-a18e-c9016f5bd0a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ee20e7-8a37-48b0-b36b-a9471c9f13d2",
        "cursor": {
          "ref": "f85b1e35-cd46-4450-83d0-ea70194d554f",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3e697766-b0cb-485d-bb68-c446457f699b"
        },
        "item": {
          "id": "93ee20e7-8a37-48b0-b36b-a9471c9f13d2",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "aa6faf07-b8e8-4bc4-b19e-e01fb8cc30cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8364b05f-c80f-4799-a21f-80f87add358a",
        "cursor": {
          "ref": "9f323be7-634d-4a4f-8a07-8785dfd9eae5",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e18c3b2e-6c47-447e-ba4d-f1405e013055"
        },
        "item": {
          "id": "8364b05f-c80f-4799-a21f-80f87add358a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a5ef9216-8d2b-41e2-bc64-58144936d223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f577df2-8b97-4e2d-99e5-b41fa22beca1",
        "cursor": {
          "ref": "e9d1c615-21a6-4a5f-a036-a514e627e765",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e0cfa971-6aa7-4b59-8b0a-04632ba40729"
        },
        "item": {
          "id": "1f577df2-8b97-4e2d-99e5-b41fa22beca1",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "293032c0-e933-4048-bb08-3dde82dd3ce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8cb2e36-ce11-425c-aeda-46588f25f8ed",
        "cursor": {
          "ref": "05fbab32-5b3f-4b64-beb6-af196b94c507",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "421c043b-6feb-4206-8dc7-8ec37c34b332"
        },
        "item": {
          "id": "f8cb2e36-ce11-425c-aeda-46588f25f8ed",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "03238b58-7716-4af6-bc83-e16d320c41a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f45cbd-7b14-4d19-a669-a37cf1fb54e8",
        "cursor": {
          "ref": "c7ca3ab3-12ad-4bc9-b555-7b2c491b4b53",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a0b9bf31-491c-499a-8d6c-2e22373a6efc"
        },
        "item": {
          "id": "b3f45cbd-7b14-4d19-a669-a37cf1fb54e8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "307a3f33-2e6b-4b38-bad4-f4cd3b495fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06a0c57-da86-4697-a735-2c601ec83593",
        "cursor": {
          "ref": "0e0858c7-6b14-4159-922b-046816ddd435",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c7cea5a3-d91b-43d3-8e76-479c8165b232"
        },
        "item": {
          "id": "d06a0c57-da86-4697-a735-2c601ec83593",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4d927a51-535e-4537-9c33-3bba834892b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc285e4-66d8-467c-9c23-b61375995544",
        "cursor": {
          "ref": "39462d3d-fe16-48ed-92bf-a01cb6f5df5c",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "37b288c1-29f0-4698-8b24-d936ed64f751"
        },
        "item": {
          "id": "8fc285e4-66d8-467c-9c23-b61375995544",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b6273fa4-6fc7-41f4-9959-96cb8f5c625c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a7e7c5-4eec-43f2-8e6d-abe06bfa164e",
        "cursor": {
          "ref": "bb8239c0-418c-474d-b01f-ab2ba4f1f21c",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "af18387e-abfd-4490-8212-c479274ce0e3"
        },
        "item": {
          "id": "e8a7e7c5-4eec-43f2-8e6d-abe06bfa164e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c06cb46d-6da0-464f-9d96-04a339382ffe",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "b35c66b6-1eeb-4797-80c7-fcbfad1c0645",
        "cursor": {
          "ref": "9fee2d4b-10b4-426c-bb72-d4987d04aad3",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0767e0b9-a209-4178-8df7-ec1aba9f350c"
        },
        "item": {
          "id": "b35c66b6-1eeb-4797-80c7-fcbfad1c0645",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7c40d941-baf8-4e8f-900f-3d9b24488a4c",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "e152f291-0b86-43ca-b426-524783134ce1",
        "cursor": {
          "ref": "ba4cc94b-4f23-435b-aab3-a2ccd0495af9",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d0041dc7-27a2-4bba-bf04-63ced4503d6f"
        },
        "item": {
          "id": "e152f291-0b86-43ca-b426-524783134ce1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0f818aa4-ba53-4048-b1f0-8e757a5bad27",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "ed74a597-c8d7-4dc9-8ef0-9a76531ecfae",
        "cursor": {
          "ref": "fe82234e-7486-4171-b03a-3eb4a018d1c6",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "250a81a1-ab1c-4205-aa36-7fb8dbb64b19"
        },
        "item": {
          "id": "ed74a597-c8d7-4dc9-8ef0-9a76531ecfae",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "9421c330-7a53-472f-b309-06e35e1b69bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "465f47c6-65e4-414b-a2aa-31acaaa680f4",
        "cursor": {
          "ref": "2c4f268f-3582-4a93-9808-a499406dd2d9",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1759fdb5-ceaf-461c-b07d-2bd8e462d295"
        },
        "item": {
          "id": "465f47c6-65e4-414b-a2aa-31acaaa680f4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1ac28019-ec9a-488a-b56c-9180c4e33e00",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "d6b6089d-5900-43d9-b2c1-7affc39314f4",
        "cursor": {
          "ref": "08e7e648-3e21-4304-95a1-9f602834d42e",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "617a43c0-ab55-4634-9560-ab9bec436a23"
        },
        "item": {
          "id": "d6b6089d-5900-43d9-b2c1-7affc39314f4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1a06f283-9935-46e1-9dad-ca549e924026",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "e37c97f9-8fc9-43c6-80d9-d0a8e9afeb97",
        "cursor": {
          "ref": "384e61a0-3a12-4707-b311-b8f278cc3a17",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "894508a1-d7ea-4767-b366-e02d943ea6a1"
        },
        "item": {
          "id": "e37c97f9-8fc9-43c6-80d9-d0a8e9afeb97",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "15d0380e-08e4-4606-a332-f754d33c8cb7",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "cfea2110-d204-4050-ad8e-dda15f4bc954",
        "cursor": {
          "ref": "7d735c8a-fa4f-4d58-bc99-56e63106645d",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "336e5802-17e0-4298-b50f-db860f1aa375"
        },
        "item": {
          "id": "cfea2110-d204-4050-ad8e-dda15f4bc954",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b5eb2ed5-8965-4b33-b9d2-df8e8d9b38da",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "5960d1e0-1363-4d15-981c-04ff0b9206db",
        "cursor": {
          "ref": "3f7f9f45-941e-48a4-86d0-5f01d34ac9a2",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8d38976b-e81d-4197-a8e3-963572aa314a"
        },
        "item": {
          "id": "5960d1e0-1363-4d15-981c-04ff0b9206db",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1ac1e61a-3547-4f13-a844-6a74d7b3c2a2",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "79080623-8b77-40b2-9a6b-b10aecb2aee7",
        "cursor": {
          "ref": "679f1499-c6aa-4835-b09a-4a7653f0e9d4",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9d166720-cd1f-4890-b0f1-85d66df18f89"
        },
        "item": {
          "id": "79080623-8b77-40b2-9a6b-b10aecb2aee7",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fd1d92c4-e94c-44a9-acb3-7a6199ac13e0",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "b0911cfd-332a-457e-9167-705b79c4ddc0",
        "cursor": {
          "ref": "4ab9e5b9-dee0-4cd5-9b77-8778f3c24fd7",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2c65d8bc-ba4b-4bb9-bde5-2f0613e69817"
        },
        "item": {
          "id": "b0911cfd-332a-457e-9167-705b79c4ddc0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2d206327-cefa-4144-b07b-29d19c45abb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04092085-0065-4092-8fbb-1ad18b9a2028",
        "cursor": {
          "ref": "1889fb1d-b58d-499e-bcc6-237a20c85dbc",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e52f1e03-6ee8-4a24-9c18-4b2993a2b972"
        },
        "item": {
          "id": "04092085-0065-4092-8fbb-1ad18b9a2028",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6b82e63f-ccf8-4173-908a-be76b9abd69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7822539-54ed-4dcf-9ad4-57ee8704227f",
        "cursor": {
          "ref": "69399edf-8cdd-46a2-afd6-31c014438d0e",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f02a05fe-72cb-46d7-8791-e50a545a292f"
        },
        "item": {
          "id": "f7822539-54ed-4dcf-9ad4-57ee8704227f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c0086393-98e5-4e5b-8ddd-fe1dfa855611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e706c2-37c8-4cb2-8322-86f984457229",
        "cursor": {
          "ref": "3a827c14-8649-4018-b4dd-daa5473648cd",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "99b8e7fc-b411-4a63-bd6e-de95d40357c8"
        },
        "item": {
          "id": "67e706c2-37c8-4cb2-8322-86f984457229",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d7ed2e1c-8409-49f7-a8ad-be7a963e887b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2cf05f0-f022-4cef-b61c-f8cb26008a20",
        "cursor": {
          "ref": "14360f76-1a47-40cd-8c67-4cd46c919b67",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3af3c511-7e28-4599-82b5-ebdfd8c9656b"
        },
        "item": {
          "id": "f2cf05f0-f022-4cef-b61c-f8cb26008a20",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8557c273-6a6c-4a9c-ab57-73070a2cd17d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1213a766-5a92-4806-9961-f8ee885d7edb",
        "cursor": {
          "ref": "9fa00cc8-d52f-4cf4-b4e0-1cc87df52253",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1628790d-bad4-4c2e-ba0d-a36ca66d8d60"
        },
        "item": {
          "id": "1213a766-5a92-4806-9961-f8ee885d7edb",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "44952b7f-137f-43f9-9442-6033eef7155a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ead3bae-8e3d-4297-a8c2-7fcd1bda1695",
        "cursor": {
          "ref": "2212a98c-7f51-499b-8983-e22a75c2103f",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ed8dba36-4a5a-45e8-b4dd-3ca47462de99"
        },
        "item": {
          "id": "5ead3bae-8e3d-4297-a8c2-7fcd1bda1695",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9d5f8aad-1196-434e-bd51-9da8d4bde8cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b335c55f-91b3-45a0-b7f4-271ca68242b1",
        "cursor": {
          "ref": "b56002e0-5630-43f1-9283-a754e2730a1b",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8e3b61a0-1458-49ea-97f2-1cb56f22881f"
        },
        "item": {
          "id": "b335c55f-91b3-45a0-b7f4-271ca68242b1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a78242f9-d291-4762-82dc-71ae7fdec003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb36a61-6f30-444a-9391-7306b4a3f8fd",
        "cursor": {
          "ref": "5203cb9d-a520-416e-a08f-51bb7e170b78",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6cc72607-81b1-417c-81a3-ff8bf1b7b229"
        },
        "item": {
          "id": "afb36a61-6f30-444a-9391-7306b4a3f8fd",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ddc78d3f-7079-4082-8f75-6626b5c872a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac48373-c1e8-4c96-9319-144b95f1bb6f",
        "cursor": {
          "ref": "3d3157fc-c926-45ce-9976-4e59db2622bd",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "354ff7f5-689d-4ece-837a-750cf14734e7"
        },
        "item": {
          "id": "5ac48373-c1e8-4c96-9319-144b95f1bb6f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0c4b2f5e-70a0-452c-a9f2-6b5399fe8e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d55b40a1-e580-492e-8153-d8bff4547ef1",
        "cursor": {
          "ref": "39b21f07-d740-4999-8c3b-13bcfb9bc5c7",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1ad10d87-a793-40c3-b6d4-109134098cf1"
        },
        "item": {
          "id": "d55b40a1-e580-492e-8153-d8bff4547ef1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "cf3c60cc-66d3-4056-a4c0-1b78c59f4f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0fd83e9-3ccf-41e7-b61b-1d59a114a597",
        "cursor": {
          "ref": "15b7a088-5b1d-4421-b13d-c24c27d9ec1b",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4adb19bd-341e-46a9-8571-9439e1ed6094"
        },
        "item": {
          "id": "b0fd83e9-3ccf-41e7-b61b-1d59a114a597",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f7ae68c0-d5e7-4074-955e-be96aa4e33f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a655bc1d-a286-48ab-9231-3f925f263630",
        "cursor": {
          "ref": "e6f33b41-2f4c-4abe-a3b6-12a49a7d6f76",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e561e5ff-321a-4e9b-b8ff-bbf6b2326416"
        },
        "item": {
          "id": "a655bc1d-a286-48ab-9231-3f925f263630",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e5aa529e-a6c6-4607-bbe5-135edf8969c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902dc1bf-a966-4f9e-952c-af1539c24281",
        "cursor": {
          "ref": "3e84c323-2d98-4f6f-be2c-7c8ea1cf113a",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3199b88e-58e1-46eb-a40d-f954484bd0a5"
        },
        "item": {
          "id": "902dc1bf-a966-4f9e-952c-af1539c24281",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3dd862c5-153e-4956-afca-bbcb994b3acf",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "24843729-96b4-4666-aef3-702de66cca2c",
        "cursor": {
          "ref": "6b604c72-2e9c-4ff1-be5b-c3aee4f4b3b6",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "04e0a9c3-ba3e-460e-b990-300685069420"
        },
        "item": {
          "id": "24843729-96b4-4666-aef3-702de66cca2c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "79f0ef48-ca5c-4050-8987-acb43489303e",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "7b759cc3-eddb-41ba-a6bb-85f126c9f21a",
        "cursor": {
          "ref": "d62c4cc6-1d20-4724-9e54-7e77fa134223",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6b5c3144-01fe-4cce-9510-ae7a3f15f96e"
        },
        "item": {
          "id": "7b759cc3-eddb-41ba-a6bb-85f126c9f21a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "52eac7a2-5f16-46a9-bf96-d8610835e8d4",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "34603499-da01-415d-b240-a211af358859",
        "cursor": {
          "ref": "ee72434f-625d-4f4f-b363-e68a7b139cdd",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "574d33ef-419b-4ff5-904b-c06b7b00bd29"
        },
        "item": {
          "id": "34603499-da01-415d-b240-a211af358859",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f12d7c09-7f63-4db2-aaf2-9ee274b215b9",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "f297547c-dbf0-4fb7-9a64-3f6a39fa70e7",
        "cursor": {
          "ref": "5a5b2187-be35-47df-af1b-dcc342b3ad9c",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "10e8ef9b-3988-40f6-97cf-bf2983a6fce1"
        },
        "item": {
          "id": "f297547c-dbf0-4fb7-9a64-3f6a39fa70e7",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c49c956c-a889-4063-ba61-26c874ef9354",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "58514fb3-7693-41ae-962a-4770dc9f1f24",
        "cursor": {
          "ref": "63b86b7a-1210-4a2a-ab10-f5004e019a76",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8c909e6f-c4f0-4ad8-9fe5-db234e24ca65"
        },
        "item": {
          "id": "58514fb3-7693-41ae-962a-4770dc9f1f24",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7d8c9a16-4c77-4b35-91b5-30e8c9d0c4c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b35888be-af47-40e4-92e7-fb2d27ab4613",
        "cursor": {
          "ref": "e651525e-1d9a-407e-b74f-716ac04fd3d4",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9f5e409a-5822-4952-8a7e-068e2bf25095"
        },
        "item": {
          "id": "b35888be-af47-40e4-92e7-fb2d27ab4613",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "00a94082-b939-4907-a6dd-25c3a8876bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be802a9b-15a2-44ad-87c9-188aa5f07376",
        "cursor": {
          "ref": "c1b77d9e-7b3d-4f7a-9d2a-454be56c3172",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6f3cc01e-f698-4806-bacb-d87051720343"
        },
        "item": {
          "id": "be802a9b-15a2-44ad-87c9-188aa5f07376",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a62328d9-4de0-44ec-9bae-ad228af4cdbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7271d5-0a51-48af-bf11-5134da45ebd1",
        "cursor": {
          "ref": "e5ffcb85-fb0b-4110-a041-e6f5dc6d8483",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6268d2eb-ec09-44fe-93ba-51290fd0c3de"
        },
        "item": {
          "id": "1a7271d5-0a51-48af-bf11-5134da45ebd1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e9a1f0fd-33de-4ca4-867b-d17f214cb580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0549b30c-a5a7-4def-b1d8-b52c6220dd06",
        "cursor": {
          "ref": "adf6481e-3e27-4691-bd60-35d4fa7a4fe0",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6bb4357d-fab2-4932-b3c5-4d51eff69b87"
        },
        "item": {
          "id": "0549b30c-a5a7-4def-b1d8-b52c6220dd06",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "592af889-4ddb-45e5-8a68-065ec7111f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2c8a97-abc4-4444-9026-2c9870246a95",
        "cursor": {
          "ref": "f021464c-86d4-44c3-a266-ec1200f9aa9c",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e22c8566-e85b-4c01-88df-7d40927e6922"
        },
        "item": {
          "id": "da2c8a97-abc4-4444-9026-2c9870246a95",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e41f051c-9c2d-4762-a2ab-6a4c351e3bdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6ee0ec-0a38-4a8f-8f13-1e13aa3ddc9e",
        "cursor": {
          "ref": "5d975cc2-18dd-4c13-a2a9-c737872ff1a3",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "16f04f67-2d08-4045-ab38-598b0e0e9114"
        },
        "item": {
          "id": "6b6ee0ec-0a38-4a8f-8f13-1e13aa3ddc9e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "95a141f8-0302-4df4-b238-ed0141318e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2655af87-a151-4e71-8238-ad45d239400a",
        "cursor": {
          "ref": "a72d9ba4-32a8-4341-9806-ccc63b3746f4",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "380d217f-f9b1-42d9-b02d-916ff6a9ce48"
        },
        "item": {
          "id": "2655af87-a151-4e71-8238-ad45d239400a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "dc14b1f3-0f2e-45e5-8dde-5a7ea39194cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcfed01d-21e3-40fd-ace3-1a1a7714098f",
        "cursor": {
          "ref": "483764b8-9db6-4b78-b115-93a8652f4d06",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3ff4e000-b479-478d-8884-5e80ed0fd0ee"
        },
        "item": {
          "id": "fcfed01d-21e3-40fd-ace3-1a1a7714098f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "86cbb591-f277-4ab6-9d15-fc0f6978da58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3199a1-2446-4eb4-926a-e8af0b783230",
        "cursor": {
          "ref": "8fd1b0d6-09a5-4a45-85e7-39caed68f215",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ff431906-aff1-4cf1-ab28-4e78f51af498"
        },
        "item": {
          "id": "3a3199a1-2446-4eb4-926a-e8af0b783230",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6bcc029c-b6b7-42ca-8315-3adfb6e4a4b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04623fb7-0d58-4eb0-8ae1-b9c69543b5f1",
        "cursor": {
          "ref": "500404e1-5ef3-47c3-9d06-c6f05baa4dbc",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f89fb6bd-7809-49e4-ab52-7baa9cb5acda"
        },
        "item": {
          "id": "04623fb7-0d58-4eb0-8ae1-b9c69543b5f1",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "229885ba-0206-42ba-aaca-b1ab12c4c7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab91e97e-3dd3-4e7e-8a68-ee6e62f60a7b",
        "cursor": {
          "ref": "3360e058-0911-4f2d-a739-c5380221a038",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "05667a3f-5695-4a15-9f20-9d7682b35e3d"
        },
        "item": {
          "id": "ab91e97e-3dd3-4e7e-8a68-ee6e62f60a7b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c1808469-33fc-49a1-adc4-791092a2ff1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae94a5e5-c59d-4205-b60c-2bc316f66f0e",
        "cursor": {
          "ref": "48adc034-8c9e-4096-a320-3de15decc3b8",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a09fc51b-bd2c-4863-9034-e2e8bdbd4825"
        },
        "item": {
          "id": "ae94a5e5-c59d-4205-b60c-2bc316f66f0e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "aa6d7171-1383-4fa6-aa2d-6f3010d2381b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "172f0edc-c9fd-448a-a508-37ca1a7c5af9",
        "cursor": {
          "ref": "6b1d21d6-c3a0-4cf3-8ed9-40c0f81adcf0",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2ec507d6-ba7d-4c93-9d78-50147861e27a"
        },
        "item": {
          "id": "172f0edc-c9fd-448a-a508-37ca1a7c5af9",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "8983054b-db24-4197-bad6-89aed5e2a10e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f03fa27e-f9f2-4025-a9af-ca043e960653",
        "cursor": {
          "ref": "efe141de-094a-4264-83a4-9784d094c98a",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "61523e0f-1fbc-4b7b-b616-6eeb20def18b"
        },
        "item": {
          "id": "f03fa27e-f9f2-4025-a9af-ca043e960653",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5346a4da-81e0-46c6-b25a-3614f0c19432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89486b9-3ea1-41c9-b146-5e615794b3da",
        "cursor": {
          "ref": "3c07b47a-df6e-4312-abad-5c224d27e668",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6d6616eb-8c8c-4500-b167-164a1d6eb2ac"
        },
        "item": {
          "id": "b89486b9-3ea1-41c9-b146-5e615794b3da",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "018873f5-7622-48ec-9fa5-247d951e4599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad746bd5-7a17-4ded-b565-39f46790ad70",
        "cursor": {
          "ref": "c688edf1-c280-4847-a4b8-a39b0e5d5792",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "877e8d74-15b1-4644-a187-e29b313c367d"
        },
        "item": {
          "id": "ad746bd5-7a17-4ded-b565-39f46790ad70",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5a7a6a9e-0cd2-4224-ae7b-aaec8866de3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922a33c1-ef4b-4410-ad3f-9c1f5d226212",
        "cursor": {
          "ref": "a90f214c-5702-40c2-a1aa-2c3a7ad57b21",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "803b4a49-2fa1-4685-b51b-e175b53fb7e2"
        },
        "item": {
          "id": "922a33c1-ef4b-4410-ad3f-9c1f5d226212",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "86ad5e90-271a-453f-b869-8685c91f58d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac9f67a7-5d75-4ef3-b49d-5e3315117a28",
        "cursor": {
          "ref": "4aad85fb-5b67-407f-8f93-16d2bb6a9fc7",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "431cc39a-87a7-4f35-9645-7af0da97f0d4"
        },
        "item": {
          "id": "ac9f67a7-5d75-4ef3-b49d-5e3315117a28",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1d2dcd98-da91-4193-9b10-062f83c16df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8fab7a3-3129-4081-871f-c56269044248",
        "cursor": {
          "ref": "5ceeafa8-5979-41ac-875c-335b101d5778",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "cb0ff201-91b1-4e7f-a284-0409aa7ae446"
        },
        "item": {
          "id": "c8fab7a3-3129-4081-871f-c56269044248",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "fa1064d8-3184-4cb4-9230-cce8f818e13f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "400e2113-9889-4690-97d6-0aa71a81b29d",
        "cursor": {
          "ref": "06687e1c-4647-45c0-9145-91194f89ae8f",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "aeb1a8de-da9f-4938-9313-9e51cdc74031"
        },
        "item": {
          "id": "400e2113-9889-4690-97d6-0aa71a81b29d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "fa129fde-33ef-4dca-be2b-b930a4740294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48dc2473-08e0-4b6e-8c52-7196d62506ee",
        "cursor": {
          "ref": "3379e5b6-2b51-423b-b477-8a6c6b0c6433",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3be920ba-ebf3-4f20-bb24-53e8fb7f5b91"
        },
        "item": {
          "id": "48dc2473-08e0-4b6e-8c52-7196d62506ee",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4eb8902d-fd8a-450e-a9d0-de66c8845978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae19731c-605f-4ae7-b44f-0fe8c0f994c6",
        "cursor": {
          "ref": "bfd830f4-4a01-4e0d-a699-ac45575c7c94",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8f0bc422-3feb-4118-a85f-292de63057b1"
        },
        "item": {
          "id": "ae19731c-605f-4ae7-b44f-0fe8c0f994c6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "23e10fe7-d5fb-46f4-aaee-26cea1c87577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9db1a9f-1bb5-4bac-b4d8-e50c22fa6ef9",
        "cursor": {
          "ref": "4f10da6a-f0ab-4ae3-b88e-0996390c0883",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a99193aa-262a-4094-a6c8-8eb70faf5cf4"
        },
        "item": {
          "id": "d9db1a9f-1bb5-4bac-b4d8-e50c22fa6ef9",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8430be18-b230-461a-967a-08c13ef9b0dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac78ffe-cf70-4aa9-aa1f-6d2095880c26",
        "cursor": {
          "ref": "f49b012b-d3a9-4859-a7ee-95bbaa050756",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7c76eba7-7879-459a-96df-11561631c8ca"
        },
        "item": {
          "id": "eac78ffe-cf70-4aa9-aa1f-6d2095880c26",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d1f516fa-6d77-451d-85d9-eab9ec008dd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3f3cb8-b7c5-4122-a19d-a8035ba7150a",
        "cursor": {
          "ref": "d1cb1c43-15a6-434c-8140-ecc32092c05c",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "fcdcb927-17ee-48a0-a6a0-c8b9d8c8d6c0"
        },
        "item": {
          "id": "1c3f3cb8-b7c5-4122-a19d-a8035ba7150a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3377ce12-ce32-47a2-b4e5-74291c4ff369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9bb2666-8ca1-4bdd-82b8-fbcdf270d6f3",
        "cursor": {
          "ref": "d938df5d-e1f2-4288-9afb-24c06abe704e",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "be88a54a-bbb3-45d3-b1f1-4201c016ff48"
        },
        "item": {
          "id": "a9bb2666-8ca1-4bdd-82b8-fbcdf270d6f3",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "039dc936-926a-48ec-89b8-9dba25f2356b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a5e182-441c-4af5-ade4-f0a76bab4838",
        "cursor": {
          "ref": "f254404f-03fb-4a27-9e89-3195169ffb55",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "552e749e-a631-489a-9e5b-76e587c1d3d7"
        },
        "item": {
          "id": "81a5e182-441c-4af5-ade4-f0a76bab4838",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8e4d67c2-f456-45e9-942e-dfadb9e68aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16cff304-3669-4e5e-a3de-f926560cdcd5",
        "cursor": {
          "ref": "5a016be3-de05-4d7d-a450-fbe5bc40f0ce",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5e8b80eb-6af7-4cf4-a87a-169fbcf313d0"
        },
        "item": {
          "id": "16cff304-3669-4e5e-a3de-f926560cdcd5",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "54dde059-5594-40ba-b88b-2b61a5f359ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0e45c0-c3b1-4d6c-9120-13bb25690d24",
        "cursor": {
          "ref": "f90cb0b2-3d15-4ad2-afad-30d2d43672a7",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5cbda317-ad63-4b85-b36c-e9018d24e713"
        },
        "item": {
          "id": "6d0e45c0-c3b1-4d6c-9120-13bb25690d24",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "08ee6862-ce78-42a8-b1e8-6be497dbae74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f67199-93b0-4d08-a6ab-197872357ed3",
        "cursor": {
          "ref": "ce49c5fd-b1a1-45fb-a829-9d1933c30a45",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "76d2cf6c-e3c5-4952-88a8-3e94772217bd"
        },
        "item": {
          "id": "39f67199-93b0-4d08-a6ab-197872357ed3",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b4c409c3-0c41-49c3-8478-db7f4adbddcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c32f873f-d9db-4cc0-9714-2eee98595b95",
        "cursor": {
          "ref": "851a176f-35f8-46d1-aab8-92a56a30680b",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0964104f-8b7b-4d02-9087-94739d094ac5"
        },
        "item": {
          "id": "c32f873f-d9db-4cc0-9714-2eee98595b95",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "09b1e427-faab-4b35-a2b8-970b2e67c74a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5dbffe1-0d0d-4f2b-aca5-5c835f7091b6",
        "cursor": {
          "ref": "26ab5319-933a-475e-995a-cf13ab10ea0c",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9119cbfe-34b0-444b-9434-ce5dc27cf43a"
        },
        "item": {
          "id": "c5dbffe1-0d0d-4f2b-aca5-5c835f7091b6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9b059b03-af8c-4874-89a6-70f087f084fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d3dfad3-7b70-4bed-b668-c7cd37c9d891",
        "cursor": {
          "ref": "46de9d60-ecc3-47eb-a179-71c03b4db0ad",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f8ad095d-5dc5-4726-900e-d38614c15595"
        },
        "item": {
          "id": "1d3dfad3-7b70-4bed-b668-c7cd37c9d891",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f7864bd1-a597-4bbd-bf6e-ef1b87ef0ee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2d869f-79ef-44c1-8461-97c521e7f458",
        "cursor": {
          "ref": "5f288800-7c63-4f6c-9414-bc10edee6258",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "61e2b5d2-3b61-42bc-a6d9-9731a50d4e48"
        },
        "item": {
          "id": "8a2d869f-79ef-44c1-8461-97c521e7f458",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "058c3189-9fe2-4347-b438-57c2a9773e2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d113be-19e8-4138-bb5e-8e83c224df01",
        "cursor": {
          "ref": "f910b1b6-175c-499a-a851-704901f6a125",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9034a060-040a-4227-acf9-ab9dd1d0543b"
        },
        "item": {
          "id": "f1d113be-19e8-4138-bb5e-8e83c224df01",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e5c13fc2-c65d-4ab9-92a5-885d1f052764",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "2ef10ec0-8710-4816-a956-7c037095fcc5",
        "cursor": {
          "ref": "51124f6a-8adc-4679-8143-eca3bc8d303b",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7eaa2cae-8d79-4054-be18-64b224cb8de7"
        },
        "item": {
          "id": "2ef10ec0-8710-4816-a956-7c037095fcc5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "464cd66c-f834-41bf-af2d-20f239d68238",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4bb91cc-dc88-4385-94d1-5dec9c085ce7",
        "cursor": {
          "ref": "edd3d7c7-e0e6-4099-a932-4e0f84f46000",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9365038a-2867-4b99-ae03-1fe95c65008a"
        },
        "item": {
          "id": "c4bb91cc-dc88-4385-94d1-5dec9c085ce7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b2c8c523-34d7-42df-8872-50a3d06114a6",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f4b94d-3ddf-46c5-8a03-549cbb950d48",
        "cursor": {
          "ref": "888984ce-14b2-4c0f-8d70-90a2615b1fe2",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "803cbaae-341d-4a90-ba1c-860cf753699e"
        },
        "item": {
          "id": "98f4b94d-3ddf-46c5-8a03-549cbb950d48",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "05a424a5-3b07-43f6-ba29-58d58948cb3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f4b94d-3ddf-46c5-8a03-549cbb950d48",
        "cursor": {
          "ref": "888984ce-14b2-4c0f-8d70-90a2615b1fe2",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "803cbaae-341d-4a90-ba1c-860cf753699e"
        },
        "item": {
          "id": "98f4b94d-3ddf-46c5-8a03-549cbb950d48",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "05a424a5-3b07-43f6-ba29-58d58948cb3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4f4ed5-b3bf-4bf9-8282-c1d1fcfa5d2c",
        "cursor": {
          "ref": "d8f4fc56-ad0c-456b-888c-585b29b8b245",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e654142c-2a28-4427-950d-0b6b67363813"
        },
        "item": {
          "id": "cb4f4ed5-b3bf-4bf9-8282-c1d1fcfa5d2c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c90d7e53-9ebd-4db7-8614-110f0204db13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5311d0f-f8c3-46dc-a58c-4cfed8f84828",
        "cursor": {
          "ref": "cd633d3f-06dd-4e3f-b394-52ed13e2a55b",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1ce94c43-61b2-4e3c-9801-33fd9384d0d4"
        },
        "item": {
          "id": "e5311d0f-f8c3-46dc-a58c-4cfed8f84828",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2f2fa62e-0f18-446a-863b-4149f99ae8f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}