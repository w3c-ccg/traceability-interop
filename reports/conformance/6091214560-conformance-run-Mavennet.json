{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "dc8df68f-fd26-44bb-a6e8-731fb8224c27",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9eed3175-f224-47da-993f-1e94c102dcde",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7005adf8-b784-4524-b076-9e5bb50c714a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "54793ec9-fc40-46a1-be63-c8c6fa7ff9e2"
                }
              }
            ]
          },
          {
            "id": "d130946c-dce6-4483-a4ec-670b9b72a059",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ea0ad46e-c3c6-4a59-a15e-fad0daf4176a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8e015bc0-179d-45c5-aa10-05ab0f47cbc6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cc876fa4-590d-4473-8034-f4de8beaa6c0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "34f59176-66cd-436a-9e21-c0b2161fcf6d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "afc416fb-2c05-4b46-985f-1d465f8cebb6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "844b62d8-f9cf-4880-99ef-81f1f1a655ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f3399e82-17b5-467a-8d92-2fa7a6ca5ea0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9009c4af-58c6-489b-b756-86b5d6a4464f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1ed2851c-ac97-458c-9255-93be0394be25"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8675cfbe-cd0e-4de0-b109-260ddeef73e7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ca368d50-9d9b-40a0-af0e-2cf5c22ba6fa"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c7fb240d-7163-4806-9e9f-5092cc59d9c7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e96e840f-306a-4c99-9ae4-5e62ca4020d7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f869f3f7-a50c-40b5-add3-b37ad8bf9b3e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5b9e7f40-9894-4561-848c-befda8567345"
            }
          }
        ]
      },
      {
        "id": "81d5f4d9-64f9-4b76-b7f3-204cf71ca166",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5feec3fc-dddf-4ec2-b3f9-f52d7ff925f2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10e90d33-4601-45de-a865-bca41482a791",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6f9653da-7254-4fd8-96b9-61eedc230aca",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8e087a-8455-402d-bee8-6729014886c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "156f1750-fa87-4e74-a773-423e61549ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd36fef-c762-4897-96b9-7f9329cf9863",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43cf07db-ae44-44aa-b203-8b9df6cf4720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd934c6b-faf1-43b9-9be5-7a4c8b4d6eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5fd0ed-97b4-44cb-9be3-fa3cc926a086",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d9cac7-0a2d-484b-8846-15afb865e41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5bfe734f-3a40-4f65-bd16-34830b4ebb7c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ce3bbccd-11cd-4614-8f56-a27ee7570e92",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a6f8134a-18c9-4d52-b8d0-9f43b2cbd082",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7eef36-fecd-47ea-87ce-a8c64e7289ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9fe9f68-ffc4-4a22-84c4-aac966af00a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e4fafb-f8eb-4494-bde4-e0ab76a8c07b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91d118b8-6f7d-45f5-8509-a0c821bc3c01"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cabb25c7-0665-434b-9711-dba927f6bd45",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a10781bb-424a-45c5-8d1f-e90ed6422938",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "584b1f10-9ccc-494d-8b77-03b8047d82ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6860cec3-f736-4185-91e3-df389561a486"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "63969a46-a92d-4011-ac20-e1429650a343",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "c45f8b48-3ff4-4ec8-83c8-6a3d2f2023b7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9967de03-ce62-42c7-814c-a8e789e16656",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a2a86a9-066b-42b5-952e-40259b86cb52"
            }
          }
        ]
      },
      {
        "id": "f733c018-e580-4d87-9ca1-08990ab4c7a6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e9419281-d14e-4aa4-b4b5-8b386a0e66a5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "594b8e9e-e923-49ad-9d4f-1e741dee424e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ad326cd4-4388-417e-815b-3cb06b3ef679",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4690cf7a-1974-4567-a3a9-01c882373f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aff9d1b-4f79-41de-bda4-989bdd5b20fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8af00a1-4934-42c7-a1d5-820dd611f2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90bd4dd8-1d22-4e09-93e7-5b572a0686b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158fb2fe-172b-4de3-bd79-e96052283c3e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68fd750-051d-4696-8269-0b67be1a98d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f48c2e3c-512e-458b-9bc1-8cd71895415f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d8c672-11b7-4a03-93b9-e7b4cef79ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8916ee6e-fba4-4873-b956-4f6e4da826f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c28ba8-604f-4fa1-8c93-1664192c59b3",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08789e6-9d52-44a4-a357-9e1a3a0c5430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75772963-a1d2-4c8d-94c4-cb0635af5991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42fbc6f-b9a4-4376-b168-bcd10c1d4ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f473bd4a-4019-4b8e-8288-7ecf0a1def54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a23ff2e-ca81-422a-8273-f1516d3aea0c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f6b7ea-f689-4072-b328-5e9b33f80078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e93ee11b-bb5c-45f0-95b5-0ce503f29660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d970fe0a-fd80-48ff-8da6-d7dd57ba97e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bea8ad04-9f39-4a31-ab36-8ab845512fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77d176e-ff78-4511-9980-c65969734d66",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d37aca-ed01-4265-a575-c3f6dd3168c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1029c6c5-95a0-41fa-b4f2-49016ec0e861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226fa2fc-e12e-40cb-ba2c-bb62379ac1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be59d736-33b0-462d-8330-6259f30bde6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9de888e-83f8-4cf4-be49-1798c0e60da1",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0196363a-08d9-4a68-9ced-8774129109b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3996007-52df-457c-8abe-84ea2ba85b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebca13b-2719-42de-bdd5-c049e2282b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae678c3e-a003-49ad-b126-1cc386c57dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f468dbe-803a-43e5-b269-ebac22f22a83",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae83c6a-b2a4-43d9-b23f-0dce708b3a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b899b8b7-e9ff-4c2b-b17e-4933cadc4c1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c07dd4-d99e-4173-8ad0-99ba7c5407e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4062b8e-f925-4ef6-9379-29c024c50036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957be718-e882-49e1-b472-97657cb6ffaf",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31992d5c-e678-48df-82fb-6e4b47cb1ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe1040a4-7715-49c4-b6c8-f6b0e074fbd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e893014-ef4d-43ea-88e0-5b1c7fae8e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba178ef8-82fe-49ee-82a8-3551e0ac57b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e2877a-c638-4a7c-ad01-7ec786632ce0",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c944911-4967-4f46-9dec-35e950e76c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b48a4e23-3f45-40ad-80aa-d35d7f131585"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eaeeaae-1836-48f3-94e9-4d9e421e9810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39144d39-acf5-4667-b687-dfba6595e922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e8c6ba-c454-4208-a6f9-b1f11cfe5955",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e90da9c-800a-4d08-9963-7e98dc271b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64cff3e9-a310-4e27-9a4c-713b15bd8545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c16753f-f5c0-44c4-97d6-38f74a4cef07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70021943-3f0d-47c1-95f2-0ca2e040a398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106b30a6-bb4b-4fe9-8c68-07542bd9d6ff",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc89a79-5f38-415b-8814-fad93eda8088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e688d4ff-5144-47cb-9a17-09373aa0c631"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d3cab5-012d-4f7c-9d9e-1a45ac2ec3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3d8e338-e8c3-4858-9cd6-49d251770dd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "238a7598-1e8c-404b-96cd-02cf524f8822",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f1d207-9707-434b-bfa4-95dd23ddf195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "241186d6-6550-4902-8b1d-ffca6739acf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c7cf4e-7aaa-4af5-9047-7f8dceb92744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d6fccb3-20c7-48b4-9341-df25d9d12042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad10d9d5-923c-415f-9b09-efad551018b7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa801a55-2082-4de1-86b6-cfeb35e1a319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e403ca-8ee5-4a5d-89dd-beba10efec19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749d3728-b2ac-45ed-a9d8-1a73fe06116f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "567c44f4-b54f-4a65-911e-97a172049950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b8d2c5-7f2f-4950-8622-8bf14d375dde",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d14230-8d28-4df7-830e-b3e73d7caf1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce01adef-9b3f-4c5d-8890-79820d2c4396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8cedd6c-7432-470f-bd0c-50ac2d59ae77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e164b366-ac36-47b9-a10f-14f4d44adf3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de11ace-9995-4773-a609-ef775c7f773c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e696ad-dfb4-4789-8d17-77fcee2567aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65141244-0750-453f-9cb4-445c2737c5d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad47a41-d25b-45d9-ac4c-e4d4cc4792be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f3d560b-1a20-4d3d-ac32-55f3c12cb879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8b2db0-7a0e-4210-89bf-f09c4791885a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4607fcfb-d0f6-47c6-8a78-cadacaea3b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be518d5c-1414-414e-92d8-da235aeae8e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb70fca-7dcc-41cb-a129-833363339722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e9ef7a2-3461-4268-b38d-72caabe6ef58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029c78cc-05d6-4d76-aaaa-034e5caf170e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c72bc44a-4a32-47e2-8964-9faa4bd59b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c60af07-295f-42cb-8e32-45097f63493b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683e74cf-80c6-4f3f-9aa8-9059661f3ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1220e92c-ef74-4e45-943f-affc315f5066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5099f8cd-d2b7-441a-9b07-efcd784e17ad",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8ce394-57bf-4af6-acbf-b038ad28a9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "475cf40e-9769-4699-9e99-f182c592c684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9781d437-e0be-4098-b269-b6d8b0f9b3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0907bdf9-8a0e-4f70-b8db-c807f691332e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44819437-6796-456e-b03a-8a6d352e97b6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e47a366-5760-414e-b98b-4b206f6f4c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b43adc-1d4a-4b9b-bffc-6ab381ca4214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3f3a07-5c64-47d2-adc6-d8a27ef803bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e39afe5f-d21f-47e1-8679-71aee14c2d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb0db108-210b-4eb6-a968-cc635951b13f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d4c938-a994-4644-9f33-e7f308b9ae42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d405a72e-8c82-4292-9a21-b72014715ce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef276acc-b32c-404e-a511-d745dd2120c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cc275a5-c8bc-4306-a982-329041715231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b49c542-10b0-4658-bbfd-f7ad493e7632",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0810c9-ebf8-4297-b327-1c7a8a2a8cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a84452e1-03b5-4741-ac84-18bb968f5cea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b11f6cdc-2a0e-45a6-b793-4158bc118df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07eb55c1-0882-4cb9-b05a-2e545abb8dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae566bd-4189-4dff-9319-219273095bef",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce77ea0-f335-48f0-aa75-bb7f1fb25723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "932cc1fb-1bcc-4e77-9bb5-c9f08914a3ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c8920c-62d7-4985-a4d8-90dca325e352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "42678bf8-fdb5-4604-9c90-5357830b5cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903cf764-1dbc-40c5-8a24-5d81da6fd802",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7b7ca9-f542-4416-b0ef-7a999c795869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "426de0ff-0aac-4200-88e4-7887640fd0a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0e8655-a47c-4dba-9c85-5392165a98ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "77834ad4-d07e-410d-8754-8761b079dd88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac40bd94-c078-40a7-9b0b-dbe2638137d8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b580b0db-fb17-4b0f-aabe-5e7b723acc78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df4e660-2238-429f-8bba-3474d9ef64e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83709f4-5c00-4054-b88f-5034e0f55b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb6edd45-995f-42fb-ad3f-ba696d91ccfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f036bfa-fba1-49ec-a639-987eed5bf5cd",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d41417-4fc7-4fac-8e5b-38faa6b4aa1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "301134d2-33b1-4c36-9569-8a0f73c8dc9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "791a13a5-522a-4aba-810b-6aed0ee65f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "adccc601-f802-434e-b87f-d8e7ea8ab560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9508fc4-c29d-486f-b6cb-6019f3c8b10d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14536030-7c7b-464a-82e4-d991b15a7c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11d086d0-234d-475a-a7cd-aae089dbe53e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8ca54e-3907-4b19-bd03-5cdfbe9c3ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "825f4b67-3122-4ed2-ac65-21b9c8dbe0c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58165242-6ce1-4c9c-a84a-eeaf5ed62745",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c541ef0-e636-40af-b833-e2d9bc83de06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69b64b9-6c9b-467c-8789-04c01cd7b2b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce7c7f01-05a6-4f14-ac13-410ec3849d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bc8bcbe-b758-402c-b1fd-c82ee3fe58ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10eac2f2-1c3c-4b13-9ba0-ef1fdd4bcc3e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2a6f4f-b749-4628-9942-40cd8a9513b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcf6f8b9-1394-4e20-a63f-c6422d8784f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b7ef39-8fae-45b3-bec8-43fdb20658e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b8d136c-ec50-41c4-ac2d-12e24841a503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fef3232-b4c2-4011-a7ff-96a10d381a3f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "813eba7b-655f-44de-8f15-8a2187527eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b06b3837-1883-47ae-8a1e-ee4829d8e922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d8bce1-fa07-44b2-8071-9857539f14d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcf33bc9-3d16-4444-b3cc-8f74dc3c9cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e96936-5c31-4ce6-b56b-adf9069fc1cf",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85707dea-a068-4787-bc31-19b4be82de2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "972e931b-7c74-4691-a999-38ee9fce3cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398ab451-2062-4c6d-a2ff-fd0a6c7f67c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbf57901-c92f-4fa3-a2ee-aafaff480110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbfd1d8a-bb9a-4892-b850-25ff0608b99d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9162657f-a1ba-4fcc-8bb8-99aadf991f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5450ecab-2238-4840-a3ab-4a29dc34f965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c17ea6-82a3-469c-b3d9-684a5ab52006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "715f7100-90d9-4912-a6aa-cc4f2c2e23eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9470e93b-793e-41e9-a999-e47c8bbdd997",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612d895f-d008-4882-928d-34116494ff3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c468c9-ecbd-443f-ad3c-9bba1f2a2ac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46a72fe-767d-471d-bde6-e3b6932ad64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff2f8602-d62f-46ea-965c-bd48502ca433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbab9fee-3467-4d7a-90de-621408f55400",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd53fd9-342c-4623-9834-ce88659bbba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b669730f-111c-4858-8eff-df60ca8a1805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f8dfcd-4200-4220-b1e6-9e8ec56e5b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1cf9e30-25df-44e8-a813-9b9b531dfaaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c185c2dc-36c5-47c1-8377-60bbaec41bd2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db5dce5-221a-4449-a2f6-79ab600feefc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7692a29-a36f-4ef4-8a99-cdf8fc67f499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d09822-b4ea-4b8d-87b3-8b7a25fc2682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "007fde9d-37ce-4052-a10f-7eb0317aea60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2afdd00-0480-4d33-abed-4a689f5df015",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d92612a-7636-454c-b5b8-4f53539a9b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f689a7f-5112-4efc-8869-bb012df0581b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459bb3e6-4915-4651-8f0f-9fb4a0fcb1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e731a33b-7e5b-4ba1-a2ea-016721d08a80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8010b14-71b1-443c-807b-93dadcf934f2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e368d66-af76-4e4d-9b3f-d551f516260d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6042f78b-4a40-4516-9502-a62b3126e2d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb07ec5-76cb-4aa0-8549-d4ac5b59389c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "abaede10-d830-4c98-aa14-8c8607107ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9484f7c6-0dd9-4527-b767-8c13f60e30a5",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2f732e-2fbb-4b63-b21a-49076054faa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ca33d8c-2f81-4369-91bb-5c3f82ae6b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b4c994-b298-40ed-bb6b-d07bfff36b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "52b01387-f4f7-4445-b4f1-60da607fe97f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bf55766-cc1b-4c69-abea-a1a68b9a4691",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdbaed74-3409-4212-869d-4bb3f4fbf20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31405a14-bf90-4acf-8892-fd25969842e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c6a69c-cd64-44aa-a99e-dcde2484f0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "794229c3-82c1-470f-ac7e-f99c5996400a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821dc8dc-8040-4686-b647-824ed580d3e1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ef80dd-f1b0-4c9e-abfe-70e415257a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e88d4a-031d-4060-849d-9ec922a0975c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95725f46-0a13-4a95-9bbb-b3fead1cb85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9ea5ca5-a466-445d-ab58-d955ffd7394c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0789bc6a-e7a8-439f-b169-b68dfaeaa260",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecdd0d66-7cd7-46f7-8724-f2d0eda280da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27c094a9-f091-4f41-bb50-1da1a4c2b583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8874c7-f3e8-4aba-a6a2-6a615123cc2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4e5bb65-06c9-4e62-b84f-c5714dcb3fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bffb2f27-e65b-4543-9ec0-f116f251a160",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d9f4a4f-78fe-4d98-9ee7-0145ca72171f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd8de9c-9e6a-4b70-90f2-bb4fd97d7694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db3dad7-6a17-4c4b-a784-23d0dbbd8362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9785a23c-13fc-4ee0-8c91-1f57cbab938c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7912b309-5317-4b3d-9976-b3535dcb44e9",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c2a4c63-9eb4-4147-9f22-93ec1ff78541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "781f9c14-4749-413d-a83f-70abdf781dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48402d05-033d-43c8-83ed-16f2b9e76b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3da8b66e-dc51-4bf6-a728-68f61e189b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9abedf85-1718-42b5-b904-f3fe5fa80164",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8003a9e9-4647-4562-8cf1-892c16ccf41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd629cff-b2d6-4a2e-b4ea-3f5f968d0c1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e62630-b077-4d9a-ad04-927a08277ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f42891a2-ad61-44cb-b2a5-c69c8acc29d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08305f18-a45d-4b17-82b5-eb52e690df57",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2112b664-ffe0-4aad-b8ed-253b2760b748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e490f0-b6ab-4768-9e34-6ee7826d300f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33846235-1e02-4132-b08e-79219b58025b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "70d2d6db-2b68-4189-ba4b-2fc9351a2f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02960984-2f3d-4acd-b8af-1d31546e7d4f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d081af4b-be77-4099-a856-140a9f4c5f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed8039ff-7bc0-4308-8023-bf5dc8f83cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1e4d66-b804-435b-9905-73a19c4eb6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1925701f-f8fb-430b-9a86-2334dbca59f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d8a627-a6c6-4234-819e-6786c101df16",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e338e524-1e57-4501-a475-acdcbec096e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "336f123a-5dd2-46d7-9a78-c1458bbee709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02acc5cc-e31d-4b7a-9f42-fb0442faff3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de8851a3-f51c-44e9-b7c8-aca8885f6262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52298abf-32eb-405f-a7a0-c34a48260019",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "904a448c-033b-40c9-969e-0906fbe0781b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea1bcf17-0a2d-499a-b6bb-c17b7423baaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0ae0ac-1237-42fd-8345-f2c1aafb95bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55d9f49a-4d33-413e-9051-8fda661a7c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c139c5e4-4841-41ba-bbd2-9167bc53b076",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f2c7e90-974d-458c-b11d-85b325627286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d70f604-c9cd-4799-8246-d6e58311eb0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9553b16-a628-481a-b49f-367fc213d191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3db7720-952f-48ea-af5a-4bf96297b131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2bdabcb-743e-4cc2-b631-b2bb5d66345f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a06e7118-6fcd-46f9-a74f-fe8d3eb69c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9ba797f-e4e8-46a9-ac76-43ff87a8a115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3023f5-ed46-46f0-b713-43ebaa513256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c22a925e-feb1-4188-b213-c1a1f6950e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a16a7f-ba7c-4586-a0dc-ba06a96ea4ed",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280bb4d1-d896-4166-8429-6b2a174608a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a860f38f-16bf-44f3-b4ee-d1f04284161d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1359d2-59f8-4f04-9a97-d64bc991206f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ebbaed6f-5cfd-4814-9ef3-19cd084e807c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25bf5747-b011-4ee0-8457-b3cd586e33c9",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "373ad6ea-ba24-443f-931e-31d2ba65b95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c51d61-e9c3-4521-a013-98247176c9d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d7d75c-eb61-4444-a0bd-53ea7e588be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "72d27eb0-43ac-4b47-9b27-6d49ae84ac8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02ebf90-4305-4a08-aaed-91cbbdcca042",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6137099-0239-4d2a-84fe-7943f48d8c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd0826eb-5d0c-4ec1-9fb9-e71e70c5470d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ea191c-5269-469e-8d42-d93f35106793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "37c0202b-9458-4b20-a859-becf7c0d4ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162c5c1a-6bfc-4581-bf6a-716034d764d9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6bc69bc-95be-4ad0-b4f1-7588253a201e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd693eb7-97d0-4d91-9531-de5af48e41ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e4d1d5-6aeb-4c18-8f09-f01403fa2a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a25824c-3437-490c-90db-78bf63a5acfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157f8ef0-d4f7-4d07-850d-bea876ac4504",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7418b70-db92-45ec-a3d2-3bd99124a882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ac08d70-a978-48b3-887a-5846200dde5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30245cd0-46e3-447a-92ff-c636e04fb4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "757f733a-dd69-4fff-8bc8-e46f7c3df241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45620c5-ff4c-4668-9280-75a2b0b90cc0",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "291d087b-809e-4281-90fa-19596a99c8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8474b993-52c2-4464-bd61-35ebc5f92a0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b328f2-dc3f-4b08-a645-bfd7ff5399c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7f78944-1ece-4417-a5c5-082dc06158b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e6fc44-0c36-4df8-8caf-e9f5a332104a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8458ad-13e3-41d5-9b7f-6cdea01e655d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd4ac576-77db-43b5-9cff-51d9777b1dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb9a612f-0579-4c49-b06d-2aa3be6ac373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "fe37e614-d1b7-4701-9eb6-be65e2b85040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e893e32f-edd6-4f3a-a140-92b246a90615",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf8db41-f327-4c26-ac87-5fc89ebd9a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5cff68c-5038-4c6f-a80a-7723fad0ed48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96466a4f-a6d4-44f5-b9a8-74e4190e7527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b5a4962-2e6c-40a3-b8dc-c4ad00a7c84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71e640b-b0ca-4f5f-b84d-0ce18a7ddc13",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc7c13f-2ae0-4a3a-b1e1-706fc01571f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d9820a9-1bbb-433f-86f2-b2c123de113b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd48f32-57f3-47a8-a390-9e4f2659cfdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "69f4df15-4c24-4a1c-b4d6-546de5e06a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6490f21-93d0-4a92-9e1d-89d3fb3a2cda",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b40c88-7e10-4ba1-aeb0-09a4c1b8b700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97198a01-378f-4b3f-b637-704ff7af6679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff7d0e3-1cda-4428-ab66-c04c36a9e80b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "be316d3f-5a59-4ab1-a137-a80b79682a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d461c5-b0b3-49b2-8045-95cc5ae07a78",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8864b293-cc4a-433d-8c80-af6b4f21b105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d39794-b2f6-4560-94b1-acc760e1c7e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86911dd-be2d-44d8-8cd7-828d4e7824eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a9e487f-d558-4c69-890f-854134f5cfe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc07fc78-1b48-41ae-8bdc-cae99a2e75aa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5f7571-51c9-4228-8f5c-8ab9a619ca22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca66cec-96a9-43cb-bf9d-2b0c28aac14e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d683c74f-ce8f-4cac-867e-4f00180fb17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "15ac5a4b-69da-4f34-a9f9-16aa98de1dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "533e1bd4-42b2-4295-affa-343e675118b9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3196b2-e217-4ee9-b818-5ad0742097f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65915f39-c025-4ccd-ae0c-9269670b21f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715d5c32-7f3d-441e-9bc2-c02c990781ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b793b62-7ced-4a37-b496-467a8b398c31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a506f0-4f0e-40d9-b1de-924a9c7e3d93",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb8f76b-225f-4c5e-ad74-1352d6c39d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ced6ab-f61b-4672-8baf-791438c3ec60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8cb8bd6-9e72-4883-9575-9d656d02ef75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e913b58-33ee-4a00-b345-1d1f9032749f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0d34d6-8c7f-4b5c-b199-d527b84d50d5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acdc6f56-a344-461e-88c5-202481d75db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "071d0ec4-5e26-43e9-9688-b863422d29f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45b5880-155d-48e3-9a0f-3e2f84fd4e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f47f19d1-51c0-492d-af8c-e4b38d3218f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ec73ac-91bc-4ce8-af33-6ea5ff1ced04",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a38b8e-6311-4b76-8236-ef5fa4a399d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76027c94-2805-4a0d-aa6b-36779341ef35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f5e441-c0eb-4deb-ba0b-532087e2552f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6fc7e1f-143d-46ee-afbd-6d6c85c37504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc284728-dd45-44ec-bb70-d42ac687d814",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfae15a-faad-488f-83f1-e2c58642887c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "866a2390-e47c-4bda-8936-23fd716fa3ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e883affd-4c48-4f97-aa25-1ce7cde894d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d90000a-e4cd-41a9-a26f-ca4228947ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf5e45b-d612-4610-8cd6-c09c0d0cf22a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72589ab9-9457-4856-a5b0-db2aa7490164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe71d65-7a6d-4388-a231-e5de82f6dcdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbbcfc71-65ef-4f8f-be86-7b9ac5f22dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "41d9fa19-23a1-49aa-b06e-a718b6cab3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d31d980-5e6a-4db3-b1b0-2c3745919d21",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c13691d-8388-4f45-994a-790973c89c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92618ef3-d552-4467-a6c2-874a55c803ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc1074c-9ec8-4fad-a3b6-26bcc93854ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d37622a3-f916-403a-be59-1a621741f626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1d632f-2d69-492b-b39d-1edf61a6e665",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d1de9d-1f3c-41b9-ade4-8d65c0cafec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f795d657-6aef-4531-ad3e-3b8bd0a2e7fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d717ae-a39d-41b9-b9fa-78db4e7ac541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "96d3982e-a8c2-4ddb-af2f-66ecffaa2369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8551abab-cd08-474d-a8fc-b679cab8aadc",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f566f347-e65c-481e-9d51-7caf84cd6602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65656473-71ee-4034-9790-0d28a6ddec61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5eff338-f3ae-4499-a148-cdbcfb45b338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4020299f-c7bf-4be1-b0cf-63f67e638a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "061fcaa5-69ba-470b-aec3-28173726d0d1",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f646e8b-2511-4c17-b262-c2ec6d8d17fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c51bb12b-830f-4d40-aa4b-47610a37721e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdcb2f9d-e738-42ad-b556-6aa3eeb868c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea89926a-1b3e-4707-8452-29d76fa40820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4214e43-8d9d-4046-ba96-50e85224ce8e",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d74d170-9af8-4141-81db-ccb70a0b928b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a7211f-ca79-4fb9-92e6-fe98dcadc384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf8e65a-88fd-4908-bd6e-b2998b5a69aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "807ed307-627d-49da-b26b-1453ca8314b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d498eeea-d01b-4010-bfee-9bd497acfee9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7bf37c-175e-4042-8887-54971a10f4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deea2c13-52f5-4ea4-aea8-59378f85df20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9de0ad-1f16-4fe8-994d-b6cd7f7be8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c6cdff8-fded-4c51-bc7b-60deb2213740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740cffd4-b9d0-47a2-84d3-2db403ca33d4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0b3186-d227-49e4-baf1-7cdfd34397a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81b8f9cf-e50b-482a-9a0c-a306f78f10e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c414540f-a759-4aa9-9709-c097172c2da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "915121e2-b123-4c91-b42f-fd35c9a3befa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eafc646-9e59-42f0-b13a-2d606886c6a8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5843ab1-d66a-4b76-945d-79c454f23469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "874a7faa-2383-4f58-a13c-9ef48b701396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556a1026-61e5-4087-a6bd-fb47d3cbf38c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcfb8ebd-ed0c-4790-b491-fdcaa8c49ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e7f00b-bd52-424f-a644-e34de1a00fc6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39f1eab-f42d-4a71-9cd2-eb357f31aa3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a260d4da-e8d5-482a-8708-03ff4cf6570e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856635e9-225f-4e1e-90a9-56187d24d3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fae56bf-c495-43a3-829a-0179660d4216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139cd6f0-6c33-436f-b940-68f53fdccd7a",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95eb6354-baf6-40c7-9565-baabdf9e12dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a51dad6c-8494-4fec-9935-0f6dfea4f6d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd19b520-3604-4c34-8b15-b88f4934d37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "baa84ce6-4f1b-41ef-b6e1-04bb90130e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc113aaf-0bcd-458c-9116-50b151c114b3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "293b06a2-00fa-4f08-8dc5-3c85c1d6389a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac51a10f-0cc2-47d0-a3f1-0ea8f7b8e2c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35c1650-97de-4849-9029-6d24537b213e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7470bff-c1ad-403e-a8b9-85bb969aa50d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e288fe98-ea78-41e5-8b44-254ef7c83145",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c1b775-08bf-4b8c-aaa9-e29b4c14ab5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7d86de4-6478-4cbf-8c63-fbebbead8f71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5000c0-a74a-43de-902e-79f67bdc7b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c67166c3-d45c-40dc-8b84-d350af216979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1237a6a-8ab0-4582-a8e3-8a176ea5be94",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f158ab-f7ad-436c-99c9-fe9dd46528fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "410d9f7a-5f5d-4409-b740-805d578acad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0550ccb-bceb-4e74-b467-079068e92c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "94dee750-e6e0-4fc2-a802-184b519c7565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681d20fa-3037-494b-b71e-fce4e69e7475",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1e8f04-2ef2-4c19-a99e-7202d086fe7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4990a48a-2016-4fb6-9296-5153f0597122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cae3c11-d4a7-4f06-b663-21fdbd279ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "08ae5172-89ee-4ca1-9e6e-807ed6e0d9c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480ed202-44b1-4e5e-863b-53ba16ad7d17",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f50686-1353-4309-9fe1-dd2a25358879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "034efe2e-ecc8-4a6d-b147-b6b6a7983f34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751a94bb-0394-4cb5-af06-14e0ff7d2598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6097ade4-eb31-4fb6-be57-9c75ac5d73cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007dc121-849c-4a3f-b77b-1b328bd9f106",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33605e9a-5976-4526-8c44-25dc7386f577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b955d9f-a304-4d37-ad65-fe9e6db50903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503f3403-12e3-4f48-8602-94b2730aabd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4eba9866-8a6f-4a2b-96f9-3e14694ab90d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031b78ea-cdff-43c7-9a74-02a1e3d686e6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71f46d5-f59c-48ad-8c05-69d137e2a541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58e20548-2ecd-4079-9081-aff5ffc42a22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29844386-d75e-490d-95c7-70196e78e5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07d0e040-0024-4b3c-99c1-5b477d70ccc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2556e254-1b02-4628-b033-e183a2fac019",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1152c693-a072-4934-9a40-3d58a702eb65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a5c79e-c830-4c25-aba7-46af3fb9c776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec3a7ed-68d1-4dfc-9577-fe2d4792649b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c87b054-1f72-4f62-968e-1ac394f42dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b001c0-cf85-46f4-8fbc-4bb78ab8ead4",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3acf1727-c981-4991-abff-620eb28e41b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4399659-67d0-4910-b5cd-6ed25ed5afb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b37fc4d-0cfd-4726-8da3-b8d61285183f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8415176d-7874-4414-b2ab-de89c772585f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e268519-09df-44bd-aaa4-6fcb46d62924",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ba6d84-9f6c-42da-9fa9-a899cd6fcf1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f098e6-0ed2-4d84-8c85-187660ca9441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "738fc12a-2ac5-4edb-9284-5a5abbded001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc6e2a9c-cc7f-47be-ae6c-d2cebc605335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5131e4f-c2d3-4246-b4a0-75f303f784e3",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7330596-11e1-48fb-bb90-6e7a7664e8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37a0bc77-8041-4d12-8859-a2d58f9be825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08177bc3-b74e-4594-99e6-5a07205c06af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f77bc9aa-68ff-40f5-8d3a-f16e139bd5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada35c99-c8a0-4ba3-be82-c41dbf48fa9b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1876cc1-cf6c-431b-8e71-1aa547b6ff96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a548033-66a3-47ed-b451-93aafbc14045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570ba8cb-0e7e-4618-bd92-3c6d6ef8c8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b85502-ceb6-4844-a1b1-4741254b9db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc9e1ba-93ef-4ad4-a565-7d014eab70ad",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6e6922-65ff-4305-8a57-eeac391c5e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a00792-b94f-466a-98ec-98b047bb78cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4831df-afe6-448b-a0bb-7aafa74c8257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ffcf828-d223-4d92-b1a4-65299b6a0f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa29f3d9-9afc-4dee-8c08-78b3f8edd135",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0127e2-b967-4f33-a964-02fbf1d3ee30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a4f53ad-c39f-4b04-976c-ddaf714017d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd9a19c-48bf-4cc7-ae51-fe1420b4d24a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ae710e-8a57-4711-9d12-974909e224a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc6d2c4-9aa1-4c0a-8c3c-842fb529651a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cf11ea-c8bd-484a-b18d-202e6f0d7552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c0517b12-96a7-40f1-b1cb-cdf12da515cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31fccff9-b46a-4e2f-807c-eacde1132d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "46314532-3b62-4fca-a0fb-c48a1f57a7a7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "98c574df-ee11-426d-9e21-edb8d88b354b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1dd79c22-050b-4ffa-8cfd-dadea16ac497",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c730cc2-c631-446d-a8b9-670077c17c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "61ac5958-84f9-4d10-8427-cf39a5b2409e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3cf7fae-5ae2-4194-83da-d8c3f7d48fdd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a1605d7-3c01-4efb-81bb-cf395473f4cd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27d091a1-7934-4372-90ff-a4ccb158191a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84a042d0-9ee3-4869-a58c-4ef143a9a805"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0390d731-4489-4b32-a759-9e3a7595a572",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "513abd58-d60f-4fed-b76d-19e52f95b28e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b394c1fe-f993-44a1-9dcf-15e0524eeecf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "392edabc-ea53-40a4-9625-56a2e791df55"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "df17a260-6cb0-4cc7-90fa-90b41ecd4efe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f56944ba-8e0b-43d2-9ac0-965a13399789"
                }
              }
            ]
          },
          {
            "id": "151b1a02-40e0-43df-94e1-74ede2b51ce1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b96ba1da-662e-4aba-b9f5-f12a2f2d640e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "52576013-c6be-4f00-9f18-0b9723df8fce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "71f0111c-5dc1-4796-8fc3-aa4ec9c3f05c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dba9679f-71d9-45bc-b161-d0ce06360271",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "77029128-d622-4de3-a438-9976e3c02410"
                    }
                  }
                ]
              },
              {
                "id": "150698b5-11bf-40cf-9e62-625b27707155",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5bc81c3-e965-4a52-93c8-74d939481003",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0e26c647-92bc-4a1a-a7a0-0c89413af9ec"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ae687d8-5783-4ae7-b21a-ba29ab9bf7cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "18b47c12-5417-468d-a21b-04a710e13031"
                    }
                  }
                ]
              },
              {
                "id": "86d1b017-a94b-4a41-bd94-c589bb80d448",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a755e12-81a5-4569-92b1-0f6238b7a24e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cbb6404c-fe34-4a64-bafd-22741aa4083a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "201fc8c3-6854-4a00-b156-d42d4a512c17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a7edc3dd-7ba4-4f9f-ad21-903a721f5e73"
                    }
                  }
                ]
              },
              {
                "id": "9eb60fc2-6a7c-4f68-8e19-213721b06aae",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "74fd60b8-ff56-420a-b0d3-db752446df9e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "457ca7ea-1361-472e-b070-740fa1cd5d57"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8771d6c3-9de9-482e-9a55-f9573a4d6a8e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b551fe45-b43a-4c94-802d-f692c0e70778"
                    }
                  }
                ]
              },
              {
                "id": "9fcc871d-dc6c-4208-9f94-759f3f211924",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a3830fb-9fbb-48cd-910f-883dcda49659",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9890c16f-01a3-4a98-b528-664e9e25ac89"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9354009f-cdb7-413a-b6bc-57f06e523dcd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e0876740-0301-4efa-ad9e-6554845311aa"
                    }
                  }
                ]
              },
              {
                "id": "d7528ef2-ee64-4bec-a8f6-f2e642ef500f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbeb6762-e2b9-403f-9801-bc044c5bc51a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e388b835-f31c-421d-b375-d933bfcb4fa6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "862b8404-b58e-4cac-b2e3-a1d0de5bbcc7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "10642184-cfc5-4565-ab65-3c4cd3003e0e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "147a8fd0-3e45-4501-9ada-0798757398b3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "371fe978-4928-4d98-ac5a-09dcdb1ea348"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e9fc1cee-6af1-493e-965a-c38e0c5dfa11",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e87f031-978c-4a81-b459-b7ae95fc1e1e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ebec516f-251a-4452-ba9c-30cb3565029f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a5049a50-2c4c-41f3-9509-996c58fad240"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8d0a56a-c71b-405e-b364-8cb410fa9b67",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "054b0976-64ac-4506-b911-67c97094a03b"
            }
          }
        ]
      },
      {
        "id": "ae197390-629d-46c4-a565-fbd25b189ad1",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e198ec0e-37de-4171-a718-f95e97f98884",
            "name": "Negative Testing",
            "item": [
              {
                "id": "01ff11cc-9706-476f-9271-d7a18c43c97f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "67c44cf1-39e7-4145-8239-b3da923fcff9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c6eebc-2789-41b8-96df-7e6e469c5b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60eaafe2-0273-4f13-9316-3f75d19f5dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c73041-7856-41c5-841a-d65b12a8e34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3469a8a1-b2b0-4549-ac51-0125b0165341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3746e05-57d0-4d29-853e-f4a33d708ec2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1bc4212-648b-44cd-bff4-605067f6a598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca108c20-7f95-410c-a719-f3a0810dabab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c2e5a3-5485-4a41-97af-3e1a29347e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb400698-8c33-48cf-bed4-12edebe6e615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c0dab8-0eb7-46f2-a4d0-0d049c0ba3e4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d4d820-e124-4bd1-ab92-cdf007690e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "224eb7d5-45f6-49d3-bf26-a5cec7d2bb18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28644620-2c7e-47e7-802e-6aa1fe48f4e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "455d3255-070b-48c4-8e87-e663657f98f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c703466-0acc-4948-9c1a-a67cfed4df17",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "181ec941-69da-4b13-bcba-f2a67af61e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4792e96-9d01-4d5e-b70b-6f824d3b257f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9cbe45-3b90-4756-8ae4-86e94a213326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "931c5754-d4b8-451b-93fe-c52343a53d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92fbf6f8-0220-458f-9525-2b3e4dd55aef",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f1d63b-091c-404f-bce7-900f779dad27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83d25231-9262-461d-a880-1536d90a2873"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e152e01f-8181-4aed-874a-62027f458aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5320b7d-711e-467c-87f6-8291469a37a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a195fe23-4764-467f-99ec-c22752ecc739",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7a12d4-e6ed-4ea4-9115-8e1a9d0302d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abae5918-caf1-4ef5-97f4-159a40ff1966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45a897d-e7ab-4a85-9b9a-eaabf0684324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c54b7a05-4eef-4092-8d42-fc3e20237197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fd7db2-7e5a-4a60-9af0-69712ac402a4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e72696-40ac-4288-ac15-f19ef4d569cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "809e0dc0-217a-43f9-961a-fabda1fcbd37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762d3912-2717-4d4c-af7d-210f1140f39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c77c2510-7228-4775-84d4-07c95966c402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1038a311-bd16-47c1-9692-bb4440f9f04c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffcd4306-0664-49c9-81f4-d1c7e17589b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37a0fb61-e347-4d8d-a0c2-16f5632ff601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc685cd-3585-4c1d-bf96-9bd15d5213e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdfced6f-1860-4111-a88a-b1adf1c2576c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bac6ad2-c062-4374-a614-a03704c20512",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f132624-bfd7-4111-8a77-194c0cc91c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa7e2ad3-e3f5-4846-84d2-7a6e886c5df1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af482740-c55e-4eb1-acc9-f242d3e5badf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82e414a5-f4c8-4b83-b074-35a9eae0058f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ba4e5d-2322-4550-bb67-a3f66714c7d2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b59bd5-4400-450d-9dd5-83a41d78e654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f6f4465-24d9-4278-813b-63a44d4241bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c39c11-1cdf-462b-88a4-8535dfc62569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c6af6f-1771-4130-b9fa-4e252ada3f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b18024-91df-42d6-a558-26b4565aae5e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8db79f-d418-49c4-be4e-88f78c1337c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c20700ee-bcf8-48f6-b9bf-6deda197346e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9ad0bc-167e-4f18-81da-2b9f7f0043b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f93ad750-438a-4693-97f3-341de0fd2b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af9c5524-7607-425b-ac5f-841905ac0a37",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cfdc834-c1d1-4054-a039-37d945029eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e0a9363-1adc-454c-b597-fca95beb38dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5508b24c-c3bf-49f0-ba3d-11ba02bea2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "30043ede-fd29-496e-bde3-697450dba630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41957d94-8cde-465c-bee6-75b657868ff2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb82756-410c-4db2-86a6-e1c69ac4761a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d729f0-2cef-49e0-a82d-bfcd7e08a615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb04206-0d0e-4114-8efd-898f281c6cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00ddc121-77b7-4126-b1d5-3b801ecd3d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1267ea-3261-4b8c-8b78-a9d061a79298",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f77884-ecc9-4bd8-8d18-696def937219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a218b3-5498-42a9-9d6e-58adf6bcb739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d74df6-c41c-432b-8a72-2bf1afa8895d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "73168bed-9394-4eb6-866d-72d660dc2e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a49df95-68f8-49d3-a3ba-8f5bccc82546",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc2f8e7-7067-4840-8b99-9c9048e5f9f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1daed2b-2a5a-4589-a987-3adb895c5a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da4b418d-8bed-4b6e-abae-62b5d962ff04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a2125ca-3884-456c-852f-ec7f0e02c6f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bc095e6-810c-4185-b103-9af842fb1a7d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738755d3-ac2b-4714-82a6-eaeee7986923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b741b852-68ef-489d-bfc6-56a876270faa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afafc46d-7873-437c-9aff-a98f180fa275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5510d1a7-11a2-4c76-bf81-4200555bff4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48339623-68a7-4d40-8cee-9abead1986b3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd6f0ba-c33f-4658-bd5a-a4a75dda1b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05149bc2-078d-4c2c-bb24-f4a2d4d19acd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929cb3e2-1132-40cf-9ed4-fc7d434e7412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a10130a3-9689-451f-90ed-bcaa2f340efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e81123b5-d667-4da3-889f-c323c33d2b0b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f0664f-8894-4fd2-a1ea-158d6cc8bdc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "babec0d4-42d2-45b8-9ff7-248a4e571d44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f4aabc-9e81-4023-8f1a-1c23d5dbccf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "39af4fae-5297-4657-a8e4-3a4663157f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a57492-ac1f-4f4f-adfc-9ff8b9917e59",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1dc917-b9d1-4ed3-8d8e-e5b28f1d35e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd7e4571-7a43-4dcd-8548-931500cd0bce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0651568c-3b59-42e8-9567-4699194b27d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e17062c3-78a5-4c82-ab6f-1bfa007611a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a3f2c5-1a90-4638-bb3b-8ca818aeef47",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3929d621-2059-433c-ad2f-18831d836a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de47ed2-fed9-4adb-a75a-c1c530844eb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e99d8f-1023-4091-99e0-630f7dc3fe4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f41ae67-e3f8-4263-b466-5f2377993253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfdebc16-63a9-47fc-a0e7-6f9b8f6a27d2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4cf3c5-8e36-4036-937b-b8f871b9a2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a8be90-4d14-4372-a837-bcbbec3ac51f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ebb51d1-d74a-4ba2-81c5-f3f76dec47c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5924993-eb84-4753-b23d-1742f66f0492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d1f00ec-4e61-471a-8311-4f1713c3c0ac",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a2191e-4731-466e-9107-7c1b2b9f846a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f606ef6-01f2-4b99-b665-084fa5fcc625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f44312c-0c8a-4f39-bb90-4e51e57b7db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3441f8ed-4adb-4780-8c2a-8b1a073adb29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5688f5dc-c95d-482a-9876-ebf70884544c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2add5f97-a8f6-4189-8b3a-a361c0b8fe7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa4462f-cd4d-47b4-9c87-71fd451b3b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d123693c-e766-4e1d-b78a-9e7021d144f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "212c1224-6533-4461-9f7e-7188af94decb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641a8f69-7c74-4dac-ae1d-331f39955b9e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9cc5f42-ba50-43a6-8fd0-048406c67ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "545b3e2d-221d-4276-82b4-296f42a3653c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b547a84f-f308-4b42-8147-5cbb17e859ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4562061a-b9f7-4001-b172-646d1fe70b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abdd8368-c5b6-465a-967a-87d560ffae0d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e7f4ef-1b93-4b31-83b8-e83a3cf1047a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6d6b5d0-e29b-4916-be4c-665cdc1559a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065519b7-229b-46e9-9b5b-58e0738bc7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7565c094-fb1a-436f-90d0-43447c3ed78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b1364a-c804-40db-91ee-344f7f3bc855",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a89774f-7e1e-432e-98d2-4f5a404e752e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdb61e9a-c996-44f0-a6b7-fa516234069f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488b3396-36fe-4538-a760-988896de2ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e0aafd2-ddca-4803-b009-2e7cb20042de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4310c0c2-7936-4c83-b1fd-cdadc9bb30d2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e941a51c-0082-4b5b-a532-80736da4c6e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a2b4998-8453-4bca-ac7d-7e5b45bab62b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3c0937-c722-409d-ab8f-de5419152d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30b3593d-c9d5-4575-acf5-5357bea9ee64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86887e49-0ac1-4a5b-b3ec-7052f9d7a8f9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4591949-12d9-4354-b055-abebe8eeed3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "743b116d-5070-4958-ae50-3c22b6ea64fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64288d4-aeec-4713-97ed-d69cba97ca4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bf9dbb2-6845-4695-91f2-fb692276688f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44722fa2-4fe3-4012-9352-e903b592266c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ce85fc-ba71-4114-abe2-9594e9c6e1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec54bd8c-4ee9-4082-b6d1-20d4395d4337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4715f45-1cd5-4240-a81d-faf536ba28d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ce36183-e52a-4fb8-b51b-ebc90487040e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ae0688-02b3-4371-9abb-3eec7fe78acb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2358ed45-f282-4727-babe-a621e1df6c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bead16b-2a02-44e2-9c06-8e28d8345449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d892781-a212-4f30-af02-33064c434f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0656ddf4-eb8b-4826-a36e-cce75a798a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f772cb63-e871-475f-9d4f-4557fd6b4f70",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "234d2013-7baf-4b0d-b4dc-991944f703c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db2dbe50-c6b0-47f9-8336-1ebf75fcec0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9048190f-b059-473f-946b-e292d28f8fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d62d741-a6df-4670-a921-26d26e22c0d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0bd281f-32e2-4899-999d-3b8ad870359b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c779bc3-9b24-4e14-81e5-9955e3eb1abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c57aa8-fe9d-40b5-8a38-b40887dc8f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352cb7c6-4d73-4dcd-bfa5-3fe400407933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb10a6e6-79a1-48a8-a0af-c3525ca60a6c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "596cfc81-bcaf-4311-98f9-e11be7d1109e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4e765a58-5589-4a01-af27-0146520ec380",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771e53f5-cd20-4a69-bf48-6254f2144aae",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "cc6a1a13-cf9e-4988-a050-7c3e02600342"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd457a93-b936-43e9-9aad-f9451c628bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75082705-b355-44b0-8a45-d3c94622e306"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f014c849-6f93-46a0-997c-b49be7ec9d7d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a331ff16-740f-4268-823a-dadaca219340"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5b0b2e8-ee25-4b24-998f-f2d0ef3c3a72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c1e130e-1eb1-4d43-863b-45e750ac00b2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0071ee1-ab92-4d34-81eb-a32b40de7ec8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "39a1f7ce-4b6e-432f-b5e4-1cbca3e135b4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e67e18ec-f0d6-4814-9b7d-bf888137ca07",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c01a5cc8-ebb7-4f73-9e6e-df566df6df08"
            }
          }
        ]
      },
      {
        "id": "731a2ba7-c436-46e4-a133-6ff7400edf97",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "cd871ac2-7c3a-4a37-93c5-e3723730e6f1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8ffd28bb-e252-4b18-89e3-cb69b27bc060",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a1273793-6a2c-48a6-bf45-e5eb0e4b477e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a35ec1-4f90-46e5-8e1b-840e42fb195d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41bb55b6-9bf6-4286-9178-c39bf08317ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2690d5ca-a62b-4e81-95fd-416eb56119e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e15774f9-1e31-471a-bb92-4c1f37365f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bbd315e-0008-4b0e-9923-67e8ce70e579",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3a18e1-fb8c-4676-8538-f4d7b712442e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f723a8-d309-4930-b750-69709e8ca82b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9004d2bf-bda4-47fa-8fbb-9d2579e92a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "71d791a3-4568-4f1c-aef1-066fc5779d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de93bf01-4f44-4f69-a7fa-1ff5cfe87fcb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f787b0c-e50e-496e-96ce-4f40da62dfe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cd84b4b-c9d1-42d2-bcb0-544fd792da37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046471b0-72ea-4cf7-b9e7-804b6ca3c47e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "14fdf153-4896-42ec-8b0c-b21016ee530b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083a0036-005d-4108-a09b-9a31aa3c60e6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7810f4c-47ce-4266-b3e2-67a5b2dbc653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42764fc3-9c4d-40b0-b378-b0a5b3f1399a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79dcfa08-feab-455b-80bf-5b4da927a82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2ea1318-bce1-4bbc-8d13-0f7c6cf2ded5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb08aa72-494c-4fe8-bd7e-9103607c7912",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5e365c-0f62-4376-8c74-fcc4e66bcbd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64fbd374-f5c8-4c37-9831-f32e44344c38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d813ecf-4ac1-4daf-b04d-1d4f54e4eba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "61b09dac-ad36-430f-9f29-b31cd61986b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62bca8ca-bbcb-4f2c-ba65-5b855c6c62a6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac73c0c5-ff40-4660-93e2-2cc2273cf153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e86aa8d6-8a00-4182-8a90-6718f2d8c479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0922e7-cafa-4997-b9cb-e07e8c1f67f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c92a8bbc-62d7-412a-b2b4-c873b56a7468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ceb630-994a-4729-ac93-d26d42ede51d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ce7a82-2eb8-4d6c-905d-ae9b1cb73a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d02b8d-8408-4837-9b72-9561d1cbeee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b05586-d9ee-490f-81f7-60560b11ce9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e3cd1f6-5b94-4971-93a7-3edc388ed00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a5d70f-7c12-4b4f-b4c4-1d5ac35776d1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2897b358-e0a2-4978-bec4-9f5995ff9976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d425ed24-1bee-44e3-9dd2-e3a563aea736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43fc1b93-9a7c-413e-9dd8-b0f193487aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8f37e8a-ba14-4eca-b526-6dedb4020866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652aaf5a-24ee-4a18-ad1a-25d140021ecd",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13eb59e7-a76d-438d-9d4f-ffcb392ef151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc8244ce-54a4-4418-9048-aa80d457d642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee66464-00f8-45cf-8969-bba2a75bab18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdfed69f-081a-4d37-8727-e463d62fbffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca3ec21-5949-4b16-b0d7-469345e08d4e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f061fd-db7c-4825-911f-a7517ea76d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ccc6e6b-6474-413c-bd9e-1a651c8a311f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84525176-2f47-4b89-a3ba-146455df6d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b46ba9bf-60da-4e9e-acd9-6e41793eb6ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f59978-41e4-4ac6-8198-c398a82449e2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656a74b8-a0a1-4c46-8710-572eabf5d47e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "657661af-66a2-46b0-9f98-72c24ed0d6f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8cf19a-59c4-4f76-83dd-21b4353aea2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0c9e7450-fe00-46ab-9972-e082a1e1ba66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32b7f0e4-5d7f-498c-aa92-62c648fd99f1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e2778c-4051-413e-a5f9-376a6f74a52e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ecc6124-1425-41bb-9ba5-caeadd011cbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376f98ad-c9c1-42d1-9bd8-1f6712c9ca38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "72d34814-3b3d-4d17-ad0b-70c2780ff2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a5b05d-61c7-4b31-b46a-0e29deabf71e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de3866d-b563-4f59-8547-ad43236858c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73621697-53ed-488c-ad96-a002b97ae53b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7106f79-4844-4dd7-8030-dad775912ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b55004ff-6068-40c3-a816-9829494408c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37cbf97-dcb6-4f02-a516-8294afb10911",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ffb1b9f-8eb8-44e4-9e97-0ca98264e18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36f64c64-79f7-4509-a90a-2ce7e98d7a64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af8d86b-8b0b-4077-8be7-aa4392e2ec69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1c0885d-bd4f-412a-8780-84940cdfd319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e71ce50-4225-4ff3-8776-ef3052d5f210",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c5eeec-ad92-481d-952b-fb5bd824ff6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f35d9063-7264-4fa4-9a52-5864c2d50887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af746c9-e84e-40ce-ab38-c0de1a4b11b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "91049ff4-9ea3-4c66-82c5-0d15f1e15f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b961be-3359-4dee-8cf7-a04c2305ff40",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea3c077-f44f-4017-af26-1f9c259d386d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8459dbd6-2301-40ae-b5e3-2a4f80b68273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5958a4-193e-4136-a407-d56d24e0fa3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d50c78d2-7458-495a-8d69-b926dd9fe0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d655d0-9f20-49e0-a318-dc4ff32f2755",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86509376-4a65-44d7-89e7-c7358d3ac455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c96fbf0a-2916-4dba-a4b7-086b0a55f7c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9869af-2818-46ed-abd7-5e908aba1eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "15ae90a0-a540-4085-a2c2-6cd7bd68d3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ce341c-ed22-4102-9de0-c0856578f1da",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b076ec-0b47-47e3-8154-0390d76ba106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf8c0c26-4bb0-45c9-b14b-3e7334f999c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3815d3e-d3a9-4c54-b512-7cf0959a78e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "66b5474b-fff0-4ff2-aaed-03dde742073d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9286202-b013-426e-9dd0-097e1eadc548",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aaf776b-371a-4d57-afe2-07082552b689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c92e55-6632-4861-9722-d040b9acf9b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd92019d-f47a-441e-b336-9262966c29b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa7fe83e-1059-43db-9363-b631de8e1db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45dcc02f-3d1b-47f4-aead-ad81e7169873",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739448ab-51f1-44a5-877d-06ee02b18421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baf47ecc-9124-4e87-8ef0-1fecd3f70012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4610a337-49f7-4022-a29f-85a13e88e9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d708b3bf-32fe-4334-a238-16673aa92797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb3ba7d-ce0b-4b8f-979c-865e4c471375",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "698c2786-54d1-42fa-ad7a-aeaa0f4d435f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f98525f7-588c-441d-8c73-4f49c34d2d45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f49d75f-38b3-4d93-a7ab-822d634fd113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff7930d3-101d-4c7d-9f50-80863a7ff814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13343c7d-8f7c-4207-a319-d67da33eacd7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca47233f-e298-41dc-8dc8-d03a10dabf55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4027b8ca-9c2f-4889-8fd7-7fddf8c17dc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69b6540-09aa-4e7c-8a8a-b445cc65920c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47cd50d2-51ea-40b4-b04d-96e34a8ff320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7444d90-dcf0-4379-bc89-059fa91d92df",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "529da81f-67b9-4287-a952-89fc4282040a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f319e2c-c5db-47c9-aee0-a6b51d7ebc06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2919b671-eb40-4fbb-80b9-f78911347c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ac3c7cf-f5c4-4b78-b348-b8af7a0e559a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3eff7e-218e-4ed2-bf6b-93b0ca208b5b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b033c3-7641-431f-8a7f-6055f3cc7ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc46d63-5e92-4211-9ace-760583013608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7978c04b-2c7f-4601-8b2d-8d8b19823a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b26ddbf4-fd1d-4099-a621-42ef5a60a809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d34a35d-93db-4d88-ac68-4ffc801f0c43",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ae02d1-c944-4501-9da2-6d0918a689bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af03c1cb-78bf-45b4-b53e-1da319e53484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907c3bc6-2df6-4d12-9ae2-43067bca513e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45f5b8fd-745e-4bfc-a5fc-af140602eaf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1c2cc8-727c-41ea-a582-ace8605f6cb2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee64f43-3a94-4565-bcad-d50c501bc5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "439742b4-b987-49cb-b6c3-3465329de899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c3afcb-3816-42e4-862f-9a6b6d60d7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fafb78e-fd9e-422b-9285-fb560c5ab92b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf89d71-ac74-484e-ba37-090b0a73228d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae30d82-18b9-4f11-a6f3-6d48e2b42b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d35308-4682-4a32-990e-337f6726b4c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c6913a-e958-498a-9ebb-c2d477b796b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09071850-81be-47be-83c6-6571d3e0664b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a735535c-e0cb-4db0-83f9-7cb6e444c5c6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1878ad1b-d51c-4d05-9cba-96b8eb9d500c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b9937aa-923d-46d8-922f-1d2f9417838b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0aff53f-6d08-4df7-a378-d3406f623e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ee9c0b-a2e4-4576-b18d-2bb5b09e9dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52df5bce-3b5b-465b-b1a5-804b6e11b38f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf7c285-8d75-4628-b3b6-a5b000b22e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7f97d3-147b-4474-9501-1160e72fc195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9990e6c6-0af3-4dc9-ac2a-ffa0dc3e46a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "176d2780-939f-488c-bda9-5b42ab07a625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990cd1e0-5786-4b2b-9f54-d0e7ef93c3f8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1aa4de9-7da5-4958-9f21-4bec89fbe606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "789e3318-983b-4cbb-b941-c5bac93c70da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a0a508-64a6-4663-ab18-0aefccc394b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f78ce45b-3efe-4b62-8ebf-f234b47ae951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "223f3e95-99c4-4ab3-b3f8-1ae8264ca0ed",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67140935-a727-433c-9fbc-8c04302d46e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "384f3856-e68e-4a56-b531-98dcc2850fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a44ecc-79c8-47c1-8249-174f1247bc4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eff91e6c-bb9e-4c99-b5c5-8b48d1432ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786e337f-e2b7-4635-8956-a1ce85013347",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b408b132-f0e6-4b7d-b134-376f4f9874c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f2c1e55-276c-4181-89dd-73977b561d91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715dfd6b-38c0-4a66-bea6-5161b81d5d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "269d3d46-cd3f-4436-bb0f-efc7d6c43b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5062f3-b174-425a-95ce-60fde09662ee",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad1a932b-6f7f-4f3c-bd67-8381b74a8425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b659633-d6f8-4bf7-8c6b-954c9d3538ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a0f47e-8542-4f92-95cb-93c8e110debf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2fd09ec-3b64-4f13-a4ad-f513cdf0a91d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a848b2-4238-4909-bf4e-e1defad0e2ef",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b717ec9-1630-42b2-80ff-17671a3e51a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afbb22fc-18ec-4e0c-9e9b-fe779a06ddb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dedbf009-a021-43df-b314-58dbebe1ccd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b69e74f-c60a-4480-8b3a-e43c0b32def1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ece525-103e-4cd8-95e3-c61733d5f767",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fbef68-b44b-475b-a5a7-413dc78dec0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e64bdde-03ac-4fea-9da1-308239aab9a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "104691fc-abc7-4bb6-a128-bba0a3110d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6d63f67-71ac-49d0-b905-15a66ae4c30d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8bff3fa-6137-4fc6-890c-01cbeab6d42e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "633b8a33-2884-424c-a4ce-ef71394ca044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9028c2-9c23-437e-bcbe-7d35dbff42b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6516fd-a574-4090-9830-61b67a7b6c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cc9a7a7-a469-4247-9861-87b95967417e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6a9c6b3-1687-42ca-8c36-6e2e2f15a9bf",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fde99f-041a-4b9b-b72f-1e22aef3a624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9a6658b-866b-485e-bf40-55efb9d9f02c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45838580-e62d-44c1-8361-318c7f3d1ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed6a478f-11b3-4456-9d65-3b729d301d1e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fbf9de70-e7eb-43f9-a86f-6f8de4988a3b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1c636d22-d3aa-4d6d-8a5a-40095615ce0b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b98c08c-8a5e-41e5-adcd-2ed7bd7f0190",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2ccf13f2-fc05-4c5c-a1e9-f4c097eede34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cfa0cfd-8e3a-4cc3-b12f-d99fa944157c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9d733d6-bd82-4630-9eac-7d76c98d68c4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df349813-6c45-4aad-9221-11ac553e3ef2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2dc01624-bb0e-42e8-9e08-ee38ee0973bd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4376ee3c-4513-44e8-a5b8-8f3034114634",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8955c6d-fa73-47d8-85b7-4250a9b7e039"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80b7c98f-9552-4cfa-a580-4db5ac316ff6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "290ceee9-4dd5-4e8c-8a0c-a51d9d318589"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e03513ad-00cd-42c1-94b2-1e8214a9fc89",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "33f2fdab-4d52-4663-bcf8-e0be987042e4"
            }
          }
        ]
      },
      {
        "id": "6d61c092-d6d0-420f-a913-7cda636e3f7a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c0cf8677-132a-45f4-9ad7-0b0b1128190d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bb584c2f-5270-4a27-8839-308f58ec75d2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cf17187d-47a8-4747-9e54-886f61d96f6f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2ef668-41b5-4f3b-8fbe-18eb160d7439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df1e13b-4d35-4996-a187-f552951fe7ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7bf35c-69bc-4c2e-b444-0a4f3661904b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a380c1ed-367c-4398-8f30-e6e023a8d1fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c45c19d6-5c88-4264-8638-753f93d9648e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6047fa-682f-4ac3-829d-2199e0492013",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "657eddcb-89ad-42ab-98fa-33fdc82e4c3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a23abef0-cb70-47fc-a0bb-ca13e9005c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f5b10c-15e1-4913-b7a4-6c97048afcde",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b36d229-062c-4694-a009-26d65874fb4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a3c0fb0-a910-4656-b23b-9ee15d30187a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e61c1e-81ec-4f07-9df3-08013b83b581",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1160736-7aa9-4cd3-b3e6-6bf0200abac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "386f8cc6-4dda-493b-a701-994e6299ee67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964dca26-48e8-44f3-bba6-078854b36f18",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "119565bd-1cba-4881-a2b3-c828b2af519f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c7edca-ab9d-41f4-90ee-0747c6bed7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a896dea-c0fd-4c30-82e6-10f21c9e6f57",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0272b8f7-e553-4321-9470-21912d74527b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0573344f-470b-4439-9003-dc617fb62cf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ab511a-e16b-4b7b-acdf-d4376822d5db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b12e063-4f45-4044-97ec-dc82782254c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373e8a92-51ed-4f0f-9a33-cf813823f6f4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f12d9f8-9f3a-4148-aa84-3fc562760d6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "377defe2-4a2c-4321-9e1a-f4c43d23b60b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d94ac0-e2d2-43c7-9ade-82abd8e776a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1be6b728-67de-4ab3-bcd7-3df81ec478ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5d6809-d59c-4a71-ad15-a7e3e4f8faa9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415a38bd-bff7-4824-beed-57bbf04f98af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f81c3efd-da1c-411c-9c02-e25e6625303a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97011eee-eff8-42ab-8b0b-ddd453e23b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "407853ad-1f16-45c3-b7e6-4bb7e071b858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1649f0-43ff-40b7-ba3e-76f76b498d17",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93f16c0-03e5-485d-8e43-8b5ad39cc435",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51ba17cb-84a7-40ad-90fb-e38244e0b8e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e97742-cc98-4144-b487-9e99ffc42267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0986b54-128b-4aa8-8285-9f5626cbad4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800c2735-e43e-4540-a97c-ea6e5e44a89a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e15dd63-2b4f-4b2b-940d-b333c1304d61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38bbacd3-f7c4-4393-a97e-45530ca31049"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c66848d-f777-4960-b70d-091141cd2771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61a97184-cbcb-4c61-8cf1-afd526860fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c12027-8247-4c46-a367-ef6d537503af",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868d2821-162a-4bd6-90f6-fdcb7aa5e21e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71efef2c-a71a-444f-bc3a-49be6889ae91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51144151-ea66-45f2-a3fa-f6aa086780bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22f674e7-2bea-48ff-838f-8bc70387fc53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fb7ac4-738b-4165-80f1-b0c247aba9b6",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab84633-133a-478b-9ac9-06302126afb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05128bc9-1dd2-4787-82e1-3a1e13912dd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b0c587-7f26-4239-bdd6-bfadca1266b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b1ceac-8cfc-4220-833a-bb7484eb9faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ddaede4-1d42-4951-9cdc-632863b7bb0b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d3044b-585e-4f22-b8b7-e1ebf85ae123",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74f6f133-17b6-4062-a951-7285ef68de0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83642902-8f19-4d4c-99c9-d7b375fe1e70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b364ba-cb58-4115-bebc-1523dfb9e439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3aae5a-fa59-4c17-9128-c446a7ace1aa",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106de148-150c-4ecc-85eb-892e00a77428",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70f3b570-c266-4a90-a4e2-cf09f645da25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf700ef-8abd-4fc2-af6c-9e874a8a28d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fc2327b-b668-43f8-ad79-16a368dbda9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d7deaf-bf46-484b-b658-2c1df4873b96",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff09cec-1293-4733-9129-67e4925bdac5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd592c2b-81f7-4d33-9130-37bae7222437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2663fb18-0487-430e-bb05-52f63609c272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d622593a-6d94-455f-b8e0-00632887b7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8755cf-339b-4e64-bd33-183d464c80b2",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47900c8f-d314-4298-95c8-0071cb83516c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87dc7b34-de4c-4d3e-9eef-8c4637a9178a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df68b6f-0381-42ff-8e8b-4cbb8306f68d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "976e5716-d5fc-41ab-aa04-a3b3748c708f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd48d520-c1aa-4b96-a3b6-47e0eabdef24",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2baa9c-4eaf-44d7-88de-13407ed09b05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cefeb768-09d2-4486-a54c-801b068374bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28a5994-e3db-4d5b-8e7f-32a6bdd87a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22d772ad-697a-4a80-9c53-28fd271c0911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ee7899-f34f-4915-967e-59ff87b4172c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eed98de-070b-41fa-93eb-359fe59df4a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce6b3042-d917-48f1-8536-8e17aa84fe19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e49f8eb-e2f8-4131-b353-0e54b324c1d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da53171c-be70-4031-8330-174666d82a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27329fe-2e66-4302-ad5b-a8f9d0e5df40",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508faadf-c740-480b-8d32-768a1799ec1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dcd4296-65a9-4e05-9a3d-e32675611188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e88db35-583f-4be5-9bc2-833a5efcd6d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c493d814-64b3-4140-b014-a7e2a4ddce8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a7af1e-9f57-4526-b756-c39343f43049",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "908c29a1-a368-4741-9021-04147f5c7394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed0e55cf-c306-4ed7-8891-6ee1413f7b03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e556749f-0d08-459f-bbaa-cfa609193a7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1710b79d-c1f9-4c73-b65d-920a0a534368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308824d7-c1ca-443d-8dd1-0830567206ff",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8f6779-9917-44b8-afad-6c33c650864a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55bc514f-d82a-443f-86eb-9044cc8b2a61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24fb0d00-2c56-4236-a32c-7e11f7a631b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "376ba5c0-801e-4449-aec6-cb926a57b66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adff473c-4eac-4d42-837d-0e156182ef8e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8cae039-005d-49ca-95b2-e9a81f92675f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebc9ae5a-77c6-435e-baa9-0bf4b217a06b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aaa8210-5cc6-4fac-bc95-d4636286839a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e62e4b9-87b1-45a6-9974-7d24e4f4c0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de89fc5-16b2-40e1-b90c-ee747471910a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf48e4a5-1316-4a9f-930b-291e352bf1e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a03779e6-a672-4344-930a-0ca03e76e5f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6075e463-90cf-4cf5-a444-ad7495883433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3470743c-17ff-45ee-a29a-e290de954c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f1db7c-3723-43c5-931b-d19952586d8c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d14b2b9-fde2-4d16-bc4b-c82617a49e38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c47f7def-bfc9-4ebb-a607-2a51aeef5a1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8ee1f2-6026-4aab-a64c-84257c7c300a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9062a1f-f4c5-4a3e-b354-efe542b48e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a199fbe-1781-43e7-b485-74e7a1f3c292",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b30eb0e-35d7-4a27-8ca3-a5724b5fdccb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b7a3e7c-bcb3-4bb9-904a-d1eba02b4c4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1b4527-ca80-4ac9-8587-7f5aa936ee9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21c81a55-e61e-472b-99d2-018a33e6862a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25257da8-f692-42ad-986f-8f3d02b873d4",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a90ebf-15f9-480b-91ac-32dd0f6b6291",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f6d4140-bdfe-44b4-8fca-696f1ef252c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae9971d1-3460-4dc5-adad-6270cf38b41c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84d158d6-1287-4bbd-8f7e-3a4dbdfaa755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd420c8-63ed-4c1b-ae92-d510028b71fc",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e440a04-8449-43a2-8a74-8f53c0c6e562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b04c6f30-5371-4754-a4e2-5c1cfa740a52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01276270-97e5-4d17-8062-aa7630a586f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80bf3c19-65b4-48d7-a550-0914354e2110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4162c709-d6f6-4cce-aae2-cb15d4b1d8ab",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae546402-35f0-415d-be9d-3b1f11531e79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82458c58-4563-410b-ab33-77fb1efd249e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6369d21c-eab6-4856-ac9f-95ec8f7036e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba31e72c-1f5d-4bc5-9f49-25c7a3000357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27eb4c1-6d11-4b76-bf33-b7ff4fe116bf",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef33deb-da9b-4839-8075-702828ac2cf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c463adf-bb46-4a0a-9e50-37d8e0900dc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2d3637-894e-44db-9f18-801695afdd70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a645d05-24d9-4c17-acac-a6f966976e01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9eaec9a-0456-4023-8ec7-f88754701aff",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69dbb698-9705-4cb5-b3f5-249378122fcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ca6777f-e0cb-4173-a02f-eace666ad93d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c666e10-43a5-4ba9-a282-1b1caa0e74b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "032c474a-676f-465b-bc47-b350a3df64ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c33e1e-3e45-435c-ba6b-68d861829d68",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b211787f-f733-47fe-87f3-d6fb0fc3c057",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a2e1c92-8971-4a19-b89a-49d7dbe4a58f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0d0e79-6d22-4d7d-b52a-a0941e22b915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef97b2a1-3e46-4278-9467-11b252df9bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6303ee-d414-4282-bc57-85804ffa62f9",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095314a7-0548-4d3d-aeab-829f623df1ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cdb997b-a123-4fea-aea5-f1f09770e906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d8d482-a57c-467d-915e-1774e9148ea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "335aa8cb-3eaa-4473-b1ef-106e7a29ba9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b798a6-1c51-4db0-844f-e022d70867d7",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd638a54-a83e-4381-b9a0-a7e5b28ecd8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3699d7f9-a9de-4e01-9b5c-22b08467dbb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d21867c8-9929-4a26-80fd-d5ae9fa60b47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e35cbb2-d288-4a23-8fcd-115b8024deff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ded07f5-1e67-49bd-98d9-40dd6140e28b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7079bdda-f358-4757-801a-70f946a6e7f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e474f4d-c84c-4ecf-b1b0-58ab5e860d5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1424993f-011a-44f2-8595-c930bf7886f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67ff2241-3c7e-4aec-9432-3eccd50cd458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4153bd28-305d-4623-8a90-43892c286465",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c7ab9b5-5bb9-4779-a171-155bcc2ad6e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "787330e3-3b1e-4676-8696-4d9c52d608b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f634d389-3a33-4b38-b3a8-0ceef8e696a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1c200e8-8fa3-4c30-8ed1-2a15de94296a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645145e5-4448-4839-98f9-ed8875cb4b62",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9687c93f-e9fb-4b1b-b6af-23ae2ec26778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403dd193-ecf6-4dcd-a717-a8de8702d9a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b80c7f-ae6b-41c7-9951-970ff5e08775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26895dd9-59c6-4751-b06f-2fd395d3cf06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19758deb-74ff-4a56-a42c-041c181bc8b4",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf57706-bc3e-4738-86f1-c614956f383a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd49a8e-6a00-4f77-95b0-e802cf5c9cd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a92be1-30e4-43d6-a0d7-18e813a97edb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81af3126-2ea0-4203-a175-985573e5833a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6f67b8-420a-4943-a5c5-b25a24a88075",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7d02bc-b5b5-41b3-9f32-f159309d960d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c30d4782-aebf-402a-9f59-e57939f936e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f400d3-51ce-4025-ac2f-af47c65e0de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cc364ef-9ecc-4e97-8708-65f4de3b6d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5653bde-7e29-4934-a8e0-675b39d7ae34",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a002d5c9-6ba8-47fe-9170-7084e05afa17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73dde59c-ea60-4084-8f7a-5dcf06e707eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec5ddf2f-cb5d-4b69-85be-26d0d7a2af3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf2cb3b-7e36-4451-ade0-dadd4b43dc2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b742fc-849f-43e3-9888-ee9054120da7",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e87cf4d-2f29-4aee-bd32-b1bc543f5731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf2b2226-50de-4ce3-b702-e3d6ecc6cb38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a50268-f9d0-44d0-8f0d-bd06f409ec74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1fa398-bd8a-44e6-a9ac-306421aa9312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c38548-6bd4-4e1d-a16c-ea9b8e182eec",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afee17ba-e164-4a11-962e-5020390b170a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04fa8d26-58f0-4438-b10e-331a97968050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61035d1-f9f4-4921-bae8-a3c9ec08fef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eaeffa4-f1d2-4b1b-bbce-8656778491a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a2b463-cfbb-4995-a0a1-1ecfda62e008",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21be735a-d2d5-42ff-9a73-47ab18ea8c84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52152770-db4f-4a8e-8e02-fc2280422b71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3901d63d-a62c-43ba-887d-c143fa40c300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325eb7e4-cb42-4bab-b8c1-0c7a49464063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab1fb7b-2885-45fb-a8fa-84ad809c6033",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe0fada-5813-4041-924b-8c62cdb1d52d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "643ce462-206e-4ac2-9b23-80eaa65c81a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe19bec-3a7a-4b19-8565-639506727f4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d13ca14b-c9b7-4955-a6ae-119a57ab06c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1914180-db28-4bb9-913b-bb6828cbf54b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce992325-57ae-4d9d-90d6-4bba68efd60a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c7e87e4-88b2-4c42-b9f6-e9a918edf717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe5ee29-e46c-45e9-93d1-78003fc28633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ccc2c66-a87d-4ab1-964f-7fcc96169739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df893d63-c743-460e-8178-26372c475df3",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a784c0de-8537-4406-96bc-ed4a1558002d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "802bc0db-f100-4e0b-9420-385da4ca7996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51314550-c9c4-42de-82f0-a1b33bdb41fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93ec0d5b-74cf-47e2-b1fa-f2341aa11cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0031e4f1-b620-4849-bf88-6d1604e064cb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea80bcb5-610d-4279-b57e-3731aa7eecf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "911298f5-ae6c-4928-906a-02488d412d27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0264cc60-7738-471d-beac-046834e599c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1e6a3c1-0e99-4c9d-8fcf-30e96f7a4f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d135e10-2a25-4df2-96c8-db22ee87f7d3",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09dd254-9332-4e13-b199-76b4318a2e83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46059f3b-0a52-4f7c-8655-771b47cbfa9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bcff206-6134-47df-b76f-fd17718bdf0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eed5ee6-80f3-4657-ae0b-09bd63aa958b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747bd8b9-2a20-4a49-8218-ff5900dc238e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b6bb31-0d3f-4ccd-97c6-5510a9352220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "550a9898-d0c6-4078-bade-ddb3cc5a21e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bbbe9ab-53bc-48ec-842c-4b9ce35acc5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f3ecf5-d13a-4bcc-b0b7-b3e264e1eea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0fc406-7b8a-4a4b-8f37-984e9ea1a3e0",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2796f185-fc7c-463d-bbef-35243d05dab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d546ad06-466f-462f-8084-c1c0ba3de38c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59e01b18-88e2-4086-9722-cafc0ad3cfa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ffad31a-f4a6-4c8b-99d7-08b7c4be5b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b110d04e-95aa-48a2-9a50-56c78e2aeed5",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78a689d-36c6-4604-b844-55485c8a39b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6ea1298-681c-47a5-93d1-2da8fa2bf73b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6da02e5-2fdc-41ad-bb30-9af686a8040e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7efaa52-3946-425e-83d1-60263a830f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e43ded9-dc31-4915-acf1-1f08bdae711d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62fc67b1-527b-44f8-9edf-f924253ef8e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e9bf6e3-6cb1-4de4-becc-73fb5a4a30d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17bc33d5-24ff-42b2-956b-029acfa735e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d4cc25f-081a-41bb-bff1-e9760b27754f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae5537a-fba5-4971-a3e4-a731a9faa3d9",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a60ebe-c177-4746-95c5-30ce6fd2db02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a975cc1a-b587-468f-82fe-65ea0173cb44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8704138-2632-483a-97ee-8da1db04896e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab1669d-44fd-48be-adbb-27d23b247fa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d084bdf-233c-49ab-b297-b629a756c066",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ad45f6-d9d6-4db1-8d3a-421107d7a8b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c03f6f-2f25-45e7-87ca-49568217a385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b41864-9a73-4ab4-8e79-e64d3b35a92c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2dd6003-a521-48c4-85fe-873446f359fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494bed4b-50f5-4f2a-ad51-e96ca0aefd6e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8a7afb-fb53-43af-9bee-3c436f521208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1cc652c-a184-4018-a0e2-9768cf93cd0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d531a4a-7ecb-4d61-a7b9-94174e8928a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "190d1d86-5947-4af4-a17d-dff4d89b5c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8f2aa8-ccb8-4d28-9470-5f2a7862d292",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a41e733-2755-4833-8fe9-00dc6c0d39cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "715fc678-9fc6-4272-a86b-9acc3ab4ec92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b497ab-dc8a-42b9-9ee2-8a6b413f5c41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d93abd32-109e-4cf7-8d7c-2b8ee31fb5fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b592538-f413-41c4-ac8d-d77a5d3585db",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d1dbae-4a0b-4b02-a273-f0b000886d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccf07662-a80c-4a91-a617-f4f4ee785031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e5adfe-b05e-4f1d-9c81-9e8b6180e366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e3f1188-0d47-497d-adbe-11017239080c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7004495f-1a07-4f7a-ad9f-967a2c91fd8e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef7220b-b8ce-43a7-ab0c-8fe5300d9ef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb823737-2b06-4139-950e-50ccf78019a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e81c733-d8fa-4c1c-bd5d-6273b6e3f73d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "478e346d-39f9-463f-a1de-bc82a708b62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f03305-4d56-4816-af55-765dfc400a12",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d78ad8c-c0f7-435c-a848-0a7e7223aa56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bd0b080-5e06-4321-a3a4-a96f11eeba96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e208dc-3a14-471d-b8f4-acd86ec28d63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77464cab-86b2-4a8a-a864-37cc89224b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a18341f8-2c2f-467c-91ac-3679af53e5c2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0fc9ac3-9a98-41f3-94b9-54696182a93d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "377d7af1-95e5-46ee-959f-dc6bab9410f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4db33b6-70e2-4858-bf2e-dc7977c60dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13591b3a-1201-45e1-9518-231c3bfceb9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feac7192-d1ab-4997-8de9-57fa7a0d65e9",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec9e586-d244-40b5-a41e-224d278e6974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d103b638-8de4-433d-a52e-aceec3c311c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf8ebd1-8c5b-45bd-a86d-ef8de5f1cbdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ee2f53-4ae1-4aa2-8748-beaa9c001800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a486755c-09b3-40bf-879d-edae0065b28d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94392946-6c74-4c90-9295-5b876f5c63ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8526d5e4-0ab3-478f-ae4f-0aaeba043ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6361d441-171b-4629-ba33-a825d38495e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf4afd4b-49d0-4cfe-939f-5eab48eaf3f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56480614-f4a9-437d-a786-8a11d4459edc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd041a1-f501-40fb-bbed-54089d1e3bb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8acfeb49-74b6-416e-b0f5-8668b1676830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "099cdd26-065e-45b5-b3c5-c30a28da4c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec13577-b347-4158-9c79-dc5797569d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd29961-9513-4983-8771-d1cb5e29a57c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd866fc6-1fe4-4053-a2bf-b909d6245abb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d094b0c6-1378-4fae-bda8-db465085b29e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cddf082d-b8d8-4b21-858d-9ea169690d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac36c3e-74d6-446a-9c9c-47349956b80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfbc0b9-9db2-4314-8e82-34488dbd7344",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc68005f-4776-489c-83be-d68d582477fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ee5bae7-dfe8-42ee-bc95-25ed4208f726"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3ae904-3cff-4279-9bb2-e4fd29deb701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dbeae00-55d9-498f-8bf0-3f5947deac44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c44f044-9a63-48a6-8be9-aab7c40ba93d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69141761-9605-49bc-ab19-54194f2701f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcfa7a00-8ea9-4ff4-bd0d-b7b75d517000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92a85bd-22a2-4857-96f2-8d4097464abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a0c7ff8-db8d-41b2-8677-761711b26fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "982ac417-48fc-40a3-b819-32100a8b4515",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c53c42c-8f5e-4adf-a4ff-943f56212988",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7542e129-bd64-4772-9cda-8dabd5a3746d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70215f7-6203-443e-876e-252790b5ff4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3aebb60-76f5-4dba-be23-ed1e49450a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7210ed2-d17b-46e4-a7f5-66e5472c93de",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8b6361-8029-478b-89c9-2b14ed986442",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "794b514f-82e8-4e98-9c4d-c17644d2126d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e910741e-1e0f-4ef7-a983-9f45eb3ccad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e6f859d-dd92-461f-95e2-d2a95ad733be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad95c9f3-f0ac-467b-84ba-cc3bdd77e2dd",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b969537b-30d1-4b0a-a6bc-542af4817522",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a31311db-2292-4e3e-8c21-3a1f50aa12a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "068bce52-a57d-4feb-897d-0476244da1a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec17a82-be2c-43fa-8430-2e3c10cd08a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf84a957-329e-4af0-837d-b14eb8253e0a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ea6f1b-ae2d-4001-ae36-d7f6fddbe957",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1c7353f-26c0-442c-8b43-6a6b1da74b23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f2f041-fde6-4438-8f3f-eec1b0872790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95070a07-4361-405b-ae18-d1432e3423c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02cccbf1-1ded-40c9-a463-32e194ed4a95",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96639af1-260a-4e79-97ef-2d58716a801b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e35059c2-95a7-4a1f-8ad9-15df9b070892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d3fcac-c580-4a26-9005-d328f673d4d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d67be2aa-970d-4e73-a353-84a32ae77047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896c2368-5943-4fa5-943c-ecabbab5c802",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d198b1-ea23-478f-84ac-83cb5ff2ba57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ee5a680-8265-48d7-ada8-4a207f2e258f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "326ad93f-3653-4ab5-99f8-389a7b42fc8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4584aaff-ebbb-4528-a8a5-68b40a249c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32731f21-1ad7-45b0-a9d6-6b07f08eb347",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c487df26-8478-4921-904f-55a2efc08b28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f526ce7-5a49-4798-8fc1-4a92682567d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a67591-7060-41e1-94ef-42c70afd2fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab4e16da-c04f-41c8-956e-c93fc94a878d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afadf1b-ef21-4148-9126-a8a9d6b66ce4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a0e4b9-86ca-411c-9ca5-f667741a32b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bd3023b-a137-4efe-8149-8778766a942c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "025c60a4-dda7-4151-857c-fd9f4de9ea37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "285100ae-57b4-4528-9e23-1446fb22c321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d864ce26-9b6c-4f24-9b93-968b7b1875a5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab658b8-221d-4238-84b9-219a4ab86ce1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1f56752-2f4f-4cea-840c-4ad20b832935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc2d237-23cf-4394-97f7-744046e7ea14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e249c25-dd4b-4cb7-b718-61a8375524b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8cc8fe6-267a-4d9e-979a-ba13e3063b34",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bcfb2ae-9ede-4552-958b-1e7cba9f3405",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72e02ff3-8b0c-423b-92e5-d0a58edd1c15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b49298-e49c-424e-b89b-cdb9fc4f86a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e1f802-6292-4dbf-9c15-a40d81a82719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca4a4cd-022c-42ec-805c-65bbd7ad3629",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc04a41-bf02-4b39-8343-7c8ef6a5f122",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8a8d731-3acb-48c3-9899-05371e9975cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f897c1e6-8dca-4df8-ac61-af4dc7f4867a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc03b434-7590-4506-9459-bc58eb4ff600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec60b1f7-e0c8-4fab-a612-871f62834d77",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cdfaadc-185c-42fa-9b9a-bc092fc1b512",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d7d98de-d544-4331-83d1-5042b7430d70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d61cabc-cda5-42a0-a44e-b7f39b0a85eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a56c49-fc07-4fbb-826b-1d45db8aae63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "732aa4cf-7cba-49c1-ada7-ef4c4fa8264a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6bb7ea-a6d5-436d-9f99-fde0bb9a16a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "189c3ac2-3d98-46cc-b8ea-a992e6daab0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12fa59e2-d0aa-4942-8548-7a0b691f4b89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db3fa9ef-7495-4e17-b1de-60b89e1f5c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2716ce10-69ee-4d13-b95a-e7d1cf289ec4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c229032-b799-4772-bb11-ba958471d774",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6a3b83f-6e99-4145-86c7-b362e4029d10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2168d61e-8f46-4e17-afac-61f713633402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9be152c-3af5-4c32-a863-952c7298b445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b2f1dc-2d42-42d8-aa6d-e1918f867783",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e89d9b-c5cf-4f21-b4ac-22e5c095de7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3347f074-4050-47b9-b3a3-675afef6b817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1ca182-bc83-46a3-94e2-1a5210bf4c9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9fd7828-f74a-4ee2-bec1-8a3679dd449f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38afd54a-ae13-4c72-aa3f-e98edea24f85",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f126b8ed-7844-4621-a0d0-cb3b3446d481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26a02335-3ad1-4866-b2b6-dac7c137c85a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53abffda-4b73-4725-8e10-c7bcd66aaa54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd28ecd9-699d-4529-8fd3-18d93ebcfae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b94a7a-5956-4619-a077-f5ec79b4f2ee",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8a2e07-cbae-4a7b-b847-aca9af015169",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e0e9612-66f9-4f7c-b0fd-daae960ed521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf0b9ee-a7bf-4545-b0ca-def3128d1d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eb41099-acf9-4388-a8e2-16e371059650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e44dbcc9-5e64-481c-a22a-f0332f441eed",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f8bec8-613a-45ff-b667-c7b15a5a2c59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38d71416-dd82-469b-b443-f509c9ba0aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ef651b-cb44-442a-a94c-51d3c8a51477",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ce38c2f-34f0-41e3-9546-60b8e2864068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31426b8-73a4-49c0-82ea-b85c0439b79b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e05f6b6-c4a5-4890-945b-4bac4d0b3fd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6c80455-6195-4655-8aef-503b69b50efb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abb595c-676c-484f-96eb-e014683264af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a710caae-62b9-4ea5-8b8a-ab1ee0639b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ec62f1-909d-41e1-863c-22e5de3bd51e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e25c71-7429-4051-99f4-eb0e1f76f939",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ba10bea-c7db-45fd-acb3-15c3d4d575bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51080c56-8438-4f00-9ad2-264d31b66299",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ee829d-9c30-4a0a-8e46-879686285364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53592794-9f3c-47f5-b8b9-e1f5232e8c8d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9bb2c0-5ada-45b4-ac84-d3962566d371",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cc3fa3b-1367-42c7-bc30-3af5219216aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "570d9ef2-fddb-4c31-8fb9-7fe5914d6273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b775f93-168b-4ea0-b820-c19ec1f31d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ced9ca-5bcc-4a37-8d9a-b713da732c8f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a63fee0-21e2-480a-b558-bac6332ca1f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e2508ff-1847-4133-91ed-12e230180480"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6058ffec-c69b-4a17-9c7e-46738e2b8600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c199a8f8-6961-4dc9-8877-677844928493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa13acc-5174-4623-b88a-93a22a3561e6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f37d51b-d125-4035-bbf5-1f50b73fa15f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c2eb4eb-f9ba-4b48-9de8-4c426e55e9f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a34fd29-e068-467f-85c6-92ed23d29b3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1339a527-2996-49c3-9725-5c328f53f2b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc7f974-388e-4ec2-aa0f-82326e28449f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1454d263-0a0e-463e-ae6a-95f1d305e0fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15c698f9-3243-421d-aae1-2b417bd72a41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00bc9e13-abbb-4724-ba96-29d2acc1ba4e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8fd2ea4-a839-4746-a57b-68f0ae08f6ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f16a16f-c0c6-4f73-afec-1d21a75eb85c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a53180-9f2a-4740-8478-cc7aa78e24ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb3a57f9-f036-48fb-9845-f5250a7b8274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4d35ac-82da-475c-83ad-8fd91ed2810f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72ff47c4-5804-4822-94c8-265051e5cab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee76c3b-959d-4cf2-9205-54cec8c9afb6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1648f9f9-5c63-4b3f-ab9b-2e5c0a300699",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e13d189d-de99-4af1-81a2-c0d9bcbbf545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da155e4-d420-418d-8787-46045c9de413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb47588b-b34d-4002-bd40-7ca6229053e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e43c502-062c-4d53-a05c-634b153103ee",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da291a45-ad3d-421b-b7e0-2d03b90a9ef3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2491a80-83a6-4a56-93a2-48f658772f3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44cae7b-dc8d-47ba-9b3e-4f055ccbea9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf9061d9-fa1e-4120-88b4-6bb683e513b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e69beae-ef82-4354-8a96-d15993057c2d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a1a6cc-1f19-46e3-8bbf-826b5ed4f779",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d418a4de-48a9-4ae3-a07b-e571fa60d349"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96eb7431-44ed-41aa-8c97-88def1886e15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04294e5a-b2d9-432b-96b7-3df604d3a1a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a446351-b315-4cba-92c3-c9d94bfdaf54",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e6cab9-bfdc-4fcd-89ac-e74bb5a5f949",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c031e81f-736d-4920-99fd-65ba209e3f8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f35dc5-4b18-4e7c-a112-2255cda36120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ffadfcf-360c-4e84-bf0c-aefff9d07e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6ee455-00a9-4a52-afcd-360227dba586",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c2e0661-e0a2-43d7-b184-305ebafe163f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e7a72ad-6561-4abc-a38e-4fbe74724fb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ccafd7-37d3-485d-b22a-38870f8af66c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07fe92fd-77b9-4267-a991-9a21ae02bfaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a46ba8a9-677d-4c3f-b712-12757da49e2e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32b52aa-1953-498f-9faf-eda43498fd9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b858e69e-e08c-4916-8a2b-1449342755f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5c33c2-3a39-4e87-8bf2-3e295044bc20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfba7fc8-fdc9-4a27-8857-f3b74e737031"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4207845-abe9-415e-b8e3-86400edb90b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba1dbeb8-7ad9-4083-85ff-fa1620e4bb03"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be9e6b72-2946-455f-86d3-77918c05b17d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0c709369-6b1c-4843-aec1-d75be1003a0f"
                    }
                  }
                ]
              },
              {
                "id": "0c6822ba-50b6-49f0-a48b-ef0e05f8a31a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1bb3b16b-c054-4809-8b38-8d8cc797122c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac26806a-fda8-4555-b22e-85f7d79ccd4f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c06d5236-d899-4b0a-91d7-b3eff2c9de94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebceb01-8414-4760-8ee6-1afdd5d49fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1214f2cb-aff1-46e0-bc7c-970e2a489444"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f086dde6-d147-4d16-8ac2-459171f7c468",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb5ed0e6-d6fe-4232-a1e8-f61ea15ce73f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "472f4cc8-2775-41af-adf8-f02fc9aee480",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8015a918-5986-4379-b0ef-d2ccb026c004"
                    }
                  }
                ]
              },
              {
                "id": "0185aafa-546c-41ea-8615-69a961c59f39",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "73971185-7c70-4d4d-998e-451a6dc82923",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb8f0a9-aa14-4a98-8c8e-7f9791ced29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e8005502-4e8f-4601-b21f-647d58d9925f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86535363-f684-487f-a378-967aa56d6fd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9bc2fe3-bf51-4fb6-970e-045572e5e97d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1ec5c1cf-810d-4032-bfe9-b9e98367a4b0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0dcd3ace-58aa-4245-802c-0eb642169727",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b1469ab-092b-4113-b249-ebb30ff6b89e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7bf4d6b7-58af-4ab9-b0f0-9db1becfaa4d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "902d7d0c-a1a3-4383-9393-66a77132a418",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d228b489-69a5-45b3-b796-c365749c624a"
                    }
                  }
                ]
              },
              {
                "id": "c6e5faf4-54c2-449a-9fa0-80c774d5dead",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "279bee54-bd44-4e49-9159-9a0c770e93b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8de5c10c-f6f0-4f3f-9b28-ef77ce56bce2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d19b6bb-1b4b-4e58-afdf-a8a2a7a91d88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d23ac2cc-754b-4172-80f7-f11f24acb47d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f0ec183-560d-4c00-a4bf-8dfd94369aad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8c6f199c-6e22-409b-911d-0f1ec8881ef2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1870e3b0-0002-4c9d-a5c8-1e89679d1d6b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6654b3c0-fe5b-48bb-bf4e-9884318b55e1"
            }
          }
        ]
      },
      {
        "id": "019cbc4e-4e3f-4e94-8a74-bcdcb3322c4b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a3aa57e4-b5db-4f44-8467-262e65bcd4cf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec60d80d-aff3-4fd4-997a-42171331d979",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7bed8694-d27e-49aa-b6b8-582d5f382ee7",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b493cf-9e97-43c2-b83b-7b6c06d81fdd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "57cac0f8-11bb-4544-87c4-e0382ac52cea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4016f70-88c5-4b8b-a487-6398f4d4e6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d774f00b-ef88-4b68-bf1a-d8514cee84e6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2169a5bb-966d-4fab-b3a7-c913e6af415f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dccadf27-6623-481d-9981-5cf2567752df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "175fd933-3eae-4eac-abe4-3fe0325dc780",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "694be123-8524-44c7-9db3-8083e7a8ec55"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2161d720-bbcf-4289-a12e-ea700f24ecc0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "cfabfc4e-fe78-402d-854c-efc7a7c3688d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "641e45e7-eed2-4569-889d-fab5a3a447e1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "73028d71-11df-4618-a807-4df41407ac5f"
            }
          }
        ]
      },
      {
        "id": "547faced-b354-47f0-b0bb-8e28537e64c8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "bf4f0f90-ad9c-4634-9eab-aa9544ba2001",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c06d1fb-85ee-4f7e-b794-d865ccdded96",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6a9479b0-6f27-4be0-8157-90df15e7ac89",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43fa6671-ee6b-44dc-9115-0ac655d07653",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be3da0d8-e546-4907-9110-53c8bfe0568e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b36d694-2520-4376-9ab5-467b0b83b9aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "993abe17-6601-4ceb-adf0-b2dc0404e9f1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab1eac26-5ff5-4bc3-a4b0-a01a0f4364e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8ecfb60-d5a9-4417-8a8b-d7788e8d8a69"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "66a2db63-4887-463a-b9c0-c649bbaa00ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "964b692a-0143-4335-8ea0-2836199aefab"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "138d4461-6743-4fb4-a729-30b096c8adab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4e5d0c47-baa9-4625-b336-21b1fc54fad2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff61d616-f8c5-485b-96bf-8d3d5de9c431",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6dc2f46d-73b1-4e9e-9593-aba3d999ac0c"
            }
          }
        ]
      },
      {
        "id": "d04d7172-ea7b-4587-9728-c148eb73dc65",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ac04387d-8f32-4979-91c2-0a30a8f7d3dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c14da0ae-8af1-4bcb-ab0c-455e40963d0a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8585bfcc-bf34-4d94-9972-30a5618a159f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762c11a8-3977-49ba-bd14-9c47c588f012",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d063ba41-7630-4fda-b864-c299f9466eb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5680bb9a-8e3c-4a73-8a91-baadfb987f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1838acc-5ebc-406d-a6b1-86b46c791c8f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c1f2c23-a36c-4864-8409-59578eb98723",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58cc8e85-a451-47f7-bca3-28595e822c47"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a6d9dc0-350d-40dd-bed3-6e149e51710f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f295bdb8-6ed0-408d-bd5e-7f33cb2ba575"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46923883-f254-4eba-a93a-bd7dfe56f74f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c7faa2d1-7f0e-4b44-b1fd-3bcc4fe18964"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05782665-5518-4a9a-98e5-259d81a8c99e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "420ce3c8-80a5-4599-a923-9aa60b1edeb8"
            }
          }
        ]
      },
      {
        "id": "7ce05fe6-9a56-4ab0-b901-ab5e7dad27df",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "556ac874-f809-4e35-8bde-aab9dc097d03",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5fd4b3a6-9924-4f42-a6a3-7bf1d90796f3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "86e1247e-b902-4cfe-b699-19766100f6eb",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db332e78-034d-480a-882c-ae327491b3aa",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61d0b9e2-da9d-4eeb-9bf9-e45332c3a17e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 130.72183098591543,
      "responseMin": 15,
      "responseMax": 2323,
      "responseSd": 276.20086730651775,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1693960358928,
      "completed": 1693960410678
    },
    "executions": [
      {
        "id": "9eed3175-f224-47da-993f-1e94c102dcde",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "faf74173-d47f-47a6-b618-768dd4310535",
          "httpRequestId": "adf5b3ef-a965-4489-b670-41f7cf95e93b"
        },
        "item": {
          "id": "9eed3175-f224-47da-993f-1e94c102dcde",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "425a0a97-47fe-404a-a1bd-8790d2cb67e1",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 0
        }
      },
      {
        "id": "d130946c-dce6-4483-a4ec-670b9b72a059",
        "cursor": {
          "ref": "ff8f3d9c-8c16-41f7-be6d-2989775ca6c0",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cbbfd62a-cb94-4bef-8232-df57173eefd5"
        },
        "item": {
          "id": "d130946c-dce6-4483-a4ec-670b9b72a059",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "828de6df-5b60-40cc-a7c8-5b1c18838011",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "afc416fb-2c05-4b46-985f-1d465f8cebb6",
        "cursor": {
          "ref": "c18455b9-c115-4384-97c0-f40322686756",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3bf657ae-b790-4c70-8ef9-207e79aacddf"
        },
        "item": {
          "id": "afc416fb-2c05-4b46-985f-1d465f8cebb6",
          "name": "did_json"
        },
        "response": {
          "id": "f4457c33-08f1-403f-ba90-8abeef3414d1",
          "status": "OK",
          "code": 200,
          "responseTime": 217,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9653da-7254-4fd8-96b9-61eedc230aca",
        "cursor": {
          "ref": "8652af20-422f-4f31-969f-ed7efa0b7220",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5e6a27ef-d27a-4685-af72-d71fe8b8db9f"
        },
        "item": {
          "id": "6f9653da-7254-4fd8-96b9-61eedc230aca",
          "name": "did:invalid"
        },
        "response": {
          "id": "79eb4ce4-82a8-435b-aad4-3e0857d12d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9653da-7254-4fd8-96b9-61eedc230aca",
        "cursor": {
          "ref": "8652af20-422f-4f31-969f-ed7efa0b7220",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5e6a27ef-d27a-4685-af72-d71fe8b8db9f"
        },
        "item": {
          "id": "6f9653da-7254-4fd8-96b9-61eedc230aca",
          "name": "did:invalid"
        },
        "response": {
          "id": "79eb4ce4-82a8-435b-aad4-3e0857d12d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd36fef-c762-4897-96b9-7f9329cf9863",
        "cursor": {
          "ref": "0ceca0e3-854b-4519-bb86-4252749c430f",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4fc8193a-4620-4dfd-8bd1-c3d204d4588a"
        },
        "item": {
          "id": "afd36fef-c762-4897-96b9-7f9329cf9863",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e16e910f-a312-40b4-8365-5ebfbdec7035",
          "status": "Not Found",
          "code": 404,
          "responseTime": 170,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b5fd0ed-97b4-44cb-9be3-fa3cc926a086",
        "cursor": {
          "ref": "68babb6a-04c6-4ed0-99f2-fdbfeef9ebe0",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "474f760b-b695-4f67-a14a-557a61edc011"
        },
        "item": {
          "id": "3b5fd0ed-97b4-44cb-9be3-fa3cc926a086",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e84d6238-90d5-4459-b798-591849392b00",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f8134a-18c9-4d52-b8d0-9f43b2cbd082",
        "cursor": {
          "ref": "1d06a9ae-dc11-4bf3-b1e4-425ca217c071",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "44092b69-9a87-4e5a-baf6-ef4c57dc81f1"
        },
        "item": {
          "id": "a6f8134a-18c9-4d52-b8d0-9f43b2cbd082",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "aaa9f93c-1da3-431d-be5d-89233c1c9e8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a10781bb-424a-45c5-8d1f-e90ed6422938",
        "cursor": {
          "ref": "42135375-9acd-4743-bf0c-c82961cfadf3",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8217a01d-dbb4-4d69-adb7-e58c4d7644eb"
        },
        "item": {
          "id": "a10781bb-424a-45c5-8d1f-e90ed6422938",
          "name": "identifiers"
        },
        "response": {
          "id": "b3a3e588-7337-4ed4-81e1-962b1ef1b77e",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad326cd4-4388-417e-815b-3cb06b3ef679",
        "cursor": {
          "ref": "f26ab8b9-83f6-4716-befc-b4b5e204ada0",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "22b6a0d8-debf-4988-81e0-4d06c634b1f4"
        },
        "item": {
          "id": "ad326cd4-4388-417e-815b-3cb06b3ef679",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3757cba2-ef8d-4ea0-8e6b-e3f257427f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158fb2fe-172b-4de3-bd79-e96052283c3e",
        "cursor": {
          "ref": "6b210ae0-f3fa-44f2-ac72-43541f2249bd",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8b8f4435-b595-42d5-859b-dfb9dd8546be"
        },
        "item": {
          "id": "158fb2fe-172b-4de3-bd79-e96052283c3e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fca369d6-2885-4f51-a8b3-662a8b62c499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c28ba8-604f-4fa1-8c93-1664192c59b3",
        "cursor": {
          "ref": "955a27de-f946-483d-9d32-c4d64a913e4d",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5d58203f-7611-466e-bc26-92feba2c5c7e"
        },
        "item": {
          "id": "a0c28ba8-604f-4fa1-8c93-1664192c59b3",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "81716850-a03c-4d66-803b-5075855fee52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a23ff2e-ca81-422a-8273-f1516d3aea0c",
        "cursor": {
          "ref": "13053b0d-4f3d-45e3-8d57-9fa637c2a453",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1927fccf-2ef6-499d-9b03-a7c5f92deb82"
        },
        "item": {
          "id": "5a23ff2e-ca81-422a-8273-f1516d3aea0c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f2ae3027-f805-45c8-8dd1-7148dbd7d7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77d176e-ff78-4511-9980-c65969734d66",
        "cursor": {
          "ref": "540e106f-698a-482f-bb5a-fb204567e8f5",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b3cf624e-2335-452c-b6f6-dae7a9de64ea"
        },
        "item": {
          "id": "c77d176e-ff78-4511-9980-c65969734d66",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "21b602d6-d707-4440-ace2-79f324f1699a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9de888e-83f8-4cf4-be49-1798c0e60da1",
        "cursor": {
          "ref": "a5197063-733b-48cf-b04b-0c4f6a710f7a",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a4831e9e-d9b9-4ae1-ab9e-60cfea5dfd4a"
        },
        "item": {
          "id": "c9de888e-83f8-4cf4-be49-1798c0e60da1",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9a129237-53ed-4f1c-8df9-f7d163b797d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f468dbe-803a-43e5-b269-ebac22f22a83",
        "cursor": {
          "ref": "e026b6f2-bb5b-4821-87ef-ea39554d60c0",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8fc08096-5aa1-4e2b-a6a5-4199ce0554c8"
        },
        "item": {
          "id": "2f468dbe-803a-43e5-b269-ebac22f22a83",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ae4520b1-a43c-4fb0-97ef-66e471a93b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957be718-e882-49e1-b472-97657cb6ffaf",
        "cursor": {
          "ref": "e3a90a12-173c-49c3-8f4a-70a9dd1a2673",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8952f48a-3aa3-4ea1-95e3-6b318ef8529c"
        },
        "item": {
          "id": "957be718-e882-49e1-b472-97657cb6ffaf",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "709b0593-ccb9-4e3f-a28a-30fb77b720c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e2877a-c638-4a7c-ad01-7ec786632ce0",
        "cursor": {
          "ref": "d64f9d2e-22b6-47fe-8d07-93f23578cab8",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f7c35f6d-43a6-4848-adef-72faffe05372"
        },
        "item": {
          "id": "91e2877a-c638-4a7c-ad01-7ec786632ce0",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f838edaf-445d-44d1-bd6e-5bc9bb817441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e8c6ba-c454-4208-a6f9-b1f11cfe5955",
        "cursor": {
          "ref": "0141af74-6f4f-45d9-b919-c79915783a4f",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a1dade60-ff0b-4c0e-97cf-a3e42000f6e9"
        },
        "item": {
          "id": "e1e8c6ba-c454-4208-a6f9-b1f11cfe5955",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b23d1c39-06e3-4572-a5d7-5e3b709c5b69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106b30a6-bb4b-4fe9-8c68-07542bd9d6ff",
        "cursor": {
          "ref": "a3035055-d98f-4f58-bdd8-268d984288b0",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f708b8d2-d47d-4694-ad23-bd4a46ee2ff9"
        },
        "item": {
          "id": "106b30a6-bb4b-4fe9-8c68-07542bd9d6ff",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "703cc548-0622-4403-9098-d75f580b9609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "238a7598-1e8c-404b-96cd-02cf524f8822",
        "cursor": {
          "ref": "3b6613b7-6c45-487b-bf3b-671dea680443",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e58e4e77-fb72-4399-a614-c33620089fc6"
        },
        "item": {
          "id": "238a7598-1e8c-404b-96cd-02cf524f8822",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4b9c23f6-a978-41bb-bdde-9ee2119a949e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad10d9d5-923c-415f-9b09-efad551018b7",
        "cursor": {
          "ref": "112bf8e3-2075-4e6a-be93-b2c527438e6f",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0c9693c0-2dab-49aa-80c9-dca55548e35a"
        },
        "item": {
          "id": "ad10d9d5-923c-415f-9b09-efad551018b7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ff21953b-5664-4649-9d0e-28330a3d5edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b8d2c5-7f2f-4950-8622-8bf14d375dde",
        "cursor": {
          "ref": "f8ca706f-0a7f-49a8-9d91-72bc8a561837",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "17060ed2-b89c-4ae6-9347-ea00f443720b"
        },
        "item": {
          "id": "f2b8d2c5-7f2f-4950-8622-8bf14d375dde",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8bca9906-0eed-40c1-9bcd-749a4219eb36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de11ace-9995-4773-a609-ef775c7f773c",
        "cursor": {
          "ref": "ad98fff1-047a-4dc0-98ef-abd4dc34e8f4",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ee4e65c6-58dd-4466-9651-1ff6b02ca5f7"
        },
        "item": {
          "id": "5de11ace-9995-4773-a609-ef775c7f773c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c3626f5e-2c9f-493f-a67c-f0f6b904a225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8b2db0-7a0e-4210-89bf-f09c4791885a",
        "cursor": {
          "ref": "4a5a12c8-fb41-42b2-b156-e6fab084bdae",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ec55a073-e142-48ec-afdb-232a5b8b87f7"
        },
        "item": {
          "id": "8a8b2db0-7a0e-4210-89bf-f09c4791885a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "dc7fdf78-b4a4-4460-babd-59dd1280d242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029c78cc-05d6-4d76-aaaa-034e5caf170e",
        "cursor": {
          "ref": "1f43b61b-1eb8-4ca4-b77a-743ffd4843bd",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "22179687-beaf-4c68-abe4-c605b7335e78"
        },
        "item": {
          "id": "029c78cc-05d6-4d76-aaaa-034e5caf170e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "59c984a1-23c6-4233-a70f-87b99137817f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5099f8cd-d2b7-441a-9b07-efcd784e17ad",
        "cursor": {
          "ref": "d20a9bdd-36d2-4384-b919-bb249a64d010",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ff418853-834f-4a8c-870f-290066236076"
        },
        "item": {
          "id": "5099f8cd-d2b7-441a-9b07-efcd784e17ad",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "08f83d67-6ded-4da3-bf69-62a47e7c5994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44819437-6796-456e-b03a-8a6d352e97b6",
        "cursor": {
          "ref": "9c40881a-d75a-49f7-aabf-6465333d474d",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "cf58d4ea-c0fe-4ea1-a3c8-07c073fdcde6"
        },
        "item": {
          "id": "44819437-6796-456e-b03a-8a6d352e97b6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9b1804c2-a79d-439d-8108-e7aa6371cd43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb0db108-210b-4eb6-a968-cc635951b13f",
        "cursor": {
          "ref": "ef5c4925-c136-495a-ba19-66ba7557d76a",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "fa113ab9-cc7c-42a9-b992-75756056208b"
        },
        "item": {
          "id": "fb0db108-210b-4eb6-a968-cc635951b13f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6b0e3cdc-f911-4a2d-ab70-4a7a82f66211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b49c542-10b0-4658-bbfd-f7ad493e7632",
        "cursor": {
          "ref": "51bdf483-6fa3-44b7-bda7-03935e2e7210",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f378a0ea-e757-4519-926d-9cd39b0b9a98"
        },
        "item": {
          "id": "0b49c542-10b0-4658-bbfd-f7ad493e7632",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f233ce41-9f4c-42db-9fc9-5ca160f68a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae566bd-4189-4dff-9319-219273095bef",
        "cursor": {
          "ref": "add0ad57-b35c-4cdd-9704-99d7f2c6fb95",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4bfa3842-2986-4318-adfd-d884b6f9caff"
        },
        "item": {
          "id": "0ae566bd-4189-4dff-9319-219273095bef",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e4e19679-156a-426f-9f70-9f86bb820fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "903cf764-1dbc-40c5-8a24-5d81da6fd802",
        "cursor": {
          "ref": "d375a9d6-d66c-4a9f-b6ee-998621c0e8ea",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b8669168-66a7-4ff9-b9e7-831f9fc6a1dd"
        },
        "item": {
          "id": "903cf764-1dbc-40c5-8a24-5d81da6fd802",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7581be37-7fa4-4f01-bda9-64a8e5ba0615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac40bd94-c078-40a7-9b0b-dbe2638137d8",
        "cursor": {
          "ref": "87350867-9ccb-4d89-b8a6-831097b139e7",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7a5769cb-9826-49ed-8c28-6b6c07175bfc"
        },
        "item": {
          "id": "ac40bd94-c078-40a7-9b0b-dbe2638137d8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5f5d8c0b-93b4-4c43-b787-ff0c03113baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f036bfa-fba1-49ec-a639-987eed5bf5cd",
        "cursor": {
          "ref": "cce38813-29d6-432f-af2c-f5b7081ce251",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ef1ae394-fe58-4d7b-86b7-54bb0b9e64e2"
        },
        "item": {
          "id": "5f036bfa-fba1-49ec-a639-987eed5bf5cd",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "dd348dd3-a847-4823-a305-ca1d3f35626e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9508fc4-c29d-486f-b6cb-6019f3c8b10d",
        "cursor": {
          "ref": "969c4742-5ac8-450a-9cb6-adb30fc51b73",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "132b66ef-5e99-47dc-847f-2247c36f03e7"
        },
        "item": {
          "id": "a9508fc4-c29d-486f-b6cb-6019f3c8b10d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7f6a9a26-81c8-49cb-8bf5-8c6729c77db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58165242-6ce1-4c9c-a84a-eeaf5ed62745",
        "cursor": {
          "ref": "788fb3b9-ee86-4284-85ad-ff44dcc1d02c",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1417ec13-932a-4be4-a8b1-ded1c2307486"
        },
        "item": {
          "id": "58165242-6ce1-4c9c-a84a-eeaf5ed62745",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "02b0f7da-0944-4d57-961f-bfbcef0b0c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10eac2f2-1c3c-4b13-9ba0-ef1fdd4bcc3e",
        "cursor": {
          "ref": "01443279-b8f1-405a-80de-0843d7e6ab4e",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "afe2d982-a0db-4a5e-bce7-5eae70e57b3e"
        },
        "item": {
          "id": "10eac2f2-1c3c-4b13-9ba0-ef1fdd4bcc3e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6581c621-13cd-4816-802a-4b3dc22578b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fef3232-b4c2-4011-a7ff-96a10d381a3f",
        "cursor": {
          "ref": "8fa2f423-b780-4fd0-806f-e661c7c9adc1",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8c519038-60d0-4bf6-acd8-2650a7ee1302"
        },
        "item": {
          "id": "2fef3232-b4c2-4011-a7ff-96a10d381a3f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "086d93b7-bca8-4713-88b9-4abc8a55c456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e96936-5c31-4ce6-b56b-adf9069fc1cf",
        "cursor": {
          "ref": "9db41b41-305c-4f5a-8eff-8287d6742302",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ec5e92da-c945-452c-9099-e9f9f21338e7"
        },
        "item": {
          "id": "36e96936-5c31-4ce6-b56b-adf9069fc1cf",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0fa27416-2d2b-488f-93f5-eafdf63412c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbfd1d8a-bb9a-4892-b850-25ff0608b99d",
        "cursor": {
          "ref": "b19b1b71-dc54-499e-9473-a5bba139bbd7",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b32f2624-fb10-4891-a93a-197b3e13223c"
        },
        "item": {
          "id": "fbfd1d8a-bb9a-4892-b850-25ff0608b99d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e0f96fe7-f7ac-428f-848a-e1b3ee606040",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "9470e93b-793e-41e9-a999-e47c8bbdd997",
        "cursor": {
          "ref": "66b1fd9b-0cf1-4955-a663-05c43c337437",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "70eb8df1-4188-4046-83e1-670114dd6743"
        },
        "item": {
          "id": "9470e93b-793e-41e9-a999-e47c8bbdd997",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e0a6c8fa-f3e3-4d93-b3ca-c3444839b2f8",
          "status": "Created",
          "code": 201,
          "responseTime": 2323,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "bbab9fee-3467-4d7a-90de-621408f55400",
        "cursor": {
          "ref": "cb3a3b80-e298-44ad-b9f0-8f24e9d5bab4",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "edbcc702-43ab-4dc0-970c-6f9a26439482"
        },
        "item": {
          "id": "bbab9fee-3467-4d7a-90de-621408f55400",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a52ca1e5-b06f-49f6-92c2-9c8eca626047",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "c185c2dc-36c5-47c1-8377-60bbaec41bd2",
        "cursor": {
          "ref": "d18ddde3-65b2-498f-aa90-1b8d3aacbbf4",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "15fbf530-368e-4f84-a1aa-782fed08462c"
        },
        "item": {
          "id": "c185c2dc-36c5-47c1-8377-60bbaec41bd2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "036ebcc1-47df-46f7-8998-cb0d73728fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2afdd00-0480-4d33-abed-4a689f5df015",
        "cursor": {
          "ref": "9341dda9-7467-41d9-b12d-456df633a035",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2f90a330-fe3b-4888-8559-7467aa94422e"
        },
        "item": {
          "id": "f2afdd00-0480-4d33-abed-4a689f5df015",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "44fe6110-31b9-4106-b5ad-7a9263915e26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e8010b14-71b1-443c-807b-93dadcf934f2",
        "cursor": {
          "ref": "b92ca1e1-b2e4-4ad1-bb52-2f2e1a748ce8",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b190415a-df58-43da-87ca-abc930982950"
        },
        "item": {
          "id": "e8010b14-71b1-443c-807b-93dadcf934f2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "76e1db92-2b37-44a2-947b-c363c8080287",
          "status": "Created",
          "code": 201,
          "responseTime": 1587,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9484f7c6-0dd9-4527-b767-8c13f60e30a5",
        "cursor": {
          "ref": "d101d741-02d9-4832-9f1a-2e7c775ebf92",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a6fba2f4-0b91-446a-ab81-27b8aae824a6"
        },
        "item": {
          "id": "9484f7c6-0dd9-4527-b767-8c13f60e30a5",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "82fc21da-2425-4091-b59e-70a2f7b572f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1bf55766-cc1b-4c69-abea-a1a68b9a4691",
        "cursor": {
          "ref": "af09aa2e-f047-457d-ae37-4221af478849",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "52b1cd35-0d25-44d8-b8f3-6b44b5b2e806"
        },
        "item": {
          "id": "1bf55766-cc1b-4c69-abea-a1a68b9a4691",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "73881943-2e5f-4fac-836f-201ccc2c8568",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 843,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "821dc8dc-8040-4686-b647-824ed580d3e1",
        "cursor": {
          "ref": "93d348f3-0d77-402a-b8df-63a12804a145",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a53ef47f-a5ca-47f6-ad74-5346db64f593"
        },
        "item": {
          "id": "821dc8dc-8040-4686-b647-824ed580d3e1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e82f40b4-8a10-43fd-af6b-9f28bc7938c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0789bc6a-e7a8-439f-b169-b68dfaeaa260",
        "cursor": {
          "ref": "333bc3b2-41af-4c09-9f0c-4e54d9e5972f",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d5f1e1ff-9277-4e63-ac36-3d0bae947f46"
        },
        "item": {
          "id": "0789bc6a-e7a8-439f-b169-b68dfaeaa260",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6e0894a5-a093-4313-9cfc-d7850f2794a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "bffb2f27-e65b-4543-9ec0-f116f251a160",
        "cursor": {
          "ref": "0c0118e1-8551-4ee8-b730-177a89b859cf",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a9523cc5-be99-40d4-953d-5d55fc8c3417"
        },
        "item": {
          "id": "bffb2f27-e65b-4543-9ec0-f116f251a160",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6e459b5a-47df-4339-9e76-729fc09ea930",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "7912b309-5317-4b3d-9976-b3535dcb44e9",
        "cursor": {
          "ref": "0427f453-3664-4af3-9345-2ba711d29f2c",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "31d0d705-73e8-4865-8643-fb9cb7d3bacd"
        },
        "item": {
          "id": "7912b309-5317-4b3d-9976-b3535dcb44e9",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9af6c8fd-eccb-431b-b73a-f8f6d774a105",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9abedf85-1718-42b5-b904-f3fe5fa80164",
        "cursor": {
          "ref": "e80012fd-865e-4d23-9529-293f4e45a64b",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "be8fb9da-93a9-40d0-9a92-3292bfda9a45"
        },
        "item": {
          "id": "9abedf85-1718-42b5-b904-f3fe5fa80164",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "15e39235-81c4-4707-aa9c-c4a69e6f88f1",
          "status": "Created",
          "code": 201,
          "responseTime": 1062,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "08305f18-a45d-4b17-82b5-eb52e690df57",
        "cursor": {
          "ref": "0a07d084-9a50-4462-b65a-cd05f6ecc68d",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "591c77a7-53f8-453c-984b-dcb7e00bdc9e"
        },
        "item": {
          "id": "08305f18-a45d-4b17-82b5-eb52e690df57",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0cca3d9a-b40f-42a5-bda4-8ab664fb559a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02960984-2f3d-4acd-b8af-1d31546e7d4f",
        "cursor": {
          "ref": "0c85cbd7-d1ab-483a-96a3-35c91d266637",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "982affdd-c94c-47a3-b601-3a7754be3a0a"
        },
        "item": {
          "id": "02960984-2f3d-4acd-b8af-1d31546e7d4f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d1b300d6-8548-42c3-82b9-e650a19c354e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d8a627-a6c6-4234-819e-6786c101df16",
        "cursor": {
          "ref": "bb547d89-03c8-4f4b-84f0-5672fc512020",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8fa056cf-c188-4824-839f-ba1cd0b7788e"
        },
        "item": {
          "id": "83d8a627-a6c6-4234-819e-6786c101df16",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0d113892-e4e6-456a-9df8-1433443c693a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52298abf-32eb-405f-a7a0-c34a48260019",
        "cursor": {
          "ref": "67cf48e0-e502-4d89-9b15-b404f6d0b3a8",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0309d8a7-ff79-4d2e-ab77-3eddc801fae9"
        },
        "item": {
          "id": "52298abf-32eb-405f-a7a0-c34a48260019",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c74229f2-6103-47d5-b422-26fbf3f3dd8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c139c5e4-4841-41ba-bbd2-9167bc53b076",
        "cursor": {
          "ref": "03d7d35b-2fd1-4a3d-8a93-12857f4e45ef",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8f23103e-f797-41a8-98fb-5e98ed05e0a7"
        },
        "item": {
          "id": "c139c5e4-4841-41ba-bbd2-9167bc53b076",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c690e444-36d7-4f8a-80ee-33d1061cac07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2bdabcb-743e-4cc2-b631-b2bb5d66345f",
        "cursor": {
          "ref": "654be0e6-f411-46cc-9775-31375a50d11d",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3e19c46f-68e7-4d6d-85ac-18cc02ac79b9"
        },
        "item": {
          "id": "f2bdabcb-743e-4cc2-b631-b2bb5d66345f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "12777c37-8be3-45e5-bcaa-d77c8b8e295a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a16a7f-ba7c-4586-a0dc-ba06a96ea4ed",
        "cursor": {
          "ref": "c354cb79-268b-4f06-8ee6-6dd0df414ace",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0446e004-3155-4498-a1e8-cb757815de38"
        },
        "item": {
          "id": "a2a16a7f-ba7c-4586-a0dc-ba06a96ea4ed",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0ef6275f-2552-4984-b0d9-186799fd66ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25bf5747-b011-4ee0-8457-b3cd586e33c9",
        "cursor": {
          "ref": "c7196670-c144-46ed-ab06-4b12628f5887",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "11a8d1ba-cf9e-4e68-a0ce-98a67ece07b1"
        },
        "item": {
          "id": "25bf5747-b011-4ee0-8457-b3cd586e33c9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f5552470-95da-4219-b7ca-00dddf261872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02ebf90-4305-4a08-aaed-91cbbdcca042",
        "cursor": {
          "ref": "3bf5082e-82af-4a4b-8576-ba2069899ef4",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "79fc54ca-8c44-4271-90b8-b5fdf54df208"
        },
        "item": {
          "id": "e02ebf90-4305-4a08-aaed-91cbbdcca042",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8d0153a3-534f-46e7-8d8e-2fdc7a0e7acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162c5c1a-6bfc-4581-bf6a-716034d764d9",
        "cursor": {
          "ref": "86ffec31-959c-4400-8791-8b83ccb80723",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a22b4113-9cd8-4c22-b90e-958b1a257846"
        },
        "item": {
          "id": "162c5c1a-6bfc-4581-bf6a-716034d764d9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "070256a6-c8db-482f-89a6-1a1570dfda45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "157f8ef0-d4f7-4d07-850d-bea876ac4504",
        "cursor": {
          "ref": "a7b932e7-700e-4afd-892c-a921d4534ea8",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8c0c6f56-8dd0-4838-9d1e-67d5ebe22a11"
        },
        "item": {
          "id": "157f8ef0-d4f7-4d07-850d-bea876ac4504",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "876e1173-58a2-40fd-b378-0f76a6b33add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c45620c5-ff4c-4668-9280-75a2b0b90cc0",
        "cursor": {
          "ref": "b2b67d2b-0483-4cf4-a143-25006bab48bd",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "eaef81eb-4f0a-453c-a57f-d3af2c2909f9"
        },
        "item": {
          "id": "c45620c5-ff4c-4668-9280-75a2b0b90cc0",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "647321b9-b105-4026-8a96-5fe27c1c9e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e6fc44-0c36-4df8-8caf-e9f5a332104a",
        "cursor": {
          "ref": "14bd66f7-9d8d-498c-998f-d645bd927e75",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "04ee470c-f8e0-4400-93ec-a6ce28802615"
        },
        "item": {
          "id": "51e6fc44-0c36-4df8-8caf-e9f5a332104a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "199160a5-4445-4d3f-98fe-f5627f7defed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e893e32f-edd6-4f3a-a140-92b246a90615",
        "cursor": {
          "ref": "cd0b7ce1-7263-407c-b331-b96f3ddd2180",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1b259a66-a6f7-4e5a-9a5e-00925baa9080"
        },
        "item": {
          "id": "e893e32f-edd6-4f3a-a140-92b246a90615",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "fda8b733-d533-461d-a111-e1d47fc7a4f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 769,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d71e640b-b0ca-4f5f-b84d-0ce18a7ddc13",
        "cursor": {
          "ref": "0bc4ee7e-f682-4a72-987d-ce02e1867528",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "646a5836-5f8f-45b6-8344-2a249ef3dd09"
        },
        "item": {
          "id": "d71e640b-b0ca-4f5f-b84d-0ce18a7ddc13",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f84cf753-2ffe-4606-b3e3-c4459126feea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 814,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "e6490f21-93d0-4a92-9e1d-89d3fb3a2cda",
        "cursor": {
          "ref": "2edcfd99-483d-414a-9a8e-fd90cc7900d1",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "eab202b0-9b5f-46d8-847a-18cc20f30a56"
        },
        "item": {
          "id": "e6490f21-93d0-4a92-9e1d-89d3fb3a2cda",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d578b4e6-d50f-46c9-95a2-4858867fd87c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "16d461c5-b0b3-49b2-8045-95cc5ae07a78",
        "cursor": {
          "ref": "a3da2ab5-b5b1-4a54-abb9-5175029d738d",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a63d7bfd-153b-42ed-88a7-dc4641520187"
        },
        "item": {
          "id": "16d461c5-b0b3-49b2-8045-95cc5ae07a78",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "44a2a38c-6a89-4836-b6b5-7ffd3f3c38bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 827,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "bc07fc78-1b48-41ae-8bdc-cae99a2e75aa",
        "cursor": {
          "ref": "6253b760-6a9e-4491-9728-87e5a9b618c1",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "78f8760e-790f-4df1-9172-69f478316a53"
        },
        "item": {
          "id": "bc07fc78-1b48-41ae-8bdc-cae99a2e75aa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "4aa82302-5967-46f3-9079-832d00b96494",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "533e1bd4-42b2-4295-affa-343e675118b9",
        "cursor": {
          "ref": "5a137f03-3705-465b-8be5-b16e0ef16c2d",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2621f2d4-9580-4f10-8756-0aeb707f4585"
        },
        "item": {
          "id": "533e1bd4-42b2-4295-affa-343e675118b9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "193236d6-e0d5-419e-9bd9-9ac52a82869b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a506f0-4f0e-40d9-b1de-924a9c7e3d93",
        "cursor": {
          "ref": "47d20da0-e88b-4c91-8701-131a52bfaf17",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4f4e7825-450b-41d3-9725-5a2d7d4d03de"
        },
        "item": {
          "id": "e6a506f0-4f0e-40d9-b1de-924a9c7e3d93",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fb62be21-89ea-445c-bcad-a425b573f2c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0d34d6-8c7f-4b5c-b199-d527b84d50d5",
        "cursor": {
          "ref": "6ab0101e-6317-4995-911e-485579d9b98f",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "27e327ab-cd4e-4174-9d83-e1b3f3e706e5"
        },
        "item": {
          "id": "3c0d34d6-8c7f-4b5c-b199-d527b84d50d5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d4cb8a08-e442-4753-8d05-591e022a3c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ec73ac-91bc-4ce8-af33-6ea5ff1ced04",
        "cursor": {
          "ref": "234fc50d-a7f6-4bbb-aae1-c14a1ff0e8c0",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8fb5802f-792b-431e-89d8-f7d2e923b374"
        },
        "item": {
          "id": "80ec73ac-91bc-4ce8-af33-6ea5ff1ced04",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b44ca5ad-8eaf-456c-bbb6-f83f7a81e0f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc284728-dd45-44ec-bb70-d42ac687d814",
        "cursor": {
          "ref": "31d6e284-31a8-4acd-9cb4-3881cd61cd7f",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e45ba965-e516-479e-9f73-f18e6c61b59f"
        },
        "item": {
          "id": "cc284728-dd45-44ec-bb70-d42ac687d814",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d604ef9b-cd0d-41b4-9ac3-4b1365f9774c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf5e45b-d612-4610-8cd6-c09c0d0cf22a",
        "cursor": {
          "ref": "3eaf9ce4-c876-45cd-8133-2545f9927fdb",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "38aa7280-7817-4a29-b17f-b95c0e06917e"
        },
        "item": {
          "id": "7bf5e45b-d612-4610-8cd6-c09c0d0cf22a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c00bcf25-0c9e-4fdc-bd2f-9eaa89c73768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d31d980-5e6a-4db3-b1b0-2c3745919d21",
        "cursor": {
          "ref": "89772733-08f5-4884-88cd-13901de7ba1f",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bfad2e8d-2ded-4f74-bfc9-1ef509fa2598"
        },
        "item": {
          "id": "1d31d980-5e6a-4db3-b1b0-2c3745919d21",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d7a2029a-9a94-4f4a-8482-9abff21050b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1d632f-2d69-492b-b39d-1edf61a6e665",
        "cursor": {
          "ref": "1f67271e-a19d-4965-ad91-bcab3b2e545f",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "51a396fd-75c4-4811-96a5-25224e50be96"
        },
        "item": {
          "id": "fa1d632f-2d69-492b-b39d-1edf61a6e665",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fa87dd2e-ea5c-426a-bbda-9165201683b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8551abab-cd08-474d-a8fc-b679cab8aadc",
        "cursor": {
          "ref": "32e838b9-1b32-4a5c-9ada-6d561818e319",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "86388b79-5e29-4df4-b0c8-b66f80d43015"
        },
        "item": {
          "id": "8551abab-cd08-474d-a8fc-b679cab8aadc",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "dad89bb7-8b52-402a-a750-b50b290c88c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "061fcaa5-69ba-470b-aec3-28173726d0d1",
        "cursor": {
          "ref": "0e43e46d-41c2-40db-96e3-3be4ff17ea13",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6bf14b01-b34d-4e04-8f09-149e475fc87f"
        },
        "item": {
          "id": "061fcaa5-69ba-470b-aec3-28173726d0d1",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "853f22c1-f0fc-4000-9c56-4eadad3fd22e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4214e43-8d9d-4046-ba96-50e85224ce8e",
        "cursor": {
          "ref": "957af660-44ef-47ba-8175-f43dac4cd82c",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8a3cd073-0bc4-48e5-8aa0-25940de92bad"
        },
        "item": {
          "id": "f4214e43-8d9d-4046-ba96-50e85224ce8e",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "02a53691-5894-4798-b0d3-eb5407a405dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d498eeea-d01b-4010-bfee-9bd497acfee9",
        "cursor": {
          "ref": "63af9d80-8f5f-49ed-b771-902887708081",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "220945bc-732c-4b79-b037-77a05b848a66"
        },
        "item": {
          "id": "d498eeea-d01b-4010-bfee-9bd497acfee9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "172149e7-8666-40ff-9f70-b10d1ddb06f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "740cffd4-b9d0-47a2-84d3-2db403ca33d4",
        "cursor": {
          "ref": "1c385861-cb76-4f55-97ee-ec0b468a3746",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "913a4ec0-7b15-4cfe-b105-345cd664f339"
        },
        "item": {
          "id": "740cffd4-b9d0-47a2-84d3-2db403ca33d4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ccc4c0e8-cd01-4b98-b51b-4e141ae69e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eafc646-9e59-42f0-b13a-2d606886c6a8",
        "cursor": {
          "ref": "3a01a0d6-cb0c-4e97-9640-6fedccd8b636",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "67d7feb5-d2ed-4440-b712-0b9354cc6b56"
        },
        "item": {
          "id": "5eafc646-9e59-42f0-b13a-2d606886c6a8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "53f2864e-2f23-4798-b19f-2834d6c867e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e7f00b-bd52-424f-a644-e34de1a00fc6",
        "cursor": {
          "ref": "778a913d-f5b7-4c30-a506-bd944b40528a",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "55f0c422-fb2d-4509-8713-a0b46995b7d4"
        },
        "item": {
          "id": "16e7f00b-bd52-424f-a644-e34de1a00fc6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7bedbe88-240f-4a79-9a66-c5f432035b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139cd6f0-6c33-436f-b940-68f53fdccd7a",
        "cursor": {
          "ref": "ae3ac784-944c-4f47-8679-664b6ade2808",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0cb2315d-9a0c-4bdc-bfb6-7b9028195355"
        },
        "item": {
          "id": "139cd6f0-6c33-436f-b940-68f53fdccd7a",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0e816828-08a6-43e1-b352-90d7011bb9ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc113aaf-0bcd-458c-9116-50b151c114b3",
        "cursor": {
          "ref": "b6be1978-6e67-43d8-aad7-cf479c27aa20",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "258b1167-67db-433a-9349-dceed4a644ca"
        },
        "item": {
          "id": "cc113aaf-0bcd-458c-9116-50b151c114b3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c3e4faee-5208-4af1-a97e-352486ed36d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e288fe98-ea78-41e5-8b44-254ef7c83145",
        "cursor": {
          "ref": "28aa16e7-65cc-4025-857c-60d4889b9139",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e2fd8fba-c21f-4b87-9314-9b99d4188d2c"
        },
        "item": {
          "id": "e288fe98-ea78-41e5-8b44-254ef7c83145",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ff98b950-2576-4570-99d7-38df0d26eda1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1237a6a-8ab0-4582-a8e3-8a176ea5be94",
        "cursor": {
          "ref": "04ffb917-3c0f-4f82-a8af-021ae279541e",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7d43382b-98b3-46af-8833-723222baa142"
        },
        "item": {
          "id": "e1237a6a-8ab0-4582-a8e3-8a176ea5be94",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c4188749-4ff4-4361-a691-cb838b37595c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681d20fa-3037-494b-b71e-fce4e69e7475",
        "cursor": {
          "ref": "c4564cb6-1a5c-4ece-bc2a-022c321a13e2",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e25082ef-eaa7-46a2-9b04-0d315c223581"
        },
        "item": {
          "id": "681d20fa-3037-494b-b71e-fce4e69e7475",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b0056aec-6a9c-4aef-bb78-2b34055415a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480ed202-44b1-4e5e-863b-53ba16ad7d17",
        "cursor": {
          "ref": "ebc8eb0b-13d8-47c4-994c-7160090e7750",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8121635a-183f-442e-ae78-46c8ff500b14"
        },
        "item": {
          "id": "480ed202-44b1-4e5e-863b-53ba16ad7d17",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c307682a-1ed4-4f09-a0e9-0e3e10b8c899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "007dc121-849c-4a3f-b77b-1b328bd9f106",
        "cursor": {
          "ref": "ea1f969e-4e03-42d4-a399-fddb706699fe",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2e838332-8030-4fdc-b990-87ebe0698e63"
        },
        "item": {
          "id": "007dc121-849c-4a3f-b77b-1b328bd9f106",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "33cd2d93-efc1-4e69-bf40-9ac18c64ce28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "031b78ea-cdff-43c7-9a74-02a1e3d686e6",
        "cursor": {
          "ref": "79145af0-a5c1-486a-8fc7-d88ef7485d08",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2c92d59d-50bd-4970-b98a-8433af7d8e1e"
        },
        "item": {
          "id": "031b78ea-cdff-43c7-9a74-02a1e3d686e6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "07d8435f-a942-4f2b-a49e-32e2ad70bef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2556e254-1b02-4628-b033-e183a2fac019",
        "cursor": {
          "ref": "3ff19dc5-bf3a-4b8e-9c2c-6d2ca9822ec7",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "403ed864-654a-4dd3-ad1e-d26d001c5e27"
        },
        "item": {
          "id": "2556e254-1b02-4628-b033-e183a2fac019",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f9ad1e2c-0c6d-45dd-947e-872a10e88725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b001c0-cf85-46f4-8fbc-4bb78ab8ead4",
        "cursor": {
          "ref": "8ac81ddf-9c75-4779-a280-b60447e887c6",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f885e7b7-2522-4ce3-8a1a-76f53872935d"
        },
        "item": {
          "id": "c5b001c0-cf85-46f4-8fbc-4bb78ab8ead4",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "4a134787-526a-4231-a86a-31dfac9b3f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e268519-09df-44bd-aaa4-6fcb46d62924",
        "cursor": {
          "ref": "f7c24b84-9a44-4670-856a-1e0260eeb0cc",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9d6c874c-0a3b-4631-aa40-08fc0e9e8a27"
        },
        "item": {
          "id": "3e268519-09df-44bd-aaa4-6fcb46d62924",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9865487b-e929-4482-8a87-0d17fff0ef3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5131e4f-c2d3-4246-b4a0-75f303f784e3",
        "cursor": {
          "ref": "c846bdad-9db5-4085-a5b5-9b45d032d4ea",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "016dd9f4-d473-4f8b-969f-49ba2b78fa22"
        },
        "item": {
          "id": "c5131e4f-c2d3-4246-b4a0-75f303f784e3",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3d6fbaa0-5fda-4b2a-8b67-f7c09e7fb2ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada35c99-c8a0-4ba3-be82-c41dbf48fa9b",
        "cursor": {
          "ref": "eb088c58-76f9-408b-a429-84139cef7358",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8a0ff18f-25f3-4ee6-85da-137b265fba93"
        },
        "item": {
          "id": "ada35c99-c8a0-4ba3-be82-c41dbf48fa9b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a39ef1d1-d260-465c-9c16-1a06a6f646c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc9e1ba-93ef-4ad4-a565-7d014eab70ad",
        "cursor": {
          "ref": "4f717184-5364-49be-b93f-eb67046e7904",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ea34a5a8-ed42-4bb9-a7b3-3904c3ce59f1"
        },
        "item": {
          "id": "6fc9e1ba-93ef-4ad4-a565-7d014eab70ad",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "37ce31f0-e008-47e9-8a03-33f244da28b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa29f3d9-9afc-4dee-8c08-78b3f8edd135",
        "cursor": {
          "ref": "fb7d2e81-52e2-4ae3-b8f7-2d617b58cde4",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ea52759c-a9b4-4a6c-9e23-fd457fd10dee"
        },
        "item": {
          "id": "aa29f3d9-9afc-4dee-8c08-78b3f8edd135",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e5b6b0da-af0d-415c-a256-1dfaca89fffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc6d2c4-9aa1-4c0a-8c3c-842fb529651a",
        "cursor": {
          "ref": "4276a2f9-a331-4b7c-9009-521e0467d7d6",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "828cd998-9d43-4cbc-a158-edb1318a8e76"
        },
        "item": {
          "id": "5dc6d2c4-9aa1-4c0a-8c3c-842fb529651a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8fef74b1-25fc-4112-900f-b4d5fb2621d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dd79c22-050b-4ffa-8cfd-dadea16ac497",
        "cursor": {
          "ref": "f989ad29-c093-47f2-a73c-8331943e5160",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a8c7f479-2126-445f-ab75-9c7173108c65"
        },
        "item": {
          "id": "1dd79c22-050b-4ffa-8cfd-dadea16ac497",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5bffb83b-c6b7-451a-94f4-8473d112696f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b96ba1da-662e-4aba-b9f5-f12a2f2d640e",
        "cursor": {
          "ref": "741111e8-4ab0-4329-92c1-4c0116b2cc26",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "19581dde-6c92-4791-95ec-dcbf62dc6836"
        },
        "item": {
          "id": "b96ba1da-662e-4aba-b9f5-f12a2f2d640e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "60ab58d1-c0e5-4941-a7c1-02aae9b3c662",
          "status": "Created",
          "code": 201,
          "responseTime": 1674,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "150698b5-11bf-40cf-9e62-625b27707155",
        "cursor": {
          "ref": "dc3057b8-fb4d-4d93-8942-3746baab3b34",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d3e222e6-adb6-42b4-8cb1-deba2cd510b1"
        },
        "item": {
          "id": "150698b5-11bf-40cf-9e62-625b27707155",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ec8489c1-a29f-4209-be94-14edbaa33f83",
          "status": "Created",
          "code": 201,
          "responseTime": 1090,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d1b017-a94b-4a41-bd94-c589bb80d448",
        "cursor": {
          "ref": "435bcd35-de12-4b1c-b775-d3395f31da9f",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c802200f-879b-4bbb-aee6-c29b6acfd710"
        },
        "item": {
          "id": "86d1b017-a94b-4a41-bd94-c589bb80d448",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "cff9b8b9-89cf-4d80-81df-2197f3e91caa",
          "status": "Created",
          "code": 201,
          "responseTime": 1050,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb60fc2-6a7c-4f68-8e19-213721b06aae",
        "cursor": {
          "ref": "1776ca06-2171-48e5-9790-906dd8571de8",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "80de8ce4-8706-401b-9a05-961ded2afe9c"
        },
        "item": {
          "id": "9eb60fc2-6a7c-4f68-8e19-213721b06aae",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "242c45af-ab5d-4427-a278-20cfdbc44052",
          "status": "Created",
          "code": 201,
          "responseTime": 1107,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fcc871d-dc6c-4208-9f94-759f3f211924",
        "cursor": {
          "ref": "f7c8bfb0-379b-497c-bd12-85d24d72185b",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "26c22c70-41ac-4db7-b821-6d662c249d9b"
        },
        "item": {
          "id": "9fcc871d-dc6c-4208-9f94-759f3f211924",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "cb63c9e2-b21f-41e6-8f3a-3a09d17e81b3",
          "status": "Created",
          "code": 201,
          "responseTime": 1082,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7528ef2-ee64-4bec-a8f6-f2e642ef500f",
        "cursor": {
          "ref": "35a131ea-0f91-43d6-9171-0a4228b0999e",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f9ebc905-04d6-4c24-ad45-342fc87f1697"
        },
        "item": {
          "id": "d7528ef2-ee64-4bec-a8f6-f2e642ef500f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3647f2a0-c5fa-44b2-acc0-508845864570",
          "status": "Created",
          "code": 201,
          "responseTime": 1285,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67c44cf1-39e7-4145-8239-b3da923fcff9",
        "cursor": {
          "ref": "3255c7fb-8990-4574-a47f-fb4ef6a07227",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b2fcf2c5-2598-495f-b4cd-7a749b0ab8d8"
        },
        "item": {
          "id": "67c44cf1-39e7-4145-8239-b3da923fcff9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "51a45e24-e5b0-4318-a10e-ef8becd3af5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3746e05-57d0-4d29-853e-f4a33d708ec2",
        "cursor": {
          "ref": "532acc0e-b1bc-454e-a87c-5740795b7d4d",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "eb92a72b-87d4-47f0-ac44-605c51124d1e"
        },
        "item": {
          "id": "e3746e05-57d0-4d29-853e-f4a33d708ec2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1118a24c-519b-44ce-97cb-ee2e6b975eb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c0dab8-0eb7-46f2-a4d0-0d049c0ba3e4",
        "cursor": {
          "ref": "a3d4d759-d92c-43f2-b9b2-d78df530a563",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "358cb8c5-0645-486a-bdcc-2cf8a63ca610"
        },
        "item": {
          "id": "16c0dab8-0eb7-46f2-a4d0-0d049c0ba3e4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f5f75181-c918-4a0b-ac57-1f7ab9124af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c703466-0acc-4948-9c1a-a67cfed4df17",
        "cursor": {
          "ref": "3e82961f-ccd8-48a3-a337-3809e95ea4d5",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "55896fb6-7723-494c-ab83-def4e250c407"
        },
        "item": {
          "id": "3c703466-0acc-4948-9c1a-a67cfed4df17",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3664d45b-2e3e-4ea0-b345-641202e5cdad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92fbf6f8-0220-458f-9525-2b3e4dd55aef",
        "cursor": {
          "ref": "776e2b53-3eb3-4f43-9357-053f8b45850a",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "125b927c-81f9-4170-ba21-c52751a34ab1"
        },
        "item": {
          "id": "92fbf6f8-0220-458f-9525-2b3e4dd55aef",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c7d752e3-ff66-4574-aa10-d59034636dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a195fe23-4764-467f-99ec-c22752ecc739",
        "cursor": {
          "ref": "78162b2c-f33c-4e6c-9830-80b15d74352a",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3d02cc20-8e09-47a0-aba2-ff05db0656dd"
        },
        "item": {
          "id": "a195fe23-4764-467f-99ec-c22752ecc739",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "69861661-ec65-4758-b530-47eb8b769861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39fd7db2-7e5a-4a60-9af0-69712ac402a4",
        "cursor": {
          "ref": "9a82b299-3b35-4c73-991c-a2d765ba471c",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3cc6b5f8-715c-4386-a0df-9b33fd746a3f"
        },
        "item": {
          "id": "39fd7db2-7e5a-4a60-9af0-69712ac402a4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ec851fa6-e4c3-4d10-9065-15b6cecc8159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1038a311-bd16-47c1-9692-bb4440f9f04c",
        "cursor": {
          "ref": "ed1d62cf-588f-4c03-9666-ede6c606621a",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ca5ec0ce-97fe-46c8-b660-22a56c3a7f5c"
        },
        "item": {
          "id": "1038a311-bd16-47c1-9692-bb4440f9f04c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0213352b-1f13-4157-b752-9eff5e71ebd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bac6ad2-c062-4374-a614-a03704c20512",
        "cursor": {
          "ref": "65f8dd7a-8339-4553-8f95-626992e50fa9",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "21b015ae-7b9d-48d9-80e8-b501081d92cd"
        },
        "item": {
          "id": "7bac6ad2-c062-4374-a614-a03704c20512",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "45aa13b8-7ebd-439e-8df6-a61411d7ebe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ba4e5d-2322-4550-bb67-a3f66714c7d2",
        "cursor": {
          "ref": "80424bd7-f99e-4915-ad28-3fa6f283eab8",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b3ac9a56-a784-4c3e-a013-0e76c232e1f9"
        },
        "item": {
          "id": "77ba4e5d-2322-4550-bb67-a3f66714c7d2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "362d98e5-4b9f-4c0a-9425-5607f50b3e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b18024-91df-42d6-a558-26b4565aae5e",
        "cursor": {
          "ref": "d14ade52-0098-4e12-a355-2b9f72643646",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a68e8323-67be-4027-aab1-3eb6d33dff60"
        },
        "item": {
          "id": "68b18024-91df-42d6-a558-26b4565aae5e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "faaf0118-4598-48d7-86b5-96398dba6f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af9c5524-7607-425b-ac5f-841905ac0a37",
        "cursor": {
          "ref": "7b63d793-5ad0-43f3-aedd-a63514fdd07c",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b1a462f1-e9dd-4d6e-8355-db5d3e70c714"
        },
        "item": {
          "id": "af9c5524-7607-425b-ac5f-841905ac0a37",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ed429e60-2e8c-48c7-9499-f7eeccb94c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41957d94-8cde-465c-bee6-75b657868ff2",
        "cursor": {
          "ref": "0a8870e1-d301-4aa2-bdbd-4ad2176bf84c",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d86a2f64-a889-4a4c-9eed-2b4ab44322d8"
        },
        "item": {
          "id": "41957d94-8cde-465c-bee6-75b657868ff2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4da69789-8818-40f8-8d0c-25b4dd491ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1267ea-3261-4b8c-8b78-a9d061a79298",
        "cursor": {
          "ref": "3498e050-1bd0-4dab-949d-1f299b09aa25",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9134f497-3a2f-4f2d-9b21-328d31359575"
        },
        "item": {
          "id": "fe1267ea-3261-4b8c-8b78-a9d061a79298",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "12b72f55-acad-42e1-b2fd-8947a4113a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a49df95-68f8-49d3-a3ba-8f5bccc82546",
        "cursor": {
          "ref": "0bbf8a62-7f54-48e8-98c4-ceaa9b19a36a",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a3bf76eb-14b3-4d36-80bf-a5a230f928ae"
        },
        "item": {
          "id": "8a49df95-68f8-49d3-a3ba-8f5bccc82546",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6eb9337d-6114-4af2-9b33-d5e5b06fd6be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bc095e6-810c-4185-b103-9af842fb1a7d",
        "cursor": {
          "ref": "ef26f28d-490e-479b-9721-8a443ddfe2c1",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6522a1ba-6f12-4cba-9574-38ba94ce1901"
        },
        "item": {
          "id": "2bc095e6-810c-4185-b103-9af842fb1a7d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "dddeb988-7450-4009-8fb8-175cc3660c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48339623-68a7-4d40-8cee-9abead1986b3",
        "cursor": {
          "ref": "88d2f044-a2fc-448b-80e1-d9a6238cb42d",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "23495f9e-b7f7-4341-b862-b132dc464cc7"
        },
        "item": {
          "id": "48339623-68a7-4d40-8cee-9abead1986b3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b26b5cfe-274d-4158-8083-f45b8b5ea473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e81123b5-d667-4da3-889f-c323c33d2b0b",
        "cursor": {
          "ref": "fba5e0ae-6333-4d7c-86e8-6b4fa32bf034",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "30328b17-9f58-4bb9-9ba4-5acb24fdd225"
        },
        "item": {
          "id": "e81123b5-d667-4da3-889f-c323c33d2b0b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "809e83f0-ec28-4a86-a8d9-fa191153ec46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a57492-ac1f-4f4f-adfc-9ff8b9917e59",
        "cursor": {
          "ref": "b07e7dcf-9485-4543-87be-e3ecda0a46b1",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4325e971-535f-4c64-8aac-02a5797178b7"
        },
        "item": {
          "id": "d1a57492-ac1f-4f4f-adfc-9ff8b9917e59",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "391e0f35-d551-4e7b-8922-f99d9bf0945b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a3f2c5-1a90-4638-bb3b-8ca818aeef47",
        "cursor": {
          "ref": "b6b52737-6519-4317-8721-9ccdad3fc71a",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1929c634-f4a4-4b78-9574-d1f97a839d17"
        },
        "item": {
          "id": "63a3f2c5-1a90-4638-bb3b-8ca818aeef47",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e965fcbb-44b2-48d2-804e-55a86d94818f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfdebc16-63a9-47fc-a0e7-6f9b8f6a27d2",
        "cursor": {
          "ref": "fcb45507-b7e0-4740-9d32-ef53a78c48da",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a28f99b1-9cfe-473d-8018-75dcafe11ad2"
        },
        "item": {
          "id": "cfdebc16-63a9-47fc-a0e7-6f9b8f6a27d2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1abb5175-82e7-4650-95e3-1ceea1e15a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d1f00ec-4e61-471a-8311-4f1713c3c0ac",
        "cursor": {
          "ref": "a22c6eac-ac06-4aba-b100-f98474c4b52e",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1f2bedd5-383d-4ce3-9c0b-0dd91fdf0819"
        },
        "item": {
          "id": "7d1f00ec-4e61-471a-8311-4f1713c3c0ac",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c1320c0e-0801-48e1-9510-2573d256f859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5688f5dc-c95d-482a-9876-ebf70884544c",
        "cursor": {
          "ref": "7c13bb3c-2aa3-48bf-b276-c66de6a7747b",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6731547b-d5ce-49aa-9229-a02d814fce0f"
        },
        "item": {
          "id": "5688f5dc-c95d-482a-9876-ebf70884544c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8f1230c1-11dc-4de5-acef-3afc7920d359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641a8f69-7c74-4dac-ae1d-331f39955b9e",
        "cursor": {
          "ref": "94d78945-7302-458a-ad65-e79fb3a9d89d",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9bcee5de-443d-4336-9035-a12d3d7f79f2"
        },
        "item": {
          "id": "641a8f69-7c74-4dac-ae1d-331f39955b9e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "955065ba-dea1-472b-b07e-e5f0e3e0d840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abdd8368-c5b6-465a-967a-87d560ffae0d",
        "cursor": {
          "ref": "93eb17e3-6592-499c-87b0-4084ad21b25d",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ea4b4e36-0b07-413d-bc26-9ad8cc6c2912"
        },
        "item": {
          "id": "abdd8368-c5b6-465a-967a-87d560ffae0d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f7c4139f-e653-4c40-9eb6-b947be85af81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b1364a-c804-40db-91ee-344f7f3bc855",
        "cursor": {
          "ref": "21bd34bf-a87d-4c02-8bde-c9b8ded9d4d2",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f429be32-c191-4ec3-827b-85691ef51c9c"
        },
        "item": {
          "id": "83b1364a-c804-40db-91ee-344f7f3bc855",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "84f2b98d-1354-4467-827d-9ad831c46bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4310c0c2-7936-4c83-b1fd-cdadc9bb30d2",
        "cursor": {
          "ref": "83c16a3c-ff20-4976-a174-1c64e077be94",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "035d3640-287b-4762-b13d-e27e9805cb2e"
        },
        "item": {
          "id": "4310c0c2-7936-4c83-b1fd-cdadc9bb30d2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "141ec6bf-8363-4235-a869-e61a971aebd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86887e49-0ac1-4a5b-b3ec-7052f9d7a8f9",
        "cursor": {
          "ref": "b629058e-63dd-40a4-990a-8a0fe9f86789",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0c1bf7ea-b305-4954-8204-401a93edb15e"
        },
        "item": {
          "id": "86887e49-0ac1-4a5b-b3ec-7052f9d7a8f9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3e47f8d1-ab9b-481d-98ac-5aa3c9a1478e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44722fa2-4fe3-4012-9352-e903b592266c",
        "cursor": {
          "ref": "b5e149e9-3c67-418d-92c0-160a1ccf5fbe",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "dfce473a-2d0d-4cb5-a2b3-80e17484a33c"
        },
        "item": {
          "id": "44722fa2-4fe3-4012-9352-e903b592266c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e23397cf-a6cb-474a-bdee-9261d98e586f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ae0688-02b3-4371-9abb-3eec7fe78acb",
        "cursor": {
          "ref": "f6ae8da8-8840-4e5f-b8b8-6d279a35018c",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b84f2aaf-4c7f-4775-8812-c65b1cd78241"
        },
        "item": {
          "id": "12ae0688-02b3-4371-9abb-3eec7fe78acb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cce37864-1379-411c-bab7-7913a4c16759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f772cb63-e871-475f-9d4f-4557fd6b4f70",
        "cursor": {
          "ref": "a02756be-7955-4074-8f81-802dc2443fcf",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "cbe1ac0c-4ab7-4dc1-86a0-21cbca8db25d"
        },
        "item": {
          "id": "f772cb63-e871-475f-9d4f-4557fd6b4f70",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ce0cfa90-fdf0-4a8e-8f88-47354406d9a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0bd281f-32e2-4899-999d-3b8ad870359b",
        "cursor": {
          "ref": "36e1279b-2340-4153-bdac-50439b1947d0",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c4964222-1689-4956-83b2-0efee9cd1959"
        },
        "item": {
          "id": "e0bd281f-32e2-4899-999d-3b8ad870359b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "0567676f-d9ba-451b-a713-88ca9df17a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e765a58-5589-4a01-af27-0146520ec380",
        "cursor": {
          "ref": "82cdc020-136f-40b4-b180-72e235752d2c",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ee818a29-7891-453a-bd9f-90e96214240a"
        },
        "item": {
          "id": "4e765a58-5589-4a01-af27-0146520ec380",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "291974c5-2ac5-4f22-b620-5ba6996319aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1273793-6a2c-48a6-bf45-e5eb0e4b477e",
        "cursor": {
          "ref": "85d5e542-cbb3-45ce-b3a3-0eb9f265e50c",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "120ccf20-0221-492e-899f-6e766337d271"
        },
        "item": {
          "id": "a1273793-6a2c-48a6-bf45-e5eb0e4b477e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bb9664fc-5a7a-455f-8393-39fa57cc0326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bbd315e-0008-4b0e-9923-67e8ce70e579",
        "cursor": {
          "ref": "72b74616-5744-47a1-955c-50d75a43259f",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "56891f35-1304-48d7-a718-e46879a51f7c"
        },
        "item": {
          "id": "3bbd315e-0008-4b0e-9923-67e8ce70e579",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a54b253e-e864-464e-9139-32e99b7da908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de93bf01-4f44-4f69-a7fa-1ff5cfe87fcb",
        "cursor": {
          "ref": "c486a9a3-9475-472e-a422-32488b8657fc",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "59a08821-4717-4590-a143-4fe486f8b60e"
        },
        "item": {
          "id": "de93bf01-4f44-4f69-a7fa-1ff5cfe87fcb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0270d1b9-ec09-42eb-8f24-3343e2e7634a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "083a0036-005d-4108-a09b-9a31aa3c60e6",
        "cursor": {
          "ref": "f1bb8815-7cea-45fb-ad9d-265217e35b24",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b52cb316-a7ed-4d77-a31d-8e22589308d7"
        },
        "item": {
          "id": "083a0036-005d-4108-a09b-9a31aa3c60e6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "99916ee7-4333-4030-9299-f512a3e889c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb08aa72-494c-4fe8-bd7e-9103607c7912",
        "cursor": {
          "ref": "2dfd579a-a17d-41c9-b362-2473f27d35fa",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "04584975-c90c-46fb-af95-79a3906cfa4e"
        },
        "item": {
          "id": "cb08aa72-494c-4fe8-bd7e-9103607c7912",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2e072c50-cd16-40fc-b1f0-8c808f562aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62bca8ca-bbcb-4f2c-ba65-5b855c6c62a6",
        "cursor": {
          "ref": "49853cf2-7714-4a87-ab06-b339f1b0eb3b",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "021af5c0-ce28-4037-9b20-351b950b2b3a"
        },
        "item": {
          "id": "62bca8ca-bbcb-4f2c-ba65-5b855c6c62a6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ed5b40ac-371a-4d04-a5ea-cc1aebdf634e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ceb630-994a-4729-ac93-d26d42ede51d",
        "cursor": {
          "ref": "f131cfff-19e1-43a2-8940-e245b9aa1125",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b3769915-2d75-4533-801e-73614df08841"
        },
        "item": {
          "id": "70ceb630-994a-4729-ac93-d26d42ede51d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8c362918-bd4b-4113-a44a-6d2543119dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a5d70f-7c12-4b4f-b4c4-1d5ac35776d1",
        "cursor": {
          "ref": "008f5231-5c80-483a-8b79-616cdf4ce28b",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d116aaae-f2a2-47c1-9292-3046ed8b7a40"
        },
        "item": {
          "id": "76a5d70f-7c12-4b4f-b4c4-1d5ac35776d1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0ba3ece0-8d33-4de0-8a9e-b2341d4f076b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652aaf5a-24ee-4a18-ad1a-25d140021ecd",
        "cursor": {
          "ref": "96eea568-8e97-4b63-b1fe-eb506010ac90",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "419d16e6-5756-4e90-8aea-ee231376d580"
        },
        "item": {
          "id": "652aaf5a-24ee-4a18-ad1a-25d140021ecd",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a462af99-d050-49b5-8825-fdc8f42ed61b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca3ec21-5949-4b16-b0d7-469345e08d4e",
        "cursor": {
          "ref": "98669cbd-2906-4867-aa22-aab03c22ae47",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "04cd854b-7f8a-4ce6-bd7d-958871546b16"
        },
        "item": {
          "id": "aca3ec21-5949-4b16-b0d7-469345e08d4e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "44f1c105-07b1-4fbb-9bb1-658ddb1e47eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71f59978-41e4-4ac6-8198-c398a82449e2",
        "cursor": {
          "ref": "cc3f7812-2a99-4335-bb6a-dc8ce3c0cc1d",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "49f8ccec-90ca-4826-8fbc-2fba99619bf5"
        },
        "item": {
          "id": "71f59978-41e4-4ac6-8198-c398a82449e2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5ad71939-c091-42c5-a4f1-5c36a470ea95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32b7f0e4-5d7f-498c-aa92-62c648fd99f1",
        "cursor": {
          "ref": "2a58ed4f-4869-4ead-af6b-caeedec69393",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "872956ed-b2d5-4579-a1e4-d8444b4bb94f"
        },
        "item": {
          "id": "32b7f0e4-5d7f-498c-aa92-62c648fd99f1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bc5cb056-1724-46f0-ac6d-98be81ded7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a5b05d-61c7-4b31-b46a-0e29deabf71e",
        "cursor": {
          "ref": "c8c35318-d32a-487d-a9a4-6215d8e79434",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0b60f9b0-c00e-4a97-9d8d-b1de6702ad18"
        },
        "item": {
          "id": "b7a5b05d-61c7-4b31-b46a-0e29deabf71e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5ab92002-2d11-419f-84a5-96e29aa57aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37cbf97-dcb6-4f02-a516-8294afb10911",
        "cursor": {
          "ref": "37a07c2b-3d99-40ff-8c73-26e7c21c890d",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d4add5a8-b4aa-416e-8ccb-f3cdc5ceed3b"
        },
        "item": {
          "id": "a37cbf97-dcb6-4f02-a516-8294afb10911",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4168a2e4-49d8-45c4-a5b4-e1597f5e5784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e71ce50-4225-4ff3-8776-ef3052d5f210",
        "cursor": {
          "ref": "0bdf3c61-afad-4d25-b990-8b88771e9b74",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5e9f1ee4-7f57-4235-938b-a527b4989fa6"
        },
        "item": {
          "id": "1e71ce50-4225-4ff3-8776-ef3052d5f210",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "82267e1a-dcd6-4c42-b608-3da4a22a0e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b961be-3359-4dee-8cf7-a04c2305ff40",
        "cursor": {
          "ref": "ee8643f3-4819-4a86-8127-35a83dd75868",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b1baab60-aa7c-475d-9bfe-10fdc9faf263"
        },
        "item": {
          "id": "59b961be-3359-4dee-8cf7-a04c2305ff40",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d5b971d9-ff75-4b08-aab6-c8e8c829134a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d655d0-9f20-49e0-a318-dc4ff32f2755",
        "cursor": {
          "ref": "37cc6a35-77ee-4e07-b26b-a2d0adcffa0e",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4b454063-f75b-4e16-9283-196dba943c02"
        },
        "item": {
          "id": "c1d655d0-9f20-49e0-a318-dc4ff32f2755",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b85f6e44-71ed-4715-ad41-af6b7ec97057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8ce341c-ed22-4102-9de0-c0856578f1da",
        "cursor": {
          "ref": "b59dd6c1-6e7d-4371-baf6-c9e49d1c300b",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "19df829d-68d6-4855-ac9a-31e1ef9bf546"
        },
        "item": {
          "id": "a8ce341c-ed22-4102-9de0-c0856578f1da",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "22731cc4-d67b-4529-8b27-095408d5c5c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9286202-b013-426e-9dd0-097e1eadc548",
        "cursor": {
          "ref": "d784c958-1ef6-4e39-8e26-37a38a606571",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "72561caa-b926-4c51-90d0-29aee17dba20"
        },
        "item": {
          "id": "b9286202-b013-426e-9dd0-097e1eadc548",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "25a0a809-eea6-4d12-bd4f-b9e1dfc78ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45dcc02f-3d1b-47f4-aead-ad81e7169873",
        "cursor": {
          "ref": "69012b6b-16cc-4dd0-87a4-7162babdc23c",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a6342170-e515-436f-a7f7-9552daffa9c9"
        },
        "item": {
          "id": "45dcc02f-3d1b-47f4-aead-ad81e7169873",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0c6c6710-fb7c-43a7-8d50-0434e972f75c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb3ba7d-ce0b-4b8f-979c-865e4c471375",
        "cursor": {
          "ref": "9dbffff7-96e6-4479-9c39-217567208fb5",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5b6a504b-45d8-40a5-84da-4c9111a7ff71"
        },
        "item": {
          "id": "5eb3ba7d-ce0b-4b8f-979c-865e4c471375",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4da8d583-bc66-4229-9c9e-85101b4bdd81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13343c7d-8f7c-4207-a319-d67da33eacd7",
        "cursor": {
          "ref": "5559bcef-1feb-4d09-a086-462c1d24deda",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "50222a1e-b195-4767-a5ed-d26f06beae84"
        },
        "item": {
          "id": "13343c7d-8f7c-4207-a319-d67da33eacd7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "07f12a6f-531b-4abf-9ebd-8f95f1b1368e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7444d90-dcf0-4379-bc89-059fa91d92df",
        "cursor": {
          "ref": "7c800bfe-d869-40ac-9a30-9a2208ee5d42",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7ddd7352-78ff-4a5d-9f41-fd0a7006f903"
        },
        "item": {
          "id": "e7444d90-dcf0-4379-bc89-059fa91d92df",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9a7642ad-9377-4357-ab42-c523004f87d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3eff7e-218e-4ed2-bf6b-93b0ca208b5b",
        "cursor": {
          "ref": "47ddf581-fa1f-4933-814c-47fbd9f823ef",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "23df613c-dd56-4590-8c1b-797dc30447a4"
        },
        "item": {
          "id": "5b3eff7e-218e-4ed2-bf6b-93b0ca208b5b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "10154ad6-36f8-4d2a-9fc5-06f61f66b6e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d34a35d-93db-4d88-ac68-4ffc801f0c43",
        "cursor": {
          "ref": "1b84bb49-7c46-47e4-937f-2219276c4a79",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7f01b093-c766-4a49-9e70-257130d318a1"
        },
        "item": {
          "id": "2d34a35d-93db-4d88-ac68-4ffc801f0c43",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "360e7db3-9ec6-4aae-8b53-575cd6438238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1c2cc8-727c-41ea-a582-ace8605f6cb2",
        "cursor": {
          "ref": "67134d83-fa25-4ba9-9c9c-cf24f823383d",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d3eb0808-46b0-40ec-b74b-631d1a65e391"
        },
        "item": {
          "id": "9c1c2cc8-727c-41ea-a582-ace8605f6cb2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2ea82e91-a978-426b-8fde-78389da260fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf89d71-ac74-484e-ba37-090b0a73228d",
        "cursor": {
          "ref": "eb6af5c0-824c-4e41-b5bd-18cadedc9036",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4963f9bc-31b3-4f53-8b72-2edf9ea2ddb8"
        },
        "item": {
          "id": "ebf89d71-ac74-484e-ba37-090b0a73228d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1fe07a28-bb25-4a31-8aa4-913f686f8b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a735535c-e0cb-4db0-83f9-7cb6e444c5c6",
        "cursor": {
          "ref": "5a814ebb-b6d9-4097-8cff-5bd1bd4e1fce",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e47a2c8d-c666-4d6e-8a80-a8aea796b623"
        },
        "item": {
          "id": "a735535c-e0cb-4db0-83f9-7cb6e444c5c6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "48b380c7-88ad-4b8c-b216-c90e527759ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52df5bce-3b5b-465b-b1a5-804b6e11b38f",
        "cursor": {
          "ref": "7fad65f9-28f1-4f20-bf1d-bbb65f2de412",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1d8ee471-bbde-48c1-9011-837418d43c49"
        },
        "item": {
          "id": "52df5bce-3b5b-465b-b1a5-804b6e11b38f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "482cec7a-fc9c-40c5-a2cd-4cfa04dcd1b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "990cd1e0-5786-4b2b-9f54-d0e7ef93c3f8",
        "cursor": {
          "ref": "b2d52d1a-e35c-4e23-8e15-494ccf7016eb",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b2943643-110a-49a2-a329-a3c8be945c07"
        },
        "item": {
          "id": "990cd1e0-5786-4b2b-9f54-d0e7ef93c3f8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0a94b063-d4fe-4fba-93c6-ab145766f25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "223f3e95-99c4-4ab3-b3f8-1ae8264ca0ed",
        "cursor": {
          "ref": "023455e2-8a4a-4ec1-9560-83a5ed9e2fed",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7da2150f-b3dd-4234-b75f-cdafb49a6b28"
        },
        "item": {
          "id": "223f3e95-99c4-4ab3-b3f8-1ae8264ca0ed",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a5bf39db-d8ff-4d21-8e1e-e50ec4d14341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786e337f-e2b7-4635-8956-a1ce85013347",
        "cursor": {
          "ref": "a6ff89d5-2220-4b0a-9a10-2daead970f23",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fb788545-c6d7-4f9e-9950-3cc76aa803ab"
        },
        "item": {
          "id": "786e337f-e2b7-4635-8956-a1ce85013347",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "bd6fafdd-a405-4365-a35f-781a8751ddae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5062f3-b174-425a-95ce-60fde09662ee",
        "cursor": {
          "ref": "431ac6e5-c291-45dc-a7cb-4c1deb57cab8",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "60c1c550-2e23-4b7d-b73f-8faaec6c9a59"
        },
        "item": {
          "id": "2e5062f3-b174-425a-95ce-60fde09662ee",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "58dc0909-9d17-4708-826c-86eb370abf59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a848b2-4238-4909-bf4e-e1defad0e2ef",
        "cursor": {
          "ref": "434c326e-1dd5-4031-976e-356279ed7a55",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "338e10b7-8ed5-49ca-84f9-51917dbb243c"
        },
        "item": {
          "id": "08a848b2-4238-4909-bf4e-e1defad0e2ef",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "207d1430-fd1a-4977-a375-07b1c6964017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ece525-103e-4cd8-95e3-c61733d5f767",
        "cursor": {
          "ref": "457f11fd-f3a3-4892-9eaa-c882c32ee587",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f55d87d0-69f1-4dcd-900d-4b22c1465862"
        },
        "item": {
          "id": "f5ece525-103e-4cd8-95e3-c61733d5f767",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "6f6fe016-cc30-4f4f-befd-9af4b7b311ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8bff3fa-6137-4fc6-890c-01cbeab6d42e",
        "cursor": {
          "ref": "2d7f4536-4c7e-481e-aad1-44a71095b52e",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ab874cc1-7220-494a-8b63-1c3bb2b3f756"
        },
        "item": {
          "id": "c8bff3fa-6137-4fc6-890c-01cbeab6d42e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "db7c4954-1833-4751-a564-ae9dd120e28c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6a9c6b3-1687-42ca-8c36-6e2e2f15a9bf",
        "cursor": {
          "ref": "580fbad2-d08b-41a3-9c2d-d7e721b7fcf3",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d1192115-0e01-4b9b-893b-fb36294fb28d"
        },
        "item": {
          "id": "c6a9c6b3-1687-42ca-8c36-6e2e2f15a9bf",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "af18ce52-d6eb-4da2-a8c0-78c7b7b39b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c636d22-d3aa-4d6d-8a5a-40095615ce0b",
        "cursor": {
          "ref": "fac0f5a1-3559-4ec5-95ca-6a87318c3535",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5b86605c-311d-4e20-b419-3f9061c43f50"
        },
        "item": {
          "id": "1c636d22-d3aa-4d6d-8a5a-40095615ce0b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2314be10-2cbc-4f33-9e2a-e86215cbd4e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf17187d-47a8-4747-9e54-886f61d96f6f",
        "cursor": {
          "ref": "de4fa68c-801e-414d-90fe-7bd82f7e1870",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6d6358a8-0d53-4654-9b5a-2b538c77a7d4"
        },
        "item": {
          "id": "cf17187d-47a8-4747-9e54-886f61d96f6f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a2c5a526-ef07-40d2-aaae-711448dc8b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7bf35c-69bc-4c2e-b444-0a4f3661904b",
        "cursor": {
          "ref": "20e6f823-f606-4e4c-93c5-600ea32c87b5",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f2af628e-2344-4833-9ae0-9715b85273aa"
        },
        "item": {
          "id": "8c7bf35c-69bc-4c2e-b444-0a4f3661904b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c910c719-fa3e-4aa4-a8e7-bf848a1fef04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6047fa-682f-4ac3-829d-2199e0492013",
        "cursor": {
          "ref": "a43c3ec2-3be9-491f-9af2-3e0d5e935907",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "cf947f23-beb1-4e35-a0bb-8bcb0b7822f6"
        },
        "item": {
          "id": "8f6047fa-682f-4ac3-829d-2199e0492013",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0fbaa8d9-cc40-4ee0-89f9-c41b55e9e7af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f5b10c-15e1-4913-b7a4-6c97048afcde",
        "cursor": {
          "ref": "8989ec14-5073-46b2-bbbc-3eda0b3e437f",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9533a4b1-5629-47f3-909b-313ef8c26309"
        },
        "item": {
          "id": "d7f5b10c-15e1-4913-b7a4-6c97048afcde",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "3e8f0d1a-02a2-4a7e-bd80-a89e1d119258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e61c1e-81ec-4f07-9df3-08013b83b581",
        "cursor": {
          "ref": "eb3413cb-3cf6-4f31-8df2-649fd07bdcc4",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "cf93662e-eb8e-4430-9a8d-35783dab96e9"
        },
        "item": {
          "id": "f1e61c1e-81ec-4f07-9df3-08013b83b581",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ffe4f132-952c-4e3e-83a6-fbc4b8149968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964dca26-48e8-44f3-bba6-078854b36f18",
        "cursor": {
          "ref": "4c4e3e32-9588-47e0-9dac-014f6ead911a",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "11cd762c-16d5-422c-9944-badff59e5fac"
        },
        "item": {
          "id": "964dca26-48e8-44f3-bba6-078854b36f18",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "505ded7b-e598-4c4b-9553-2b6134642891",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "6a896dea-c0fd-4c30-82e6-10f21c9e6f57",
        "cursor": {
          "ref": "4351bb45-52bb-44a9-a843-e15c32810b71",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1553ec01-c586-4691-b97d-4c076d2f0375"
        },
        "item": {
          "id": "6a896dea-c0fd-4c30-82e6-10f21c9e6f57",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ed13baf8-67fe-4e1b-af96-d6710eb26474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373e8a92-51ed-4f0f-9a33-cf813823f6f4",
        "cursor": {
          "ref": "402692fa-47ea-4060-b70b-d19a0ff4b416",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9a95c1d5-56b0-4c5d-86ae-33472a4f81f2"
        },
        "item": {
          "id": "373e8a92-51ed-4f0f-9a33-cf813823f6f4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "eba48dd1-aedf-4c78-a75c-1efddd00064f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd5d6809-d59c-4a71-ad15-a7e3e4f8faa9",
        "cursor": {
          "ref": "1a7a3c8c-9172-4f14-b7e9-f455c1a9cab3",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "4b66911f-8a95-4273-ba10-6454190d667d"
        },
        "item": {
          "id": "bd5d6809-d59c-4a71-ad15-a7e3e4f8faa9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a753d610-552d-4a77-83cd-596c5ae854f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1649f0-43ff-40b7-ba3e-76f76b498d17",
        "cursor": {
          "ref": "7324add1-735a-4ae7-84c7-3d5344b30259",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2624fe88-df9b-4cf2-a9bf-96f39b94629f"
        },
        "item": {
          "id": "8d1649f0-43ff-40b7-ba3e-76f76b498d17",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ec0f3233-5591-4a46-affa-59b7362cb461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800c2735-e43e-4540-a97c-ea6e5e44a89a",
        "cursor": {
          "ref": "620330ea-e657-49e1-bef9-8dfe47395c32",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4b158875-a1a6-4ff7-b346-8e89bed88227"
        },
        "item": {
          "id": "800c2735-e43e-4540-a97c-ea6e5e44a89a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3006795f-0bbb-4eac-ae49-f86b8255ddae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c12027-8247-4c46-a367-ef6d537503af",
        "cursor": {
          "ref": "a377ce05-3add-4b7f-8578-9e2e621fc4b9",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3fc3c6d8-0581-4471-8b48-42ccd96933e3"
        },
        "item": {
          "id": "b4c12027-8247-4c46-a367-ef6d537503af",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "481a3f66-d76e-4b3d-b267-8b67c68d80b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38fb7ac4-738b-4165-80f1-b0c247aba9b6",
        "cursor": {
          "ref": "369f5bba-7cea-4ba4-96d4-107f05885521",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6c433b98-077f-49b7-b52a-c04a5eca32b0"
        },
        "item": {
          "id": "38fb7ac4-738b-4165-80f1-b0c247aba9b6",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "97340745-e4a4-4f1c-84c6-2bd09e6d085e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ddaede4-1d42-4951-9cdc-632863b7bb0b",
        "cursor": {
          "ref": "a9e6c669-cc81-48a8-9559-c6fc3ff1a9f0",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "bd43af2c-8356-4311-8e3a-cefe5aa0eee0"
        },
        "item": {
          "id": "9ddaede4-1d42-4951-9cdc-632863b7bb0b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3f8752ce-ae1f-406f-a435-8b9e99f9a9ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b3aae5a-fa59-4c17-9128-c446a7ace1aa",
        "cursor": {
          "ref": "6f78f866-10c8-4141-a62d-04c0ff1c11e4",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c26abe04-d2ab-477b-8e73-e37e1f3f7dd2"
        },
        "item": {
          "id": "2b3aae5a-fa59-4c17-9128-c446a7ace1aa",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "07999c87-060b-477f-a2a1-4aef35ccec4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d7deaf-bf46-484b-b658-2c1df4873b96",
        "cursor": {
          "ref": "96c3ad66-11f6-4822-8839-994aecf071df",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "70ded914-9932-4264-900b-573c6a471044"
        },
        "item": {
          "id": "b9d7deaf-bf46-484b-b658-2c1df4873b96",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "64c1b9c9-556a-4a7c-9a57-8e8bd22f268d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8755cf-339b-4e64-bd33-183d464c80b2",
        "cursor": {
          "ref": "70036d92-2b2b-476b-be17-b6a7d00ff5f8",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "637da0b7-ac29-44da-b67a-0b07743397f0"
        },
        "item": {
          "id": "fa8755cf-339b-4e64-bd33-183d464c80b2",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3d6bf377-44d4-4bc7-90ed-a7fddf4f59a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd48d520-c1aa-4b96-a3b6-47e0eabdef24",
        "cursor": {
          "ref": "4992de96-f968-4c4d-9859-238dfbc5c552",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "885762ee-ede2-4baf-a431-a6e3a6b2bf2e"
        },
        "item": {
          "id": "bd48d520-c1aa-4b96-a3b6-47e0eabdef24",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "daf6f6c3-4367-4021-8082-4152fcbcab90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ee7899-f34f-4915-967e-59ff87b4172c",
        "cursor": {
          "ref": "c7319be0-2441-449f-a339-9b7b9ee9fd30",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c2b3d16e-bd87-4036-993d-3f98d02abeea"
        },
        "item": {
          "id": "39ee7899-f34f-4915-967e-59ff87b4172c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "97f432f5-5af3-4502-a7af-aba15a227931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f27329fe-2e66-4302-ad5b-a8f9d0e5df40",
        "cursor": {
          "ref": "104151eb-170d-4f02-a220-2a69b419c203",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e7625d3d-3baa-46d0-a8f1-3f400c4ef158"
        },
        "item": {
          "id": "f27329fe-2e66-4302-ad5b-a8f9d0e5df40",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f2419f90-08d3-43d5-8b6b-f25291e41b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a7af1e-9f57-4526-b756-c39343f43049",
        "cursor": {
          "ref": "cbf25525-9b3e-4938-8366-34c0717583ae",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5310cdc1-4a6c-44ad-89ab-413a3b10e5f5"
        },
        "item": {
          "id": "54a7af1e-9f57-4526-b756-c39343f43049",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "762f5880-4cb8-41fd-8cec-c43c1aa99601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308824d7-c1ca-443d-8dd1-0830567206ff",
        "cursor": {
          "ref": "b548e4e6-3ebd-4ff6-a26f-1d34dafb6dd1",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "33f5bbd9-5424-4d6e-8919-c7e7b3b906f8"
        },
        "item": {
          "id": "308824d7-c1ca-443d-8dd1-0830567206ff",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7c86869b-2a22-453b-9185-92776173a904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adff473c-4eac-4d42-837d-0e156182ef8e",
        "cursor": {
          "ref": "b49b2cc1-b696-485b-a2b6-e15123ff44c2",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a6441ada-6b1b-4b79-9870-1459e34c5945"
        },
        "item": {
          "id": "adff473c-4eac-4d42-837d-0e156182ef8e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d5898460-e1cf-447e-b5ac-a651f9987f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de89fc5-16b2-40e1-b90c-ee747471910a",
        "cursor": {
          "ref": "29777860-e6e7-48f2-ba69-56149ed7977f",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1ac98794-e399-4ebd-8cf2-c96c19e29caa"
        },
        "item": {
          "id": "9de89fc5-16b2-40e1-b90c-ee747471910a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "91abc9dc-cb63-4af5-ab0c-f7411f121101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f1db7c-3723-43c5-931b-d19952586d8c",
        "cursor": {
          "ref": "dfaf5257-3cbf-4130-963f-ba851ab1fc24",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9ac0d13d-0ac8-4e2f-9327-be1d60942a56"
        },
        "item": {
          "id": "b2f1db7c-3723-43c5-931b-d19952586d8c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "66b7839a-d4ca-44be-a5f5-639c696ad3ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a199fbe-1781-43e7-b485-74e7a1f3c292",
        "cursor": {
          "ref": "f6b193c0-ffba-46dc-9fca-760172097a31",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f37164ce-f760-42c2-8809-bee73f409a5d"
        },
        "item": {
          "id": "0a199fbe-1781-43e7-b485-74e7a1f3c292",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "58c538af-95e1-46a9-a570-469fffc105cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25257da8-f692-42ad-986f-8f3d02b873d4",
        "cursor": {
          "ref": "11cb681b-473e-4974-9057-e821f156633b",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "44a6ad5f-2e2d-47b8-bca3-5ce60a799959"
        },
        "item": {
          "id": "25257da8-f692-42ad-986f-8f3d02b873d4",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b9c3a6d4-012b-4374-8159-008bd8a179b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd420c8-63ed-4c1b-ae92-d510028b71fc",
        "cursor": {
          "ref": "5802b933-e433-4dde-8013-dbad5dad686e",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b6f788ac-3ea7-4aa0-b173-e9b4cfcf11b9"
        },
        "item": {
          "id": "0bd420c8-63ed-4c1b-ae92-d510028b71fc",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "24278eeb-c7ba-4918-8ebc-024b0865d3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4162c709-d6f6-4cce-aae2-cb15d4b1d8ab",
        "cursor": {
          "ref": "a0705c81-8382-4a02-b6e8-1bce85578596",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8be8f67f-cf3a-4061-b84d-498d3733392e"
        },
        "item": {
          "id": "4162c709-d6f6-4cce-aae2-cb15d4b1d8ab",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "33fd4886-fbb0-45c6-9ccb-e9b7babcc6f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27eb4c1-6d11-4b76-bf33-b7ff4fe116bf",
        "cursor": {
          "ref": "5b5126ef-3045-412c-814e-6e71d18f9983",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8436d0dc-5a05-4238-9b96-f7b403085530"
        },
        "item": {
          "id": "c27eb4c1-6d11-4b76-bf33-b7ff4fe116bf",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7c35023f-d493-423e-a484-f27c0cffac8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9eaec9a-0456-4023-8ec7-f88754701aff",
        "cursor": {
          "ref": "c69e8c15-0cc1-4f89-8ae7-f7fc308aa33b",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ee0d0850-af5b-49e3-bc48-c10cea7f806a"
        },
        "item": {
          "id": "a9eaec9a-0456-4023-8ec7-f88754701aff",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "80e82a36-ff1b-4f25-8bca-afa730d770a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c33e1e-3e45-435c-ba6b-68d861829d68",
        "cursor": {
          "ref": "e5d6968e-14db-4121-83d5-8335e297a2eb",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d93ca14f-88e2-4f7f-ba40-222af23b5634"
        },
        "item": {
          "id": "e8c33e1e-3e45-435c-ba6b-68d861829d68",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a95a28ba-b98f-413c-a580-c56339f0ccec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6303ee-d414-4282-bc57-85804ffa62f9",
        "cursor": {
          "ref": "c0e60901-967d-4e4e-8a0b-e2ac43badf9f",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6b56c2c9-12f3-4dba-9740-85631efa725e"
        },
        "item": {
          "id": "1a6303ee-d414-4282-bc57-85804ffa62f9",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4ff381ad-5649-4662-b907-cb2af8d22594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b798a6-1c51-4db0-844f-e022d70867d7",
        "cursor": {
          "ref": "206c2fee-4f20-4102-87c3-ffd8ee901b3f",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4d084fbc-ccdb-4ba0-8b45-aca0f12c477d"
        },
        "item": {
          "id": "45b798a6-1c51-4db0-844f-e022d70867d7",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "81750bc2-76da-4460-beec-f7ba04fcb4c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ded07f5-1e67-49bd-98d9-40dd6140e28b",
        "cursor": {
          "ref": "ed8ba3df-09b6-4f20-9dc5-0b8b40168347",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "48571a2d-a860-419c-aeb8-1e1ce6bbe052"
        },
        "item": {
          "id": "3ded07f5-1e67-49bd-98d9-40dd6140e28b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "43b61077-6234-409b-a988-7e3b29bc350a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4153bd28-305d-4623-8a90-43892c286465",
        "cursor": {
          "ref": "21b38a03-4418-4898-b679-74b6dbcb6a05",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8511d281-866f-43f7-b827-fd69d259c0d6"
        },
        "item": {
          "id": "4153bd28-305d-4623-8a90-43892c286465",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "eab4e946-8435-48a5-bca0-aa7d62d9da1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "645145e5-4448-4839-98f9-ed8875cb4b62",
        "cursor": {
          "ref": "c773254c-9854-4579-ade3-702368f98d52",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ae1d142f-b102-45b8-a340-9cd470589d32"
        },
        "item": {
          "id": "645145e5-4448-4839-98f9-ed8875cb4b62",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "32e64236-74d0-4ce5-ae67-1c94ad420f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "19758deb-74ff-4a56-a42c-041c181bc8b4",
        "cursor": {
          "ref": "68d1bc07-2846-4e65-a845-88c60d4d052a",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "02547209-4715-4d18-9fe2-9f0c2b323bac"
        },
        "item": {
          "id": "19758deb-74ff-4a56-a42c-041c181bc8b4",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a4fab742-bc18-495e-b91c-250a44fb81b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "fe6f67b8-420a-4943-a5c5-b25a24a88075",
        "cursor": {
          "ref": "0243e673-593d-4718-837e-cd611d82255a",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "13d768ef-fe73-433a-8310-a627c00a6471"
        },
        "item": {
          "id": "fe6f67b8-420a-4943-a5c5-b25a24a88075",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "bfe444d1-16bf-4de9-9f4f-63a265e68da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5653bde-7e29-4934-a8e0-675b39d7ae34",
        "cursor": {
          "ref": "45745f25-adbc-4509-997b-1f497e2f674d",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8493532a-9a01-4df3-884d-51a2507c93d6"
        },
        "item": {
          "id": "e5653bde-7e29-4934-a8e0-675b39d7ae34",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7e57eea9-39f7-4b2b-981b-458ad23f2aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "a8b742fc-849f-43e3-9888-ee9054120da7",
        "cursor": {
          "ref": "88899726-3e46-404b-bd1f-c86d11dee6e7",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "61aa885f-4ac3-4486-98bc-01d46d94fdc7"
        },
        "item": {
          "id": "a8b742fc-849f-43e3-9888-ee9054120da7",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f0c109cd-dd9c-446f-83f7-96a7e4302f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 900,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "14c38548-6bd4-4e1d-a16c-ea9b8e182eec",
        "cursor": {
          "ref": "651952b8-143b-4075-9d3c-9b08cda4a976",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b6f1ff3e-63cb-4c48-abe0-02e9f5f1570c"
        },
        "item": {
          "id": "14c38548-6bd4-4e1d-a16c-ea9b8e182eec",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e342ac7b-de5c-4584-b366-1d5a44ce7848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "66a2b463-cfbb-4995-a0a1-1ecfda62e008",
        "cursor": {
          "ref": "0a28c95d-ec98-4748-a216-196891cb0061",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "235f1c58-9073-4c35-ac3b-809c97e1b8d5"
        },
        "item": {
          "id": "66a2b463-cfbb-4995-a0a1-1ecfda62e008",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "96f60189-2cfb-4945-ad1e-c0c398403d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "dab1fb7b-2885-45fb-a8fa-84ad809c6033",
        "cursor": {
          "ref": "1156d3c9-1553-4148-b4ff-cbfc863739c4",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "dc50830e-b10f-41f7-8a5c-0ee5bab1f61a"
        },
        "item": {
          "id": "dab1fb7b-2885-45fb-a8fa-84ad809c6033",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9689c039-123b-4d34-9c8c-e12c641b127e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "b1914180-db28-4bb9-913b-bb6828cbf54b",
        "cursor": {
          "ref": "5e3678fe-e424-4f05-829d-8b488d8ace91",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5ed9abe3-96c9-4b20-889d-632efff8586c"
        },
        "item": {
          "id": "b1914180-db28-4bb9-913b-bb6828cbf54b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "1d680ae0-9bea-42c0-a304-73c2b6baf602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "df893d63-c743-460e-8178-26372c475df3",
        "cursor": {
          "ref": "2c3d1044-cfc5-47f2-95bb-038311e8c47e",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ac642b4c-0ce8-4024-9da0-bc6451467464"
        },
        "item": {
          "id": "df893d63-c743-460e-8178-26372c475df3",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d3920da7-a217-4139-b36d-bb63612c8916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0031e4f1-b620-4849-bf88-6d1604e064cb",
        "cursor": {
          "ref": "edd8584f-ed6b-4e6c-8f8c-29b5814b3be1",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "01d7ff7c-68f8-483d-8e88-1ffd240ad45b"
        },
        "item": {
          "id": "0031e4f1-b620-4849-bf88-6d1604e064cb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4ad21f86-ea27-4c51-8693-8d8fcdfd4b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d135e10-2a25-4df2-96c8-db22ee87f7d3",
        "cursor": {
          "ref": "076681a4-47e6-4217-aee9-f21015602414",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2ecc0c30-460a-4f6e-aff3-b3b38ecc8270"
        },
        "item": {
          "id": "7d135e10-2a25-4df2-96c8-db22ee87f7d3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d4a702db-6713-41dc-9b97-f97534b24aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747bd8b9-2a20-4a49-8218-ff5900dc238e",
        "cursor": {
          "ref": "fb077ad0-470c-4348-9706-5286dd0e596e",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "dacbff66-eba5-4a17-b46f-f6a43e063570"
        },
        "item": {
          "id": "747bd8b9-2a20-4a49-8218-ff5900dc238e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "edba171d-70f2-4f62-90c4-2ee2fe07bd4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf0fc406-7b8a-4a4b-8f37-984e9ea1a3e0",
        "cursor": {
          "ref": "a9a47ba7-e546-4f07-b8bb-3e51cb13ae38",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ed622f09-4f3f-4413-8e2d-05a6147c7b7e"
        },
        "item": {
          "id": "bf0fc406-7b8a-4a4b-8f37-984e9ea1a3e0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f3184530-5e0c-4b70-8d80-edda0747e7c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b110d04e-95aa-48a2-9a50-56c78e2aeed5",
        "cursor": {
          "ref": "e7de9086-3674-4a06-a0d7-c238da483474",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6a532821-26c9-4942-b168-1f84564ed073"
        },
        "item": {
          "id": "b110d04e-95aa-48a2-9a50-56c78e2aeed5",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4795460b-7b26-45c9-8aa4-b12828f8d485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e43ded9-dc31-4915-acf1-1f08bdae711d",
        "cursor": {
          "ref": "74c33d93-aaad-4460-bbeb-65da5d903f2a",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "308f9f22-ebfb-4c71-b33a-e35ba023eaf2"
        },
        "item": {
          "id": "0e43ded9-dc31-4915-acf1-1f08bdae711d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "39675fda-e47b-4772-867a-e1b9f95cabf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae5537a-fba5-4971-a3e4-a731a9faa3d9",
        "cursor": {
          "ref": "77e43ac4-739e-4477-b6d2-3310ce48b43e",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8aa58f64-e11b-45a8-977b-f893d344a725"
        },
        "item": {
          "id": "7ae5537a-fba5-4971-a3e4-a731a9faa3d9",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "28fe237b-d058-4f51-8509-c165181f8497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d084bdf-233c-49ab-b297-b629a756c066",
        "cursor": {
          "ref": "ccac07a9-0ab8-4c9b-84a1-334ba0d30f00",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e9ebd884-ba19-4d3c-bc6b-3214e85733bb"
        },
        "item": {
          "id": "5d084bdf-233c-49ab-b297-b629a756c066",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f6c2863d-4048-4310-8727-cd381858fe7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494bed4b-50f5-4f2a-ad51-e96ca0aefd6e",
        "cursor": {
          "ref": "6edcf1ca-dfee-416d-9c73-373feeea281c",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "41fb3d41-4f59-4114-87c1-2211369ca285"
        },
        "item": {
          "id": "494bed4b-50f5-4f2a-ad51-e96ca0aefd6e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e76ce15d-6cdf-4532-b9ba-21a9cd0a06f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e8f2aa8-ccb8-4d28-9470-5f2a7862d292",
        "cursor": {
          "ref": "bfba3a9f-388d-4131-8472-09695da76bcd",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9d8b9e1e-5406-4f10-8d3f-f235483ccf39"
        },
        "item": {
          "id": "3e8f2aa8-ccb8-4d28-9470-5f2a7862d292",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "368f0f85-d4ec-467f-9287-a65862a310eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b592538-f413-41c4-ac8d-d77a5d3585db",
        "cursor": {
          "ref": "d342219b-e691-45f8-ac8d-8e21e3f372dd",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "23352236-dc54-4974-8419-cc5b6551cf4e"
        },
        "item": {
          "id": "5b592538-f413-41c4-ac8d-d77a5d3585db",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3cbcbf3b-5883-4031-bfa0-ad7351e5fca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7004495f-1a07-4f7a-ad9f-967a2c91fd8e",
        "cursor": {
          "ref": "53644353-d4ed-4259-b293-17b2feab5ed4",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0c36e7ad-1bfc-4d92-98bd-421cd89d1776"
        },
        "item": {
          "id": "7004495f-1a07-4f7a-ad9f-967a2c91fd8e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "794fb3f3-2f4c-40f3-837a-ddedb622085c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f03305-4d56-4816-af55-765dfc400a12",
        "cursor": {
          "ref": "ed94d242-c4f3-42df-ac93-e3eec11f2b15",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9e4063ec-fbba-4417-aa99-4bb77aa788a8"
        },
        "item": {
          "id": "10f03305-4d56-4816-af55-765dfc400a12",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ec856111-eaab-4144-b0d8-3dcfbf2f7061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 771,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "a18341f8-2c2f-467c-91ac-3679af53e5c2",
        "cursor": {
          "ref": "e1019708-c336-4f9a-ad61-fb408bb8515c",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "cad61d49-195d-4acc-b476-96880089143f"
        },
        "item": {
          "id": "a18341f8-2c2f-467c-91ac-3679af53e5c2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0bb008c2-8d1e-4076-af65-6c69511e71df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 799,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "feac7192-d1ab-4997-8de9-57fa7a0d65e9",
        "cursor": {
          "ref": "64ea08ee-df5c-4d64-9da6-15740414d9f9",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1455e02f-e24d-47a1-8d66-46666ff5bf66"
        },
        "item": {
          "id": "feac7192-d1ab-4997-8de9-57fa7a0d65e9",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1e6ff880-1807-4cd1-8b7a-0fdc74debd0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "a486755c-09b3-40bf-879d-edae0065b28d",
        "cursor": {
          "ref": "50dbfdd8-ef4f-4718-8648-00229dcfb209",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "417b8b50-9e23-46c2-937b-201cc38c8059"
        },
        "item": {
          "id": "a486755c-09b3-40bf-879d-edae0065b28d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f37e16f1-3254-4b55-9a4c-b42a1ac29ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 822,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "56480614-f4a9-437d-a786-8a11d4459edc",
        "cursor": {
          "ref": "4dc9a34f-a9cc-4694-8455-f47456c1af96",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3f7f657f-cfc7-4f33-9ed6-41701d0538c0"
        },
        "item": {
          "id": "56480614-f4a9-437d-a786-8a11d4459edc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2f2aacca-b079-4d7f-a2a8-439072db8ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "3fd29961-9513-4983-8771-d1cb5e29a57c",
        "cursor": {
          "ref": "1c248712-40d6-4402-9e28-274f42ea329d",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f28f1423-dec8-4694-9621-716384d15b72"
        },
        "item": {
          "id": "3fd29961-9513-4983-8771-d1cb5e29a57c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ae30c9c0-fdc0-4c8e-b7e4-c6b51bc41b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfbc0b9-9db2-4314-8e82-34488dbd7344",
        "cursor": {
          "ref": "8d0a3108-d89e-4678-b32d-d0670b5a3f42",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6e3bd81b-1ac6-48d8-bf04-8da48e433253"
        },
        "item": {
          "id": "8cfbc0b9-9db2-4314-8e82-34488dbd7344",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3bc8ddb0-539a-40b7-91bf-4dc212fb848f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c44f044-9a63-48a6-8be9-aab7c40ba93d",
        "cursor": {
          "ref": "01f3fc91-f1be-4a13-ae11-608e86e13e33",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f6045f7b-e43a-4750-aeb8-4e0c2af98b87"
        },
        "item": {
          "id": "6c44f044-9a63-48a6-8be9-aab7c40ba93d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "13bc753c-d578-454d-87ac-43153be1ab21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "982ac417-48fc-40a3-b819-32100a8b4515",
        "cursor": {
          "ref": "a6d98574-5311-4b92-8f28-49868c485934",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "48dbc756-c87d-40ac-8ce0-ab9b9a064e6c"
        },
        "item": {
          "id": "982ac417-48fc-40a3-b819-32100a8b4515",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a843936d-a655-491c-b50a-86ca2ba01650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7210ed2-d17b-46e4-a7f5-66e5472c93de",
        "cursor": {
          "ref": "23d08e8d-7189-4d80-b943-02fbd168220a",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8707a8df-3b5f-4203-912c-84cb05d1ce8f"
        },
        "item": {
          "id": "c7210ed2-d17b-46e4-a7f5-66e5472c93de",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9cc9c3d3-330e-4c8a-9288-82b61c2b525a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad95c9f3-f0ac-467b-84ba-cc3bdd77e2dd",
        "cursor": {
          "ref": "1fd6f4d0-3a68-4011-ba33-96c3e514a220",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2ae7edba-5841-4f7b-843e-9a7066d7bcb9"
        },
        "item": {
          "id": "ad95c9f3-f0ac-467b-84ba-cc3bdd77e2dd",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "18f1fa89-3d56-4ef5-ae66-9b59690b8e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf84a957-329e-4af0-837d-b14eb8253e0a",
        "cursor": {
          "ref": "e3943eaa-b0fb-44df-9aca-7c6b1ba93ded",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "792d1d98-4882-4cb6-a0a3-5a48ff964479"
        },
        "item": {
          "id": "bf84a957-329e-4af0-837d-b14eb8253e0a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4045664b-30f0-4c83-8a32-41f8e09d1381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02cccbf1-1ded-40c9-a463-32e194ed4a95",
        "cursor": {
          "ref": "2853f25f-cfdd-4d74-8a5f-9768beaeac5d",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9dd2f73c-2863-4966-a8fa-9bf3b9884668"
        },
        "item": {
          "id": "02cccbf1-1ded-40c9-a463-32e194ed4a95",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "21a441bc-1520-4799-8bc5-ebef57c6587d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896c2368-5943-4fa5-943c-ecabbab5c802",
        "cursor": {
          "ref": "6d968780-8848-411f-8f53-f7fe1cc0288f",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "91a64597-bdb9-45b8-9a43-634ebbae6a39"
        },
        "item": {
          "id": "896c2368-5943-4fa5-943c-ecabbab5c802",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0a032984-05c3-4b16-aa21-1efd5f9ce257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32731f21-1ad7-45b0-a9d6-6b07f08eb347",
        "cursor": {
          "ref": "0bf8e2c3-9c42-4486-a1ac-3e41098730e5",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "03e9fe7c-99b6-45c0-b29d-8c6763acb008"
        },
        "item": {
          "id": "32731f21-1ad7-45b0-a9d6-6b07f08eb347",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5f5a6398-ecd5-4920-a621-92aa728813da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afadf1b-ef21-4148-9126-a8a9d6b66ce4",
        "cursor": {
          "ref": "5ce61bac-21aa-457d-8127-262b6757d6db",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "df23ca86-aad5-4d92-96fd-a8bb05e03c84"
        },
        "item": {
          "id": "2afadf1b-ef21-4148-9126-a8a9d6b66ce4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "360ba947-94d5-4c07-82bd-87f38b96cd78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d864ce26-9b6c-4f24-9b93-968b7b1875a5",
        "cursor": {
          "ref": "855375cc-bdbc-4bf5-a9b1-bf4ff09af81f",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6ce1729d-7cd0-4dc8-a4cc-611f712596f2"
        },
        "item": {
          "id": "d864ce26-9b6c-4f24-9b93-968b7b1875a5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3f79600b-1290-4961-865a-07db70cfa894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8cc8fe6-267a-4d9e-979a-ba13e3063b34",
        "cursor": {
          "ref": "7368daa6-3075-4769-8ca0-6764e2a0cb9c",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "31ae5902-f2fd-44ce-89e4-6c63fbfefde0"
        },
        "item": {
          "id": "c8cc8fe6-267a-4d9e-979a-ba13e3063b34",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e60c5cc0-b870-43e9-85e3-8edc9f68f8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca4a4cd-022c-42ec-805c-65bbd7ad3629",
        "cursor": {
          "ref": "2b6cbf09-5411-4c4c-8f44-d8a23cbdd76f",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "3b2d74a6-df3e-4123-8b02-449b490162f0"
        },
        "item": {
          "id": "9ca4a4cd-022c-42ec-805c-65bbd7ad3629",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b9520a0f-ca38-4c8d-a636-1e0af9393634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec60b1f7-e0c8-4fab-a612-871f62834d77",
        "cursor": {
          "ref": "9d6e600f-9321-4f5a-a1a3-b884f6e10f34",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "b6d162b4-2ecc-41d0-a22b-6da7b6cca5e5"
        },
        "item": {
          "id": "ec60b1f7-e0c8-4fab-a612-871f62834d77",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "231d96d1-15f8-4d2f-afb3-8720a9183780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "732aa4cf-7cba-49c1-ada7-ef4c4fa8264a",
        "cursor": {
          "ref": "d4769035-263f-444d-a60a-e54df90c5d4e",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "76dd52b7-d3d9-4580-8e13-ca35e1b65834"
        },
        "item": {
          "id": "732aa4cf-7cba-49c1-ada7-ef4c4fa8264a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "747a68eb-b868-4e05-993a-dedd7aa56977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2716ce10-69ee-4d13-b95a-e7d1cf289ec4",
        "cursor": {
          "ref": "59a99f23-a990-455f-8fb7-5bdd9d1dc334",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "53ea3665-fb8b-4c5d-bb63-85a7b8594aae"
        },
        "item": {
          "id": "2716ce10-69ee-4d13-b95a-e7d1cf289ec4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e16cd371-eb80-4151-bae1-2426b04c40e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b2f1dc-2d42-42d8-aa6d-e1918f867783",
        "cursor": {
          "ref": "9d51a657-ee7d-4276-ba60-c584aed39f0c",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "becd043a-95aa-4efc-aeea-c363869d8d80"
        },
        "item": {
          "id": "b5b2f1dc-2d42-42d8-aa6d-e1918f867783",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "bc5754b8-a765-4ae8-ae29-61fab8e89de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38afd54a-ae13-4c72-aa3f-e98edea24f85",
        "cursor": {
          "ref": "a36024ca-308d-4ecb-ab7c-e7c334ea5593",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "27ed94e6-44fb-4085-8923-8713a206ed06"
        },
        "item": {
          "id": "38afd54a-ae13-4c72-aa3f-e98edea24f85",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "58ddefb6-530a-45d6-894e-b2d787ed606d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b94a7a-5956-4619-a077-f5ec79b4f2ee",
        "cursor": {
          "ref": "0531c27e-b3ab-4ce2-942f-d5a16fe389dc",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "fc628e2a-1c89-4246-96e9-20a77c7a8416"
        },
        "item": {
          "id": "c1b94a7a-5956-4619-a077-f5ec79b4f2ee",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a36f31e7-3211-445e-b070-d12a4308fb56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44dbcc9-5e64-481c-a22a-f0332f441eed",
        "cursor": {
          "ref": "ac69beb1-493f-44f8-87cb-64d0099db638",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "c8e4ec23-e3fe-44cf-aef1-9fdaccc8e634"
        },
        "item": {
          "id": "e44dbcc9-5e64-481c-a22a-f0332f441eed",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0a259873-1af9-4044-942d-4abb20f8c44e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31426b8-73a4-49c0-82ea-b85c0439b79b",
        "cursor": {
          "ref": "6ced69a5-c712-4d49-a299-b470fe1da5f5",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "77a25fcd-cd26-4187-8bea-47193c642a96"
        },
        "item": {
          "id": "f31426b8-73a4-49c0-82ea-b85c0439b79b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "6ad0a380-0599-46aa-aa64-a7fc2c9cb4c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ec62f1-909d-41e1-863c-22e5de3bd51e",
        "cursor": {
          "ref": "cee47219-4fb7-4159-944e-e81c2763a4f8",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "7a1e3900-d0d0-406a-9fbb-78b0568829fe"
        },
        "item": {
          "id": "87ec62f1-909d-41e1-863c-22e5de3bd51e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "98625fd1-2db0-4267-99b3-f972ab59f816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53592794-9f3c-47f5-b8b9-e1f5232e8c8d",
        "cursor": {
          "ref": "1e8e6fd3-f2e1-47d2-b142-61c03d65a636",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "f9b86bf0-0963-4c00-a6ce-bf21a285b06b"
        },
        "item": {
          "id": "53592794-9f3c-47f5-b8b9-e1f5232e8c8d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6ad80d29-bb52-436f-8cc1-b9c75cc907d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ced9ca-5bcc-4a37-8d9a-b713da732c8f",
        "cursor": {
          "ref": "f59260de-8318-4b08-9e09-0d588b9c3901",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "2b77f07c-dc3a-4e59-bec4-7edb52ca104a"
        },
        "item": {
          "id": "c2ced9ca-5bcc-4a37-8d9a-b713da732c8f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9cc85770-0c7a-4ae3-86b1-2f5929cdc03e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa13acc-5174-4623-b88a-93a22a3561e6",
        "cursor": {
          "ref": "305479fd-74b1-42ca-b42f-d10e3f30f872",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "66ed62ee-2463-4022-969a-0b345f4b6f46"
        },
        "item": {
          "id": "6aa13acc-5174-4623-b88a-93a22a3561e6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "97bce4a5-9be1-4986-8a59-d96a4ea5a063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc7f974-388e-4ec2-aa0f-82326e28449f",
        "cursor": {
          "ref": "1f751dce-3573-42b5-bba4-bfa70df5abd2",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "06db2ecd-0518-421e-9644-d99025d1efdc"
        },
        "item": {
          "id": "0dc7f974-388e-4ec2-aa0f-82326e28449f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0236db69-07fa-44a4-ba37-27533215674d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f16a16f-c0c6-4f73-afec-1d21a75eb85c",
        "cursor": {
          "ref": "2c9ea8e6-1156-44e0-b772-d13180cde9de",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "fde7ba06-6aab-41ec-a40e-bc3f3264dba4"
        },
        "item": {
          "id": "5f16a16f-c0c6-4f73-afec-1d21a75eb85c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "3fdd385b-a09e-45b1-b2b0-47ff47dd4d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee76c3b-959d-4cf2-9205-54cec8c9afb6",
        "cursor": {
          "ref": "89e36478-0995-45e0-bdab-47701ce51106",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "226907ec-7680-400e-8964-fcb466e57672"
        },
        "item": {
          "id": "aee76c3b-959d-4cf2-9205-54cec8c9afb6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "36e34f5f-227a-460e-98da-7f865f3e21a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e43c502-062c-4d53-a05c-634b153103ee",
        "cursor": {
          "ref": "f59fa394-c5c4-4ccf-b390-88c3a3b1b8cb",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "4cd94ca8-64da-4875-8d74-9807bd3263b2"
        },
        "item": {
          "id": "7e43c502-062c-4d53-a05c-634b153103ee",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2eee6c9f-9ef1-4057-a030-36e9ded4a352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e69beae-ef82-4354-8a96-d15993057c2d",
        "cursor": {
          "ref": "b126d6c0-2510-4f51-b82d-f11dccf0f6cc",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "db764309-7cd6-4a03-863e-76882b00d2ea"
        },
        "item": {
          "id": "9e69beae-ef82-4354-8a96-d15993057c2d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d21f9347-8749-4e18-af05-9c96a423b3ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a446351-b315-4cba-92c3-c9d94bfdaf54",
        "cursor": {
          "ref": "4179dd07-d1cc-4870-acca-00a27c9bdeb2",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "fadcf3ff-bfc5-4efc-8764-01d7af469a83"
        },
        "item": {
          "id": "0a446351-b315-4cba-92c3-c9d94bfdaf54",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "63958638-bab6-4d8f-8422-1114ef5ebc29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb6ee455-00a9-4a52-afcd-360227dba586",
        "cursor": {
          "ref": "5436bfbe-137b-4f8d-a484-da5e6d657976",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "2be0ecf0-f7d3-46fe-ba80-629b5a66b13f"
        },
        "item": {
          "id": "eb6ee455-00a9-4a52-afcd-360227dba586",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5fb0591a-8122-45c7-930d-d019c33d0c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46ba8a9-677d-4c3f-b712-12757da49e2e",
        "cursor": {
          "ref": "f7dfdd9e-2d3f-4482-8621-cfa2a7a805ef",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "529a6a23-7fe2-4c90-b933-05998b9a4882"
        },
        "item": {
          "id": "a46ba8a9-677d-4c3f-b712-12757da49e2e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "bfa84b72-c8c6-4509-9d98-26af7c42539d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb3b16b-c054-4809-8b38-8d8cc797122c",
        "cursor": {
          "ref": "c4fabaa4-db6a-4323-8bd1-b09b542d9777",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "e8e99b28-58c5-4f6a-835c-f47dbb58f7c8"
        },
        "item": {
          "id": "1bb3b16b-c054-4809-8b38-8d8cc797122c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2c33ddd7-05c1-4aa9-82f9-4373569945f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73971185-7c70-4d4d-998e-451a6dc82923",
        "cursor": {
          "ref": "05402f57-0717-432c-8020-9b8cc188a697",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "f1c3f50e-ead6-4c75-ba5f-705add035ad7"
        },
        "item": {
          "id": "73971185-7c70-4d4d-998e-451a6dc82923",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "87d4591e-0d0f-455b-868e-fd047068a5ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dcd3ace-58aa-4245-802c-0eb642169727",
        "cursor": {
          "ref": "e82f1046-5e94-4ea1-a6f3-610ae7b2be4a",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "f3f2216e-e17d-4875-8da6-603b993fe676"
        },
        "item": {
          "id": "0dcd3ace-58aa-4245-802c-0eb642169727",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b868f912-7713-476f-a53f-fb19094d4f90",
          "status": "OK",
          "code": 200,
          "responseTime": 776,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e5faf4-54c2-449a-9fa0-80c774d5dead",
        "cursor": {
          "ref": "126cd09b-7b3e-49da-944e-4a3dac60eeb4",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "4d2f84e2-2a19-4750-b66f-0e027390b9b5"
        },
        "item": {
          "id": "c6e5faf4-54c2-449a-9fa0-80c774d5dead",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f5871fd4-0f20-40e2-9bfd-af9355c700eb",
          "status": "OK",
          "code": 200,
          "responseTime": 1131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bed8694-d27e-49aa-b6b8-582d5f382ee7",
        "cursor": {
          "ref": "8d322e9f-000d-42dd-83f1-683da707258b",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "fc151b57-59bc-4fb1-b116-e016d6bb11bc"
        },
        "item": {
          "id": "7bed8694-d27e-49aa-b6b8-582d5f382ee7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1bb596cf-e9b9-4e33-a0e4-e8fb533bc8fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bed8694-d27e-49aa-b6b8-582d5f382ee7",
        "cursor": {
          "ref": "8d322e9f-000d-42dd-83f1-683da707258b",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "fc151b57-59bc-4fb1-b116-e016d6bb11bc"
        },
        "item": {
          "id": "7bed8694-d27e-49aa-b6b8-582d5f382ee7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1bb596cf-e9b9-4e33-a0e4-e8fb533bc8fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9479b0-6f27-4be0-8157-90df15e7ac89",
        "cursor": {
          "ref": "6a5705da-3bb4-4f6f-9ac5-c2f41fa863b7",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "18d96c60-7192-4531-b1c7-112ce7b3f223"
        },
        "item": {
          "id": "6a9479b0-6f27-4be0-8157-90df15e7ac89",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4288eb80-cd94-4db5-a085-4b8f156375ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8585bfcc-bf34-4d94-9972-30a5618a159f",
        "cursor": {
          "ref": "f0868afd-c509-4ca5-8c39-101f08ce06b5",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "9cf0c771-7216-4dd4-8372-9aba4c608d28"
        },
        "item": {
          "id": "8585bfcc-bf34-4d94-9972-30a5618a159f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b479aa49-4da9-47c7-a899-efd0ac1f6312",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}