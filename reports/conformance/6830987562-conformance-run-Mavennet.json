{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d94e7aac-703a-4cc4-baf7-90858d333219",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f03f2317-1397-479d-9eed-72b83d8d6d04",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4ae78729-b391-4bc1-9d44-d6067ce4a9a3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "68cb1500-91ae-413b-917c-c2b95d75c184"
                }
              }
            ]
          },
          {
            "id": "e238b2e9-72b1-4cbc-8b67-0af5e6d3185b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "64417df3-4a84-4649-8945-e2af783132d6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "541fb3cd-e267-4e86-9411-526c9c8cb1a2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6dba3581-732f-4b07-b008-1c1bb7bfa3cb",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "72454a56-9c1c-4693-b086-3a770b39c950",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e19e8a8c-ef48-477a-81dd-b539fb3629df",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5ee38f8-388f-464d-a166-1fa3370db324",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0663d064-da1e-4570-a75c-056c6b23daa6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "161d69de-4e64-48cd-a7d8-e9f5ad7ad8c6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "836e2e74-c68f-4a75-a651-023f58de9406"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ec93ac31-9ed0-4b0e-b9ed-4fe19f476395",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c18ff3b-325e-4be8-9ae7-6c864d7a257c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57201669-c0d3-45cf-ad87-75cd8322747d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "20c55bfc-ca0e-470b-af2e-97df6d3b84d8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43998a51-77f8-44dc-bf1d-981353c5727b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30490bd9-7de1-4b78-998d-a0343043ea96"
            }
          }
        ]
      },
      {
        "id": "787273b0-f82e-40a6-a426-bb79a01e340c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "22b38df3-9787-48ba-b914-ccf55419ea35",
            "name": "Negative Testing",
            "item": [
              {
                "id": "faa2ab95-682b-4074-ac89-01679c41c449",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cb6425bf-f50d-4f3e-a894-46de009ab651",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef87c60-b6b1-4db3-a2d4-49a661c8057b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b6cb543-54ff-43e7-82a8-b98b14f19934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca21e359-9668-41a5-9841-2c33b777b43b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "303361ae-384d-40ce-a9a9-fcbbc50f1da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3ef30a2-81a3-44f8-95b7-d4af2840f515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201a9a05-2b06-4588-8af4-4886eb0105e5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69aa9617-111f-43af-ae15-f1c6116fc566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d45027f7-8d88-4030-b8e4-5eba5a30b0b8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e39d38f1-c1fe-42f5-a58d-0bc7cb368120",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1445d0cb-4778-48a0-88a8-33c9e7e752cd",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "859424db-da58-4f67-9280-05106193a8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5a29466-514c-4640-b2fd-96154ebdf075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c87bfd-371e-4ad6-9f16-f4b1a0526fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f7a8c51-196b-494e-8b79-3525869efc1e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "79af1a98-1aba-474c-bf2f-cbb04e82fa8c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "df1e9059-cd7d-45ab-bd01-8c9bf445ae9f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e87acf6-4189-4dbb-8d38-a2560c3dda05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "927284ae-0f4f-4d1e-bc03-fe85fefae724"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d8f6f7d7-3b66-475f-9d40-95a90e1e0816",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "eeffb714-baf6-4d75-8aad-b6fc55455300"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "000da5ca-91d0-4332-ac40-7a563b193f18",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5f3a5594-72f3-4f6b-99ce-472214ecde4c"
            }
          }
        ]
      },
      {
        "id": "e0dfb2f4-f08d-43af-a920-b402f4e15e1b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "44535d28-2b7f-4058-a227-8f38c3359a43",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eaf2ba81-4e67-4e6c-b2fc-4d46841ee298",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7c8d48a5-c67a-4064-9927-5995c93e749b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8a7f63-ec63-4c89-a72b-686528c5b88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b03c8c1c-3ed7-41a8-bcfb-d6b448d02eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c84ade8-4ea6-47c6-a43e-21ff5353b600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92a8a110-393f-43f8-be3f-834e19250cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fcc8f9-7883-401a-8d5c-5b51538ebe9e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12335cf-f6fa-47a6-b697-1fca7f1abec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d85d86f8-3479-4925-8416-3911294c5729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533e59f4-9d3f-430b-93b3-392bffdce5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f476ff18-6aa6-4759-8a4a-0c366d49cd50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5157b2f6-5d61-4ee8-b794-b156385a7df6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1f173f-53ee-43a1-a8b9-4c0549183f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "182ced93-ffee-47c9-953f-fdc4e1a48350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc0c47b-ced0-4320-95ae-62db3b437757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e8a4ddd-9c1c-45bc-8948-c1dcee892bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b38ff23-61f6-41aa-af1b-e34fa20b6d8c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c2da5b-a0a3-4556-863a-43210230817e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f541f6d7-18ab-4545-a70d-a1be02945850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8089ee8-817a-4e5e-af16-b1850008d90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eebd1a06-bf78-4200-b9ea-6f17adca03c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e496b9-d847-412f-9c16-28e00bfabe91",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a52b825-8973-47eb-a966-3e594fc4c9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a12a8075-de55-4e7b-a6e0-37c999a88e60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e31dc83-2d56-497c-859a-f684115e0b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a734510d-bb91-417b-9153-a45b1556fe56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc40e57a-e8c1-4648-a397-d072f9d4712f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd25b32-e23b-42f1-922d-92382090a2e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7caa20-04d8-433c-82a2-0dbcce7c7e4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d37d1f45-a984-4105-a816-e96836df7080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1cbf4f0a-ed67-43e3-9cb6-e3cd54f19c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be027cd6-383c-4f23-809e-39a96d0ab910",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b152b31-5c8b-40e6-9ea5-7f9392e9acdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd1ed114-a804-4e64-bb62-285234f5d165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9367fa8f-f569-40de-959b-18762c63a427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "401d4059-895a-4f37-98eb-609af48b33f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f9f01b-347e-4bf7-86c0-fdaf4a9dc6de",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd9ad9a-586b-4572-8ccd-dec2d89904b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8f28ff1-b125-4d9c-9ff7-6b99165c0e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb160fba-c11b-4849-94b3-ed0a217e73e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d2f23ee-1b77-45c4-98c4-78bbfb6a0cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0553cb6d-a963-49a7-a5df-fa2164ea08a9",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "303a91cc-3f58-4dab-b1a7-db4bba85ce62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f973d4-0947-4d3f-b5ac-2ed5d5d52471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2334093-846a-4907-b129-366dc7f2bd62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0d84a52-2510-4bcf-a4b7-db1dda7da61b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708bf553-5c80-4a49-92fe-d03cbcbaa808",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7abd9788-8745-4c7a-9a54-e230b8b82088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7d3110e-c51a-4ba1-b937-7d1eea83abfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81efbb01-3963-48fd-b539-d386310c97e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3de1aa2a-5c26-4383-ae0f-3c7252abd04d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57d9f79-0341-4477-87f9-301e1226c64c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ff16c9-3bc7-4759-9ae9-f714dec2dac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b099c919-38e9-44cc-946a-a80d7927a141"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9024168-075b-44d7-b8fe-931ba1e8f731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6bba1b06-6541-434b-9135-7be33ed167bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdca5cca-0c74-4696-8c0d-8653678b698f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e67418-a707-4089-9d36-fbd62150c0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a0e7d9-03da-4a6b-91ed-5b8ea4c07dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac133a1-252b-49f3-95aa-fbef868d9cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "163c5a2c-e1c5-4ace-be74-f0b02d681929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79282791-f642-47db-8c72-ae632dfe8fe6",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d639bf5a-c394-4697-9d33-8c06aa36ad50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4f6298b-9a21-48e2-b222-e768cda9f717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0efb60ed-a8ff-48d1-a7bd-5baa6a107144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "937bdc7a-b592-40d4-a35d-0ad188b06904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c673d65e-871a-456c-8fab-1a8df08d7816",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e62000f-080c-4794-aa33-82036418df8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e5eb17b-3648-4bc2-a716-e938e0e33fc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1cedb8-ec47-49e8-a368-46134c66ac2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "769a02d1-9339-471f-be80-187f4a9b2140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0461f982-4fd1-4c17-b6c3-2273b55e5e81",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d18f5ad-f0d4-4212-82ef-c732565b87db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1dcb9de-ba86-4cfa-8042-ed843de77ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865b52e0-6d96-4369-b9e5-7964fce509ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "006735b4-a270-4863-99ab-23a23f9cb861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d8d5a68-77ba-4ac8-a87f-60984d7e0b44",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d03de81-2507-4fed-8ea1-569154f6764d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9257704-f990-4200-869b-70e5e586f7db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071a5575-d748-447d-af29-ecad981bef9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2911ec53-c757-4b56-849d-2a32bdbb6c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f23365-7071-4878-8433-8f7381ba145b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b273b7-9a1c-417a-862a-e4fc2bfb41a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be535eba-0286-4958-96e8-d9a08bcfe325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d75f87-4e98-4e9c-8fc3-b3047f29e4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3616d46f-e623-46fb-b0bf-a5891b7f90af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7607ae6d-86eb-4931-b07f-b7d74ac27221",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5cc200c-d9b1-45c4-96cc-89f9993db563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e93bf844-cfdf-472c-92d3-a632689001be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69fc860-7981-414b-8018-5940edefed40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcb53483-0504-4854-81da-4798d8a449a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4227a6a5-f41f-4114-8851-55ff164108ce",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5edf73-3ffa-4c4e-89d6-b2601971dc47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e04b1bd-04e2-4c97-9d1c-eadbd8f03fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc681f9a-cf6c-4cbe-a61f-fe4738100a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b56f9532-037c-48b6-985e-5f7f8b4829ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0838869-31ac-4630-bc5e-68ed79141cce",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65721547-d4ce-4d1c-81c7-2c7a50fc37e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a026379b-22c6-4f4f-9d45-8f9fc7e1bf7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479e8d6a-5e71-4587-a83a-33c9e641fd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb03dc0e-aaaf-4cf9-8980-5605556823cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a924514-fe55-4932-b3d8-2c8a4f860774",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2dc7549-0319-48fe-b2ab-9231cfcfd252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6451d584-baed-469b-bada-fd0fbdbb8aa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5708fb88-e713-4d84-990f-6bff478ef0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8033055-e449-4102-b755-23dd967c0e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72bda729-6754-44fa-aa48-9323d2cf40f4",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd00a449-cffc-41e1-8c55-8cc539929fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7127146b-0a15-4857-849b-cb0df083b2a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4233dccd-db70-48fb-a9c3-e5c47f798476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d9cfb14-0221-4411-8d35-5690b5387522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693262f5-06de-4ce4-b213-66acfaa27a5a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c333ec1f-1f51-44ae-965e-1977f065dc26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6d63884-25aa-41f1-974c-2985f6853bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeebb475-4ba5-4546-be92-aa2fbf98f80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "85ff7837-0c80-4861-aa75-cffb05b6e207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0dd881-1e75-4702-bdf4-4b6d8175e88e",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "711b2d31-d958-400c-b77b-a24009dcc92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17561d84-d686-4c15-a031-8f1dc848c0f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e817a1e-ce1c-482d-83e2-777c2569ff0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1baae50-281c-42a6-9c7a-62cd1e4319cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4d02b8-9b0e-415d-b790-c8b59479c76b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8412234-79c1-4d41-ab41-f559eb459759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f12cadaa-5354-4858-a078-cd0e8a6eccdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0020535a-e45e-48e5-b8fe-088a469702f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "85d23e73-e587-4261-aa37-4e517a72eb37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd41fd6-9124-4c5e-8cd8-0b721c9950c6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16249037-053e-43d0-8ac8-b56982239923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba962d5c-b9ed-4b31-9919-ece36e4518fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310b3594-4310-4f9f-a4c8-e8039150f0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "759a01ec-2b06-4fb3-aa2e-97d784a86058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2130077e-6885-4113-bb2b-63e110a4d5a7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afeba0f9-6b49-408b-8a80-697f4d723fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f2e8ec4-fef4-4db8-abb4-576a2352b9ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf444b0-f137-4a1c-97a7-c25d7c122784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bdd4156-6f0d-402b-b338-08d8a7c1192e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baed1012-2ec7-41ca-9ce7-7635033d31a4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9c7781-1f80-45ba-8553-31448c37574d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "798a0c2d-acd9-4610-a86b-be97d121698c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83091514-ee0b-4c88-9745-b26bbd4d83af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cba3a518-53b0-4cb7-ac25-fa40008632cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba080547-a2f6-47ab-a5c1-9613d6201b5d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb59f4d0-f96c-4f87-9bdc-ed4586fb364c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "109ecd6a-a698-4b46-bd63-8ff14ea52efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e3125e-8388-4881-a760-31a1bff38abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "03bdb393-5924-44a4-abf9-2266dcb03ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d062537-0a63-4c73-9dfc-8136dade46ba",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55bde053-f9d6-416c-9f16-bbdcecb2eb62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1034886a-e942-4069-bdc2-c4e122f5b7d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66aae34f-1ed0-427d-8159-dd1a3934d893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba806cd2-225a-43bb-9870-b4d74dd42e30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1e5931-0ee3-42e1-aff3-8cc6dd6de5dc",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8761eacc-aa0d-4387-bae7-76a4ef984d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be152f41-8cf3-4f74-bbcb-2b6d4b6f1781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee66c8c-a26a-4a82-8133-1c435a18c32e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3d6c642-5a0e-4553-98dc-77f0b06c879c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605db090-fcc6-4179-b3a7-43f2e2a0f484",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6b2493-93c8-4632-b54d-bc357ddbd1f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcdc77e6-52b6-490a-8714-fe1bbe99fb53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d7ba551-95b9-4f36-90c0-824ad48f1611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed726d3a-721c-461e-9c05-a56ac13ee03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939c83a0-922a-45df-89b5-56316b8a0804",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2187d432-5bc9-4fdd-9753-8774f60b811c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ed36801-8ef6-4d0e-8a0a-de3fa4b3938d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02578754-e4be-49dc-875a-e1da64e7b3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7aaaced-8ec5-4ba1-bc5f-d19e4884faae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990f53c5-e183-42df-8998-62047d59900e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e28906-73fe-403d-8382-bebf7badc11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba3f87c1-d0e8-4fec-83e3-ee5fa25e7a52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d842244-13e8-4574-9b69-c435b38bd1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb8779a6-db65-48eb-bd49-fea52eda2bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b11911-087e-44fe-a4e6-383e9bc1ac51",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31468f3-a918-47cf-9206-0133a3784b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "586f2a4e-06ba-4e37-be36-154f0c5f9ca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1841c047-1685-49cc-849b-2db1181a4e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "006df49c-41c6-4f70-aca1-5cd74bebe097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add7536e-3a28-47b9-953a-e062d8480796",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c016dd-e16b-45d0-934c-348e75ec56a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d03301c5-99f0-4487-909c-59c7262d5a13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96fae1f4-dc88-44e1-b866-111de8db38bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "95051d06-7f4d-427e-95a3-e276a1a4742f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea15653-e479-475d-9732-19d9bd3675a2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a320404-5699-49b2-98e6-0de2888362ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "465ecf3d-10c6-4097-8fa9-da755fc5958f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9970a8-c537-4391-8fb0-f1f97d7ba185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f951aa1e-f6cc-4ecf-8c59-fa4434d1e097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e691620-ba05-4679-839a-baffacc58ffa",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8d066d-2b1e-4de6-bc9e-2badd8b49270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a97fa6f-ca35-4b3c-9886-f3112e01400f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374528a8-15aa-4d6b-8564-11dfb841aee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f94e0632-04af-4250-b4b7-8fce5d9e4f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a49373-72e2-46d0-94d3-e0a79de594a5",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2cf488-a92e-4385-ba03-dd734be9d8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9888979-ae16-440a-8262-7177ae51043a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "385437c9-c481-4bc0-9f51-0c42bfbdb4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5979461-0055-419a-ad17-8cd1591f0238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "286b8160-ff3e-4b5d-962f-37dc447c53da",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da81c7e4-4d8a-4ed5-8b53-5f2f178ac018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2beeb2e3-8e87-4a66-85e6-b67bc7280f35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2508a8-2f3b-46a2-b698-f417a91d3215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2fe2d47-b977-4b3c-a5e2-425847ac1ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52874792-c794-4660-81bc-2f28739dd416",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc356f0-00f8-4beb-bfdc-bb4b5daec531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83377fb3-b732-4d57-a341-7d7098b957e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7418b7b5-329d-4315-9d29-b87fbeb4a9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c8625f3-b7c6-48bd-8399-0b05688e11a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35132b5a-3ca6-476d-be59-c821553df3d0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7cdcb11-e4a0-46ef-9ebd-ecf77a4c9154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "098fbf7f-e940-4910-99a5-e31a2e707711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e699ee9-20db-421a-9214-05b8c167ab27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "69d07cb7-313b-4a76-ab75-0be1117e130f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c744e4-104f-4c54-8af7-c4c2a8fc3d36",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c096a2bf-8498-4cf7-b5ca-9a15b83ccceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf09132-c7f3-46b6-9f31-506c2e1df602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b6eb65-19e4-4d21-941b-7edb65506346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "909eca0a-a839-478a-8b6c-0cc60f8d056c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6301eab-be07-405d-bbf4-4713bbd41a3d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e279f52c-792a-4d45-abf5-07656cdc66a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b72ad2c-870b-48e3-b95f-1042614b8c76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a27260-8762-4d9a-a1f4-350444fd083c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "07bb16be-f8c3-4cb0-bcec-b6bf478ba2a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7497f77-8f76-4720-a2e3-aad2422f60a6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec9ecd87-2e7f-4700-9c10-f04f46434643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04fd62aa-1a07-4a87-9678-b67e2fc98042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216d4502-b1c1-43c0-84a3-b00d4b6e666d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe48f8e5-c1aa-4d24-bd75-643fe8743ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9662e5a-f4b1-4511-b252-c392df5a82c7",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9329fc2-215d-4d71-b12b-acc33e884140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "061248ef-5246-4ab0-a86c-715b92bb8d4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e5c26c6-b4e6-4803-8f85-9e696faa7ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56a559c8-6adf-4026-92e4-533f4049698a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458f0706-0686-49cf-82ca-941f2f236d8b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8be9926-287c-4de2-aa85-27baccc3048d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e715bc27-b4a7-4488-92e8-e57b4ea18ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8d9451-73d3-4e33-add2-96eab651cb53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4e25337-9f5a-4f42-bc56-eec01d824b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54532ef5-348c-43ba-93cb-ada3910fd4f8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba88c4e8-0704-49d7-bf1f-e25f2c9ea139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c0bca5-9883-4708-be84-d2022fb5d1cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71c6d7e-a5b3-40a8-8ea2-be255946a77b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88f8f3d7-dc31-4320-8e5b-45e4c1d82095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3acc742-d528-47f2-a6dc-9a61f3406400",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2309bf-6743-42bb-a8f6-6b6b07756f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80103c61-febd-4912-802b-b3f235dbefea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9a0909-e6a2-4e34-aead-7b54980f6153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2172b28-ab00-42e3-9392-5957753abb72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc8fbde-56e9-42ab-9191-fb4be73b6c2b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ea1504-3d54-42d9-9f04-775e3e319c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ffe7ba-8ac0-4ea7-afff-21b12d59d65c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da64541c-22bb-423d-85fc-b96205dc3512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6a149297-42f0-4cd0-bc1e-119e7d2e8a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bafc3ced-297b-40eb-a8fe-31a46c18fcdf",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f16a8e3-97fb-4404-8703-eacbbd824b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7338bfcc-cc23-478f-94af-4d3a2ba3492a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "030c8239-d1ba-453b-9139-f5f8a68b12b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "98fd1527-2292-491b-ad8b-925aae8e99a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f471de-eda8-48c8-9b03-986480243283",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "394c61f3-9b36-4eb7-9795-3b64df75ce01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa969c1-4090-4b5d-9928-379db03ed72d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2f96df-b5bc-4cb7-b0fd-ebebed64f558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1267016-8abf-483c-9abe-a802723e93d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d12465b1-9161-4ae4-b312-5bee243262bc",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0f10ff-e118-476d-91a6-17acca55bf84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8afe252a-1f22-4d10-aaef-58a5acb1c5c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7389240c-54b7-43d6-a1e8-42ce8337e6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76190cb8-5761-44e1-ae37-355b56ff617b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef92168e-97a4-4127-bf46-aabad3042176",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "698037d0-3d09-4b83-8a99-6734cb141d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be96a0b8-076f-449f-a26f-ba1dba646af5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9e3896-341b-43f4-97a4-411324941de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6da4bb35-a8f9-4858-a636-bae23b817180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836518f1-2a6f-4879-a061-5e26c651dbd9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c66628-f1bf-40ec-a87c-d0f000bee98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f390f2-305b-43ef-b95d-666b83b2feed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6f3cbe-a5f6-4701-9499-c801cd438964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63d483c2-fc4e-4c14-af49-201a97e22fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd64fa5e-9cab-4b2e-b623-e7a5f7741d01",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7ca0ce-d62e-4ac7-acfd-58b12765a9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "180d30bd-e4c1-49f9-85d1-22e8dd1ee44a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c534495-65ed-42e4-9822-97e02e60dd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "0e4504fd-8bf1-461e-b00f-82bf0e7455f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217f8d22-98d6-4b3c-b2ad-0f8a99a53f71",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e22b914-b05a-4913-b275-ba14c7617829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba749fed-5b8c-4838-b871-acc842c7fe54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a1954bb-b0ee-4731-b238-35d3822f3c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8f7b278-9ec6-4935-ad15-6e34fb8224c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244d81ae-c95e-44d0-b43b-e104f6c2b216",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e171ba59-024b-4a29-a352-78ac459a4b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbac8b53-356b-46cd-aa15-eb908bdcb3b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467cf424-8978-4cb5-940a-b913daddb1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "60ec800f-f113-4e26-9cca-9ba93a7cc030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9085f732-7cb0-4756-a430-866aa00b5a96",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4389a06-758e-486b-9369-778eddf2d592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74fb2f27-d9f5-47aa-a6e7-6122d39bbbfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f2bab6-9360-46a9-ac38-16c1a387847e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e96221f-4ec2-4eb7-adc8-0d97529af320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c22d93-af2d-4fc6-8914-0a9b96cdfef2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9078c71e-15a2-4436-9724-d2603a620aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1c74cb8-d086-4acd-8734-c986fc0d7517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af5ca2b-21bd-4d06-91a5-5685d6366ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "41676e7c-a9cd-43e9-8346-a982f2d809d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf8897a3-6092-4dd2-83f0-295843c9f957",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdc36ba-ebcc-4756-b61c-d8ce620732c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c96df91f-f2d5-4895-9186-ddc1917b401b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f066181-17a1-48e6-a051-35290044433e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5df9e11-9871-4e7b-9cee-1d8cac4ebb89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71b4b93-c99d-4cac-98b1-3798732e2476",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d46573-4955-4171-80db-382e91bc135d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ee1bc6-7ebd-41fd-96ee-164b4c509649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072b8bd2-bcfd-436e-8f83-e63de53c4cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "eae595d3-b3d2-47a4-8214-1c90b7050109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59bf03ec-8282-4350-a288-61c59eb819eb",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4de352-abb8-4f01-b86c-954ca2a66daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fcb84f7-992a-46de-a61d-c8e8bb096341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0bf28b-9503-4bde-82de-45f1361c8db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c3234f9-2f1e-4a98-bc9e-f0d8068779b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a60507-52ed-4383-a8a2-4445417cb7f9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da9d591-dc6f-4952-8160-2e70e54d8531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeaf6e4f-23ff-4c6c-82f0-adc81b42e089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483c91bf-c49e-48b6-9b77-0ccc6deb5a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5a8ce7f-d19f-40ae-8d43-ce8431622951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4a6d0d-fa2f-4e87-9c71-7448b657e412",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e2cbff-24ec-417d-bdc9-bd1f28ebe35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f270b7ef-00f8-43a5-b588-04e247d0da8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72f6f7c-3e49-4fe7-b8de-24da2c84efb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d34a2431-2c34-4eba-a374-47db6754beb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c6eb32-b870-4116-b36e-4bfb5694b68d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23b627b-54a7-47d4-87d6-292824c0f5e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e7711d-b99f-456a-b8c7-8f630e0abc46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc14f767-1f17-424d-9ff3-d66d9b8b2b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5847881-ccea-4916-b729-c5442f2952db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85846157-e293-4411-8832-26f8f34adeda",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6cc90a-aa63-4246-b4fa-4abf987d2eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a2e90a-edea-47a0-a646-75803f6c21ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52b8a60-4564-4e2e-b64b-b4b92dcc785c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cc7c2372-4412-408c-a4b6-97f928244ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb378bd0-e203-4fac-a625-298c9af93e48",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5177a21-21ca-4e5b-8f91-8ef547b3cafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6be1c901-3f8c-458d-a097-a2f7797947cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902ea649-bde3-4ea9-a931-0e9841beb5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "432e33fd-df77-4b14-bd96-04d522c89108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "defd8849-a6a8-467d-a418-ea381e12c5e2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c744e49-9fdf-4215-9ec5-0d3c4480f5ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d120c479-b786-40fa-9a43-8ec1eccc70a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa28fab-e66b-4911-84fe-1e8eadbe022f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1102928-15ce-4b70-ada8-5defbd781315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e37926-6efa-4ee7-b6c9-7cfaa1cd99f6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d783b85f-58a0-4c42-aca7-b694a8f3f899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7962884f-c74e-4c58-9e9c-a347cd8bff7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be51899-c518-4134-ae38-64301ced1291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e2b998-5d57-4962-adad-6edf3c59c7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a7cca3-9770-4fd9-aa0d-fd46cfd028de",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e9edb8-2711-4243-ba1f-ee7611ef8481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "029a7260-b6c7-4195-8a50-6f6ed0a2f99d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0551229-52b1-4181-8b4d-1138368553e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "837fac12-0423-42ea-b886-ce83db7fe805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6881522c-7001-41be-95df-81ab5b88ab05",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bba38f-fb81-43d9-969f-70898db1b262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "577b8485-8c68-41fc-bad8-f8dc5651614a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae270a8-1605-4929-b5b4-757c4f63e038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "190944b3-12b3-43c2-b1b9-866f4d986a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f1f7d96-d2e5-41fd-9cce-721206b6bef9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f81e09-4b2a-4d7c-8669-bb68bcb5bdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57f0f965-413e-4eb0-b246-fc6c375bde31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605e1153-ec1c-4fad-8ded-06cbc2f1d067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5bdd3b3-ec01-4098-923c-05b67d67b44f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d892c4-b083-4841-9ba1-f2c0f0485e8e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a792e5c6-62b5-494e-a8ce-a3096b342e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc77375-f00e-4b4e-a41d-9c4f559dd92d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137c19e2-bd33-4cd3-906c-c054347be427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dd52b72d-d672-4952-bb76-ed2a5b13a38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10aa235-2bdb-465e-afb9-73c5c436a262",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57433d53-09b0-4115-9636-016ced13f0d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad46d6f9-9194-4042-9642-728509610098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5625a500-67de-4b4c-bbad-2bc3bdf2b228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c8a21da-9016-4a8f-afdf-f3c47e94dc5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e761717a-2620-4629-b1f6-da6e1a4362bf",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcaa8dc8-8712-49db-820b-899ea7899493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "700cb510-6ada-4b3b-98a9-03388d82129c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa1d7b6-193c-4655-87fb-9aa8c45b51ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7a551c3-ea34-465c-aeaf-076444aae286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51da82a5-3f88-4e6c-ad81-0af868291531",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb328fe8-98d3-48f4-9a8e-d90d731aa433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec52f1f5-2e49-479a-bd67-3573a8f6b81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e78804-18c4-434c-9367-af45d6d5e216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd4ea8b5-ccd9-4e70-b5ad-ac92ff467670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d55a3dab-b40a-47a9-91ab-8e3ee1adcdf7",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369f26eb-7217-4977-9eac-e5ae6ad9b2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09954d6c-a790-482b-ba32-c217c0d01a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2319d456-9770-4453-b574-893cd9d23243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb06e6e4-28e1-41e4-a9f4-2f0cb681c0d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42b1f97-f4cb-417d-ab4f-46f16472f59b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c4b190-2d96-48bf-9bce-39b1453ecfc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "494264c9-dec2-424d-b656-91d1b3fd82b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd44ad03-1d7c-479e-af2f-7c464f20f69d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d401a96-6b18-49fe-a884-a2505553f6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6cfbcda-bf2a-4248-b0d4-2f22ea26196a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70bfe40f-0c0b-4067-84b0-04790ee275ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08482bf9-8ddd-42b2-993d-7b38027df429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae9e2ea-1e77-421d-95c0-18a88f928d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d75ec745-5879-42e9-8ce2-7073ef173091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f94125-b733-4ead-8532-f6c093ff7ed1",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "709d727b-894b-431f-a5e0-8441fa2c36bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ea469fd-7f42-4ec8-b0ea-3c167c469018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a6f8bcc-43cb-4b2e-b9e0-146d8f75c779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "09a6d6d8-70fa-48b8-addd-c717fb5b4676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3d5a90-cbda-422f-b6db-c56dcf2586f7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "725facc9-6705-4e69-95f6-154e4c4b4d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e9cc54b-533c-4407-9091-c7c1e95c2f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cbf7bf7-b049-4d95-ba3c-8676f7756120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "040c5295-10de-4ef7-b43b-ed5c62f390da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2708618b-63d8-4b40-a560-8b5529884a3e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da58094-1dd8-4891-a101-e93d123631f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8c7a95f-29aa-4e58-b15d-ec974d6392b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1bd699-544c-467a-a44c-47ea7d297236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d46ac41-96d6-459a-a0c9-1785596589f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb4de12-b619-4504-a80e-42a4c2f78588",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e637a0fc-03ca-4346-9f52-57c311db7d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc2963af-4994-4129-af08-60fcfce4023d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90af9f3-d99c-4074-893a-55356d9bf666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbbdac53-b248-4002-8bbd-2f7bc6075bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb500f4-a91e-458a-b9a3-57251e261a03",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d490fbc1-b541-44c2-b530-975f9ed03d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee26639a-a30a-450f-bf88-24ac936ee735"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98eca965-1bde-4992-9883-76f54d9c284e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "04e008fa-8ec5-40c6-b34d-e96a4e1b36f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423983be-f607-4919-a4c9-0b7c26086736",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "871eecc6-284e-4be5-90dc-3b5b5dd2d3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d9ba3b2-7bfd-4817-b4f4-e8d2f7a02283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f5ebe3-9a98-4359-b636-4f641b09f8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "58b41771-db98-4d13-8235-3c1cf5d21fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d70ef3-0d02-40fc-babf-475bc7489ee4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52cd987e-49dc-4dcc-8e8d-2d5483c70202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec04812-7dbe-4156-bed0-f0cd676b55c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e93dc2-b40d-4f24-ac96-af7d1dd95b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f51e62a3-d950-4c17-9773-581f8b5014cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4e0338-93dc-4fc9-9cf4-47b697f88b22",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84c70a0-028a-4484-abf0-49ef4b24ae40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "652b5f07-11ca-4171-a6de-0bb1bb18c16a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa125fd-a3f0-4ea5-b0aa-184bb56bc8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc3d84c5-b437-4c93-8cef-5d7420881d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2dc6098-2ca3-4f6c-acbc-49b3f0c9e7e7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2432fbf2-98f1-4cd4-bd6f-540c351ce9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc304a9-0e5c-4960-8924-7840162f264d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3192f4cb-d128-48f1-af1c-6f0096c1e15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "506c81b7-094f-4945-9b8a-9c09472c2069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43b81e8-b681-4794-81aa-e31ab021043c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9ca663-8318-4e85-b127-4e437b3647c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea0ac23-854d-43db-a96e-633531415c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761ced49-97bd-4687-a22c-3ace0ffe7c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b644db-74ec-48ec-be91-200e71f22065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e273b4cf-9c7d-490e-a619-471476f68d2e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab2c432-0804-467f-853f-e5eb73729fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12f2028c-eaea-4384-87c2-36a9f5ee30fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd78a297-c428-4551-8ede-566e42efa402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c76bdea-c0e2-4d32-a0ac-932561fe0d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50455a95-8647-47e6-8130-455661818d5b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab756fb-dca4-4149-873b-492a9071f237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fefd8b40-a634-4cc2-bc63-f94e62e03973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cca6948-8be5-401a-9e7d-2d7e8515ecb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9dfd4042-7c0b-4907-a952-6f572b92fe9c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "070cef9b-5cb1-4804-83b7-109a88793309",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b360321d-ef96-4cfd-8f04-1c9f9a9b7ac7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f3ca11-6df1-4701-8579-817bba448067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eaefdbb3-a851-47d5-9b86-43ce9b3879f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36ead08-b707-4aad-8974-6534e86fbae0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf2e4830-e3e5-4c50-a806-1fdddc844897"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f85f71f3-4676-4139-88c9-64333756923e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5124409-ae7e-4d1c-ac1d-2be820e03cd1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5ed3b15-d7bd-475f-bc6c-c544489116ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c335d8d-fbcd-4428-bf6c-6d12b721f1fd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "26603f81-9d40-4454-b01b-2965c1643cec",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "28cfc6cc-0f3d-4329-b357-3ee7b49ec228"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "39e9ac6d-38c4-4504-bb0a-02efb06f5c75",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "02b57a80-214a-449d-aa7b-2eac11062289"
                }
              }
            ]
          },
          {
            "id": "e8491d9f-86c3-4448-9d5c-17231dd5a17e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "37d2f9a4-fd90-4ce9-8271-fce6cb11b087",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "bc203639-38b8-415b-a6fd-360af0a57f2a",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad766fda-6d86-4241-836e-3eaa7897deed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e7666fd1-3d25-412f-bd77-287017eda941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192ecb2e-2572-4c78-8aa4-68c8cd4a1b5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5016c228-fc28-47f3-8413-7056a28d2ac6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ce6dfbe9-99e0-40f5-9cde-5525a0d2d8de",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "859507cd-8417-4d0e-a667-8af8c444eb1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce9279e7-20c5-4b36-9ada-716ad5041544"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "862741e2-6d2e-4d9e-a263-50ce5e88a3c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d914615e-5add-4bf2-acfa-af5e46b7a313"
                    }
                  }
                ]
              },
              {
                "id": "c1dc546f-c28f-4bf4-a573-c75e519a9d57",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a6b66ee-eb68-4425-b594-a83b98f4c2e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "672305a0-4df6-4019-b91f-27dda1ed9867"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0404e35-d2fa-4d1d-bf91-5d049b0da217",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2a126274-fe71-4b56-9e84-345b107c650f"
                    }
                  }
                ]
              },
              {
                "id": "ed14c8b7-bee1-4eb7-921e-5f819fd1c55a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f52dc728-2171-480b-8676-0ef2e394fce7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "16ecf3df-64e5-4716-9a19-4759c24d7dd1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4bd7cef-4514-4946-b2ab-831d2652e923",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "02a75a85-3918-4054-b915-64db57f722be"
                    }
                  }
                ]
              },
              {
                "id": "d5f93698-76ad-477b-a402-968b06c92756",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "48ab1be6-7011-4da5-acb3-1c278b218a0d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "46c4fc12-09df-444f-876b-236f0fd7ed1a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71a4f4a5-6d75-4258-a81f-373b4a44c6f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ef33f6f5-2ae6-4ac8-9937-c827e18fb690"
                    }
                  }
                ]
              },
              {
                "id": "3ec95297-1c57-45a1-aa5a-bcf20f513f80",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd4ae464-fe54-43ee-934e-e2daad344e80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "863d96d1-ca0e-4e08-aefb-6433367213af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfe7f242-0f6a-45b6-8297-4d713a20adfc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "44e87778-b9d6-4036-9c07-d11ea2da34fb"
                    }
                  }
                ]
              },
              {
                "id": "6268b49e-bb1b-4a87-b251-ae89ce110d66",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3cb477d7-505c-4fbd-bc95-4821c32d072c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "246d62d2-0498-4fb8-add3-922eee309d88"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e5b68bf-850a-4ea0-8573-495ab7d3f22c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cc5899cf-b310-483a-974e-d49c34bd7f46"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "958f80aa-0f60-44d4-9a1e-564c43934455",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e1ddae88-fa13-4d76-984f-851aae269598"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8dc72796-662d-4506-b01c-96c63a7d35f7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "22d5cb66-80a5-4550-85c1-4b30820b9c8f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d543243-f113-417c-9782-1ba8ced97777",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a675792f-7fe2-4c3d-9568-84003639f0c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "025d1a92-20c7-4748-8f2b-aeb8dce75558",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a835dfd1-4639-481b-ba5d-048683b0d877"
            }
          }
        ]
      },
      {
        "id": "79f20b75-b2f6-48c6-aeed-9f4dfbc41651",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "bd0919b0-4374-4ad9-b46b-d3927274512b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "94508f7e-1f80-4663-bea6-33ed5aee004e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ce59f054-35fb-4d14-9c12-81d951845003",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1399dc75-b717-4845-9b3e-f01d1dd70d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f842e5e6-de76-47d2-b9f4-5ada6c81a9b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e23485e-fbf9-4e9c-9f84-3bf16ea6e7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5aeeb7b5-c23a-47a9-a6f6-852389d6cae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c090bb-8c1e-41a0-8526-0d0d09b47a84",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3898fc56-a079-4df0-8643-0043ee1cf477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb94c5c-e76b-4837-a61b-7f4cb5317b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d5ebcf-2004-4a68-a34c-7b5a2d93250a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6e6c09e-49db-4014-9391-720282b9e6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20014bad-e0da-492e-9f8e-91775a6bc79f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360c978f-26a7-443e-8125-95fcc7c9b9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f220bb-9298-482f-9306-85e31a39a4f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccabf02e-69e1-4f5e-be02-760f2f1341c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf96d554-9ad5-4e5f-9224-c081e0585460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb659b1-c59d-400a-91c6-4b2b703ca69b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f067545-5d3e-4fb1-bb86-f3d2a339eda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3422016-167a-4fff-bb5d-6568cb95d4eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19532f0c-978f-43cd-83a9-ace6e3cd6027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62a4f688-967b-4f1b-aa2e-fc245bf3c3cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2270c4d-8dea-46c4-9777-22f9c063a299",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "025a7173-65a3-4567-ac77-e4943db9404a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a61def13-ceee-4a10-9c8b-c3ef983869c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5347cb8e-26a7-4421-a937-776215653291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "389a38ec-31d1-4738-a896-bc67127dc3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92246ea0-f9b8-46b8-b590-7c6586e3a914",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "825dab1f-2e34-4c20-b273-33c832c69bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebb48982-2252-4456-a10a-8a074d833421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc2a77a-973f-4510-af6a-e1a6f392ae67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7478b382-3dcd-40d4-991f-0523ad85f195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8defc53d-1c0f-4dbc-a776-01e834edbf6d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6893dec2-2ef7-46c1-a793-1a42f249af8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db080e65-e3d2-4ec7-9675-64d1242ee898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888d8d38-3cee-4dda-9b05-75e0c26f53dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "361ffda6-a4ed-4ac8-a32c-077c4d7ea785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e6bb84-9f93-4a13-bba0-6f599ba313cf",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c014d764-f622-4e2a-8a13-5845b9366567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaa48694-d3ff-4661-ae67-85956d6089ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19cde019-6e9e-45ce-901f-aca83529cbb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "955f77b5-fa21-4abb-bf31-e019d19233c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123a9faf-80ab-4e86-a182-771e5e554e94",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "071fba40-faf3-48de-99eb-0ce6671bd7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4570d48f-3dd2-42b9-b8ca-5e0cbc7655b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a61314c-35d3-4bc7-844f-619ea2833f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "85523d5c-0260-4d2c-816a-a09397c08c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e1ca51b-0daf-4f61-b223-fdde00d83a7a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14ae23f-affa-4684-9e74-a62976a12cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "745eb3c7-b7cb-4cf7-ab88-517874347019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d0ff18-7b72-4fc3-8fd1-288f9b23b419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "56a9ecde-cf17-4d40-bd56-60543820970a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d4668fb-99f8-4e00-8e35-bba4239237e1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af48f17c-1e3e-4b6f-88db-2253596b3ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c96d8c5-fab0-452e-92fa-fa845a1461ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b08eb67-7b0e-4256-adf0-4d6f7c850f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "56c0f439-fc8a-4d23-ab10-9b7df00da3fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9542577e-b9a3-4c50-a7a0-aa7ed66ba5a4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66dcdd8e-6eab-4ea2-afeb-0eaedc34bb7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ccbb7f4-f8de-4057-b214-e8227c2bb66d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cfac3d6-fe26-4e04-befd-a6006ddc2a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "027c9b04-43b2-4ad6-9020-b067ea4519d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1cfecc-a0b5-4106-ac0c-c7ee2969416d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87af006-15bf-41da-aa4c-f1e30797d17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "099a133b-42c3-48ac-a600-dabdbedf8166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b430c4-f0fb-448a-8f63-6c0a0b51ae82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd6b570-6157-4ab6-b56b-4499692d5da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936e8758-bf83-44bf-bf5e-2e1a8b91e116",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a622cac-0e65-47a2-ba7f-6bd2d3ac5d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df1a6f70-6be8-4d05-b6e3-f4bcdc0ff4be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589cdb2d-0d2e-4d1f-b0a6-3015a8fc2862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b1810f-8702-43f1-b99c-a6978b72f628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fed5ac-61b4-4eaf-8cbb-a13ae9a76f2b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55de947a-cf78-4021-b5d7-649c31eff888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4fe3a0c-f3c2-4c0e-896c-901d4f4be70f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0a121f-297b-4ece-a740-3085f4f8ffb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a19664f-319e-4a69-8d7b-441ffd44dc58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af14ff31-f2b5-40da-a7df-feed7e0d9348",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf38fa9-390f-4e35-adc3-deca58aba2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "752f7902-8fc9-4564-8f15-73297d7724fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7976f5b-7af5-4f4d-9ccd-8cd2d7d23552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "66110586-50a2-43fb-9ce3-2ce951401c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146cd685-fdbf-4138-baf9-b9a80dcaeb6e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f818ca-44e6-47ec-82b0-a95fafb2217e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae120816-fcf7-4af2-b00c-9128795eb35a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884025a5-55bf-4215-9ca4-a4b1fae38310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae11e6f9-4111-439b-b6de-67cf5b5c08fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f9eb62-8c84-48d7-b737-975956e1f76f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c744d462-49c4-421f-b109-7b6eea37cc53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "923a6bab-99e8-415f-b4b9-15f2e92742d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338408f8-8822-418a-9151-50e12ee1cc8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cf3823b-beab-431d-b321-f381cd284893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57940886-d52c-4658-82f7-986ed29ca608",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da98c15a-50c6-4773-b240-d7df2b6a8c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99a13ddf-5e2b-46ca-9973-b7a77b7380b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23542327-c6f3-4a4e-a783-20767b903988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50075cc1-6e41-4a7b-9816-0d49c76c41b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd13893-5fe6-4941-9b6d-65cf25ff7f5c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c588640c-94ec-4e5a-a1cb-3f1471cfc1ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "847ff01d-49f2-47da-9318-7955d872e914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b43cb6d-38ac-465f-b255-801873e5e7aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30ac2cc6-9602-4097-8476-13ea0bc2bb0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf02093-e6cc-4950-88ff-cca60ac48733",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a16d05d-f41d-444e-9711-5799755b9887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba42e51-d835-409a-9e2f-4ad4e23d16c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c039f85a-c577-4860-8e28-9ed748529869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "481e0f63-c8a2-4d57-8ac9-551341cda41f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d7cf18-d1e2-48d6-90e9-5a75531e0174",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71172fff-d426-4191-9dbf-d9e9fd3dc1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe4b0033-f768-4ab4-8b39-87ea56804471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff4820a-0725-4af5-b003-4f1c1d2797f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a890ff3a-df76-4248-974c-719c6bc1ebe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f675872f-163f-4715-baf1-6ab0b21866b7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "472b730c-a0f8-430a-ac55-e68558f33797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e979102-98e0-45e8-8c64-daef120446d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa471728-bf23-47b7-98ff-d5a01a2a6020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38300c89-929c-413e-9a30-5cb2242a7325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689a5801-323a-407b-993f-c1050c251047",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ff2c47-7c9d-4ff4-af51-acd7c0c6404b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f42583da-c85e-4f6c-bce0-9ace32328340"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf01734e-9083-4787-b1c5-96383f3e8843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54b34a94-07ea-4d2a-adc1-df3fb05d42a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9268b8c4-43a6-4132-933f-92a95b9b48e0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3f6ce1-6368-4389-a115-c619c76ec93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a2ef01-98b5-4ed6-9ac3-fd6030efdaa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445e19dc-2c37-42bb-b838-f8be0c23d4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f1d15ad-b12a-4e5b-93e7-84299bf5f7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271c597f-a3b5-480e-887f-6ff42aeab341",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b74467e-bba7-4364-a776-641cf0a485dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f845df7b-a8ac-454c-ad9c-c59ffb98fa3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610cda18-e95b-4b28-bce3-10c640a98403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d05d39be-15a3-4122-9220-fd47b901d34a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61f0287-4079-4ce6-9e39-da49de074422",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25c6f98-4b0b-4a75-af8b-0c2b8466347f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a99992-e496-47df-aac0-41b4dfbb6e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f425a6-1f30-4871-b82f-06a929c9d277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f888a37c-a950-4f53-994a-18f23dec12a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b6e673-74e9-4c6c-8b09-645b9740338a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84eb4c59-90be-41fd-b304-706cd1ab1c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7812cf85-5a97-49b4-9906-f3c086b8d241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e491718-dedf-4394-90d9-8b858b547d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cee59ecc-e923-4fce-b10f-df930bae0192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e900f9b-fc67-4af7-9f36-fbe521ab9e00",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4d48cb-168b-447b-8df9-953980d20a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4ccf0f8-5f61-44f7-a538-cd1ed4238175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfd772a-577d-4399-bcdc-f3210aed44a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "950e2765-73ec-439b-b67e-2774e921a76f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fec44ef-36e4-4639-aa0d-134dc0b057a9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3580bb5e-9c7b-4b15-a20e-a143cd62512c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e4769df-ccb6-40e8-8da9-37e89e9897e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397f00bf-0f9f-465f-b4b4-a98a6bde7336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f9c1637-387c-4126-8753-94ff272fc565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf5d6285-d26a-4396-a76b-b86753396b03",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "262c5737-7f1f-4b08-bcba-4391f0c5251e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f834d433-8763-43cd-8b64-912dc9be0a99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7313bd36-c361-4b53-b4c4-27106fc55652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53afa4ff-ff56-42f1-886f-c3f8a23ad728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f77634-3f5e-4803-a509-03c15e83be6e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39335646-dbf1-4b59-9e5c-4ef8710d041d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3843303-d7a5-4f0a-bb0e-de9d3e5dfcbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb32761-2c38-4a9c-b35d-35aeb1dafa4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e133e786-8f29-405d-980f-771905a22e1b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5af71899-4255-446d-b82f-ccfa8f672ce2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f8e0cec4-25e6-4a2f-8a2f-f0e2de903147",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a306fc-2905-416f-9718-0b2530af359d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8664df9a-7a6b-4022-af85-bca03f212139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ad94e2-5f30-49a3-92d5-7aac1c8db473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82ed0858-e5f5-4a1a-9ac6-c7511d57792f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a596a027-9f12-4d78-8384-2a44db4a64b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df321959-906f-4d26-9b8c-413be7c4210b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "daef2cea-d390-47dc-989f-7feb1db8383f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c27a4e5-21af-4ece-9fc5-5cdc18a1f5c1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "422b35a8-c2fd-4e6f-b3e1-797257759d5f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "177e05ed-8abf-4b85-94b1-9b8c252f71be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f358df2-8f7e-491f-b2d0-a081cbe966fc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "77585a06-4661-4132-9495-a1de7e97110a"
            }
          }
        ]
      },
      {
        "id": "45e7b416-2a26-4c9c-a8fd-73aa931c4271",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "6ec1b87c-dc22-44a4-b9e4-1a751a9bc6dd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "715d0628-957f-4a3d-9882-3233ae35f26f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0cd8aacd-2ceb-433e-be9e-ed3a26056bce",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec81c464-6672-4537-a810-8db63c636969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df52690a-320b-426e-a21f-f3a1b2f57cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5161f6c4-e4ba-480f-9d10-0a1f0541d8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbfc3be5-c4f9-4aea-8d4f-bbe9f814b74a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5c4321-702c-4e1d-8a53-100c4eb7acc9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06313565-a7d8-4dc8-b4e9-9f8bdf7ad4b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0cf5c43-7bd8-45c4-9467-5cdfac14f11e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c895cd9-d167-4ed7-910a-45050201e39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e811678f-c20f-4127-a3ad-735c6b5436fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9af14b3-cadd-46bc-b9c1-52cfe33d71eb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9229a60-d319-453f-a63e-99401cc9a1a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4236a023-1b46-4538-8c56-e033be680036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2185326f-2106-4564-ae70-69de5d8b011a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0c3abe3-792a-4d46-bf06-fca32f7e9430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a9ef14-1a5a-4a71-8988-ab907debec99",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79acd38d-1b44-4549-9609-bdb2581974e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faac7422-e698-45bc-bbd7-91c9b30bab58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93a253a-df5e-439f-9a45-c72eb15bac6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee963424-3549-4d82-9525-319cc5eeba30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2acbf7f-fb4c-4e49-b964-a4d2f07bea2a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb29b13a-0b83-4e35-ac42-cfc437939cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f64ee2b2-5a2a-4a6a-af2a-0543dd7b00ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c969e94-c8a3-430c-b781-7f1cc5c4b713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02026ab0-ef78-45c1-8a3c-8b1832592f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "727dc4bf-3024-43a5-bff7-dbeb40686b64",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e14418-ade9-423f-b68a-431e9d3b4a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bbe6c6e-8de2-430a-aaa9-be1e48b0076f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90b1e08c-f518-406e-85c0-2006708b3b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "44441525-8458-4110-b452-067c03a90f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2e05df-d61c-46ed-9643-e1ba3a385944",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "133478d5-45f4-4703-8efe-8fd347c702b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fed0a5ec-3bae-4843-8b3d-f91fdd1813d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2651983c-bd06-48b7-909a-62e8519d0873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d30957c4-4fb3-4676-a3ee-a930443e817d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d613b34-7908-421b-8d65-a4052fa6e93e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec5ef1c3-b591-456b-bc06-4c6771db8df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6dd2257-35ce-4d1b-b966-af2b1bb8281a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ec75c1-e8b6-492b-b008-a98de6b564ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf7632e-7b5b-49c9-864d-64157b0e12a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e46664c-ecea-4040-9b8d-999b89370ccb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed31cbad-752a-4d7e-a817-08ce943c07a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8c5e5dc-66e8-4433-9a57-9d6e3badcd6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da3f5d7-f0bc-43ed-86f0-3bcc09cff8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d003ebdb-22eb-4a1d-86df-4f29c6a68f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f929f2-727a-4bc2-8987-4f69d53da196",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25fde5c5-6f5c-4ebf-baf6-ad1e62de3588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d075c5b6-b433-4824-b89a-9c3e9ee983a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "534f0f13-a7b3-45bd-a870-af179bed9ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bdc87f7-3abc-4da3-9350-c6d149ef193c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ca286a-4d1f-4c7b-81bb-809bf2da9c8a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a4129d-1205-4c64-aed7-27d612e35416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a34916f3-9818-4a88-aebb-9721e984a0cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e655eec-beb8-423b-b4ad-61ad370945d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "29b55523-6835-425d-87a4-197c5a6a627e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80c013d-d280-441a-b784-0eb6857ffd79",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee4956f-b69d-41db-9580-27ca0341b97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78721c43-8643-4834-9530-335eb940b571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "898f0115-c71f-44f6-b888-e336e3b4c421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f36520c9-9e71-430c-8ace-f7de09c7a362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f924e707-9cde-4359-827a-c1d45790a83b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01fd73ec-7335-4d62-9448-86f5cdb879a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "393683f0-48f1-4f0b-b61e-4b5c5ab14981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a993e88-208b-47b0-ac38-2b75f280ba22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f7b7626-2937-4d8d-85ad-3df7f46fc2a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a788e8-2c34-4099-be7d-e708ff241de9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0631a873-4ee6-4fce-a676-0b077816a192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47257b6b-72fd-4cd2-b759-d70f6ea4f96b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7acc71-5e26-4d9f-a85e-567de7537f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd618f87-2bd9-411c-9eef-da52d52cdab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2506a888-20a4-4754-8536-1fc295862f7a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af68c727-3028-4224-8d46-2d2e4d3e29bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f7c01a4-0397-4ab3-a23a-29c2fa5c8a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403917e2-37e0-497c-8811-1558b2ec71e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b711d46f-e13d-4e95-be7a-9dd280366a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d2c42e-0e93-46ce-a762-28e848310529",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d305e7c-6bc5-42ce-a2c3-0f4b5d99cea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "248e903c-b49d-4a98-bfa1-ca9368e5b9eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc5512a-d695-4d4c-a8ce-39332420c9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "61da4457-cb12-4317-8614-0bff911a3da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe184f8-c4a2-4241-af50-8b5b16639450",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f38a60-eef8-4367-9307-cd1627d02a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a4fbbb-3dca-4a2e-97f5-0fd5abe870e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c9a2af-dc47-4a43-82bd-5317e6dddb4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "cca56af0-6421-4fa1-8eab-87ed4cd15f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bca0f9e-d777-4b8d-8edf-365dc6f2fc88",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d5c34c-9a35-463e-a743-75b264358982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfd10bf5-9243-4231-bbc4-64c442cb33ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61e4ba8-c551-4a52-91c3-d15c514ef350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "45b03314-bb24-4149-b8d2-a95aa12213e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6593a73-d01b-4ea2-94a1-948ef8a1bae3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26584c3-10fc-4722-a5c8-a4f487065400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e0a13c8-7cb6-48c2-aeb2-004c8bea7a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87245eb9-c47b-4e32-876f-161ec0453693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7262096f-4de3-4ede-8062-54cd2d21bd16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b013bae-2167-4b69-95e9-912eed1eaf01",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ae85ab-cc24-44b5-adbd-c0531075bdba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d1f7d81-ad7d-4913-beb5-7f5cd3127166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1222ee4a-0337-4404-a6a9-f32171cac3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cdfaf32-da03-48d2-be30-233068964bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6346fd8-f382-4d5c-a352-c3c2bdfc7533",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e5c311-1908-4e72-a77c-a0eee96a4a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71a2347e-435d-424d-90e2-1c2c4472d56b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336cf3dc-ef45-4b9b-bf05-6c775c058303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "134e6967-fba2-4bbd-b813-6cc86389e42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ceac87-8aa1-483d-9c2f-5e0e94bb287c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed01e77d-85b0-427a-8dfe-58bbfb0be195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e763dc65-48c0-4eb5-bc20-fd4caa77cbfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5226b0-8cde-4054-9391-5379b7168d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e77d26bd-d874-4962-9446-e9130201b84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce5a968-c6bb-4c97-913d-8ffd87a3a2cb",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b14995c-0f9e-43c1-90ee-d0b0bfa57f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60fbe206-e981-4e99-99af-dde2e0225ed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793384d9-4f08-41eb-9dc7-0e59665a5481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac2fcb96-f8b1-442b-91d7-ad3e1cd945e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3362372-a2e9-4896-ad0b-02f3346a9a58",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f892cf2-acfa-47bc-bd29-d8d252e17eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f534339b-ccc7-4704-b9ba-f6df209f97a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2f27ce-fab6-4b36-aa37-42c3610b280c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ad5e2a5-556c-4a78-b90e-02ce488d91fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "badca1a5-7ea8-4a3f-8694-69ed99a3e991",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97c03f9-3334-4189-aea7-4cb8c0456e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "707c45c4-1fdd-40da-bda0-c676eb189f74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77b17db-c9bd-46de-92b5-51049cdeaeac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a30f2658-b482-47e9-9092-3db3d796be88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45660de2-0cc0-4bc3-a8c5-1e11926e0762",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c068c2-a86d-49db-967b-7fc977bfd40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda2745f-838c-43f1-91d9-13b508129e17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87198dda-d49e-42c5-bd8c-c54f3b001fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "046dbbb9-d6ad-4957-b6ed-0b6b71bf48ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd036db-8391-46a9-bf0f-51163af72ad5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d462aeba-5237-4005-8a97-73d369a56b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9598e2a-3478-4434-b5ad-4183bc41c49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a82452-c71d-4cbc-997b-d3598b0a9330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "637d5d1c-414e-4634-92fd-12e0f96f9933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968175da-d519-4856-af67-07735811aa51",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab505f2-0cfd-4eb7-8166-3b0bec6f8a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e182be81-eddc-4168-9c30-381479127fd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702cfad9-65f3-4a4f-a9d4-ff7d2d0ddca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24e51667-8ad1-48cb-9ac3-2ed93b8e2ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa534ab-5d1f-4bb8-b1bc-5b5f6658cb5a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "964bbe59-6b95-4367-82c6-d6cadd4beab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "653c4774-b257-431e-b4c8-10e3c23d390a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4077a7e-9bc5-4c80-9b4c-019d1b995621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec6e1929-dd04-44db-ac06-61cac7987bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b14ae0-7312-42d6-8e2a-471127f87934",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab331d8-c93c-4e8c-adee-a21ff7acfc83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "849240b0-5708-4065-8dc5-243a22685b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa65aa62-e63b-4920-b537-5f6e6bc3788e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa26e149-5c8b-47a2-9db8-d452fa6899d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df04f9ce-da90-4be5-a379-e52cfbd27c0c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb6603a-e66a-438a-b98c-7bb465bafadd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa34770-c38e-4edc-97a4-83737de062b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83e0ded-f55a-4a4f-987a-d9f6f537dd08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d461aa2-35cb-45da-ba63-a60872c28917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38662a4-1327-4761-ad0b-a28bf75d95f3",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae79b48-9464-4170-a713-d52679e3a7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c72b5753-094a-430e-a838-2b84f5fe8e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ad666e-f8ff-47f8-af1f-81c6e7a8ac4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61118aaf-135b-45a4-aea3-8a18cbabe2bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9020df82-1f7f-42c7-8750-e861221ceaf3",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fec76b-b452-4fec-9292-bda0ad62bf1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e4676aa-fc7e-4ffa-9a03-c7ce0a1ae310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f27504-fcf5-4f7a-a252-2c5bede489b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c31651-0e24-449c-ae8a-7e33192866f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580e99f7-d637-443c-9dba-a6299edc8f1d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec50992f-3b89-4fa9-8d75-2d808bdc1cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42d9887e-0600-4ebf-8d6b-586e877f003e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c3b362d-c7a4-405c-9139-788d843e1ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cde4ea9b-e392-4f86-bc7d-4b30f8d332ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963ed712-7002-4ad6-8eee-ce4061397d10",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01841cb6-13df-464c-b67c-ad4e05328b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e339d740-61ec-46bc-8278-f1bee94a5d47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79e1514-d4b8-4f40-bd40-7789b7c08fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3c3784c-395a-4930-a057-823ae391ff25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c318e3c-bd55-4842-95e9-0d69b493fc55",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19dcdbc6-75fa-4b5c-9d08-dd00389aed18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5326c353-a98f-4bcd-9c92-99b457283c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a655b55-bb3e-407e-9f04-7014b5c3f14f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14bd881c-3c6b-4cdf-8e1d-c50db70417f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac23a7b1-c91c-4f60-9dfb-cd50f3eb59ca",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed6cc9a-5543-4212-a701-f2ecb4d3b342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd5c8c0-f856-4a3c-8c1b-ad52a67bf24c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3071b148-2600-4773-819c-2ba36fa49163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "847639a7-3c3a-4b03-94b1-dbd454b9dc73"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e13f451a-c10f-4ca1-8c83-b900a01c00c5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0b9b0234-e9fe-4b94-8d7d-ffd903e0b0fe",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7f240f-c132-439e-b422-2bdc425e870a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "004152c2-9adc-4d31-97ce-06f201959b86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c1d72c-f8c5-4561-9936-6bd03437e28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4d31f6c-6c18-463c-be2b-30a7e63043f8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d1a5f49-86ce-440c-a5bb-9273f140e9b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e7ace8e-ebc8-4635-a2c6-77d29ab58065"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f60ec43b-b882-4ca0-b235-f5cbc5aeaadc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de39a940-3d0e-4706-86fb-d72789bce997"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "87176af0-00eb-4345-9747-ba0196502f30",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c9903adc-6f63-401f-b918-89bee089a36d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e4af2a53-4d12-4a1f-bf4c-fc01af02c88c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "65d5a0db-49da-47ee-b158-05c9716390ac"
            }
          }
        ]
      },
      {
        "id": "e84bdadf-0ccc-4e9e-adee-abadfaa42d58",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9546f105-e274-420c-9691-695b5c55df29",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8bfafcfc-a840-49df-be64-2e9ab5e60ac0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cd36b4cc-9831-4e7b-bfa9-042b265fe5a2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5e9125-ea8d-4fc9-88f5-b366419d2a19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27926020-4634-44bf-a626-a52fe614fb51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce41d8f-77d4-435d-97e8-f89a5a6cba03",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38b247f-2870-453e-b103-510a320aeca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e066bb0c-e72e-4149-be8b-33e42761debf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3f86a9-b44e-4618-a1d8-90e1e6044038",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc0fe816-13b4-4baf-85c8-5678a992ac6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c0765ee-6cf4-40df-90eb-7a86036bf929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd43f8d7-4617-458d-ba7d-cf2327a2dbc8",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0df6e9-48c8-41a5-9c1f-bafa0cf443b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d894df-151f-4be7-9a53-fe86f4f17382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405d496e-00e0-4f34-bd20-a15c7584e3b9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37759a2-8f3c-4eed-a677-193d71b98824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3443ef18-b2d2-4a73-9285-d17a91b73f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34141a1c-8889-417b-87c6-a1759f479a8b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d5688a-49b3-4b7b-af52-af6e74c3b12b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd092cd-1120-47b1-bb66-e6a904855524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6682ae0-d301-4ca8-b091-73fbf0429131",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3106c71-d6c3-4e7f-bd39-a6f4ce815aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c72023f-7f0c-4c07-85e4-8331b660c23c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08fffcac-a50f-41cb-b956-c427372d83a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e5575e9-9886-4cbb-af33-a82670bbd18f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df504eec-618d-4fbd-8453-7166812a90bd",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ca510b-c101-4a1d-b673-2c809fa6d2a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38536b20-3dae-482b-b6b8-a2bcd8960591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a64313fa-0dd7-4e7f-97d0-229dddd83450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54625f45-1c7c-4ffe-96af-15c3ab5a9023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d00d09-acc3-4cd7-9a90-b24084337688",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee067ea9-a0f7-4374-a1c1-a2a9ab54519c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c64a331-666c-4924-9745-9dde1d4431da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c27a3dd-869c-4233-9f43-032d4c9c1955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a75acdc-7d68-4ec8-8daf-5ec1d4746e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561cc46b-2c38-4681-b9d8-2d3ad65910d6",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d943000-427a-4571-9b0f-8e819b5753ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7ef7afb-2a38-4e57-9696-654751cae8c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd4de3e-f612-40ce-8ab4-b5d6fc2b5289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6822ddc9-661b-4a6f-b41e-9be9682ba4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3bbba89-1c15-4245-b277-31344992ecc9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e4c76c-ba65-43af-81e4-db57baa56cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "955f2f46-5d48-4326-9d74-7fb927fda3cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad077b4-0475-4157-a62f-589d59b46b7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efcb63a6-dcd7-4f43-8463-432e958bd29d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "787b1b6c-bec6-4c94-af52-ecbc0309d7a6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97341f46-afd0-479f-9acc-74f814e0c669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e96f548-5c74-4720-9f7a-5587f118bae2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfd7084-4110-4d39-ae2e-9b333dcb22f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe216292-ad54-4407-a7e6-ac78680ded8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0cadd09-b27d-4e25-bebe-a0efa94bb8ca",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74febf9-8948-4b50-8f90-72d7ea0a5d23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "180832d0-c4a4-4291-ab79-07d176407003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "192b149a-34de-4877-a116-8175770e84c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "577674e9-7939-4e86-9c87-4847f542c87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f68031-37a4-44ea-ad07-8efa871ecaa7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31c21bb-aa4d-4a8e-8b5c-ad4a66e283a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c26aa372-3c79-4f21-8167-ad3992483769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aebf4d87-86d2-4416-98bd-049153e63b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83d44b4d-da98-44b5-bc9d-42064275222a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8540620-604c-4d1c-9af6-e3fa1797dded",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9603fb01-be41-4b4e-abcb-efdcc4800e93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f4b094-b140-48f0-b404-061ecb291cb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90550af-069b-4508-b758-e6986b7a01ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74d0d8ad-7534-474f-bc3d-2a2a8ee255d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb8cb74-5e9c-4747-8b72-5a675481ad74",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943dee21-2476-4f13-bb84-970cac3baf99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fdadc26-dd51-49a2-a7f1-2f8e5340baee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51361d07-6910-40a8-95d9-e8237b154e50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cef5e689-118d-4c63-8cea-553dc2fb7ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82311547-affd-43d3-a6c0-fde8cddf6e3c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63508c9-e17f-4168-a568-50059eb2e552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "758c0305-3d2a-4e02-a2a0-21ccfc07fb25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cee9f93-4625-4358-a923-31d79db455d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb10d25-58ac-45b8-8920-ac2612ce3237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb838cb-b369-498c-aa4f-674f673d2656",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a94ef71-f9d0-4e73-8d30-2950c072aedb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502115d5-0457-4656-966e-1fc44363db0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ded79fb-56e0-4cf9-b2d1-9331c53e14b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e903f45-e10d-4c35-8db5-42f6c571424d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee46ddc-a2de-4923-83f4-74331a980752",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb85f5c2-de8f-4f00-a76b-62da4f7eafcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b2a31b5-f15f-4892-a70e-4625d7620f55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c73df53-6dc0-4507-b5f7-0d7c788a2f74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75784c85-cfe0-443b-9549-9ccafde84f9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d453a91-c0be-4cd2-ad52-a50d8d3182a3",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d65f2df-bcc8-4bc3-b7db-e00ab44f9e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f60aad5-5e8b-4d30-a9bd-4e3a876b9ec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca55e205-aaab-40a2-a92c-44fd82ad135a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09748bf4-7c07-4caa-b613-da674cba311c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336b555a-7a8c-47b9-8f30-e0bfd275d342",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3890c042-560e-45ce-9403-55b44be211c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9796a571-2d5c-4d63-b4e2-ec29af32c092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ae4da5-e884-4736-8507-b0afc59f26d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1d667ec-0e2a-4a94-a0b9-febc7b96bfc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da9eae9-506f-4ac2-9582-7da79fb17aea",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e45682-bec1-441e-b426-6669454ca522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eee13feb-8f64-4419-920a-00ca3295d0de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f421d07-47b1-44ca-94c3-1df3a0a407a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8c9dddb-f185-478d-8334-77a6e2edb4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761904a5-c226-4708-a172-0fed518d32bd",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b300991a-5383-46ee-8e5a-e3a626b5c300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34add3d9-1e2a-43f8-aa72-1fecc10b03c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a84f249-70a3-4722-9bc1-4ef2fd2fdc63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "644e8aad-fe7f-478b-94f9-3fdfc9db8926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fe39d8-efae-4d2a-82c9-0000867b6f02",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226c904f-8d10-4ace-9525-b8bb2643df43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab308a0c-92be-40a0-8943-9a550bbac81d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04c6ae0-a953-4dc4-ba64-178880a2eda8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23d7e08d-ee6f-4212-b7de-2e2e6ffe5036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1493e81f-afd0-4be8-985b-c1d8098cd9b4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b49e0f-b3ee-4273-9a26-08805b937f33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1298bca3-cc8b-42c7-874e-36a8abb2fff6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5da5b4b-2807-4026-a999-1017f0394748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad3d216c-edee-416b-8d23-0287cf002f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab5f385-1b49-4d2f-b781-41a399c8cd39",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71fecc17-cd05-4f02-958e-bc9876dc7162",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e870011b-fbba-4158-9e48-8525880aec7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f18b86c-d1e7-405e-bd18-db7ad8066632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5165d68-77c9-4a44-af0c-405d49f9a78f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a5eac3-ced5-4388-ad90-002310cfa5cc",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b779461d-98d7-4da5-bcbc-8635f2bedbc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad672ad1-cbb9-4d73-9644-d8ac5e5390cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f52759-726e-4348-abf9-cfacae94a09e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eea930c-efef-448a-b4da-9808fbc50096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec7fb9f-f922-47bb-b141-132c1a3e3408",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d292c0f-0563-47d3-b7a3-9fbb5e4e45a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd18253-e0a3-476b-8321-5afb38a4ba02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a1d9a0-201e-4591-abbf-bbaf38744082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4785c046-9b1c-403a-9c20-93e4956379d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dad6aa3-75c4-426c-9399-b92a00a7a08c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1781944b-43a0-4c20-a094-bfef546160d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "927ff101-c9ed-4454-b2cc-ea8332cfcb4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90720cf-a511-4e76-bed4-aded5ed8824f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ef00cc4-7985-4b2a-a2d3-82f8518a5d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2727c6a8-5954-4ca2-8858-ba5e1c4e00ac",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32ab06e-a2f4-4288-9777-740482e85a2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b49c5208-7b70-42d7-891e-92b6a8395ac3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9306be-d0f1-48ea-9af5-77e244a789e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a089bad6-e7fd-43ae-bbcd-770bb59d027c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d08f6fc-b79e-4470-8f9e-65968a7b2960",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281fb28b-b6f1-4ebd-a2e0-993da92f6c95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "389ca30f-50dc-4a46-b13f-987e698ca665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ea4cfb-5257-49b8-ac1f-a516f01f84d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e50030cf-7048-4886-9c9c-d64cff17d51e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c5ff59-8493-4c53-868f-1391f34db260",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb66925-2ba7-4349-88ba-1ba2a036361c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd370482-f4dd-4256-9cdb-a216f8099652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9986fb71-0283-437b-a49a-56e8abee5083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bd47524-d150-449e-a0e5-14eabd625986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b829934-64ab-444d-b21c-4b3d8583bee4",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1e8a94-64e6-42ca-b8e8-cfef82dc930f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fabfac58-152f-40c6-be59-64b107c212ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1da8bcc-6d89-441e-b8b8-c88651be941f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba3a6ad-7882-4d37-b3fd-fba117821592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300df87e-0f3c-42a1-84ed-b34476e562be",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8c9b93-3a16-473c-914c-6f12f26aa978",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c44ac646-2e51-4786-8126-16a772adfee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bfa1978-2c34-435c-b08c-7f00a70f12fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198df052-29f3-4b5b-bed9-3fe22c657bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c9c750-e23e-40fe-b0db-edf70ac93be7",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b5716b-4291-4beb-812f-beaf1b758c96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c00bf301-57eb-48f8-a548-f6daefa0fb3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14369f2-0c3f-4046-bd34-00edbeb0a219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "099d9529-96db-4577-8f8b-907eac920762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed98fe41-576b-4e6a-bc09-e616e826e0b5",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811c599e-bb93-404a-bc7b-f874bff57149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7df7b7f3-731e-4277-95c0-3db56ea142dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3072b06-baf7-41ff-b2a4-53074ad7235f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c62ebe83-d794-4014-8d0c-0aab56cd5ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a0d2e3b-3e96-4c3d-843f-977302cf86fe",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95506b1-38e6-4f6d-8f59-4b455c1929ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1b98dac-9ee8-461f-a449-64686a3ff4f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "019b7f76-5659-4519-9f75-4660d2dc2d33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af3b826-249d-4827-88b4-1bfd392f1482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76eb0a4-8fe8-49ba-9fd7-2f1571395740",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09fc6bc6-fd17-4af1-b78f-49d90a35d2ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b76ffba-986c-491f-8e7c-b1e4353bce7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9baf5bc-17fb-4abf-822a-e6d10e790f2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e8e968-50db-497b-a401-ed3b8ec3fa93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20b3f0c-0215-466d-a17e-ae5e538d9326",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7bc76ac-2ddf-4597-b14c-0b6a9d96bba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f3aa690-cf79-42f7-bd1d-ca68095fe73f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c904a9b5-248d-4453-a865-2aa3c8ae13eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5918b94a-c2cd-4280-acb3-7856801b0b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9b62ff-3a45-4276-a669-05bb598bce2f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bbfa4e3-a7f5-4e4f-b846-f4a0e610fcae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3349b21f-b48a-4dc9-886d-62345e407d2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4648e7-03df-427d-a38f-8cd0e5e90e38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79c07fba-9a67-4dcc-aff4-f7db411939b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df2538d9-e4a8-4f53-a365-a97133d35695",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0572ecfc-a5c9-4975-954a-a60696595478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb170303-9681-4b79-9c9c-81b50e5ed06e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99cd5edf-036a-4674-a5fc-10dd08557f3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d9dd028-ec0a-4d3e-a341-6f2cc59ca39b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae688fb8-63c2-407a-9404-c87edcf36e83",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8fd6b47-a6c3-4427-9556-b9e1d6863a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b266041b-da15-4668-9841-37dda599a498"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad31959-7af0-4ac9-a078-81e7016340cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e94af6ff-edda-4951-92a8-5750c09c8ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4bf9f8d-ebcb-4b61-a55a-970dd531c320",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66819bd4-5613-4ca4-b6f2-f5316b3a3fb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d69eb1eb-dfd4-4d29-b311-d1e0fe866048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97293332-9ea5-477c-84dc-19bdd86695df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877ade4e-506a-40ef-9c51-7e791a22f9b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12037cc-a2cd-4604-88eb-6f0d94350463",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13500a4-b479-4c30-8377-c3225eebfc28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fae6f28-d25f-4c78-8e35-cf446701e37d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2fc51d2-78b5-4cd9-9033-85a998deefb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c4fa5bb-694a-43f7-ad81-c47f926b8ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd889459-d49a-4e58-8a13-8123ca6848a7",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4157bed2-08e3-4653-965d-84b5a456518b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d63185db-9d71-46b0-b92e-708692eb25bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5ebff6-f32a-46c6-8393-99df0bf2a247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66bfd242-e5b6-434c-b867-cc8e8b354951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e972db8-a3c5-4fe1-a967-bff79bd1bb2e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3acb17f-8986-4226-9c42-e2495b47f612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "708ccfe1-018b-432d-abfe-af223cb86ff5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d620e194-80fb-409f-9058-e08413c43d6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5945ec30-ee6b-4a7e-96d4-7a8ba581b695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "594ec76a-22cd-40c6-94e7-dd688199eb96",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03564230-a5d1-485f-983d-0b92b616b84d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac1198e2-5d56-4510-a09f-2c6bf4ad0000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64cc3872-4fb2-4e26-8b3b-1275acb86c52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00423831-5970-40af-8fc3-515fcb430758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e5d13d-e9cd-4d16-97f6-7dabf3dd5bad",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309cc439-3e47-4387-897e-fee48d54cd92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d0ccc34-c255-4f2e-a6dd-e75de93e2855"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0558af95-2fe3-4139-83a0-607a835c5ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56ae490f-dfe8-42a7-9799-e7c2fdc585ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4456656e-f9a3-4d3c-bcdb-59cb7dbbe370",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a9b5a3-c273-462d-acb1-913057d56897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "989698e7-ad50-4d18-a221-cbc5645ab15d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad6d162-f9b4-4fb9-8e21-0a30c484cc3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb0a942-8bac-4f1d-b4d3-c82722e503af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e7f7e9-d8f1-4711-b3ba-bb26da29e76f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22b543f-3ca1-4c7c-bfa9-f3d58d7bebfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d40e013d-819f-41b8-803c-f542a3281bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "734d892d-ec30-4adc-9353-092965f48384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c294c7df-51b5-4652-a95d-3630a4ab4754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30d24f2-e4ee-4d55-a8ca-523bc1dd7036",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365de16e-97be-464e-9c5a-f83f8c20c316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93c3bca2-629a-453b-9873-484eee084f38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bec12dd-69bc-4ad8-9f12-c2882cb48cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82357153-0635-42ca-894a-0c67d91e9cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c85e9ce2-aca2-4b77-af49-afc301bf5ed3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc35e2de-1301-430a-a570-1482be97970a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61c7397a-0ebc-4598-ba23-f3d7692d7688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a35850e-eba0-470e-871d-65f7493e373b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c5375f-3bc6-4385-849b-580fde34cafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce3f9cd-a247-4763-93ad-7992e7f6298d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6350266-fc1f-45f5-ab9f-708b554bab5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0763ef7b-2702-4ac9-9ebc-13cf55189dc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1435f573-847e-4d17-b806-be81f74fddd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a9c93a-b5b5-4120-a67c-82f0598cb00a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08302c32-0574-4bfb-aee7-503047bd572d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2317a51f-cb3c-4b23-9376-7d512c9b94ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc08b028-1802-4793-9727-4dde6c326b15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "354814fa-bf92-46d7-9170-cad48af3a4d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51dddda8-1e4a-4e4e-8c9f-566b752f9a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e694b1ff-e508-4e5a-b7fe-1a61db2d6b1a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf6d9a8-42f5-4d66-94a6-409d57dc6a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3afcf94-8918-40fe-a48c-c836a8dd9984"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f21685-425e-42ac-8ac3-e8f0b52acd4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03dc9538-eb45-4345-9200-cf1d756b1678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bee9712-3a38-4606-8223-bc263e182e70",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fac93ed-fcbd-47e7-a20f-dc0d2c9c73ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16145f6f-392c-45e2-b526-53fe4055504c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78197307-e0dd-48d6-a250-06af959b8877",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b4813ab-0a39-4f00-8c6d-5572b9ff77d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de256294-34ae-4523-ab63-e55d74fcc7ac",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee802d4-b2ba-4b4c-aa48-b8e710fa4bbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "249560b8-86ca-49a3-aaee-4f940ba38b42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10bdee9d-0781-48ae-87ee-e5a8ab9a5269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd9b3add-bbcf-4cf2-9f70-88124d325f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c379262a-ee19-4a0e-9532-3bda376ced45",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef440d8-1e34-4062-b96e-28c76d47a307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd2202e-7fa1-47d8-bbf1-8dbcf3f4bd24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ace6447-0303-4b25-b8fe-2ec0ed195ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ce19dc9-58db-450f-b707-f330bf146bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e395d9-c924-4376-b46e-a9bbed8419f7",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad9bc58-2ef8-49f4-9b86-8182c25529b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92cab811-a09e-42d1-93e8-039dd1562fc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a616ef3-548f-4bc5-8949-c7ae806f4ef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3bf3caf-2ebf-4a99-aa57-1ece7c141c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82fb6ce7-2c43-4921-b481-f316ef2dbb1f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "717c7fb8-d62a-460b-9dd2-ad0ca51d7524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7310783-5058-41b2-a2b5-c98856d5af29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7c54e6-dae7-4cb3-b5fc-58847980e1f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c80b2ad-1a3c-48f4-840e-4ec75c8ba31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207d54b8-dcec-4858-9130-b5db6bf65896",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ea95666-afed-4c41-971f-794678ec1a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90ce0ab1-a5ef-41b2-b177-e73b996276e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "329c1db8-df09-4a46-ac32-d3c209c21092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2090acce-56c5-488d-a5b8-22e828d8bc29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74995a4-1e3a-4945-aa5a-6ae1a0a4e371",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb0a009-e64a-4e7e-9198-66ff02c9bfd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "279bf4dc-9ce5-41a4-b798-c88c91c5d0c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c10810c-93a0-4112-afbc-2daec26b041f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe7076f-059b-4d06-a366-2fc125a56733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204fcd1b-735a-4de9-9e8a-87717b0480dc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d474f93b-b29b-4a32-ab01-89a4710a64d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42b468c8-493f-4416-a83b-b17d86bf1d17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae58a43e-c120-4910-afe1-7d3a242da534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a077f241-5950-4d70-b66a-51f9f5a24873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f44f46-d86d-4287-baf5-5ce15f7c4c76",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f2384b-d800-4470-909e-603c1b94e2f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "546ec69c-30d2-4577-832a-2a4a3adce0d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2735381-38d8-4885-b5a4-990e084af56f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e2aad05-14e4-46a9-91fb-ca8767a70095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6541b9e4-0e28-41a7-ab12-821a6f018d70",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1ffcc9-7f58-4a21-acaa-30c9b7eedede",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8364ef92-a5e6-46c5-a2d9-52b8eff327cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a492f0-a8f2-4c18-ad9d-4c5c00d71b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9139a07b-5634-43a1-932d-10b075526a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d45f50c-357b-446a-bcc4-ddc44146d65e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e2ff8db-3ea1-4f96-bcd9-0a9a820b0522",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ae76929-a758-415f-ba5a-43f782e80c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "540ff05a-0d12-40f8-83e7-e81f18d340ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6632f3c2-b8d6-4ec3-ac7f-ed75ef7a8335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8309b64c-dc96-4c46-9711-d2590e2ce252",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e61022-e270-44e9-a28e-cbb741e6c842",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f5613b3-aad1-4bbf-aef7-94058e47692c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b5877c-6ed0-48c8-8806-2408c1506452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "486d1cfe-0015-492a-9988-bafbea56b563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5564657f-9f1a-4c58-9ade-c8d24f39b965",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c5f869-873d-43f4-8824-f1915d5593b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a632b52-0fe1-4294-8653-a9cc3fb40389"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49406cf6-f198-49ff-a331-3df410cf9024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb87f5bd-9ec6-47c6-999d-9014f2e28398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9583f431-ff4e-4d2b-893d-02a6f1301d22",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac09ef4-f835-4f77-9483-8ef42e17d91e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf579a18-1b28-47f6-8d00-ec302d86ac02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45cd3ee-8c22-43fa-9452-c8e299a18c13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceab6c66-3dad-46f9-a20e-39e491e1b37c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07fc9d72-c1c5-4faf-9797-05b694f67196",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba9e136-3123-4da1-90ed-4af899618486",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99510034-3293-45d1-9604-2bd8384650f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74314e2c-cd53-4ca2-bb3d-c77ce991231a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8567a88-2ee4-4bcb-8c46-c1a4afd1f1b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2597c371-29c8-44cc-afc3-8714bcf43aba",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c524b0c-44dc-4506-868e-ae4ac670a711",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01d2b3e8-92f5-4913-97c9-e36badceb57d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "097a6a46-9e8f-4cdd-a322-7e8ddc3b3086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc7ba4a1-2ca2-4292-b152-80f0907691a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d90b1c7-15dd-409a-8afb-2e341da3bf92",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ead1c1-4db2-4f20-b183-d756c326cf08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa7c83e3-6d39-4f3a-afa3-be3b768e7705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "272bd927-53c4-4db4-b1cf-33a2c468b4fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fb146b2-cfc2-49c4-9aec-7c25aa174b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09120c2c-72a1-4699-9848-d35544eacf57",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a798123b-8700-4a42-bf32-cac8c08c2491",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de5a1039-15c5-408f-9855-35e5947a62e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "301e42ab-011b-4121-8213-6b0e04e94580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "229fc715-5a26-4bc5-bc28-bf3e3c6dd291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f7b343-2d84-40bd-b207-02238b1195f8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6d72ef-7fa7-4905-b489-16376135db3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca64abd0-c1e9-4bb9-ae90-3bf1d8eead2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6498c90-f71b-4bb7-afd2-76fade1eba23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "356cb708-c9cf-488d-b726-f233caf88bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4f44c8-68d2-4fd4-bc1a-a794a4428841",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace77473-bcfb-4f72-8071-369d95dad5d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "734853a3-3ca6-415a-8b65-0be59026fd23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0986aa37-7222-46d5-bfc9-e0bc3b42eb4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "672d4cd1-1846-414a-83d8-2ece35df0707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3cd0ae2-e005-4b49-b96e-b22a641de7b2",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b74f19-e3bb-43ea-ba76-6c985cce18ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cff465d-6c21-4ec3-91fe-2d4c9527538f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b294ac30-a601-48fa-9051-f6c99e692ea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040c4e76-8109-441e-9fef-9572b908ca8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9349fb0-44f1-4c3b-ab8a-f94c054324d7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4ac4fd-c86d-4f96-8446-d47febc79ce1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e204594e-e693-4c3b-9c8f-4ee2a6b27447"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abbcdbe0-a189-4324-b7ab-0b5645d2dc95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e23a3f-a77d-452e-9002-b04a0f3096e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b97c0a-201b-4252-a188-133190a32010",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f77976e-c8c0-40f6-bb8d-02483ffcba47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3be3a788-8adc-47de-a5f8-f45c054d5fd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d80390-586e-428a-bac8-4502e35093a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6acca1b-241e-45a5-b9cc-0ddc46efa143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb66085f-2f2e-49e1-8664-1bb116e74a24",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d24e71-9721-428a-917d-eb1fc8a2c5d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fda57246-7bed-415a-99c8-70e0691cdb02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96a27d1-84f6-428b-b049-79c13272fe79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ce13f7a-ff07-4b86-9e47-e02a73af317b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b3a5c9-fb67-40a1-a8d7-e4b255b5153b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbdc24a3-43a0-41b4-b804-547778753710",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cf084be-a9b0-4ae8-baba-e024af866e81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4659ac-f5de-44fa-b780-bd63b50da19e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e26f7ccc-6dd7-456a-aa2c-24469eafdb65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cde504-eda0-40dc-a964-c42ef1fc5c83",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc5c332-b6c2-486d-bb8d-dda2ba84d0e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac6f3d33-8bd3-4f17-950c-fd90b12b69cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9729370b-7eaa-411e-8b96-3abccd7eba09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36cb6ba5-3c27-4d7f-9344-729dc7a0da79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca337f53-1b7e-455d-a0c7-3fdbd4d1955d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7fd856-b38a-4eee-bf3c-f27d631efe26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1772a8eb-0d34-46df-a87b-ca1b3d68fce7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02780f40-c0a9-43ab-a071-83b65344d000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "413e812c-6363-487f-ba1f-a6224f2c90fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9911f6c7-c385-4f6a-b209-e6019e0b5ea3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60baaf8a-8e23-415c-acb3-dcec59f91561",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a77d891a-7e22-4fcc-84fb-e4e6316f5e89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b40cf95-664c-4e33-8dba-5de9906eb82c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4efb70c-5a15-4152-8c4e-5a333d8cadf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bccd599a-4eec-4b55-8a0e-e0017514f344",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faaca1f8-0e67-4a3e-898e-5557b346980c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b328c8e-c465-45ca-b920-a9b1f92fd3be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba07db99-c2f5-4f33-9cc6-5442369b3ad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05b25692-99a6-43c6-9aa4-9917cc55af01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a717af0-85cf-405f-84aa-7c093e2d9f15",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2164a3-19ca-4928-879a-952ed51a14d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41045011-fef0-45ae-ab8b-2a9886f12016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d826ef-150a-49ea-a6ef-34499c3b6a8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc631bd4-51c3-4a8b-ad53-284855ac9617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa2c17a-c677-42dc-80ab-ad559019cc8c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d426b3b8-cbe1-47a7-8799-935aca148074",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd1130a0-33ff-4638-86ec-29ac21af5a2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a07131f-ddff-4085-a671-58c875dc9b97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f1b293-2551-4975-9acd-ff9949e2d42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1d1e30-bcba-4856-baf0-ab01048ec821",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cafc6bb-8a2f-41b3-9219-cab885a6ad1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f8ebb9-665c-47d6-9fe2-176d5357a0dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed33796f-80d4-47ff-beca-0f8cf91763da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37e3e2fe-1b57-47b8-89ab-43a5be8b0d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7734bd-952a-420c-8bf1-23c84a06eb1b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9531cb-8830-451a-aa54-4457599a2686",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40c384e6-7c76-41a3-878c-bc2c5e7b4c47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b60885-4ab9-41e4-bd39-d14f47da57a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c3c876-b4ec-4423-b5f3-ba9040faa9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef7821f-a5d8-4b0b-a75f-645385978e80",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c534cf95-59cd-4371-bdb7-c5dd612fd698",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59da4ee8-ad0e-4dd7-bfa9-b94e294477ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f484749-9af9-4af3-950e-df1939ecebe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d01513c8-e181-4707-bd8c-643c95a49574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1052a9a3-bf47-45ef-ac9b-b6ac848b1687",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7cddc0a-2bab-4285-b64c-527aa67e6a71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0575cbd0-96cc-4ae3-83a6-614f64d8004c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d362c4-7bb7-4473-bb91-9a2321b4541b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a4c1e8-0f6a-4fcd-a671-40ab514b4909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69988355-59e5-479a-b37e-8d30db444956",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4599397a-6990-4d7f-afe7-f913478d9021",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb343a16-e578-48a1-977d-f28c7a5f2ad3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "384a7a33-580f-463d-ba5f-3ce039242ea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "543487d5-2598-4e6d-ab23-189e3e7863ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb6aace-e00f-4a34-880e-0ab5a8d0e6eb",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "617a9ed7-e991-4ddf-bdfe-e8b4117b2b51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4106ec56-1d33-47fc-9787-8c76509fcc80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a518e68-fbc5-44c4-a8e3-258c5165287e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d57e794-7810-4b26-bdb2-c5ac86f9a750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8141e5f9-bac8-4612-a0e2-2dfba3231f65",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eaf948f-3eb8-4e5e-afbc-8fddfedec8cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20732512-f751-40d2-92cb-c469503fc40b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "577294f0-d1d6-449c-932e-ff26de8b5596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ac5977e-81fc-4155-bb68-57b364efb7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a971f0ed-d02d-4e10-b57d-3466180a47e5",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51112244-2fbb-4d72-8ac6-7cac10b1ca96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fb5ce1d-f3df-4e4e-8859-32d757054462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ddcefbf-86ff-4b21-8a73-b74e6944cbc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "165cd803-8c63-41ab-919b-e749b8ed8190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d6d047-c779-4022-85ae-9c69c47ff2ea",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466265f1-f998-499e-b19f-9ec785871cde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26dd1650-75d1-4c83-9e4b-d6beb36c9abd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "880d2a71-f6ef-475a-b762-02f61527eca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33da07a3-d32e-4b68-9f16-08fe0e8579c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb33164-79c2-42a9-b587-0802935202ce",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e29d13a-f2fd-4d48-9fcf-5c594b77a386",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "125ffb8c-3d2c-4680-95d9-88a675e9ac19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b78c05-6cfb-4de6-90db-88b6ed4b96d0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12cfc1ba-dd25-4ee8-b080-c673c6a8bbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc540db9-5c65-40d1-b918-6fcc24dc90ce",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794042b5-519a-432f-84c8-095696afef7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "811397a8-ee14-43d9-8434-d7af0dbea0c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de45ca61-a075-40b9-a169-5571253b1d12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d72f810-392d-42bb-87b6-393d5fe62fbe"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9db8d53-d875-465b-9c66-4e70e97d2663",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7936f50-1797-4fb7-8242-520e01571827"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "86b0aa1a-d5a1-4c89-9b3a-03aa7964f1b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f0bb868-308a-4546-8292-b957db492132"
                    }
                  }
                ]
              },
              {
                "id": "d0f61fe3-9b8a-42ed-b316-5c9e6922fdfc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a19b8d1d-9ccb-4749-8626-e2dc8b47654c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626be08d-3211-41a5-a34c-438e23d7a31b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "60b5ceef-4895-4e71-a620-12515650cad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c07d2d0-5e81-45a6-97b5-1765d76ab83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1bbf94a-30c3-4a1d-a3c2-701166eda6c5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba2884f3-ac9a-47be-bbe8-01cee901bf8c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "899d64ff-4e76-4ab8-a0f9-85ec842f42fb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "86dbcca5-f4cf-4ae2-8830-eae39e27d45c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "257cf2b7-8fd6-4aa4-af46-b765cd80a568"
                    }
                  }
                ]
              },
              {
                "id": "85c2948a-414e-48e6-8291-4c324158370e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8f0ccb28-1abd-49be-8c88-54f7814cdef9",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e62567-777e-4b24-820a-00e2f6f183a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c764c4c7-0d62-4c8d-bf4e-dcc86433236c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37cf04e5-70f0-4572-86bf-c6c76c25e2cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f6218fe-fdcf-4f40-8485-4e84072e34ba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "806017d1-f4bf-45fb-a80f-8cde6591f31f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3d5f4af2-8b8c-463c-9efc-3e76fa502a34",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00588633-3d33-45ab-b564-57fd867e4039",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ceb29d69-b1b3-4481-a139-0174e649daac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e809a1c5-5c74-4ef9-ae96-5994b9013109",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d424a08f-cba7-4fb2-ae41-0250b2bde08f"
                    }
                  }
                ]
              },
              {
                "id": "0719e9c4-ac10-414f-9b2b-8ba05644c9cd",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "63ec7c32-d4fa-44ea-817b-46a6cf78eddb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "751a03a9-51f6-41a6-aada-66c54372b94d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05f9f286-413d-41a1-9ec4-0ac9168f4286",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "568128e6-e4c6-44a5-ba71-1fe2da470bc4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f727be45-8247-4414-be5f-c0fdca873a6d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "78c07a09-255c-4b6c-a2bf-2e761f2442fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b26e4d2a-dc83-4e0e-8dde-de6a066b4dee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4d4c6e69-9b79-4549-acb4-de480b2cdbb6"
            }
          }
        ]
      },
      {
        "id": "aabe2c1f-e229-42c0-863b-fa8bc43bfc11",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "55e756d1-53c3-4d40-b810-94317cde5f66",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b0420a0-2f7d-460d-9c3c-9bb9f27662b7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2692a57b-d9ca-4ac4-884f-f92fceb57991",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9f089c-1477-4192-81a9-5f6efb6e3a4e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c04382d9-2a84-4c3e-bc3e-e21e180d52ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14cad562-9708-4d05-aa6a-5164c72b21df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88ba07f4-1e18-4d0e-bb7d-696273782e0c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "125c0b43-ffd1-4156-84d9-0f6c202195d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfdfd8a3-b8ab-41b4-abeb-dd0aed789e2a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ddae34c5-2c9e-4730-8672-e8111d2d01d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d8b27f7-a588-4180-bb57-26d898aa78d9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b3f6cbab-cddf-4cc9-aa0b-8316ee647662",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "24471fc7-94d8-4b86-a0ef-fff610971361"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4dbde48c-4ac5-4374-963e-6fd59cea3510",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f9c66959-6082-4548-aaa6-9ee918a24d4d"
            }
          }
        ]
      },
      {
        "id": "ab20f6ec-b1ce-4d3e-a276-9f3813c2e6d9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "22fb9a7b-4c25-47f7-854e-c71fa14edac4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ca15753b-42c6-4f4a-a28f-89a78dce0de9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "33c44c0f-7236-4600-83c5-ef261188e7fa",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9b9910-5e52-4dd7-9aaa-697be23af652",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0c9c134-1e80-40c5-8a7c-fca4964c0d85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc4e95a-82dc-48c9-999a-52d3af6f69d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60e0a3c5-5b3c-44a1-b956-e7e70d1f358f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e21c805f-d368-43af-8c7f-61eae84b5203",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1da3deee-7527-49ff-ae0c-03568ac65b59"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a554faad-17c5-40f7-962d-638b9a11f5be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52a3eb1b-5b5f-40b7-8b78-ae499f0965d7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9b2b2a73-2b27-4999-b5b3-679048d42492",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cd5adb6c-f5cf-40d4-9b2d-b515a6ff3b82"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d3f3c79e-f250-445f-ba80-64fee3784cc6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f6136454-6557-441e-9304-7f3a7a871dce"
            }
          }
        ]
      },
      {
        "id": "cc91dd0c-8ec2-4482-9f5b-8a612dce659f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "786a3ed1-9ef8-41a4-94a6-4410168e6c90",
            "name": "Negative Testing",
            "item": [
              {
                "id": "589889ae-5d5f-442f-8f85-b276a3469880",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba29cf1b-6591-48d4-b398-5e23c195c1e8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b695e9-01d3-462f-81a9-d19ed537a2b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71ebaf7c-267c-43f0-a90d-173c8826d33e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23eba008-231a-4443-911a-33af06a048cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c940f40-f283-4175-8d22-a6b71789d885"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "261d3518-05f7-477a-a550-68bd3a0a4ba1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04d98d7a-37d0-44cc-9dc6-ba6df4128eee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c14cdfc0-b4e4-44d0-8b04-eb43597f39a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8da5c623-c6aa-4816-b0db-b7f8a6b2a0b3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ddc0055-356d-402c-a92e-c608c9b59c0a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "492da444-9503-4634-a493-850198e64a83"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d025cec4-50b9-4e71-8434-b66df13eaa2e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "078010ed-27d3-4fa1-99c0-877dfaba4364"
            }
          }
        ]
      },
      {
        "id": "22cc5a14-f56f-4017-b347-b327684878c1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "311b794a-e125-400b-b84f-3a9a48e8312a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "815fcf34-d63c-4dad-afb0-1aa56cdfb10a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "10efdcf9-528a-4c27-b3ad-e8ed14ce362b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7e5eddaa-9f6a-4e60-8ca4-6a630729345b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "15aa3791-1242-4ec3-92b7-9103454545cf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 61.62456140350876,
      "responseMin": 9,
      "responseMax": 613,
      "responseSd": 69.12842937326633,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1699662810182,
      "completed": 1699662837224
    },
    "executions": [
      {
        "id": "f03f2317-1397-479d-9eed-72b83d8d6d04",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8a518058-fa00-4c92-b44e-6278c0ba03a9",
          "httpRequestId": "76814d80-f177-4632-97e9-e5c91c23b3d5"
        },
        "item": {
          "id": "f03f2317-1397-479d-9eed-72b83d8d6d04",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "60ed8173-0e60-49b5-b375-b3f2cc792a3c",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 0
        }
      },
      {
        "id": "e238b2e9-72b1-4cbc-8b67-0af5e6d3185b",
        "cursor": {
          "ref": "f4d2eceb-3913-4321-991f-e8e017f90aa5",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8f610421-0d68-4bf9-91d1-6919016a1265"
        },
        "item": {
          "id": "e238b2e9-72b1-4cbc-8b67-0af5e6d3185b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "e7a7eb3b-a701-45c1-91f4-cd41b166761b",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "e19e8a8c-ef48-477a-81dd-b539fb3629df",
        "cursor": {
          "ref": "5ddc0531-db81-42ed-8631-91547103587f",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b0fd7db5-cda8-4dd1-871f-381bf73ae252"
        },
        "item": {
          "id": "e19e8a8c-ef48-477a-81dd-b539fb3629df",
          "name": "did_json"
        },
        "response": {
          "id": "43d4cbbc-4823-4919-82e4-22952e15b3f1",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6425bf-f50d-4f3e-a894-46de009ab651",
        "cursor": {
          "ref": "e96d110e-35d4-42e1-920f-a91fd2b439f3",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "15535c13-cd9c-41fe-9c21-46e4b8a19964"
        },
        "item": {
          "id": "cb6425bf-f50d-4f3e-a894-46de009ab651",
          "name": "did:invalid"
        },
        "response": {
          "id": "7a7f6918-68ff-4e89-b87e-def034e0ef00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6425bf-f50d-4f3e-a894-46de009ab651",
        "cursor": {
          "ref": "e96d110e-35d4-42e1-920f-a91fd2b439f3",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "15535c13-cd9c-41fe-9c21-46e4b8a19964"
        },
        "item": {
          "id": "cb6425bf-f50d-4f3e-a894-46de009ab651",
          "name": "did:invalid"
        },
        "response": {
          "id": "7a7f6918-68ff-4e89-b87e-def034e0ef00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca21e359-9668-41a5-9841-2c33b777b43b",
        "cursor": {
          "ref": "4f5c2149-00e3-4048-b7ef-f24b0bf3d43c",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cb91fd33-8ec2-4278-854b-d6d7f6909164"
        },
        "item": {
          "id": "ca21e359-9668-41a5-9841-2c33b777b43b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ea5cf2a9-cecc-477f-bc09-362d7acdae75",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "201a9a05-2b06-4588-8af4-4886eb0105e5",
        "cursor": {
          "ref": "7ea1ace3-4636-4a3a-aa78-1ba56d1ceb16",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "810a921a-d7ab-4dc7-94ef-7eeac6d29906"
        },
        "item": {
          "id": "201a9a05-2b06-4588-8af4-4886eb0105e5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9388120f-45f9-4ab6-9b0c-c42788242f25",
          "status": "Not Found",
          "code": 404,
          "responseTime": 45,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1445d0cb-4778-48a0-88a8-33c9e7e752cd",
        "cursor": {
          "ref": "94ef8010-eb93-4c5e-84ac-460519c71dca",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5d2b1dd2-2051-454a-83ea-cefaacfb92c2"
        },
        "item": {
          "id": "1445d0cb-4778-48a0-88a8-33c9e7e752cd",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5f3aa4ec-8654-48a9-ae55-ee21a2dc64d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1e9059-cd7d-45ab-bd01-8c9bf445ae9f",
        "cursor": {
          "ref": "e7a022d2-0a4e-4a1a-b992-43b324df71d1",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cb773448-423c-4b68-9d22-065075db5ec7"
        },
        "item": {
          "id": "df1e9059-cd7d-45ab-bd01-8c9bf445ae9f",
          "name": "identifiers"
        },
        "response": {
          "id": "bce5b024-197f-4ba0-9f57-2eb2d715aa51",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c8d48a5-c67a-4064-9927-5995c93e749b",
        "cursor": {
          "ref": "a3506583-8f2f-4adb-a984-0ce335b83b4b",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "acfce8e4-7b4c-4d87-a576-cef06284eb4c"
        },
        "item": {
          "id": "7c8d48a5-c67a-4064-9927-5995c93e749b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "92d7a95d-4d50-4876-963d-769c3d8b645c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28fcc8f9-7883-401a-8d5c-5b51538ebe9e",
        "cursor": {
          "ref": "925a3faa-80d9-4241-94f0-36a5ea090bd5",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "807d3d65-af74-465d-8c76-955e87cf75db"
        },
        "item": {
          "id": "28fcc8f9-7883-401a-8d5c-5b51538ebe9e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ecaccbc3-cbd9-47dc-9732-31418f27d85c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5157b2f6-5d61-4ee8-b794-b156385a7df6",
        "cursor": {
          "ref": "dfc2fee2-3fe3-442d-adac-b115736177c7",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "011e1a96-4b27-4493-8132-270a7a779b19"
        },
        "item": {
          "id": "5157b2f6-5d61-4ee8-b794-b156385a7df6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1ced6fb5-54d7-4b28-842f-77924294d5bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b38ff23-61f6-41aa-af1b-e34fa20b6d8c",
        "cursor": {
          "ref": "e1989c01-56dc-4ea9-9d72-fb129e1ed267",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6bea726b-b3b3-40e9-b614-df0e12bcb23e"
        },
        "item": {
          "id": "5b38ff23-61f6-41aa-af1b-e34fa20b6d8c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8d4b6981-5ba7-4e88-979d-1fc4b98b39b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e496b9-d847-412f-9c16-28e00bfabe91",
        "cursor": {
          "ref": "89e53c15-7235-4a20-ab25-f51653d71dad",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d31872af-72dd-4f7a-9243-9d89b819ab28"
        },
        "item": {
          "id": "53e496b9-d847-412f-9c16-28e00bfabe91",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "38a50c67-59ed-43fd-b30f-8144ccf58ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc40e57a-e8c1-4648-a397-d072f9d4712f",
        "cursor": {
          "ref": "7bc6e5d5-2147-4a70-aaae-0b2d02e71a81",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "341f9140-aaa8-4de1-9b6c-1e9fe41ccdf4"
        },
        "item": {
          "id": "fc40e57a-e8c1-4648-a397-d072f9d4712f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "445212a3-e56e-4b3e-8988-0e64fbdd57b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be027cd6-383c-4f23-809e-39a96d0ab910",
        "cursor": {
          "ref": "8acd14cd-127e-4c5f-b51f-ab8f03e4846a",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2fbb1cb8-6710-4dfd-9801-b6c1d3d6a7f0"
        },
        "item": {
          "id": "be027cd6-383c-4f23-809e-39a96d0ab910",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5ebc6681-1c52-4a36-9e20-76177596d563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f9f01b-347e-4bf7-86c0-fdaf4a9dc6de",
        "cursor": {
          "ref": "14b3b8c8-e3c4-413d-bcd5-38300b519ea9",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "85576dd9-319e-493e-a772-03cd442b676b"
        },
        "item": {
          "id": "47f9f01b-347e-4bf7-86c0-fdaf4a9dc6de",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bfee43be-4fac-45be-9fe1-78727b89b788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0553cb6d-a963-49a7-a5df-fa2164ea08a9",
        "cursor": {
          "ref": "d323eb7a-4dbc-4d60-9c89-11170b685626",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0d5a41e8-db7b-4e05-8610-4cf0f274511a"
        },
        "item": {
          "id": "0553cb6d-a963-49a7-a5df-fa2164ea08a9",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "92088f81-dfbe-40a2-9797-a579a97f9b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708bf553-5c80-4a49-92fe-d03cbcbaa808",
        "cursor": {
          "ref": "e6ef7fbe-0157-4ffb-9782-e4788daf0d27",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a84b25de-1605-4382-a3f9-970bd2e24751"
        },
        "item": {
          "id": "708bf553-5c80-4a49-92fe-d03cbcbaa808",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "cbc4715e-546d-42db-aa51-79fe61a9a2c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57d9f79-0341-4477-87f9-301e1226c64c",
        "cursor": {
          "ref": "df0da380-a181-48c4-a454-687f803eed68",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9dbf8ff7-6558-427a-8f7f-24412d36718e"
        },
        "item": {
          "id": "a57d9f79-0341-4477-87f9-301e1226c64c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1fc88fca-c23d-40a2-8ff7-5bfe973e9948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdca5cca-0c74-4696-8c0d-8653678b698f",
        "cursor": {
          "ref": "28d8fa87-2931-4159-93c3-d08980d228b3",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "499e2672-01f0-4639-913b-77de59e27b1b"
        },
        "item": {
          "id": "cdca5cca-0c74-4696-8c0d-8653678b698f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4a09b514-5274-494d-bff2-9d3fea2fb32b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79282791-f642-47db-8c72-ae632dfe8fe6",
        "cursor": {
          "ref": "a7be6c45-1492-46b3-9323-8bfcf5aa7414",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "21687d55-5266-44ab-911e-f5d82ffa2427"
        },
        "item": {
          "id": "79282791-f642-47db-8c72-ae632dfe8fe6",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "63188b99-ef8b-4aca-b987-5937cf660119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c673d65e-871a-456c-8fab-1a8df08d7816",
        "cursor": {
          "ref": "88dd5a30-5b13-4c1d-9a37-01792e5e1ec7",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8f962ac7-59e9-428f-827c-5e35594609a9"
        },
        "item": {
          "id": "c673d65e-871a-456c-8fab-1a8df08d7816",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b31b291a-8466-4cea-9740-50ab8445ce5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0461f982-4fd1-4c17-b6c3-2273b55e5e81",
        "cursor": {
          "ref": "02aa5788-d084-4333-b81b-3ee3ebac7036",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "51fed41d-f29f-4a04-883b-1c86797ac36b"
        },
        "item": {
          "id": "0461f982-4fd1-4c17-b6c3-2273b55e5e81",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1a426aed-de68-44b5-9cc0-152e5a119eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d8d5a68-77ba-4ac8-a87f-60984d7e0b44",
        "cursor": {
          "ref": "6fe6ccd9-d67b-4759-b510-4bb2bf76c66e",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "09013d2a-2e42-4f2e-b412-8249b8ae5846"
        },
        "item": {
          "id": "6d8d5a68-77ba-4ac8-a87f-60984d7e0b44",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4b5672be-92c7-460a-97a9-cbf79f2baab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71f23365-7071-4878-8433-8f7381ba145b",
        "cursor": {
          "ref": "4abfe2dc-b151-4f6e-a364-81cfc4b7978c",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d18df7e3-71e5-42ca-baea-265d1f9266b5"
        },
        "item": {
          "id": "71f23365-7071-4878-8433-8f7381ba145b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5738fff7-ec12-4ac9-86c8-692f00d2f550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7607ae6d-86eb-4931-b07f-b7d74ac27221",
        "cursor": {
          "ref": "349f5361-fdd4-4d5d-a1dd-71f9062b3bbf",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "453fc528-f32d-4279-b06b-819acd9063e5"
        },
        "item": {
          "id": "7607ae6d-86eb-4931-b07f-b7d74ac27221",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7b2dc75e-1aca-4a2f-b135-f27d3644429f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4227a6a5-f41f-4114-8851-55ff164108ce",
        "cursor": {
          "ref": "9d5f9d73-6c84-4be3-847f-f26d5430029f",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "06fecbff-ce11-4c18-9c0b-42d7d267f841"
        },
        "item": {
          "id": "4227a6a5-f41f-4114-8851-55ff164108ce",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4fea020a-61f1-49a3-951d-6bf0ff911727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0838869-31ac-4630-bc5e-68ed79141cce",
        "cursor": {
          "ref": "d191a46d-d434-4327-9c54-9c03989f8a8e",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ba1bd1ac-7342-44f2-b9df-09c70f1c9e1e"
        },
        "item": {
          "id": "e0838869-31ac-4630-bc5e-68ed79141cce",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "687585d8-33af-4c1d-8519-17796438943a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a924514-fe55-4932-b3d8-2c8a4f860774",
        "cursor": {
          "ref": "c2b4db19-e002-4ff7-b82f-a4d2c1942f60",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "bb49b6e7-3111-4b67-ac95-2c3be1f8d501"
        },
        "item": {
          "id": "5a924514-fe55-4932-b3d8-2c8a4f860774",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9dfe47fc-2a9c-4032-bb2e-2adec7c393b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72bda729-6754-44fa-aa48-9323d2cf40f4",
        "cursor": {
          "ref": "e554db87-cbd2-4ba3-9040-a8189e0dbea6",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5fbffc99-045f-49d3-9316-a90a5eaea69d"
        },
        "item": {
          "id": "72bda729-6754-44fa-aa48-9323d2cf40f4",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9eee0367-6096-49ab-b1a1-2b00ef2e776d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693262f5-06de-4ce4-b213-66acfaa27a5a",
        "cursor": {
          "ref": "387ecb26-1d1b-4062-bd28-807391d74287",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1b0a35d2-509f-43ed-9d78-1c5a0275f514"
        },
        "item": {
          "id": "693262f5-06de-4ce4-b213-66acfaa27a5a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "29e3846e-be92-46b8-ba1b-62cc47e6c6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0dd881-1e75-4702-bdf4-4b6d8175e88e",
        "cursor": {
          "ref": "b56599b1-ecfb-445f-a30f-85b0eeda753d",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c923564c-f4e0-43f3-b3c5-8dc094989c0b"
        },
        "item": {
          "id": "cc0dd881-1e75-4702-bdf4-4b6d8175e88e",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "fc2ee33c-a5a7-4847-9560-86d660c7d3a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4d02b8-9b0e-415d-b790-c8b59479c76b",
        "cursor": {
          "ref": "f8741c59-0976-4265-aa2a-9f0de3fa8dfa",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5c65abe7-997d-4efc-b04f-5e7cbb099e21"
        },
        "item": {
          "id": "af4d02b8-9b0e-415d-b790-c8b59479c76b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0f82db01-6457-4715-97fa-f5529292fd60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd41fd6-9124-4c5e-8cd8-0b721c9950c6",
        "cursor": {
          "ref": "4430cd0b-5d26-4e63-85e8-3247d16bbb6d",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2b09a691-62ec-4976-a01f-ba80b1bd9471"
        },
        "item": {
          "id": "ddd41fd6-9124-4c5e-8cd8-0b721c9950c6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0517618a-fcad-49af-a5bf-d4a550a89e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2130077e-6885-4113-bb2b-63e110a4d5a7",
        "cursor": {
          "ref": "46c602cc-c2ae-4b9d-94c2-d1d0482f4c6a",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "96616546-c251-42d0-93a2-dda0e3494c97"
        },
        "item": {
          "id": "2130077e-6885-4113-bb2b-63e110a4d5a7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4beedab5-a990-40f5-a813-cf6ccee0140a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baed1012-2ec7-41ca-9ce7-7635033d31a4",
        "cursor": {
          "ref": "b6130be5-ee50-4583-9d1f-895f0ba779b1",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "38209554-f7b8-4854-95e6-40762998ffbe"
        },
        "item": {
          "id": "baed1012-2ec7-41ca-9ce7-7635033d31a4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2968e0bb-32cb-410d-95e9-02f48d42fca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba080547-a2f6-47ab-a5c1-9613d6201b5d",
        "cursor": {
          "ref": "9f608fad-9b83-4d37-b081-ae13e931444a",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b1a8bc5d-9f43-4e31-a103-003a15c7d732"
        },
        "item": {
          "id": "ba080547-a2f6-47ab-a5c1-9613d6201b5d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7e206657-8cb0-4867-9077-9dc194719861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d062537-0a63-4c73-9dfc-8136dade46ba",
        "cursor": {
          "ref": "029de283-8d30-48ec-a630-2613a6670c2b",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "52b5af83-c4c5-40b1-8475-4aa8d8c755f4"
        },
        "item": {
          "id": "7d062537-0a63-4c73-9dfc-8136dade46ba",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f0fdc574-7dea-4dc5-98de-513a3f805e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a1e5931-0ee3-42e1-aff3-8cc6dd6de5dc",
        "cursor": {
          "ref": "8b994f71-6312-4cf1-a6fe-585279e47e3a",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d6f0850f-29bb-490f-a8c2-02c1504231dc"
        },
        "item": {
          "id": "4a1e5931-0ee3-42e1-aff3-8cc6dd6de5dc",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e02e4fb9-858d-42f4-ad76-8579fb12862c",
          "status": "Created",
          "code": 201,
          "responseTime": 517,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "605db090-fcc6-4179-b3a7-43f2e2a0f484",
        "cursor": {
          "ref": "2c92f2b2-ed7a-43b6-b14d-bf8cf5943d39",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e157caef-4dcf-4494-b9bb-3d905eef3840"
        },
        "item": {
          "id": "605db090-fcc6-4179-b3a7-43f2e2a0f484",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "236bcb94-d931-4747-800c-bdb030d4978b",
          "status": "Created",
          "code": 201,
          "responseTime": 218,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "939c83a0-922a-45df-89b5-56316b8a0804",
        "cursor": {
          "ref": "ed151340-c686-4163-b05b-8abd896a4993",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "31a7cf38-a829-449c-a7a3-a5b84bc094ba"
        },
        "item": {
          "id": "939c83a0-922a-45df-89b5-56316b8a0804",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c19c3ff7-92e0-474c-91ba-1c6729074146",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "990f53c5-e183-42df-8998-62047d59900e",
        "cursor": {
          "ref": "34b352a7-af70-4305-9565-647c5e0dc914",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ebedf86c-3bba-43a6-9515-a2b7048b7bce"
        },
        "item": {
          "id": "990f53c5-e183-42df-8998-62047d59900e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9c4dbb90-e668-419f-9faf-7ec98ac47d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b11911-087e-44fe-a4e6-383e9bc1ac51",
        "cursor": {
          "ref": "d2073667-db14-431d-9b3f-481d9c7d3efa",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8270cdee-a6db-414c-86db-1fd5dedcd4a9"
        },
        "item": {
          "id": "47b11911-087e-44fe-a4e6-383e9bc1ac51",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "05b9af7f-0fb1-4a5f-a955-647bf28246eb",
          "status": "Created",
          "code": 201,
          "responseTime": 206,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "add7536e-3a28-47b9-953a-e062d8480796",
        "cursor": {
          "ref": "f6aafd06-a824-44d3-982e-7ad78cab4d31",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d1ac9478-33f4-4f0b-8a27-c709e6dcd03b"
        },
        "item": {
          "id": "add7536e-3a28-47b9-953a-e062d8480796",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a45c0b09-3324-47c4-8e8e-fcebc8462d0a",
          "status": "Created",
          "code": 201,
          "responseTime": 215,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "bea15653-e479-475d-9732-19d9bd3675a2",
        "cursor": {
          "ref": "12f4f549-a6ce-4af9-b816-6c26a2d4363c",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e2b1f9be-ebab-4ab0-bfb4-f5097ab5a65a"
        },
        "item": {
          "id": "bea15653-e479-475d-9732-19d9bd3675a2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "375ca3f3-105e-4b49-95cd-f64b735e51ce",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8e691620-ba05-4679-839a-baffacc58ffa",
        "cursor": {
          "ref": "d488295a-fd2a-4efb-9da6-55fe38c95ba8",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5b845769-1293-4d81-afd1-adcaea1cf7aa"
        },
        "item": {
          "id": "8e691620-ba05-4679-839a-baffacc58ffa",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ebc4e6d0-864b-4f72-8b56-c8b3eef9bcf6",
          "status": "Created",
          "code": 201,
          "responseTime": 200,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "04a49373-72e2-46d0-94d3-e0a79de594a5",
        "cursor": {
          "ref": "fe670dbf-4d69-4ae8-b192-77e492573e9f",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4a05894a-a238-47cf-9c83-ef67804faf0e"
        },
        "item": {
          "id": "04a49373-72e2-46d0-94d3-e0a79de594a5",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d7e0ab93-934f-4b33-a9cd-ff4104e999a2",
          "status": "Created",
          "code": 201,
          "responseTime": 218,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "286b8160-ff3e-4b5d-962f-37dc447c53da",
        "cursor": {
          "ref": "02c0dc83-50b9-4719-95ea-98c4f8292847",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "7e0287ca-8486-4334-9dff-c99c83fe08fd"
        },
        "item": {
          "id": "286b8160-ff3e-4b5d-962f-37dc447c53da",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6477a9cf-2546-4fa8-b42b-bb25a02d6ece",
          "status": "Created",
          "code": 201,
          "responseTime": 202,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "52874792-c794-4660-81bc-2f28739dd416",
        "cursor": {
          "ref": "2b29ebdb-7a64-48a4-8860-e8bf84cbcb68",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "aa091a18-7c4c-445c-8a53-f3930ddfcc78"
        },
        "item": {
          "id": "52874792-c794-4660-81bc-2f28739dd416",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "13cbbbdb-52e5-4ccf-be98-14188b249a53",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "35132b5a-3ca6-476d-be59-c821553df3d0",
        "cursor": {
          "ref": "33b7db14-7cbd-41d4-a55b-660169101c03",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9fb7214b-3085-4593-a14a-51a482372fc4"
        },
        "item": {
          "id": "35132b5a-3ca6-476d-be59-c821553df3d0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6d549887-1d19-446e-9d4e-90a5e41b894e",
          "status": "Created",
          "code": 201,
          "responseTime": 213,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "b6c744e4-104f-4c54-8af7-c4c2a8fc3d36",
        "cursor": {
          "ref": "38ed72d4-b0ee-4b88-b7c4-033e1d6cd17a",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "eadae9f3-ad72-4f56-a0ac-ab8d08d44a46"
        },
        "item": {
          "id": "b6c744e4-104f-4c54-8af7-c4c2a8fc3d36",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7d1ee078-75c0-4c09-bd5a-469db452256a",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d6301eab-be07-405d-bbf4-4713bbd41a3d",
        "cursor": {
          "ref": "f6f8faa2-be7b-4169-98ef-b8a2c2cade8f",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f2b81526-5119-4b03-af0d-2d05839104a1"
        },
        "item": {
          "id": "d6301eab-be07-405d-bbf4-4713bbd41a3d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0a0edd77-3277-49ea-9cee-5ce53438dc05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7497f77-8f76-4720-a2e3-aad2422f60a6",
        "cursor": {
          "ref": "77e68a6f-23c8-40e1-886e-8c6080e06428",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0cfb5f27-006f-4438-990f-f2c8f5eb5f15"
        },
        "item": {
          "id": "a7497f77-8f76-4720-a2e3-aad2422f60a6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "02bf632b-d7e9-44f9-8619-da6cfba0b300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9662e5a-f4b1-4511-b252-c392df5a82c7",
        "cursor": {
          "ref": "f87ec533-f203-4e55-9613-8e4b763bee08",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4fe9ee28-c862-4a70-97d1-64268b090708"
        },
        "item": {
          "id": "c9662e5a-f4b1-4511-b252-c392df5a82c7",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7ebfd7d2-d5d1-4823-82a9-098b04affabc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "458f0706-0686-49cf-82ca-941f2f236d8b",
        "cursor": {
          "ref": "9abf7b2c-f7ad-43ed-bce4-48eebed056f3",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "01343355-737a-456c-8e16-6b9de2adeed5"
        },
        "item": {
          "id": "458f0706-0686-49cf-82ca-941f2f236d8b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d925ac4c-47eb-4b27-8a66-3d38775a701c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54532ef5-348c-43ba-93cb-ada3910fd4f8",
        "cursor": {
          "ref": "06469f45-a24e-4dbe-a2dd-74cfe1b53f3a",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "0b75091f-a536-40d2-bc23-ed0a77c3dffc"
        },
        "item": {
          "id": "54532ef5-348c-43ba-93cb-ada3910fd4f8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c271f892-aaf0-48c8-80c9-bb17f920a33b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3acc742-d528-47f2-a6dc-9a61f3406400",
        "cursor": {
          "ref": "5f1b08de-eb70-44e4-8559-7778516548a3",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "84f5f4ac-6e89-448b-a094-fbf31e02a8ba"
        },
        "item": {
          "id": "b3acc742-d528-47f2-a6dc-9a61f3406400",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "cf8bad07-2089-423c-ae2a-a46b8ef8b3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc8fbde-56e9-42ab-9191-fb4be73b6c2b",
        "cursor": {
          "ref": "72ca5846-5f13-45d2-b96b-35352e2d3c27",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "98c4383a-6d08-412d-813b-6df7e5a57e11"
        },
        "item": {
          "id": "cfc8fbde-56e9-42ab-9191-fb4be73b6c2b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e2b09070-4123-45fc-8883-4a1f62d5d660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bafc3ced-297b-40eb-a8fe-31a46c18fcdf",
        "cursor": {
          "ref": "35319419-ca79-4c54-9b45-ad34c9b66efe",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "acbdd273-4d15-451a-b2ef-0c7294bf3e36"
        },
        "item": {
          "id": "bafc3ced-297b-40eb-a8fe-31a46c18fcdf",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "510647ab-b14c-4aba-acde-4b3dced34cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f471de-eda8-48c8-9b03-986480243283",
        "cursor": {
          "ref": "23498137-4460-4d9f-8318-4f4f7cd27ff2",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8ca80ede-e162-4c47-997d-73a14169a28f"
        },
        "item": {
          "id": "a3f471de-eda8-48c8-9b03-986480243283",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1614c435-4fd6-4ebd-a42e-8bb1b00f406d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d12465b1-9161-4ae4-b312-5bee243262bc",
        "cursor": {
          "ref": "81d9379a-9258-4b7d-9c24-99a56553de5e",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e4ed8e2f-8738-4d86-a052-f30c6f57b329"
        },
        "item": {
          "id": "d12465b1-9161-4ae4-b312-5bee243262bc",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f954c967-b93d-4edf-b143-0f2361c3784d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef92168e-97a4-4127-bf46-aabad3042176",
        "cursor": {
          "ref": "8efb7d9c-a152-40e0-aecb-428d670534da",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "e41da368-fd64-4d40-bc06-0b50377c24d9"
        },
        "item": {
          "id": "ef92168e-97a4-4127-bf46-aabad3042176",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b4516f74-87fd-40c8-adfd-5e2c313570b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836518f1-2a6f-4879-a061-5e26c651dbd9",
        "cursor": {
          "ref": "3602b445-1dcb-4b04-9cd0-9ba118e48013",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e43b37cb-7a64-4575-a8ee-2193fb422dc8"
        },
        "item": {
          "id": "836518f1-2a6f-4879-a061-5e26c651dbd9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "746fd51b-f222-4b6e-9236-5a52c20e4daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd64fa5e-9cab-4b2e-b623-e7a5f7741d01",
        "cursor": {
          "ref": "23c244f6-303f-45f9-8b6c-c0e8bab49221",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7d447629-72b0-4f6c-9bf8-195d47812bea"
        },
        "item": {
          "id": "fd64fa5e-9cab-4b2e-b623-e7a5f7741d01",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7d47b236-f83d-4e6e-9c45-88924fbc2524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217f8d22-98d6-4b3c-b2ad-0f8a99a53f71",
        "cursor": {
          "ref": "d45d2c28-86af-42a2-a6f3-ad97614712c3",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "07f82348-0c40-42f2-bb5a-f79a0809109d"
        },
        "item": {
          "id": "217f8d22-98d6-4b3c-b2ad-0f8a99a53f71",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "af84ac00-18c9-412e-8a87-653e16b5e0e1",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "244d81ae-c95e-44d0-b43b-e104f6c2b216",
        "cursor": {
          "ref": "08e08552-7dd6-49ef-9544-f927957a7dbe",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a663a5d8-0ceb-4578-8f01-581993925b51"
        },
        "item": {
          "id": "244d81ae-c95e-44d0-b43b-e104f6c2b216",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "42e6ee6d-d075-44e0-bba8-d8759a3e4605",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "9085f732-7cb0-4756-a430-866aa00b5a96",
        "cursor": {
          "ref": "927c358f-e98e-476d-8ad5-02f83d33ab73",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "47397287-40ac-4df2-a652-b5e01021996f"
        },
        "item": {
          "id": "9085f732-7cb0-4756-a430-866aa00b5a96",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d0676b1f-427c-4b5e-b312-4eb22005d2c0",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "94c22d93-af2d-4fc6-8914-0a9b96cdfef2",
        "cursor": {
          "ref": "cea4fa21-8486-4c90-a606-93c5ecdcf433",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "09bb20b0-ffb3-4cba-a623-887968433c76"
        },
        "item": {
          "id": "94c22d93-af2d-4fc6-8914-0a9b96cdfef2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "12d8d492-7119-4d4f-8672-1eb02abfb9e6",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "cf8897a3-6092-4dd2-83f0-295843c9f957",
        "cursor": {
          "ref": "7bac597c-2c29-4000-bf4f-91508fef73b1",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "78c67efa-3901-4fac-83f5-f84a5442b432"
        },
        "item": {
          "id": "cf8897a3-6092-4dd2-83f0-295843c9f957",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "53633448-7781-4952-8f36-a1cfad502241",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b71b4b93-c99d-4cac-98b1-3798732e2476",
        "cursor": {
          "ref": "34af56f6-d91d-4a84-beb6-812e66519327",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "99e05e10-ead6-4fe8-928b-999c305a7714"
        },
        "item": {
          "id": "b71b4b93-c99d-4cac-98b1-3798732e2476",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "046a805a-1c95-4501-9d29-657739da2853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bf03ec-8282-4350-a288-61c59eb819eb",
        "cursor": {
          "ref": "1b2a10da-67f7-4dd6-af6b-e20d94ba3c38",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f2a59e96-9ad0-4e6f-a9a5-7ef4ce06794a"
        },
        "item": {
          "id": "59bf03ec-8282-4350-a288-61c59eb819eb",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "45dbec3d-60e5-47eb-b7dd-e21a78786d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a60507-52ed-4383-a8a2-4445417cb7f9",
        "cursor": {
          "ref": "669a22a1-764b-458e-89b2-9efab73a81b4",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9167fd5c-fd10-4c3d-a91d-7503dc0489ef"
        },
        "item": {
          "id": "42a60507-52ed-4383-a8a2-4445417cb7f9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "bd362c30-87a1-4ae4-a339-467c77ae2618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed4a6d0d-fa2f-4e87-9c71-7448b657e412",
        "cursor": {
          "ref": "3eea2b29-efe7-46c4-8b27-01b109afe2a8",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "825328f7-565f-4394-9a8a-144b14b1e80d"
        },
        "item": {
          "id": "ed4a6d0d-fa2f-4e87-9c71-7448b657e412",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1267341a-33f5-45ef-9d64-6acc65e318fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c6eb32-b870-4116-b36e-4bfb5694b68d",
        "cursor": {
          "ref": "1115b9e3-39d3-499e-b862-aba960e3e871",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "339daeaf-29f9-4cce-bac2-ac249d292742"
        },
        "item": {
          "id": "88c6eb32-b870-4116-b36e-4bfb5694b68d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a41ac009-a6cf-44d8-abf7-354b4fca905b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85846157-e293-4411-8832-26f8f34adeda",
        "cursor": {
          "ref": "1c88e14e-39f7-45e4-bc26-72a29889babd",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "81ebef47-6478-481e-9548-fbef448f0816"
        },
        "item": {
          "id": "85846157-e293-4411-8832-26f8f34adeda",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d9bf40ea-c045-41a9-900f-f4d9fdf8f484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb378bd0-e203-4fac-a625-298c9af93e48",
        "cursor": {
          "ref": "b2f203f7-f027-418d-a08c-f621892b436f",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ca58933a-572c-45c1-b2ad-411a9968df61"
        },
        "item": {
          "id": "eb378bd0-e203-4fac-a625-298c9af93e48",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "611b9492-2c92-4201-9764-426a14e6d92d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "defd8849-a6a8-467d-a418-ea381e12c5e2",
        "cursor": {
          "ref": "1291dac6-665f-404f-b4fb-a50f86bfd3d7",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2f7aee48-11a5-4605-9a87-dc2e62631a91"
        },
        "item": {
          "id": "defd8849-a6a8-467d-a418-ea381e12c5e2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9bffa784-09e0-4391-8feb-91db7809552f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e37926-6efa-4ee7-b6c9-7cfaa1cd99f6",
        "cursor": {
          "ref": "6001d356-8f7e-4276-8e18-b6c7f01749ec",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "9371b9d0-02a7-43f7-929e-4995f4bdd0ad"
        },
        "item": {
          "id": "60e37926-6efa-4ee7-b6c9-7cfaa1cd99f6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a13d44d6-61ff-4ade-9233-6128f6e2350a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a7cca3-9770-4fd9-aa0d-fd46cfd028de",
        "cursor": {
          "ref": "219675fb-2cbc-4454-bfdc-a48e4aec98a8",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "aaacb9a0-e07a-45e7-8493-450a434ba99b"
        },
        "item": {
          "id": "e5a7cca3-9770-4fd9-aa0d-fd46cfd028de",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "da1a8d68-0316-4b1b-98f8-22b0d72cb536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6881522c-7001-41be-95df-81ab5b88ab05",
        "cursor": {
          "ref": "1788aa02-4f0a-4787-89c7-152fe37e193c",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "95674f79-7fa4-4ba4-b543-10f294d17a66"
        },
        "item": {
          "id": "6881522c-7001-41be-95df-81ab5b88ab05",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "af7fd0cb-3c09-49c9-8473-f400e6af58b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1f7d96-d2e5-41fd-9cce-721206b6bef9",
        "cursor": {
          "ref": "2d1a62ac-9432-4fcc-8981-972c30b3a2cb",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "25817293-0e32-43d7-af43-6f909ca414cc"
        },
        "item": {
          "id": "9f1f7d96-d2e5-41fd-9cce-721206b6bef9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "bf2157d0-c767-43ee-b6b9-6f1af7c15377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d892c4-b083-4841-9ba1-f2c0f0485e8e",
        "cursor": {
          "ref": "6374ff95-c5d2-4109-b5f3-4a65db51c941",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f897d407-3ba2-4992-8971-64d96292df37"
        },
        "item": {
          "id": "90d892c4-b083-4841-9ba1-f2c0f0485e8e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "61d99125-0140-47b9-a878-016df221733e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10aa235-2bdb-465e-afb9-73c5c436a262",
        "cursor": {
          "ref": "ab6686e0-96bd-4f0c-8a17-8a3695999344",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "3117887c-8618-48cc-9921-fea4ce6b943b"
        },
        "item": {
          "id": "b10aa235-2bdb-465e-afb9-73c5c436a262",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "81b5bc39-9f8c-4bc5-b598-e20584d26382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e761717a-2620-4629-b1f6-da6e1a4362bf",
        "cursor": {
          "ref": "c74fe8c5-4a19-42d0-a7f9-014d798b11c3",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "855bb2bb-5d0f-457d-90c1-dd1d6a71d9c5"
        },
        "item": {
          "id": "e761717a-2620-4629-b1f6-da6e1a4362bf",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "cd572006-f691-4ca7-9210-1bf9b148e628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51da82a5-3f88-4e6c-ad81-0af868291531",
        "cursor": {
          "ref": "95196a0d-daf5-4375-b0ed-b5e9d0130f34",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f6e6a8dc-0651-459c-9156-efd716204eac"
        },
        "item": {
          "id": "51da82a5-3f88-4e6c-ad81-0af868291531",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9f5cc8ba-f1b6-4726-9db3-8b4c16de9d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d55a3dab-b40a-47a9-91ab-8e3ee1adcdf7",
        "cursor": {
          "ref": "f47b89d8-2487-482a-9137-28b77c66abbd",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f7d1cf3c-0f1b-4c3c-918d-e9603ca307ef"
        },
        "item": {
          "id": "d55a3dab-b40a-47a9-91ab-8e3ee1adcdf7",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "13466585-f444-47ab-ac1a-5669060a7d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a42b1f97-f4cb-417d-ab4f-46f16472f59b",
        "cursor": {
          "ref": "abdf592b-de1c-4338-b946-ddd1f0942f92",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "11b0d7b9-5b05-4a4b-a42d-37df6c2d7fb1"
        },
        "item": {
          "id": "a42b1f97-f4cb-417d-ab4f-46f16472f59b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "deb0ec6d-ec1f-47a8-8ed8-0fbd6742ffe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6cfbcda-bf2a-4248-b0d4-2f22ea26196a",
        "cursor": {
          "ref": "a3917545-24a2-4497-a600-5bec15bc7237",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "fff8559f-3b2c-4a08-83f0-5c5f274df74d"
        },
        "item": {
          "id": "b6cfbcda-bf2a-4248-b0d4-2f22ea26196a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "795ee97c-16ef-439a-98e6-f39a5f43b886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f94125-b733-4ead-8532-f6c093ff7ed1",
        "cursor": {
          "ref": "de225d05-e5f4-45cf-9512-82654a18530f",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b91186b9-5b62-47e5-b76f-82f341cbdb33"
        },
        "item": {
          "id": "37f94125-b733-4ead-8532-f6c093ff7ed1",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ac3905ce-d593-49a1-b746-9ba2e7f67c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3d5a90-cbda-422f-b6db-c56dcf2586f7",
        "cursor": {
          "ref": "a7ea531c-1774-45f0-ae8c-2333ff90df58",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "72bb6eee-83fa-40f5-a501-3936b09ae119"
        },
        "item": {
          "id": "db3d5a90-cbda-422f-b6db-c56dcf2586f7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8461d232-cd4d-4cca-a0be-dfa384dfca81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2708618b-63d8-4b40-a560-8b5529884a3e",
        "cursor": {
          "ref": "f8ec818d-8792-4702-97db-4491d9d78df6",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0df66e3a-137d-4a28-b428-a58b5a530de1"
        },
        "item": {
          "id": "2708618b-63d8-4b40-a560-8b5529884a3e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b8ee0639-6f61-4f05-82ef-890642fa4035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb4de12-b619-4504-a80e-42a4c2f78588",
        "cursor": {
          "ref": "69df2e66-16ca-4719-99e9-0f7b6d83f502",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "bb190e55-c831-428e-93fa-628dc52bedba"
        },
        "item": {
          "id": "8eb4de12-b619-4504-a80e-42a4c2f78588",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a0152a57-c3b4-45c4-925b-a2001cedce19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb500f4-a91e-458a-b9a3-57251e261a03",
        "cursor": {
          "ref": "1cf3bce2-2cfe-4772-8859-fa6702733c7d",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "863eb201-4aa4-4946-841b-8d5814e055af"
        },
        "item": {
          "id": "afb500f4-a91e-458a-b9a3-57251e261a03",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3b5cdd7c-0b87-408c-a881-5530b1014b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "423983be-f607-4919-a4c9-0b7c26086736",
        "cursor": {
          "ref": "bd35568a-f526-4a8f-9127-d1731bd463aa",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3ff0386c-bc6f-42a2-ac1a-5c521fda34ba"
        },
        "item": {
          "id": "423983be-f607-4919-a4c9-0b7c26086736",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "bb08629e-4dd9-451f-8714-bc5feb4693bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d70ef3-0d02-40fc-babf-475bc7489ee4",
        "cursor": {
          "ref": "d5113a49-b92d-4758-8561-5d669d164a50",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "50c0a669-097b-4bae-9e97-de35bed434ed"
        },
        "item": {
          "id": "85d70ef3-0d02-40fc-babf-475bc7489ee4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "70394aa3-b8ec-4b17-9f38-e7e978e4b7ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4e0338-93dc-4fc9-9cf4-47b697f88b22",
        "cursor": {
          "ref": "2ae268a6-9747-475a-aae1-04e1328ba0b0",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "49af6f0f-2a3a-47e7-8254-4af444c2ce7a"
        },
        "item": {
          "id": "cc4e0338-93dc-4fc9-9cf4-47b697f88b22",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "779fcfd8-59be-4229-afba-77bef1c360d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2dc6098-2ca3-4f6c-acbc-49b3f0c9e7e7",
        "cursor": {
          "ref": "487eb72f-0664-44cc-9558-00fc3bed48d1",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d5271b54-ff9c-45a4-a12b-3a228589bdc5"
        },
        "item": {
          "id": "a2dc6098-2ca3-4f6c-acbc-49b3f0c9e7e7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "79e25b64-9d73-428b-8bac-22c3507c8897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f43b81e8-b681-4794-81aa-e31ab021043c",
        "cursor": {
          "ref": "7777fd8f-fa4e-49d7-96b1-950910af510b",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e55511af-d4fb-4549-9fb3-f2982e8b7240"
        },
        "item": {
          "id": "f43b81e8-b681-4794-81aa-e31ab021043c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0e300f97-33df-4e1a-9a82-370cf41ee6fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e273b4cf-9c7d-490e-a619-471476f68d2e",
        "cursor": {
          "ref": "8dfd9e57-37b0-4190-b15d-827dc8b28ae0",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "04220012-6efc-4332-af86-0a7d9f108660"
        },
        "item": {
          "id": "e273b4cf-9c7d-490e-a619-471476f68d2e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "92f637b5-f4c5-477e-ad11-d8c88d2642bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50455a95-8647-47e6-8130-455661818d5b",
        "cursor": {
          "ref": "33352543-498b-4b2d-a3db-5a86ae363cc9",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "aa86fce6-69a3-4d49-bf24-4dffee6419c0"
        },
        "item": {
          "id": "50455a95-8647-47e6-8130-455661818d5b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d6d9ad1a-cc94-49a6-b51a-c333adbf5a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b360321d-ef96-4cfd-8f04-1c9f9a9b7ac7",
        "cursor": {
          "ref": "9471bdb0-e6b2-4ff1-bb17-c496c834f267",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "fc0d50c1-a854-4558-bb83-6bbe657ce991"
        },
        "item": {
          "id": "b360321d-ef96-4cfd-8f04-1c9f9a9b7ac7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "18f41f89-e34c-4be5-97e0-5909c8fde296",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc203639-38b8-415b-a6fd-360af0a57f2a",
        "cursor": {
          "ref": "6cdd7d7c-a455-47ac-a095-3b87faafba04",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c81e690a-c9a8-4627-a803-83a228778481"
        },
        "item": {
          "id": "bc203639-38b8-415b-a6fd-360af0a57f2a",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "786adb68-1bc9-4bfc-a3f5-a0cb9a469565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "ce6dfbe9-99e0-40f5-9cde-5525a0d2d8de",
        "cursor": {
          "ref": "d094a998-75f6-4351-9858-0e602b5afdd7",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e5f422af-a53a-419b-a34e-6693a687b7a1"
        },
        "item": {
          "id": "ce6dfbe9-99e0-40f5-9cde-5525a0d2d8de",
          "name": "credentials_issue"
        },
        "response": {
          "id": "21e19267-24ec-4014-ad34-d64f70567bcd",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1dc546f-c28f-4bf4-a573-c75e519a9d57",
        "cursor": {
          "ref": "a3b023b9-8d55-4c0c-b6ee-464067af7097",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d37fa458-ea51-41de-a162-58f02f1c133b"
        },
        "item": {
          "id": "c1dc546f-c28f-4bf4-a573-c75e519a9d57",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "eff006a0-9f40-4cbc-be68-0d1f8b5ba3f9",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed14c8b7-bee1-4eb7-921e-5f819fd1c55a",
        "cursor": {
          "ref": "a294c446-100a-4c05-abb7-683bf9ec9a10",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "40376506-bb02-4d26-a012-769368e8b493"
        },
        "item": {
          "id": "ed14c8b7-bee1-4eb7-921e-5f819fd1c55a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d042ad91-ae1e-480c-837d-9dd40ffa422c",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f93698-76ad-477b-a402-968b06c92756",
        "cursor": {
          "ref": "107cd1c8-b073-4f57-8efd-249cd64e4bac",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "073772f6-ac44-4b20-b4cd-ba90ac36cf36"
        },
        "item": {
          "id": "d5f93698-76ad-477b-a402-968b06c92756",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "336280ba-92b8-4a3b-a978-c541656d0428",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ec95297-1c57-45a1-aa5a-bcf20f513f80",
        "cursor": {
          "ref": "065c8838-f8ca-4b03-9944-0c87f8e7ad4a",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ce325c7c-c7e1-49ec-8b1c-63218ac3a309"
        },
        "item": {
          "id": "3ec95297-1c57-45a1-aa5a-bcf20f513f80",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "fc1d10a3-80d8-4f61-92c7-f9ea4c912af4",
          "status": "Created",
          "code": 201,
          "responseTime": 613,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-11T00:33:43.458Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-11T00:33:43.458Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "6268b49e-bb1b-4a87-b251-ae89ce110d66",
        "cursor": {
          "ref": "c9e33be1-69ad-4eb3-80a0-503cf9924056",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d4a5a6d9-e0a6-44bc-a120-a7f31fa39601"
        },
        "item": {
          "id": "6268b49e-bb1b-4a87-b251-ae89ce110d66",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "280504ac-2dc2-4963-b1f6-dc55a78d4fa9",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce59f054-35fb-4d14-9c12-81d951845003",
        "cursor": {
          "ref": "2bed3890-62fd-4947-8287-c601c67c0c61",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "55774940-76aa-4378-8f6d-763af4edb378"
        },
        "item": {
          "id": "ce59f054-35fb-4d14-9c12-81d951845003",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5a1ebcfa-0fd9-47a0-a47d-8b29b3ba4b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c090bb-8c1e-41a0-8526-0d0d09b47a84",
        "cursor": {
          "ref": "084d603b-9ff8-42a5-9080-3957ac16e3ca",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0e06c8ab-0c2f-4484-b2a2-1c1c4d352211"
        },
        "item": {
          "id": "b3c090bb-8c1e-41a0-8526-0d0d09b47a84",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "da99a401-70b7-4f96-9ed7-8f64b13e1712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20014bad-e0da-492e-9f8e-91775a6bc79f",
        "cursor": {
          "ref": "782c3bbf-a07d-4c8e-93f9-1d951d0647e0",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "24e426c4-cd4d-4e46-ba5b-461fc0db62af"
        },
        "item": {
          "id": "20014bad-e0da-492e-9f8e-91775a6bc79f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9ea4cee9-1b6f-4cc9-a665-6962c9c4018b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb659b1-c59d-400a-91c6-4b2b703ca69b",
        "cursor": {
          "ref": "c6034156-6053-49eb-bcfb-17bc0ca01994",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f75d61c6-2575-4050-b255-3322446369f5"
        },
        "item": {
          "id": "2eb659b1-c59d-400a-91c6-4b2b703ca69b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "891619fb-1bce-4084-b135-3558ab11350f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2270c4d-8dea-46c4-9777-22f9c063a299",
        "cursor": {
          "ref": "f73067dd-a74b-403a-8646-cde5b81201e0",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f2beffd8-98f7-452e-bf90-bbdcf482fe86"
        },
        "item": {
          "id": "e2270c4d-8dea-46c4-9777-22f9c063a299",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ae515dbf-a988-481e-9596-0128ee487ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92246ea0-f9b8-46b8-b590-7c6586e3a914",
        "cursor": {
          "ref": "b850e3e6-4912-4f30-8de0-a99d785fdd1d",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "40e17718-448a-45d7-ab8b-8a272cee251d"
        },
        "item": {
          "id": "92246ea0-f9b8-46b8-b590-7c6586e3a914",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "22ca8afb-cbe2-451c-83a2-c7cafa25b16b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8defc53d-1c0f-4dbc-a776-01e834edbf6d",
        "cursor": {
          "ref": "d951f055-7022-4c01-820b-d3883b4f595a",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f947229e-36ba-43ef-b521-3610b04f2021"
        },
        "item": {
          "id": "8defc53d-1c0f-4dbc-a776-01e834edbf6d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f9d6d909-8ddf-40fa-aa52-6f0a64a549a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e6bb84-9f93-4a13-bba0-6f599ba313cf",
        "cursor": {
          "ref": "36502d51-547e-47fe-b15d-e475dbeea00a",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9c3d1b8b-8697-4fbf-bc02-e60804807383"
        },
        "item": {
          "id": "f4e6bb84-9f93-4a13-bba0-6f599ba313cf",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0f4299b6-84c6-4739-957f-7facd41eeefe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123a9faf-80ab-4e86-a182-771e5e554e94",
        "cursor": {
          "ref": "2e7de065-29ee-4ca7-92f2-b9d423ba96cb",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "39916a8d-0d94-4832-9643-149556793378"
        },
        "item": {
          "id": "123a9faf-80ab-4e86-a182-771e5e554e94",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "300ddddf-d6f9-4086-8f57-60ae5c11c98f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e1ca51b-0daf-4f61-b223-fdde00d83a7a",
        "cursor": {
          "ref": "e6bb33c4-287e-4791-ba10-b021a556bd4e",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0596814f-5c8b-4bd8-97a4-db55a97f52d0"
        },
        "item": {
          "id": "1e1ca51b-0daf-4f61-b223-fdde00d83a7a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "44e2ea0b-3bd5-413f-83eb-3c9131d82a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d4668fb-99f8-4e00-8e35-bba4239237e1",
        "cursor": {
          "ref": "f7013f07-14cc-4f85-995c-e2292f84248b",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "6ff7c23d-7422-46d2-88cd-a3753eaeb269"
        },
        "item": {
          "id": "3d4668fb-99f8-4e00-8e35-bba4239237e1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dee63987-aabf-425a-8277-5664a5c8a3c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9542577e-b9a3-4c50-a7a0-aa7ed66ba5a4",
        "cursor": {
          "ref": "bab032b7-f3b2-4982-9c10-52902ac26fdb",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "012403cc-c764-4496-8f9f-bb5727b82121"
        },
        "item": {
          "id": "9542577e-b9a3-4c50-a7a0-aa7ed66ba5a4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "37e2ed72-0135-4f85-ac17-96930176cab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c1cfecc-a0b5-4106-ac0c-c7ee2969416d",
        "cursor": {
          "ref": "50a6fda6-3711-4e25-b07a-a2b52da3fd14",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9504cb91-2a7c-4377-836c-25eb01a819aa"
        },
        "item": {
          "id": "5c1cfecc-a0b5-4106-ac0c-c7ee2969416d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "42464679-7dd1-41ae-9b73-b91835615ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936e8758-bf83-44bf-bf5e-2e1a8b91e116",
        "cursor": {
          "ref": "9e6673c8-8890-424b-865b-13f6f3ba3ae3",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4da72d20-76f0-481e-9ace-ccc08fbd3c9d"
        },
        "item": {
          "id": "936e8758-bf83-44bf-bf5e-2e1a8b91e116",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a63d9312-70c2-41fd-b1db-9eb36afc883e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00fed5ac-61b4-4eaf-8cbb-a13ae9a76f2b",
        "cursor": {
          "ref": "915bb098-cbaf-4cb4-bb6c-c1a0b87529e6",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d14ab47d-6519-4087-81ac-768880c7a200"
        },
        "item": {
          "id": "00fed5ac-61b4-4eaf-8cbb-a13ae9a76f2b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ab4e6e41-bd94-4ec7-8afe-e709bb2db31a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af14ff31-f2b5-40da-a7df-feed7e0d9348",
        "cursor": {
          "ref": "62cb749e-fd22-4a2f-93f8-cdb1f2758002",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "006b8473-f49f-4d11-aefe-dc95da675662"
        },
        "item": {
          "id": "af14ff31-f2b5-40da-a7df-feed7e0d9348",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8394cc2d-5082-4e64-8f09-2a27f8822cde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146cd685-fdbf-4138-baf9-b9a80dcaeb6e",
        "cursor": {
          "ref": "49d8f775-1cc1-4f1a-b947-f07ef0b61eca",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "23a8a70b-2d25-4fee-8d95-5ef0275004fd"
        },
        "item": {
          "id": "146cd685-fdbf-4138-baf9-b9a80dcaeb6e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0ed73022-356e-43ed-b373-6f5ba5cd1693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f9eb62-8c84-48d7-b737-975956e1f76f",
        "cursor": {
          "ref": "bd464190-4ab0-4885-892d-64dd3a628a74",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f6a04fcc-75b0-4a18-ad6e-0157ee604645"
        },
        "item": {
          "id": "b4f9eb62-8c84-48d7-b737-975956e1f76f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7de8a03f-6f97-4938-b6bd-cadde75b7b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57940886-d52c-4658-82f7-986ed29ca608",
        "cursor": {
          "ref": "a741d008-6708-4224-b4b7-e499d0eb5f68",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "40171a4a-83f5-4029-ae73-8cfe4c92c218"
        },
        "item": {
          "id": "57940886-d52c-4658-82f7-986ed29ca608",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "76127713-ac81-43ed-a784-c3987f2df342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd13893-5fe6-4941-9b6d-65cf25ff7f5c",
        "cursor": {
          "ref": "478796d3-3664-401f-b63c-b2b21df7dab6",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "57a47387-2254-46f6-aaf9-6962a38074a2"
        },
        "item": {
          "id": "dbd13893-5fe6-4941-9b6d-65cf25ff7f5c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7db35991-fe30-4d02-9b80-14891253942e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf02093-e6cc-4950-88ff-cca60ac48733",
        "cursor": {
          "ref": "ffbb29e0-fb12-47d2-9ff6-d9c7f161feda",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9a6e0a23-8b21-4fe6-bde6-6cbdaf6f29a2"
        },
        "item": {
          "id": "baf02093-e6cc-4950-88ff-cca60ac48733",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6d809b5c-1817-4830-bc72-067a44216572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d7cf18-d1e2-48d6-90e9-5a75531e0174",
        "cursor": {
          "ref": "f1613f45-b1cb-4f69-b079-f454cb3e1f64",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3878cf29-36bb-4eac-b7b0-84c069e906e3"
        },
        "item": {
          "id": "93d7cf18-d1e2-48d6-90e9-5a75531e0174",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b127f577-0c46-417e-8d23-1fde312234b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f675872f-163f-4715-baf1-6ab0b21866b7",
        "cursor": {
          "ref": "6665ba91-2cdc-4383-a679-17c0415b12c9",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1fcbc09d-db88-4a1b-92c7-eb4c5cbec289"
        },
        "item": {
          "id": "f675872f-163f-4715-baf1-6ab0b21866b7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1c028cf6-bc01-4b06-a7ed-545b2125d10d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689a5801-323a-407b-993f-c1050c251047",
        "cursor": {
          "ref": "92a01004-6319-45b6-89b9-3192f72c5682",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8edaf555-8480-4609-89bf-5653173a4d69"
        },
        "item": {
          "id": "689a5801-323a-407b-993f-c1050c251047",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "680c5412-19a7-44ae-894b-8da8173297f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9268b8c4-43a6-4132-933f-92a95b9b48e0",
        "cursor": {
          "ref": "c4b8bc53-d98a-44cf-b219-fe77e9f5e6a6",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ec2f64ab-0843-43c9-a60c-08a07df8a1ec"
        },
        "item": {
          "id": "9268b8c4-43a6-4132-933f-92a95b9b48e0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "070e6b3b-b370-4038-98d8-1f2ab003d94f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271c597f-a3b5-480e-887f-6ff42aeab341",
        "cursor": {
          "ref": "bee722a8-0f6e-4260-ba5b-abf246d7983d",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2e442088-bee3-4fff-8206-33ce74dd24b4"
        },
        "item": {
          "id": "271c597f-a3b5-480e-887f-6ff42aeab341",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "718c9461-51ed-44e1-b9b7-17c8b5e92074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b61f0287-4079-4ce6-9e39-da49de074422",
        "cursor": {
          "ref": "34598cb4-98f6-4ea4-9fee-5bedd64a8cef",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7eb11ec6-bb94-4d01-9092-3c05f046613a"
        },
        "item": {
          "id": "b61f0287-4079-4ce6-9e39-da49de074422",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ab456854-1b54-4def-b3ca-1bbf3c15264f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b6e673-74e9-4c6c-8b09-645b9740338a",
        "cursor": {
          "ref": "7ca2f51e-81a7-4b8c-ab13-6398049dc3cf",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4bf92334-ae1c-4f40-a268-5adfe93ab215"
        },
        "item": {
          "id": "60b6e673-74e9-4c6c-8b09-645b9740338a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a27008b9-1bd8-4865-8c4c-4a2b157f153b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e900f9b-fc67-4af7-9f36-fbe521ab9e00",
        "cursor": {
          "ref": "ea79b9d8-baf2-4018-a9e0-ee904e22d2b3",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e574e086-e631-4e12-8d00-c8789bd7c5b9"
        },
        "item": {
          "id": "5e900f9b-fc67-4af7-9f36-fbe521ab9e00",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "348fb1cf-d3cc-497b-965f-899872d5b28f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fec44ef-36e4-4639-aa0d-134dc0b057a9",
        "cursor": {
          "ref": "c2ae935c-bc1b-40ae-8f5c-94d6a12c959a",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7aea70b5-7b56-4259-83f5-90bea0033041"
        },
        "item": {
          "id": "9fec44ef-36e4-4639-aa0d-134dc0b057a9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8ff8d751-b66d-44e1-b7be-4c1a41017746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf5d6285-d26a-4396-a76b-b86753396b03",
        "cursor": {
          "ref": "b7a618cf-cd29-4a2a-9fb0-f2da0913c41c",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "30fd5c6c-4cbf-48d7-b972-fff592432f2f"
        },
        "item": {
          "id": "bf5d6285-d26a-4396-a76b-b86753396b03",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a6a0a22c-c147-4ded-97f8-0d3f743c7959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f77634-3f5e-4803-a509-03c15e83be6e",
        "cursor": {
          "ref": "3ca1e613-d98d-41cd-9f79-dd2d4f31915d",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "534b90ab-8668-4beb-963e-a6887130e0ab"
        },
        "item": {
          "id": "f3f77634-3f5e-4803-a509-03c15e83be6e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e31a61db-3bb4-499a-a305-6f0ff09132fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e0cec4-25e6-4a2f-8a2f-f0e2de903147",
        "cursor": {
          "ref": "068f68ed-5eca-4da5-904d-1bc9661451a7",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "851c54d9-b62b-4985-9954-a7e9aa7982a2"
        },
        "item": {
          "id": "f8e0cec4-25e6-4a2f-8a2f-f0e2de903147",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ee03f8d3-cf46-45a7-944f-58472f960c01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cd8aacd-2ceb-433e-be9e-ed3a26056bce",
        "cursor": {
          "ref": "7a6dec8c-5b2e-4d38-9a82-bcec66d69b16",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9cdcf715-5426-4824-b17d-82b65a414710"
        },
        "item": {
          "id": "0cd8aacd-2ceb-433e-be9e-ed3a26056bce",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "10c252ee-3150-4d02-b7c5-50b412128309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce5c4321-702c-4e1d-8a53-100c4eb7acc9",
        "cursor": {
          "ref": "cdf06af2-49ef-4d4b-961b-8f72c8e153ac",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "95937dc8-cbe0-4e37-9de1-85901c70dc1e"
        },
        "item": {
          "id": "ce5c4321-702c-4e1d-8a53-100c4eb7acc9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e4d72398-3de3-4f44-81c5-6d59f31338eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9af14b3-cadd-46bc-b9c1-52cfe33d71eb",
        "cursor": {
          "ref": "9ad49328-08dc-4471-b0fd-2f4312270846",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2c325049-cd15-45e7-9f6c-bcbb80c1feb9"
        },
        "item": {
          "id": "f9af14b3-cadd-46bc-b9c1-52cfe33d71eb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a8ddbd89-3cc5-4ec4-bddc-233ffd11736c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a9ef14-1a5a-4a71-8988-ab907debec99",
        "cursor": {
          "ref": "5b29111e-16af-44d9-a08e-c8c8e402bdb0",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "92be0e2a-8cbc-4882-b821-4d75589a00a1"
        },
        "item": {
          "id": "74a9ef14-1a5a-4a71-8988-ab907debec99",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ac735a57-9e83-46bf-ab14-634489544ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2acbf7f-fb4c-4e49-b964-a4d2f07bea2a",
        "cursor": {
          "ref": "d3a801e2-0a0b-4268-aac8-23d372d590eb",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "eb56ca73-c9cf-4495-8010-2715c4cbcc32"
        },
        "item": {
          "id": "c2acbf7f-fb4c-4e49-b964-a4d2f07bea2a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "201a277b-2092-4fe9-8457-75827aba8467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "727dc4bf-3024-43a5-bff7-dbeb40686b64",
        "cursor": {
          "ref": "c3540c12-2165-403d-ba2f-796ec0d73f0e",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b1958194-1621-49ef-945f-1741afe06df2"
        },
        "item": {
          "id": "727dc4bf-3024-43a5-bff7-dbeb40686b64",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3ee7e0d8-2ade-4e8c-9b64-e0e0ebb44654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2e05df-d61c-46ed-9643-e1ba3a385944",
        "cursor": {
          "ref": "58d23ab3-f664-488b-8136-f9c722805c34",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "732963b8-59b1-4e56-a07c-21e6501679e4"
        },
        "item": {
          "id": "dd2e05df-d61c-46ed-9643-e1ba3a385944",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f7c15c14-7e8d-44c1-b16a-8bcf567ad2b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d613b34-7908-421b-8d65-a4052fa6e93e",
        "cursor": {
          "ref": "84193fae-16e0-459e-adfc-b18fe6ff0460",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ddbfe0cf-013f-46d0-a3f8-99dcee11b707"
        },
        "item": {
          "id": "5d613b34-7908-421b-8d65-a4052fa6e93e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f1daf0a3-f55e-4bc2-930f-ee50d2e3ab3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e46664c-ecea-4040-9b8d-999b89370ccb",
        "cursor": {
          "ref": "95399294-ccf0-48f9-a801-b4f2d55887ef",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "fec6b3a9-e0dd-414e-9505-dc229a73482a"
        },
        "item": {
          "id": "3e46664c-ecea-4040-9b8d-999b89370ccb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a8ad7a06-e69d-484a-b06b-e5d59feb75e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f929f2-727a-4bc2-8987-4f69d53da196",
        "cursor": {
          "ref": "b122085d-6a52-42c1-a4b9-036943e3fd99",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "38044cd3-eb00-44d9-b262-bf2720641863"
        },
        "item": {
          "id": "88f929f2-727a-4bc2-8987-4f69d53da196",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2930cb8b-5ecd-4e04-9024-1dedabc82aa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ca286a-4d1f-4c7b-81bb-809bf2da9c8a",
        "cursor": {
          "ref": "2a872194-d11a-4eba-b65f-026df879058c",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e9934e17-fc08-4fc4-aa9a-ab3602a743c8"
        },
        "item": {
          "id": "53ca286a-4d1f-4c7b-81bb-809bf2da9c8a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "25fa0da6-f27a-4dea-9745-bf9615ec1fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80c013d-d280-441a-b784-0eb6857ffd79",
        "cursor": {
          "ref": "d007d2eb-441f-43d3-9435-7405d3f3b229",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "593af8b1-2ee1-478f-ba71-38db1af1bee4"
        },
        "item": {
          "id": "b80c013d-d280-441a-b784-0eb6857ffd79",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5b39b890-bab2-4ca7-88af-175c16ff6bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f924e707-9cde-4359-827a-c1d45790a83b",
        "cursor": {
          "ref": "a5749eae-72e1-418e-a7c6-4e55c630bd7a",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "56117619-9dfb-4baf-9399-87b24845fe4f"
        },
        "item": {
          "id": "f924e707-9cde-4359-827a-c1d45790a83b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "10315ef8-d276-480d-b354-10a9004c2d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a788e8-2c34-4099-be7d-e708ff241de9",
        "cursor": {
          "ref": "e9e17283-17f6-4829-8940-709eefae01f5",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "bd80b425-2532-4a99-b730-db937d7f699f"
        },
        "item": {
          "id": "e3a788e8-2c34-4099-be7d-e708ff241de9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4de2cf86-1f48-42e8-acf0-879edeb2198d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2506a888-20a4-4754-8536-1fc295862f7a",
        "cursor": {
          "ref": "edf825fa-dd50-487d-9210-4e4a6d02cf3b",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "07daef18-5bbd-46ee-a4c0-81f37e67c41e"
        },
        "item": {
          "id": "2506a888-20a4-4754-8536-1fc295862f7a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b4f82675-2543-44c3-b8ec-a7a4d267f5fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d2c42e-0e93-46ce-a762-28e848310529",
        "cursor": {
          "ref": "04b42895-9d86-4d3f-b3b8-49e140963798",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e3ac5308-bf8f-4803-98d1-b6d6f7a1ceee"
        },
        "item": {
          "id": "b6d2c42e-0e93-46ce-a762-28e848310529",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9f0efe2b-f580-42f6-8c16-e3b84bfbcefd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe184f8-c4a2-4241-af50-8b5b16639450",
        "cursor": {
          "ref": "ce5adda4-6d68-4cb9-be44-2cb047b9003b",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7188a387-1ffe-4022-8c4d-20bfe52f5254"
        },
        "item": {
          "id": "fbe184f8-c4a2-4241-af50-8b5b16639450",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f3fd5d85-480e-45de-87e7-31aab5bd4ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bca0f9e-d777-4b8d-8edf-365dc6f2fc88",
        "cursor": {
          "ref": "f523662d-6374-4086-9af8-ad22cb42c1d1",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e36e5ede-830b-4897-b992-16e0e0703182"
        },
        "item": {
          "id": "0bca0f9e-d777-4b8d-8edf-365dc6f2fc88",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "890d1f2b-b5e5-4414-ae61-cdb58f62e624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6593a73-d01b-4ea2-94a1-948ef8a1bae3",
        "cursor": {
          "ref": "80f42d1b-c099-4992-b590-b8dacd15d2d0",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1f40d97d-3836-48d6-a418-9af80c588c93"
        },
        "item": {
          "id": "b6593a73-d01b-4ea2-94a1-948ef8a1bae3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1fda3b98-ca47-4802-a221-5ff65b696c05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b013bae-2167-4b69-95e9-912eed1eaf01",
        "cursor": {
          "ref": "539fcd7f-2d7c-4ce1-ad3d-ea2d437adc73",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5fbed080-6098-4954-8256-a48d356dd81b"
        },
        "item": {
          "id": "4b013bae-2167-4b69-95e9-912eed1eaf01",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7cf42cd9-d3c5-4704-b24d-e5d179ef56c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6346fd8-f382-4d5c-a352-c3c2bdfc7533",
        "cursor": {
          "ref": "91b28315-d96d-4bbb-9ffd-cdd5d22c75a7",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c1c3c03e-7c3f-4b06-b214-3e4b88ae92f4"
        },
        "item": {
          "id": "f6346fd8-f382-4d5c-a352-c3c2bdfc7533",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f7013ed0-5850-48f4-94f0-9923c94b11f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ceac87-8aa1-483d-9c2f-5e0e94bb287c",
        "cursor": {
          "ref": "52003225-38c5-49ea-afa4-7bde4d77fea0",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1bfa1b53-91f3-4c1f-b504-a7a376e9d983"
        },
        "item": {
          "id": "c5ceac87-8aa1-483d-9c2f-5e0e94bb287c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "26077da4-2fc2-4b4d-8a58-0737bf23a355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce5a968-c6bb-4c97-913d-8ffd87a3a2cb",
        "cursor": {
          "ref": "f8b42b55-5f95-430e-a2e3-0f8d3fd8df25",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8f4f5dd9-2bdf-4e24-b66b-3a917a869b60"
        },
        "item": {
          "id": "0ce5a968-c6bb-4c97-913d-8ffd87a3a2cb",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "264befd9-b665-455f-b14e-37cc292f5e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3362372-a2e9-4896-ad0b-02f3346a9a58",
        "cursor": {
          "ref": "c2446444-c750-4b57-be5d-3ad02d64a69b",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b8b42c29-ce05-4f53-961e-77390b5ea31b"
        },
        "item": {
          "id": "f3362372-a2e9-4896-ad0b-02f3346a9a58",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "77a83eff-d979-4f61-bb2e-a46b93c08c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "badca1a5-7ea8-4a3f-8694-69ed99a3e991",
        "cursor": {
          "ref": "c39f0995-403d-4c00-8e02-08a937b846de",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "30c03c8e-ea02-4f65-a370-0a76ccf02aed"
        },
        "item": {
          "id": "badca1a5-7ea8-4a3f-8694-69ed99a3e991",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e63ea2e8-8507-4dd7-977c-857a1167c8a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45660de2-0cc0-4bc3-a8c5-1e11926e0762",
        "cursor": {
          "ref": "df1e2bc9-7e30-4b0d-a3fa-9501561e8d57",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c2e289b7-1690-4403-ae9b-6b8ce67d8b05"
        },
        "item": {
          "id": "45660de2-0cc0-4bc3-a8c5-1e11926e0762",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a192a681-a726-496b-88c4-659a86f8b014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd036db-8391-46a9-bf0f-51163af72ad5",
        "cursor": {
          "ref": "d2f22e68-6e86-4faa-8651-8dbf1c0d7ee0",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3ac3c363-e34f-40a1-8be0-0768faf877e1"
        },
        "item": {
          "id": "bdd036db-8391-46a9-bf0f-51163af72ad5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "01f7fd48-e399-44e1-97df-ad80d2a89296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968175da-d519-4856-af67-07735811aa51",
        "cursor": {
          "ref": "eab60000-3f6d-4750-b311-69bbca853d5e",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e19a3e96-fd74-4dec-94b6-174ce9af4f0d"
        },
        "item": {
          "id": "968175da-d519-4856-af67-07735811aa51",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "16592af4-4e72-4e1b-982b-a7aea08e2a55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa534ab-5d1f-4bb8-b1bc-5b5f6658cb5a",
        "cursor": {
          "ref": "d6e8d33c-b117-447c-8b51-9f85956fbd3e",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6786e09f-22c8-4fe7-a0b0-d5ea2d301c1f"
        },
        "item": {
          "id": "9aa534ab-5d1f-4bb8-b1bc-5b5f6658cb5a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f723729a-352a-4b84-9fca-ee90e5ae3240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b14ae0-7312-42d6-8e2a-471127f87934",
        "cursor": {
          "ref": "a2438c98-b206-43ca-aca0-01ba88c897cd",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "673b3c9e-bedc-4ff1-857f-fdbc226efa27"
        },
        "item": {
          "id": "e1b14ae0-7312-42d6-8e2a-471127f87934",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "692ad652-596d-42a5-9410-4fa835ca3226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df04f9ce-da90-4be5-a379-e52cfbd27c0c",
        "cursor": {
          "ref": "7609a21f-e69c-4525-b60a-68233bce51f0",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "89f1814b-703f-4b63-9610-d026dded2c68"
        },
        "item": {
          "id": "df04f9ce-da90-4be5-a379-e52cfbd27c0c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "215a8ee9-7357-4db8-90b7-77561fbe1b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e38662a4-1327-4761-ad0b-a28bf75d95f3",
        "cursor": {
          "ref": "9f88de3f-80c3-4056-8a69-d855d1ab301a",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e2f22497-1e94-4776-b051-0126eb6c2f6d"
        },
        "item": {
          "id": "e38662a4-1327-4761-ad0b-a28bf75d95f3",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "67380328-adcb-4f94-bd86-12b933272866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9020df82-1f7f-42c7-8750-e861221ceaf3",
        "cursor": {
          "ref": "0bb8c4d0-b817-4b6a-84f7-1ac6f48428d8",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "05fc3d72-7100-45e9-9acb-f2d70a947069"
        },
        "item": {
          "id": "9020df82-1f7f-42c7-8750-e861221ceaf3",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "522b251b-5ed6-4076-b645-8c1c1d00d602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580e99f7-d637-443c-9dba-a6299edc8f1d",
        "cursor": {
          "ref": "b316b26c-a6a4-4c9e-84e6-f08c7bfe1fe7",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b096f8bb-c550-4722-8a39-f916d420297e"
        },
        "item": {
          "id": "580e99f7-d637-443c-9dba-a6299edc8f1d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "be151815-886e-4762-a8f4-5a5fbe903de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963ed712-7002-4ad6-8eee-ce4061397d10",
        "cursor": {
          "ref": "edc59003-3c95-4523-9eae-fa3a36c58e8a",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2cda7e18-b6c5-4c17-a569-e5abe52f99dd"
        },
        "item": {
          "id": "963ed712-7002-4ad6-8eee-ce4061397d10",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7d636b41-bbbb-4dad-a13a-aed7e5d4c4f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c318e3c-bd55-4842-95e9-0d69b493fc55",
        "cursor": {
          "ref": "83498686-22fd-4f7a-948d-e7a87276219c",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "fb1db8fa-9d0d-4af2-b1ca-b02cbfeef27b"
        },
        "item": {
          "id": "7c318e3c-bd55-4842-95e9-0d69b493fc55",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "41ee59e6-b528-441f-ba24-3f34e1314826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac23a7b1-c91c-4f60-9dfb-cd50f3eb59ca",
        "cursor": {
          "ref": "2a7bd689-2804-423b-97d7-371ca17bca4d",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5ac1b193-8109-46e1-a593-4b85654f1c54"
        },
        "item": {
          "id": "ac23a7b1-c91c-4f60-9dfb-cd50f3eb59ca",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "8fb38577-4eaf-4807-8f0b-ce2abecafeca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b9b0234-e9fe-4b94-8d7d-ffd903e0b0fe",
        "cursor": {
          "ref": "6748c14c-600f-41bb-b1c3-6c4f43dfd5b5",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ba43904f-3cf5-49e4-b2d5-d785c8a77636"
        },
        "item": {
          "id": "0b9b0234-e9fe-4b94-8d7d-ffd903e0b0fe",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6171b7e5-2640-45bf-9e8c-81563c2eb745",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd36b4cc-9831-4e7b-bfa9-042b265fe5a2",
        "cursor": {
          "ref": "2557d65d-05f1-4053-9973-9d95f214737e",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "468df4e8-0374-415e-bb9a-e44dd58d7d7a"
        },
        "item": {
          "id": "cd36b4cc-9831-4e7b-bfa9-042b265fe5a2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "28faaa01-2aeb-4a4a-b781-882d3294ef67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce41d8f-77d4-435d-97e8-f89a5a6cba03",
        "cursor": {
          "ref": "88be6570-bbb6-462b-a237-7d59f074856f",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b45a2ea3-691d-457e-8e73-4132acbff26b"
        },
        "item": {
          "id": "5ce41d8f-77d4-435d-97e8-f89a5a6cba03",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c60ccc30-a931-4cb3-bdc7-738d690318ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b3f86a9-b44e-4618-a1d8-90e1e6044038",
        "cursor": {
          "ref": "f5e9397b-4d10-45a8-b772-9f6dbb15cf5e",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "52c18d37-1be5-4278-9e66-4c1f37059623"
        },
        "item": {
          "id": "9b3f86a9-b44e-4618-a1d8-90e1e6044038",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "480c8ac6-ac12-43b3-97b7-1927981a8c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd43f8d7-4617-458d-ba7d-cf2327a2dbc8",
        "cursor": {
          "ref": "b88b45bc-aa77-47f5-b635-2b1634fd71b3",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0c14a8cf-055d-46b0-93e5-1ec36b650530"
        },
        "item": {
          "id": "fd43f8d7-4617-458d-ba7d-cf2327a2dbc8",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c25d8bd0-7ade-4a1a-a20e-7d2ee93b6c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405d496e-00e0-4f34-bd20-a15c7584e3b9",
        "cursor": {
          "ref": "831727b8-b5bc-483a-9501-430fd240fcfc",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "02f64755-d0f0-43f0-968d-d185f4e88a75"
        },
        "item": {
          "id": "405d496e-00e0-4f34-bd20-a15c7584e3b9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8278b772-aed4-4fb3-acce-29ef53518cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34141a1c-8889-417b-87c6-a1759f479a8b",
        "cursor": {
          "ref": "942f1f17-d443-4731-8695-be351de3edad",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "61fc4bfc-8e74-48ed-81c5-e09b01349c64"
        },
        "item": {
          "id": "34141a1c-8889-417b-87c6-a1759f479a8b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "79b24af3-50b4-4f68-a81a-65b7c9854c9d",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "c6682ae0-d301-4ca8-b091-73fbf0429131",
        "cursor": {
          "ref": "1addc792-abf6-4bc4-8113-f3d72a05c8df",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "12a71cd6-fdb6-4c88-9179-3d1765370007"
        },
        "item": {
          "id": "c6682ae0-d301-4ca8-b091-73fbf0429131",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1a7fad74-07c5-468e-9f76-7c9167705ef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df504eec-618d-4fbd-8453-7166812a90bd",
        "cursor": {
          "ref": "7c504211-4dd8-40f7-8d01-93c45aa9082a",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "cee5dcb8-9230-42cd-82a0-b39be65d9938"
        },
        "item": {
          "id": "df504eec-618d-4fbd-8453-7166812a90bd",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f84b038b-f85c-444f-81f0-b2ef0d921139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d00d09-acc3-4cd7-9a90-b24084337688",
        "cursor": {
          "ref": "5a9b72d9-b746-41bd-9f01-9a3463627d52",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "608dd698-cef2-45db-96a1-ba1cc99053d4"
        },
        "item": {
          "id": "66d00d09-acc3-4cd7-9a90-b24084337688",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "da86fd30-7ed9-4cc6-aaaa-ae71682ea8c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561cc46b-2c38-4681-b9d8-2d3ad65910d6",
        "cursor": {
          "ref": "450473a1-2822-4c28-b298-5b042c740aa3",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1dfb9ccb-47ab-4a3c-a352-155268c8aafb"
        },
        "item": {
          "id": "561cc46b-2c38-4681-b9d8-2d3ad65910d6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "29ad28d3-0190-4e46-8d07-a78adcfef1a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3bbba89-1c15-4245-b277-31344992ecc9",
        "cursor": {
          "ref": "599a1a18-6acb-4fc1-9c1c-2b1613060254",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0efa4100-e978-4dc5-bbdd-39c13958e1f0"
        },
        "item": {
          "id": "e3bbba89-1c15-4245-b277-31344992ecc9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "613b75ab-5b5d-48fe-ad3e-2e74936fbe11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "787b1b6c-bec6-4c94-af52-ecbc0309d7a6",
        "cursor": {
          "ref": "e0d6d130-0930-43d6-8ddd-4e9fa2dfc941",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "243c031c-e8de-469f-9efa-f9d341da53c8"
        },
        "item": {
          "id": "787b1b6c-bec6-4c94-af52-ecbc0309d7a6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "50321100-eca1-4f6e-bc27-093cb4352543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0cadd09-b27d-4e25-bebe-a0efa94bb8ca",
        "cursor": {
          "ref": "6b1c56b0-fc1c-4878-b164-c644117c2378",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d5eb0f42-099c-4745-9e86-61117941ff2f"
        },
        "item": {
          "id": "f0cadd09-b27d-4e25-bebe-a0efa94bb8ca",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "683bc7ba-a202-487f-a288-bb1a6069e64e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f68031-37a4-44ea-ad07-8efa871ecaa7",
        "cursor": {
          "ref": "79c97093-b660-4cb2-bbbb-343f5953cc3d",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "54ad7fa6-6a00-47c5-847a-331939b9ddc6"
        },
        "item": {
          "id": "f6f68031-37a4-44ea-ad07-8efa871ecaa7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a8f88239-7a24-47f4-90e3-5fdec04bc072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8540620-604c-4d1c-9af6-e3fa1797dded",
        "cursor": {
          "ref": "3f912f74-9751-4d5e-a6b6-27927e6c6e78",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "abd635e0-bc8e-4070-bacc-ca542d4aafdb"
        },
        "item": {
          "id": "f8540620-604c-4d1c-9af6-e3fa1797dded",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2ab2d474-e860-42d0-af50-cafb865049e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb8cb74-5e9c-4747-8b72-5a675481ad74",
        "cursor": {
          "ref": "a429b7f5-f0b5-4715-97a0-56a5d22d5ab5",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "08a96ae6-15be-4f66-b680-1d967f1287f5"
        },
        "item": {
          "id": "3eb8cb74-5e9c-4747-8b72-5a675481ad74",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2b1937ff-7074-4fec-880e-cd23f07db54e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82311547-affd-43d3-a6c0-fde8cddf6e3c",
        "cursor": {
          "ref": "61f2c938-d416-422d-84c9-2c0f1e4a355a",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e82ecd07-e76d-49e0-a5ef-3ce24c78543a"
        },
        "item": {
          "id": "82311547-affd-43d3-a6c0-fde8cddf6e3c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ac543fab-c788-4224-9c7f-e537c4fed35c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb838cb-b369-498c-aa4f-674f673d2656",
        "cursor": {
          "ref": "bb5a1826-f520-47b4-afb2-274ffbdb3b3e",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1f27437d-3f35-4ebc-a18d-501d1dc2740b"
        },
        "item": {
          "id": "1bb838cb-b369-498c-aa4f-674f673d2656",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a52da5c9-bb4b-4415-88fe-bff048abb185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee46ddc-a2de-4923-83f4-74331a980752",
        "cursor": {
          "ref": "b9ecf895-31eb-47d3-8bc4-c1770e931e87",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "474334b7-f584-4b16-897c-3718c828b4f1"
        },
        "item": {
          "id": "7ee46ddc-a2de-4923-83f4-74331a980752",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "331c61bd-364c-4fc4-9384-f90116716753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d453a91-c0be-4cd2-ad52-a50d8d3182a3",
        "cursor": {
          "ref": "fe127363-4d24-40af-9983-dbe6d2dfc6e1",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f1c37d78-bb6e-4e78-8a61-a3f82388b3a8"
        },
        "item": {
          "id": "1d453a91-c0be-4cd2-ad52-a50d8d3182a3",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "674dfc92-25ba-4e04-afff-dad9d3f047c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336b555a-7a8c-47b9-8f30-e0bfd275d342",
        "cursor": {
          "ref": "7386bda6-238d-4fab-b019-5ef388920424",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "350e72eb-13e9-4649-92e9-3a33415e98de"
        },
        "item": {
          "id": "336b555a-7a8c-47b9-8f30-e0bfd275d342",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5a9089b4-ab8f-4c31-b180-61410c90498c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da9eae9-506f-4ac2-9582-7da79fb17aea",
        "cursor": {
          "ref": "c6684047-6dcc-46f7-9562-b90acea021cc",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f22ac3af-5194-4a61-8588-a6d837533f4a"
        },
        "item": {
          "id": "0da9eae9-506f-4ac2-9582-7da79fb17aea",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5e799c0f-1c4a-464d-81db-f23b543e1d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "761904a5-c226-4708-a172-0fed518d32bd",
        "cursor": {
          "ref": "deef147e-ff05-44e0-9ed1-875f7f6bbb94",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e5094e4d-235f-43a9-8252-eb5c2206fc34"
        },
        "item": {
          "id": "761904a5-c226-4708-a172-0fed518d32bd",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "48a37a69-5103-435b-b7e9-c8a20997f9fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02fe39d8-efae-4d2a-82c9-0000867b6f02",
        "cursor": {
          "ref": "434114dc-18b2-4605-b040-1627ea73e540",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "26eb9851-6929-49f2-ba4f-a64c0d64ab8f"
        },
        "item": {
          "id": "02fe39d8-efae-4d2a-82c9-0000867b6f02",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5f3611b5-5695-4215-940e-ad374f89b081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1493e81f-afd0-4be8-985b-c1d8098cd9b4",
        "cursor": {
          "ref": "43e0dad0-367e-4bec-9a4a-ac41e5effaec",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b4c2b66f-f4fb-4c03-8d64-2c1c2b7212ff"
        },
        "item": {
          "id": "1493e81f-afd0-4be8-985b-c1d8098cd9b4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a1fdeb69-177a-4f95-a615-7425922a17bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab5f385-1b49-4d2f-b781-41a399c8cd39",
        "cursor": {
          "ref": "cae33ecd-448c-4889-bff5-b2f2a214c4b2",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "17f4e423-a53d-4848-9b04-c5301fb3aae1"
        },
        "item": {
          "id": "fab5f385-1b49-4d2f-b781-41a399c8cd39",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4c70f9df-a894-43cb-94ad-ba86867a2ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a5eac3-ced5-4388-ad90-002310cfa5cc",
        "cursor": {
          "ref": "de102cf1-32e0-414d-beb4-474d4333f334",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c218f1b1-4b5c-47c7-83b5-0edfc92c018c"
        },
        "item": {
          "id": "67a5eac3-ced5-4388-ad90-002310cfa5cc",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4a7a149d-3ef1-481f-afe8-5ac2e2581c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec7fb9f-f922-47bb-b141-132c1a3e3408",
        "cursor": {
          "ref": "51955d9d-8e16-477d-997e-215e7740b598",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "bd0620c0-cfeb-4522-9b46-1aa18baa81e9"
        },
        "item": {
          "id": "9ec7fb9f-f922-47bb-b141-132c1a3e3408",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f6c88893-96f6-4e46-9aea-c5ce2c67e7fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dad6aa3-75c4-426c-9399-b92a00a7a08c",
        "cursor": {
          "ref": "0bd76439-c81b-435f-a1c8-0e3bcbb4a3cc",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "da7fabe4-74dd-43b2-9ada-dee76ec47f09"
        },
        "item": {
          "id": "0dad6aa3-75c4-426c-9399-b92a00a7a08c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4ce70f4b-9cbe-45b0-8bf6-817b2ce8ba25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2727c6a8-5954-4ca2-8858-ba5e1c4e00ac",
        "cursor": {
          "ref": "9f455048-9914-487a-a2ec-d9cf7159ff37",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "fb6e6c4f-6f7d-4001-894a-5191a5933352"
        },
        "item": {
          "id": "2727c6a8-5954-4ca2-8858-ba5e1c4e00ac",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "cd0b8226-3f3a-4ec4-9441-7031a7d62237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d08f6fc-b79e-4470-8f9e-65968a7b2960",
        "cursor": {
          "ref": "a1579445-5e1f-4a4b-b12f-b3fd28132aab",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "81bf2cb3-f76e-4707-8337-224af6e9d54f"
        },
        "item": {
          "id": "5d08f6fc-b79e-4470-8f9e-65968a7b2960",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f8c375c4-08a6-48b8-a826-82debc86e9b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c5ff59-8493-4c53-868f-1391f34db260",
        "cursor": {
          "ref": "eda9b960-cf3a-449d-9818-08eb11e03401",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bce51503-1c41-4d07-be4e-0aff7021da6f"
        },
        "item": {
          "id": "95c5ff59-8493-4c53-868f-1391f34db260",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "32457ff0-ad75-4d2b-8d4a-afb5cb62efe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b829934-64ab-444d-b21c-4b3d8583bee4",
        "cursor": {
          "ref": "5bd3c560-3bcf-48eb-b707-03aa19b403c5",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3499cea1-4d1f-421e-a1fa-50e1448968be"
        },
        "item": {
          "id": "8b829934-64ab-444d-b21c-4b3d8583bee4",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7a72f19a-4821-4b6c-b464-2cdb24096fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300df87e-0f3c-42a1-84ed-b34476e562be",
        "cursor": {
          "ref": "4424c7dc-2782-4239-bedc-8caa4b74d890",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "fcd0d82b-6232-42f5-9dcc-82bc7954c305"
        },
        "item": {
          "id": "300df87e-0f3c-42a1-84ed-b34476e562be",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f10f046a-5b05-4374-8750-d8420336997d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c9c750-e23e-40fe-b0db-edf70ac93be7",
        "cursor": {
          "ref": "a89dfbe2-6407-4444-ac0b-f03f1bf513d6",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7c462642-2fc6-45e4-9b74-b25a7b897658"
        },
        "item": {
          "id": "40c9c750-e23e-40fe-b0db-edf70ac93be7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b32288ff-ae84-45ac-8753-9775c9e51e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed98fe41-576b-4e6a-bc09-e616e826e0b5",
        "cursor": {
          "ref": "f6583a0a-64cc-41c7-aa9b-46cdfbde73f9",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e8747648-0ba5-4b5f-9298-fbf2c952cb3e"
        },
        "item": {
          "id": "ed98fe41-576b-4e6a-bc09-e616e826e0b5",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "107fc018-15f6-46c1-a23b-3f264295a0b9",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "6a0d2e3b-3e96-4c3d-843f-977302cf86fe",
        "cursor": {
          "ref": "249a7d6f-d5ca-48ac-8f70-13c46b31938e",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ec3194d4-f4ce-448a-93b5-593f67fbc828"
        },
        "item": {
          "id": "6a0d2e3b-3e96-4c3d-843f-977302cf86fe",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "42de4ef9-44f7-4612-9525-148d0bb37403",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "a76eb0a4-8fe8-49ba-9fd7-2f1571395740",
        "cursor": {
          "ref": "035a7aea-4650-447a-a964-205c68655771",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "52d1871f-8fdf-48ad-a6d3-2d60acdc6e61"
        },
        "item": {
          "id": "a76eb0a4-8fe8-49ba-9fd7-2f1571395740",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ea2fb25e-1027-4fa6-ab4f-cd116b8f7c03",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "e20b3f0c-0215-466d-a17e-ae5e538d9326",
        "cursor": {
          "ref": "d3375d3d-74fc-49d8-a907-6449fd8bf2aa",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7b044428-790f-4bdf-a9c6-c6374f1e9697"
        },
        "item": {
          "id": "e20b3f0c-0215-466d-a17e-ae5e538d9326",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f45c603f-3c58-41b8-9345-34695e421f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9b62ff-3a45-4276-a669-05bb598bce2f",
        "cursor": {
          "ref": "c7dfd339-5127-40c0-ab85-556c72b39e0d",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1fa3e3a6-b280-4094-b91f-623065edd87c"
        },
        "item": {
          "id": "de9b62ff-3a45-4276-a669-05bb598bce2f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9ac8ed7a-2364-4116-9780-f9e643652558",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "df2538d9-e4a8-4f53-a365-a97133d35695",
        "cursor": {
          "ref": "ae3353bf-8147-419c-a5c4-e68b011f34e7",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1ec060e5-addb-4922-9be2-ea3f75390074"
        },
        "item": {
          "id": "df2538d9-e4a8-4f53-a365-a97133d35695",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f0f76d47-ac85-4ba5-8bce-94fbaf44b887",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "ae688fb8-63c2-407a-9404-c87edcf36e83",
        "cursor": {
          "ref": "9906a4a4-04a7-49f5-ba98-9df42d653e11",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6d4229c5-57dc-4464-a24d-767cbbcd7b6b"
        },
        "item": {
          "id": "ae688fb8-63c2-407a-9404-c87edcf36e83",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "85447961-b771-4f26-8a05-652b7be0bd29",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "d4bf9f8d-ebcb-4b61-a55a-970dd531c320",
        "cursor": {
          "ref": "fab19a88-4d75-43e5-acc0-f8d3c6d4c62b",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ae959a8c-6ead-4da1-90af-6cfc5857eb34"
        },
        "item": {
          "id": "d4bf9f8d-ebcb-4b61-a55a-970dd531c320",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "997933f1-1755-4af5-9125-bd72bdcdf4b7",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "c12037cc-a2cd-4604-88eb-6f0d94350463",
        "cursor": {
          "ref": "7b10d090-c491-4ba0-aa74-775ea7aaccb5",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "39791379-5a1c-4b5e-a5fd-cedaabc008c3"
        },
        "item": {
          "id": "c12037cc-a2cd-4604-88eb-6f0d94350463",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bfcd111e-1354-4eb6-8042-3dbeea95fb75",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "dd889459-d49a-4e58-8a13-8123ca6848a7",
        "cursor": {
          "ref": "d86ad5c3-d593-48d5-92a2-4b6a2d32d215",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8bb32738-bd45-43e9-a8de-0b6fd98fb8fb"
        },
        "item": {
          "id": "dd889459-d49a-4e58-8a13-8123ca6848a7",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a229586e-411d-4b10-b995-0091d84a36fa",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "1e972db8-a3c5-4fe1-a967-bff79bd1bb2e",
        "cursor": {
          "ref": "3939d823-e78f-48d0-826d-6ee61045672d",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9af419cd-3da9-449d-bd90-aeb1e1907274"
        },
        "item": {
          "id": "1e972db8-a3c5-4fe1-a967-bff79bd1bb2e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "14b1f623-bff7-4d69-b2ad-3ff06e3cb275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "594ec76a-22cd-40c6-94e7-dd688199eb96",
        "cursor": {
          "ref": "8da7dfef-2634-4451-b63d-23554fd3c3cc",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f56e4899-1c2c-4b18-9337-a9d458812edb"
        },
        "item": {
          "id": "594ec76a-22cd-40c6-94e7-dd688199eb96",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "68cb9ada-66fc-47b0-b504-898d33c0f4e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e5d13d-e9cd-4d16-97f6-7dabf3dd5bad",
        "cursor": {
          "ref": "5d010981-0871-4847-a752-eb6729268427",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "21a26a20-443e-4838-a2c9-dad48a460d5b"
        },
        "item": {
          "id": "b0e5d13d-e9cd-4d16-97f6-7dabf3dd5bad",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9073c15d-5d1b-4b0f-8f6f-d3f588377dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4456656e-f9a3-4d3c-bcdb-59cb7dbbe370",
        "cursor": {
          "ref": "0c242098-2459-4e90-af7c-fd4928df76cb",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "be28af73-fd21-4877-92ad-83e6efafa4a2"
        },
        "item": {
          "id": "4456656e-f9a3-4d3c-bcdb-59cb7dbbe370",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9940b0f4-0d63-4bea-99b4-393aa0ceaec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e7f7e9-d8f1-4711-b3ba-bb26da29e76f",
        "cursor": {
          "ref": "29048786-67c6-451f-ab7d-f11f758578ef",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b5952d4e-917f-427b-83db-0bdda8bab096"
        },
        "item": {
          "id": "08e7f7e9-d8f1-4711-b3ba-bb26da29e76f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "406f1e11-ee23-410b-9934-9596481bd5bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a30d24f2-e4ee-4d55-a8ca-523bc1dd7036",
        "cursor": {
          "ref": "be4883e8-b2df-4353-9072-31b4f6647ace",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "49bba79a-c54b-4857-bcb3-cf1fb99159f0"
        },
        "item": {
          "id": "a30d24f2-e4ee-4d55-a8ca-523bc1dd7036",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "177ea4dd-44c6-49bc-b1ed-cce7f5898489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c85e9ce2-aca2-4b77-af49-afc301bf5ed3",
        "cursor": {
          "ref": "fc993278-5a9a-48ec-981d-893f49e0ad71",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "5ffac862-a07a-412a-ae4d-1b91202e96d3"
        },
        "item": {
          "id": "c85e9ce2-aca2-4b77-af49-afc301bf5ed3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d77a37b9-16ea-4b24-8bb8-6629e41e83f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce3f9cd-a247-4763-93ad-7992e7f6298d",
        "cursor": {
          "ref": "2379de00-f610-4a22-a0f7-f88e38e8d42b",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c37ef48c-28c3-4fca-bb3b-751957e06104"
        },
        "item": {
          "id": "3ce3f9cd-a247-4763-93ad-7992e7f6298d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "45e68924-3639-4c62-b612-f88872442d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08302c32-0574-4bfb-aee7-503047bd572d",
        "cursor": {
          "ref": "5fb1fd9c-c9ae-4f8e-ac9b-4c86677dbaf0",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "42d30b5a-1871-438c-960d-8fc52c2f8183"
        },
        "item": {
          "id": "08302c32-0574-4bfb-aee7-503047bd572d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6385a252-bd8c-4c67-ad11-c9e13cf4211c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e694b1ff-e508-4e5a-b7fe-1a61db2d6b1a",
        "cursor": {
          "ref": "12b28a4d-9d5e-44a5-b123-f5484b5efcd7",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a7b2db6c-e6ab-4e19-af60-79d042159215"
        },
        "item": {
          "id": "e694b1ff-e508-4e5a-b7fe-1a61db2d6b1a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "3fdfecbb-2a15-42f0-8a71-0202ea9bd53c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bee9712-3a38-4606-8223-bc263e182e70",
        "cursor": {
          "ref": "6920ff1f-c01c-4eb7-9589-0975c817a506",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "fa9c0c1a-105c-409b-95c5-eb3f5701d850"
        },
        "item": {
          "id": "6bee9712-3a38-4606-8223-bc263e182e70",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5114c7f5-6fa7-4ba9-8ac6-27284e123e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de256294-34ae-4523-ab63-e55d74fcc7ac",
        "cursor": {
          "ref": "1094a873-a206-4680-812b-ad1cf3ca20b8",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b97c3606-850b-47e1-b893-8fac19a957ce"
        },
        "item": {
          "id": "de256294-34ae-4523-ab63-e55d74fcc7ac",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f74144e2-b43a-4ed6-98cd-dbaa2dd72c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c379262a-ee19-4a0e-9532-3bda376ced45",
        "cursor": {
          "ref": "308c5212-3dd1-4fa2-9a71-b744a0d1422d",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f0f4d492-1418-4c6d-a8cb-c6ba242b6a99"
        },
        "item": {
          "id": "c379262a-ee19-4a0e-9532-3bda376ced45",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2c20d16b-19a7-415a-a06b-8631a21470dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e395d9-c924-4376-b46e-a9bbed8419f7",
        "cursor": {
          "ref": "8ee3483b-dc6a-41f2-9020-25ca0c9f82cc",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a1334f8e-ffbd-4378-b87a-2fdae6bee401"
        },
        "item": {
          "id": "94e395d9-c924-4376-b46e-a9bbed8419f7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c7dcde55-6eba-4982-8659-1911c3040a00",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "82fb6ce7-2c43-4921-b481-f316ef2dbb1f",
        "cursor": {
          "ref": "9e9a37f2-6c7c-4a19-9131-45c0e78d9d47",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7f422e62-2f92-4eea-92c4-905f6a7b9c09"
        },
        "item": {
          "id": "82fb6ce7-2c43-4921-b481-f316ef2dbb1f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c2d4ad77-41c8-425d-bc58-aaaf6cde0293",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "207d54b8-dcec-4858-9130-b5db6bf65896",
        "cursor": {
          "ref": "f7fe8f69-d5f5-4e2d-bd53-acd2161ceec7",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "036eab00-c14d-4588-bb09-93a5ea95deb4"
        },
        "item": {
          "id": "207d54b8-dcec-4858-9130-b5db6bf65896",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "09656dfb-bb93-47fb-8775-ae89eb60bbd6",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "b74995a4-1e3a-4945-aa5a-6ae1a0a4e371",
        "cursor": {
          "ref": "dd6dde65-0a99-4f19-9219-a3bfcb6719c5",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "557e6f17-975c-4a96-8762-258f2551b60e"
        },
        "item": {
          "id": "b74995a4-1e3a-4945-aa5a-6ae1a0a4e371",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c138d2d6-9905-495b-a277-f3ab5535096d",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "204fcd1b-735a-4de9-9e8a-87717b0480dc",
        "cursor": {
          "ref": "52e4a74f-1dbf-4e3f-be36-45be4ca41b14",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6916e266-0633-4ed6-bcee-738dd96f89de"
        },
        "item": {
          "id": "204fcd1b-735a-4de9-9e8a-87717b0480dc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e46e548d-9ee1-40e5-9149-04949a4ab793",
          "status": "OK",
          "code": 200,
          "responseTime": 249,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "39f44f46-d86d-4287-baf5-5ce15f7c4c76",
        "cursor": {
          "ref": "4b4b92f7-34ff-4143-bfa6-88d7c40686db",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "98bac1f0-b62c-49ef-a415-c8ae2ea68957"
        },
        "item": {
          "id": "39f44f46-d86d-4287-baf5-5ce15f7c4c76",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "618b7f20-d299-402e-a5b6-28d4b44aae5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6541b9e4-0e28-41a7-ab12-821a6f018d70",
        "cursor": {
          "ref": "0c035ab4-46b1-4a72-8543-193a55e0d37f",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3fbfaa7a-3e8b-41da-b2f5-bf05ddb67ce4"
        },
        "item": {
          "id": "6541b9e4-0e28-41a7-ab12-821a6f018d70",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f942fef3-d2d5-48e8-936e-849ff76bf073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d45f50c-357b-446a-bcc4-ddc44146d65e",
        "cursor": {
          "ref": "c46f936c-ad2b-4bee-8016-dc25ab82fcf8",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "72085699-f1ac-4572-8b27-1bfa27e758f1"
        },
        "item": {
          "id": "5d45f50c-357b-446a-bcc4-ddc44146d65e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "214ea8a6-1d09-4c9e-9362-3cd684185eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8309b64c-dc96-4c46-9711-d2590e2ce252",
        "cursor": {
          "ref": "3442842d-7444-4baa-bc67-bd9e1181bac8",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d9a83e0d-7e8d-456c-9978-b6dbd51d811e"
        },
        "item": {
          "id": "8309b64c-dc96-4c46-9711-d2590e2ce252",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "556cd766-c540-4e4b-ab76-1f80d4140bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5564657f-9f1a-4c58-9ade-c8d24f39b965",
        "cursor": {
          "ref": "d9a417c5-83cd-4b3c-9f1c-b75fea741da0",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f10bd47e-2a13-4c42-85dc-10a9f8ce0492"
        },
        "item": {
          "id": "5564657f-9f1a-4c58-9ade-c8d24f39b965",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "87b28926-21f9-48a3-97d2-055fe14c89a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9583f431-ff4e-4d2b-893d-02a6f1301d22",
        "cursor": {
          "ref": "bb2826cb-3980-42f4-8396-505ef4925e55",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "28c855b6-14e7-4266-8a74-75b15bb6020d"
        },
        "item": {
          "id": "9583f431-ff4e-4d2b-893d-02a6f1301d22",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7f13dbe6-3fbc-4013-b7af-c05824f38fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07fc9d72-c1c5-4faf-9797-05b694f67196",
        "cursor": {
          "ref": "080fadf1-0308-419a-904e-bf4c7331a4e9",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3cb1ddf7-fa68-4936-b09d-cac5499f2782"
        },
        "item": {
          "id": "07fc9d72-c1c5-4faf-9797-05b694f67196",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "875fccab-79f4-4566-8696-d205f5bfcd24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2597c371-29c8-44cc-afc3-8714bcf43aba",
        "cursor": {
          "ref": "a01ce9b0-93ef-489f-81bd-55820fdf5513",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "efc0ad22-4897-481d-ae8a-92844c51fcb0"
        },
        "item": {
          "id": "2597c371-29c8-44cc-afc3-8714bcf43aba",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "2be5b496-abc5-4079-af3b-4066a5f8d095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d90b1c7-15dd-409a-8afb-2e341da3bf92",
        "cursor": {
          "ref": "a074902b-61d2-41ce-8256-c2e892c56f4a",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "0b2fc85c-4d28-4506-a65d-5ee248fcbec3"
        },
        "item": {
          "id": "2d90b1c7-15dd-409a-8afb-2e341da3bf92",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d2dca5c4-307e-469b-a750-fd19ef6e55f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09120c2c-72a1-4699-9848-d35544eacf57",
        "cursor": {
          "ref": "87d5ea03-9f1a-4ea8-9149-7832ce6011a0",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "aa3eabf2-10ff-4445-b41d-e4a5261105a4"
        },
        "item": {
          "id": "09120c2c-72a1-4699-9848-d35544eacf57",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0f298c21-31d8-444b-8ef4-437aed4cb7dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f7b343-2d84-40bd-b207-02238b1195f8",
        "cursor": {
          "ref": "c4612940-2e51-41b7-8f06-b5bd3933b0e7",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d58677d1-c60c-4adf-b3c9-159cc3d84aee"
        },
        "item": {
          "id": "39f7b343-2d84-40bd-b207-02238b1195f8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "42f2263a-4eec-472c-a172-80ecf5585188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f4f44c8-68d2-4fd4-bc1a-a794a4428841",
        "cursor": {
          "ref": "936bfa6c-a40e-4933-80c1-112d76c76b84",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "0348723b-b4ea-447f-9111-013cbf274fc9"
        },
        "item": {
          "id": "3f4f44c8-68d2-4fd4-bc1a-a794a4428841",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6f1a5fa8-2bb8-4e52-8ea4-a086a5b65fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3cd0ae2-e005-4b49-b96e-b22a641de7b2",
        "cursor": {
          "ref": "7a1f140e-95fd-4e0f-8557-779c339f0b68",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "18fbb8b9-7405-4f60-ab24-9925275f9c35"
        },
        "item": {
          "id": "d3cd0ae2-e005-4b49-b96e-b22a641de7b2",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "31021cba-34cf-436c-a0aa-bf482df92578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9349fb0-44f1-4c3b-ab8a-f94c054324d7",
        "cursor": {
          "ref": "7f61353b-1726-4dfd-96f6-c3464d201326",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "e23f90ca-1c1a-4cd1-8164-31cb75ab3bfd"
        },
        "item": {
          "id": "c9349fb0-44f1-4c3b-ab8a-f94c054324d7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "dfcf4534-bc37-4d2e-bc54-1a28dda6c5d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b97c0a-201b-4252-a188-133190a32010",
        "cursor": {
          "ref": "a6910c39-de5f-4e97-a43d-ac896749a952",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "198505e1-2c51-4d81-a1b7-db0e734c1772"
        },
        "item": {
          "id": "a9b97c0a-201b-4252-a188-133190a32010",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f23595ed-7958-4fca-9f5f-165ea9c6992c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb66085f-2f2e-49e1-8664-1bb116e74a24",
        "cursor": {
          "ref": "ab80192e-9cc7-4a08-b2fa-a1c964efa8d8",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "1f92acac-03da-4544-9e7c-2689f07b4992"
        },
        "item": {
          "id": "eb66085f-2f2e-49e1-8664-1bb116e74a24",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "aafce500-d720-448c-9326-ad3d05cde2e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b3a5c9-fb67-40a1-a8d7-e4b255b5153b",
        "cursor": {
          "ref": "af77cb8b-69a8-4b38-9a36-d2dcb4f9ebc3",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "e8dd329f-1aeb-40b3-81a8-57279453b9ec"
        },
        "item": {
          "id": "f0b3a5c9-fb67-40a1-a8d7-e4b255b5153b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "72b36554-12f7-4378-9f3d-2a57c51af0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97cde504-eda0-40dc-a964-c42ef1fc5c83",
        "cursor": {
          "ref": "b3f7ea21-5ff5-4c6a-8ed8-79a0519c083f",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "e48e6c81-4eba-4b7a-8575-9342a52bf7bb"
        },
        "item": {
          "id": "97cde504-eda0-40dc-a964-c42ef1fc5c83",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "63b813ad-a990-45fd-945b-1ff838975bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca337f53-1b7e-455d-a0c7-3fdbd4d1955d",
        "cursor": {
          "ref": "355be6a1-8557-4e2f-8f47-b9ba0b4c9ac4",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "81245b81-08fb-4da3-b5a9-b4cd4132e91d"
        },
        "item": {
          "id": "ca337f53-1b7e-455d-a0c7-3fdbd4d1955d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "3f2152a0-1ccd-4c27-a5f5-a049bed75b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9911f6c7-c385-4f6a-b209-e6019e0b5ea3",
        "cursor": {
          "ref": "8a5942df-998d-4c94-9a0e-a5689d46c1cd",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "c7481d5a-d016-4e0a-bd5b-ae3f78310b03"
        },
        "item": {
          "id": "9911f6c7-c385-4f6a-b209-e6019e0b5ea3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "59e610b6-f34a-4df3-b02e-b873984d4dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bccd599a-4eec-4b55-8a0e-e0017514f344",
        "cursor": {
          "ref": "227563cf-5975-4699-9828-e0706db1d582",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "8c108a19-3735-410e-bb88-d6e7b61f4865"
        },
        "item": {
          "id": "bccd599a-4eec-4b55-8a0e-e0017514f344",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1489098d-98bd-48fe-b362-8818e0614ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a717af0-85cf-405f-84aa-7c093e2d9f15",
        "cursor": {
          "ref": "fbe1d601-817f-4087-93eb-3e785e3cf663",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "c63c2753-1a22-4b68-9ad7-5417aafe93f7"
        },
        "item": {
          "id": "6a717af0-85cf-405f-84aa-7c093e2d9f15",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3df6f3eb-9cb4-486a-afd3-8cf66a7c8d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa2c17a-c677-42dc-80ab-ad559019cc8c",
        "cursor": {
          "ref": "1e695fe8-9747-48d9-a3a6-6698df548549",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "791214d1-2d3e-4c50-88a2-a40d4de23424"
        },
        "item": {
          "id": "cfa2c17a-c677-42dc-80ab-ad559019cc8c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "38ffe449-2a0a-43a0-9ae7-9e31689360a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1d1e30-bcba-4856-baf0-ab01048ec821",
        "cursor": {
          "ref": "6e7f4616-78ae-452b-9d9b-f6e49503a99d",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "3a25a9b4-5835-4367-a854-d0014c15cbb9"
        },
        "item": {
          "id": "de1d1e30-bcba-4856-baf0-ab01048ec821",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "849fb015-9857-457f-95ff-96f15ad7a7c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7734bd-952a-420c-8bf1-23c84a06eb1b",
        "cursor": {
          "ref": "f8e07334-b0f6-49ec-95d4-f99c04fc6cd4",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "a245cdbc-002d-493d-a9dc-15c66fa6bc80"
        },
        "item": {
          "id": "cc7734bd-952a-420c-8bf1-23c84a06eb1b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "93bd0396-45e5-4336-b12d-dd057e6a8515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef7821f-a5d8-4b0b-a75f-645385978e80",
        "cursor": {
          "ref": "8738783c-996f-4618-b3d8-7875303c0a24",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "98ad0ac9-ae93-4740-a988-9a23656a8743"
        },
        "item": {
          "id": "2ef7821f-a5d8-4b0b-a75f-645385978e80",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4500f68b-ee79-4713-a254-9fce1700a8e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1052a9a3-bf47-45ef-ac9b-b6ac848b1687",
        "cursor": {
          "ref": "14e02632-1662-4654-8496-3eb5adb66171",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "670978fb-166d-40c3-bdc6-702dd186c099"
        },
        "item": {
          "id": "1052a9a3-bf47-45ef-ac9b-b6ac848b1687",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2acbe83b-19e5-4ae2-bd2e-afe15671f987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69988355-59e5-479a-b37e-8d30db444956",
        "cursor": {
          "ref": "04982a3a-a4c1-4774-97c6-8b871ca4a220",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "8f575cb1-9b50-4666-b728-8d37217f507e"
        },
        "item": {
          "id": "69988355-59e5-479a-b37e-8d30db444956",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "aedab904-76a7-41ae-b5bb-865f5713a28b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb6aace-e00f-4a34-880e-0ab5a8d0e6eb",
        "cursor": {
          "ref": "037d6db1-3a21-4aea-908d-1a53167ec327",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "bce8459f-1154-4950-aa47-8e8a97d6ae60"
        },
        "item": {
          "id": "8fb6aace-e00f-4a34-880e-0ab5a8d0e6eb",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ffb44e95-1eff-4189-86c0-8eaf75385aa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8141e5f9-bac8-4612-a0e2-2dfba3231f65",
        "cursor": {
          "ref": "19755220-c0e8-4aa5-b5e0-16cec99cf0ab",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "e19b689b-70ce-4f11-8f48-9ca1849b42e5"
        },
        "item": {
          "id": "8141e5f9-bac8-4612-a0e2-2dfba3231f65",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "927c3d73-0a2f-47c6-8003-df916c9ed375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a971f0ed-d02d-4e10-b57d-3466180a47e5",
        "cursor": {
          "ref": "7a85cbfb-10d2-4d79-bb89-212620dac886",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "ba6f7105-de9f-45f2-96bb-063d00b03782"
        },
        "item": {
          "id": "a971f0ed-d02d-4e10-b57d-3466180a47e5",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b4356246-a2ff-435e-9c3b-20567501dfe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3d6d047-c779-4022-85ae-9c69c47ff2ea",
        "cursor": {
          "ref": "a608ba1f-e142-46bd-b2e2-844eb04b6254",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "22cf302f-639e-4d4a-b991-52ea8aae0ad2"
        },
        "item": {
          "id": "b3d6d047-c779-4022-85ae-9c69c47ff2ea",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d8eb7dac-8401-4822-abf2-8528f5ba3508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb33164-79c2-42a9-b587-0802935202ce",
        "cursor": {
          "ref": "d63da008-a21b-4f68-8725-41629bc7560f",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "cdd949a9-e4ff-44c5-951e-ceef9f19167c"
        },
        "item": {
          "id": "abb33164-79c2-42a9-b587-0802935202ce",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0439b1d1-f0b1-4d48-adb2-6925fabce9e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc540db9-5c65-40d1-b918-6fcc24dc90ce",
        "cursor": {
          "ref": "c914b98a-6c0c-4950-9881-cb9f42bdeeb5",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "bcddffb1-ed52-4d8d-8327-c8ccb003c5eb"
        },
        "item": {
          "id": "bc540db9-5c65-40d1-b918-6fcc24dc90ce",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "70eb36dc-b6a8-4a9a-9a4d-3a21c44e24b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19b8d1d-9ccb-4749-8626-e2dc8b47654c",
        "cursor": {
          "ref": "7eeea0f3-5a99-4dc0-a8bd-f1e70d845935",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "e8ce7b13-b927-4aba-85f0-49845ad94869"
        },
        "item": {
          "id": "a19b8d1d-9ccb-4749-8626-e2dc8b47654c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "71b90b45-abd3-44bb-91be-b42be63db7cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0ccb28-1abd-49be-8c88-54f7814cdef9",
        "cursor": {
          "ref": "e53cf1dc-9647-4043-8962-9f84255c1563",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "87ebd018-1145-4f92-a6ae-c0d340258983"
        },
        "item": {
          "id": "8f0ccb28-1abd-49be-8c88-54f7814cdef9",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b7f4679b-e58c-4ce9-81a2-5cb9c90be36c",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "3d5f4af2-8b8c-463c-9efc-3e76fa502a34",
        "cursor": {
          "ref": "53820d55-18e8-4a1a-b5ca-06877294761e",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "7b170716-b313-4846-a6a4-56ce6b57f341"
        },
        "item": {
          "id": "3d5f4af2-8b8c-463c-9efc-3e76fa502a34",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9f3502b3-31a5-464a-92ea-40e152c834ae",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0719e9c4-ac10-414f-9b2b-8ba05644c9cd",
        "cursor": {
          "ref": "bcd85969-abcd-4552-af87-99cd04a6c8e8",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "14ea2690-19f4-4648-859c-71530400e7ad"
        },
        "item": {
          "id": "0719e9c4-ac10-414f-9b2b-8ba05644c9cd",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3975fd9f-bfc1-484e-a581-a9289ef5d58a",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2692a57b-d9ca-4ac4-884f-f92fceb57991",
        "cursor": {
          "ref": "c92ff957-bf28-4b5d-98ad-60739b70ac5d",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "43c5292f-eafa-4926-99bf-876891b9c709"
        },
        "item": {
          "id": "2692a57b-d9ca-4ac4-884f-f92fceb57991",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4a8339b7-faf6-456e-9856-0b70dac44a86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2692a57b-d9ca-4ac4-884f-f92fceb57991",
        "cursor": {
          "ref": "c92ff957-bf28-4b5d-98ad-60739b70ac5d",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "43c5292f-eafa-4926-99bf-876891b9c709"
        },
        "item": {
          "id": "2692a57b-d9ca-4ac4-884f-f92fceb57991",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4a8339b7-faf6-456e-9856-0b70dac44a86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33c44c0f-7236-4600-83c5-ef261188e7fa",
        "cursor": {
          "ref": "ad7210cc-af35-4655-8120-6d9be099fd35",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "450055bd-de13-4aa8-af71-729199726cee"
        },
        "item": {
          "id": "33c44c0f-7236-4600-83c5-ef261188e7fa",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a5b9ce48-a8a7-4c12-90ea-4cb09c8433a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba29cf1b-6591-48d4-b398-5e23c195c1e8",
        "cursor": {
          "ref": "d28ca1d5-f3ca-4359-9a93-8b688941d6be",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "447d600c-3d88-45f6-a677-e3c20ebe7948"
        },
        "item": {
          "id": "ba29cf1b-6591-48d4-b398-5e23c195c1e8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a4f322ad-4398-40b6-8624-af86446cdf87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}