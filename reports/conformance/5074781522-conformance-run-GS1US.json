{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c6818953-33a9-47c2-b7bd-1fecad1b0d8b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7896e733-3376-4ab5-ba79-d910a525f8f8",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "306fbab2-a1ae-4b82-a356-3b068752de75",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c5c241b1-9207-46f0-a21e-400b0a33a1d9"
                }
              }
            ]
          },
          {
            "id": "597c210c-9a16-42f7-9500-c123b942c82e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ade73221-37ac-4275-8ede-cd200e5e8c42",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "dcbcfe9d-57fa-4bb7-a0e9-9f845fca6cb3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "eb2ff68e-fd58-41e1-bdfb-ab0e4394f006",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "78712b9d-c408-486d-b118-8e5e7e3d0075",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4c8703fb-faac-4145-8c10-da386b36ab8e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "87eb053d-9049-4d3d-971a-bd9385218474",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b2d361fe-0919-4b7e-b04c-717128bb5516"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "84007897-1655-4852-9e6b-a7e7701e185c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "89134f6e-a153-412b-b1ac-59be225762d6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "de922d20-4d2f-4013-94ba-948e44716176",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c73cea60-e0fb-4518-8765-b6bf531289c3"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a29f7151-0240-4630-ade7-279f16ed2f94",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "26767022-8423-4aa8-8333-accee2863e04"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e00dce81-9573-499c-961e-9d2046bb4744",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7bfbe50e-7b20-4bca-8d39-168e2b4bbd4d"
            }
          }
        ]
      },
      {
        "id": "2a6d4b6f-ea87-418d-9bf0-ad0718284cee",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9dca8bb7-006c-434d-8b7c-d9865d136aef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2a9968fe-760a-43ff-89e8-605bb358586e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "175d8ed5-5f26-4650-b652-ae8d9141fc91",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90bff7c-edd0-4878-bce1-64d736f45188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b58740b-2029-4c09-a44e-196c12fb028c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac0bd3bb-8dc9-4648-99ba-748a13093cb7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36024d65-5573-4dba-acdc-bd50ddfdb8a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d6200bd-feee-47b5-aecf-2f22855edf4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c04df03e-aa6e-41e6-8686-785cf328f156",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a2525a-e49a-4378-96d1-bf4e5ff2b513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2971439a-89fb-45b7-9524-1eb4c54630a3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0dd1573d-9cb2-48cc-87e3-a60947a00d14",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "89a704b6-10ba-442a-9fbc-1ab8cedb0652",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7a4280-cc3a-4360-a0d6-bb56d0103bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b7c1776-17a1-425b-ab3c-7f102fbc86ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2114835-924b-451c-9dde-c589e49f9f56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e21cea-1b59-42cf-855f-149440eb7c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86404d9-1ab2-48c0-abc3-817e6b27f4b3",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "555119f6-9cfe-44fe-8c68-690b8824dc82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e72d4bc5-2577-4edd-a6f2-53b6ea217419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f06f539-9dec-4f7c-8f07-43df58739515",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "64e837ef-c0ac-4cbf-8b58-4e76ca4b6078"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d0076962-738d-4a49-9681-459016461e8d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "956c27e4-446c-4377-8537-8394fb9ba189",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d3e5527-9823-4dd0-ac0f-5b13fd188519",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9e63e0fa-51bf-42e6-8775-c1b43cd8d712"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6276edec-7121-49cb-86cf-3f6052c96bde",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "d3dcef7d-c526-4fc5-aa3c-e274a66d1c08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d5719f7-3535-4379-9e15-e2f58d513545",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4352f4b3-a241-4d2c-baa9-7a11032c2ccf"
            }
          }
        ]
      },
      {
        "id": "c2030873-d141-4e35-84c4-3badd78487ff",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4ff6c39e-51ea-4934-a877-9294353db958",
            "name": "Negative Testing",
            "item": [
              {
                "id": "063a9294-64ec-44a0-8e60-9d25fe55a3d3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "173739cd-23c3-412b-961a-d3b7390e63bd",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac1a441-284e-4e9c-b680-8a5c2f5b0455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e82aa8c9-0a63-459f-9160-17132b9e146e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d23364-7d10-4215-ae03-8a8e73935936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c6136c8-d144-41ea-842b-5519a168eaa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0870c1e-1e86-467b-8654-0cd23ea68b28",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3c33d2-400e-4295-9aa1-3a9229f41650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56e6afd7-a9ca-41c6-9ecd-267edecb99ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07eac4a7-db4b-465e-8bb8-c8be1f537de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc7f1242-77da-4cbd-b309-e665c211af16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83fbbebc-71ab-48a5-9aef-77db4fbcfb0a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e67a92e-156f-4096-83fd-b049f4425664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2dcfe28-4a53-4166-b545-638bdc7b25df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b10b190-25c2-40a3-afef-760a7a758c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7c585ea-59d1-4393-b81d-5e77a93ad7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5989dc4f-431e-4d06-9fae-0fb8d699e03e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a9932c-8506-4e7e-b15d-b1ee386593da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0c45d4e-3eea-4ae5-95eb-9f0c7ce3e00a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a067a3f3-c425-4a1b-bcd3-e3aa34d90716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98209d28-9975-4005-9cb8-9bb562dc8217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fcb2abd-52a3-49ed-a3de-90bb7eba846e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5af21e-b8b7-4f00-9984-650ff58f118d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "170d2ba4-82b4-4d96-95bd-59e4a0311f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f1e138-59c1-48ec-9699-9530cf7bd2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6ba9776-b96d-426e-a887-4b841b6e339e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad58694-daf2-4370-9ad4-552b5c63dacd",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162864f9-d635-493a-8073-9a6fc1fb8c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9372cb3-3359-467d-8838-2d7c93c51605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b07e54-0b9b-48fd-9771-28078290cb32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98fd0035-19f2-410c-b475-9bddd3c7138e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3543703-74fd-4496-b5d0-b4316e59c543",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d27b2c-2024-4e83-804f-d20bcf39e58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73e9f84b-654e-41b1-997b-b911c031ef36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf70779-24eb-4e90-b919-2cd0d0a088df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25ecb244-7aa0-473c-ad83-fe7950e06227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98908252-39fa-4d90-a07f-a76113e6459b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c516dac-01aa-4f33-9563-464816c9164e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8eb08a8-5862-44cf-a0c8-04dcc4b2da3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0dd5928-6231-4233-9d2a-3417de759e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "214ad620-c31d-410a-b5a0-db1965df1c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9840d966-5d64-4bce-a207-7556f9e64d49",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63945604-a9e8-4413-8d7d-9655a36e4dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6432b519-1d98-41eb-8238-097bda44e6e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5567b06-afa3-4e50-8b68-52a8b6b63328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f59a5358-79fe-4f46-90df-1af6fa3a8171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec28a0b9-07bb-41b5-a337-5e8152e80640",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "203f1129-59e3-4f26-b6b4-a89ba0584bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b4197a3-5983-4346-b186-3187e16b03db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59f5cda-bc69-4304-8133-4b03ac60a08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6fdb3405-b7f9-472d-8e2c-49ed0411a6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2daff6bb-1141-4d59-9035-3e7bd3bf18f1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "493ee26a-be80-46a1-9851-e7e2deb24968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2e1ff76-2c99-445c-95d5-dcc3d6d9d8b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24509fc6-ab24-4dfe-8dcb-b901335cc0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d563717d-ef62-4069-a358-10b5381a8a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0365d77f-0487-4b96-8e17-b825c9eb3fa7",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81011f5d-bc6b-4900-8299-d8c3859c2999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd25288-631f-46ac-8612-2de2ce0455f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc1e66e-43e3-4472-ac86-2f2267665441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3edfbd3e-275f-4a02-bcc1-7b34b537f3bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a16a1e-1399-4dc9-b3ff-b9c25166db80",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b7732a-5dc3-4ac1-834e-07790b61e82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7790edde-aba0-418f-9010-8c26d9197b73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8c0285-6ed8-483e-ab30-322abeb06655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "673f35b0-d6c3-4fef-83aa-7897aba8b4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41bd592-bddc-436c-bb22-250fe8f29930",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7957c6-7897-4a74-9988-d1863f02cd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c81d9a15-f4b2-4c83-8b1d-ac4aad0d7b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2fea72-87e7-4094-835c-6a49ec5da2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "070b88dc-ccf5-407b-a3e1-e1532e2e0178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17be7f0-315f-4a7f-a502-566cc074580d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05713de2-32a6-4640-8490-1f1fd77ecb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e875d19-2233-4140-bade-b947070dc191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38498aad-673b-4f34-acea-3e484b8cdadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a67aa789-013f-46ce-94ce-291768a156a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2f1d14-80df-4681-b7c8-1c8bb20aa217",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fbdf4a-dc5e-454e-9f11-ebc829129ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b4bc468-9c28-45fa-b84e-2db2ca752568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0c3419-79b6-419f-a209-5e7cbeda878f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a68e9cd1-e013-4296-81e4-93a151341682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6cfabb9-09a6-4fa1-aed8-52a60f7a88dc",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcce61cb-e0a1-43fb-88c0-424bed19cdfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e027fb-9d00-4ef4-be65-59f8834d003f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491e91b0-5da8-4510-a997-c9a9f42560e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "726dedd4-a919-4228-afb2-b3f4e914e4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ba1d5c-3c74-4a28-8097-1ef456856167",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d733b51-f94b-444c-81ed-e7ed7efc065d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f92ebe20-edf0-4217-bb4e-44d25aed7096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af50a45-bd43-473f-a42a-b0150b567cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "47250b2e-eca2-4e25-86b8-2f0ba2b67db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16365870-648e-4252-a18b-5300376e2afc",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c52c4f1-27b7-4ae3-a263-3bcadd9ccf29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9ea29a9-31c2-4b7a-8052-ed798b6ede26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5a8e06-7b0a-4044-a1c1-ede4534155f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7f985ea-d67e-4603-892c-5eba5f7405a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb08888-83ca-43bf-a2cc-9c95e9acac77",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4059181f-cea1-41b7-bd33-a0c57983b5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e807f5a6-42b7-4996-a5b7-7204934fe086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06eb291-74a3-4dc9-9d23-7cf8af1fca98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af485d5c-4a49-4a7b-a59f-8ba1ee1fd3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c459f201-db03-4dfb-baf6-d75fe6248dd4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c33eb6b-ef04-4beb-b97e-d606778c2f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0315428a-8a1a-4c1f-9c26-409a47b5188d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451231b3-e1b7-4bc0-a327-d220fe6989c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92e8dfce-9e99-41ec-9dbb-1811cc89b45c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0336548-0c76-4c61-bec8-ab3fad9d9ae5",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f928ed-26ae-4485-b1e7-6f31ed8aaf44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61bdf72d-254f-4f56-bc1e-9d9ca6be1971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eee4d5b-1fbc-4c64-a2d0-3f4d34422eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d5e2824-d756-4cb4-9f26-fc43f71b7443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237e9aa2-f211-47ce-bcb5-80207f412468",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5994670-bf96-4466-a191-fb1de9122290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1fb42a1-4e5c-47fa-8c42-8eb63e823794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04707d7a-d13a-41cb-ac4c-41ec5e1a4dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c3c2a66f-1aa8-4b1a-b69c-021040ac268e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111c277f-0883-4ccb-b3fd-6314b673c4a5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567dab3c-1e0b-486f-a589-4d03b70f806a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c971081-44d8-49f4-a16a-d4ba56725277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188b5650-33ba-4001-bcb0-f9ac133922ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "208b45ed-35f9-44e6-8e44-5766af73795e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d34bc4-366d-414f-8832-295596b0a184",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e7228c-2047-4da7-aba7-1cec7812de00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28b2f6b6-124f-4b25-a788-4cbd14290985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7e1d00-271d-4270-ad56-3ab8878bd0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ccc85de-ced8-468d-99cc-58cfb7b091ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d451d2-49ce-4bcc-998c-05bb60ba8a8c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "913707d1-b60b-4a14-ae53-9c88199f684a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "739f9703-e0b2-494b-b6a6-0194f53cb7f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb9ef49-941d-4329-8320-72172f164f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d88b018-aeac-40b9-a8f4-2632e8867d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5928663-dcb8-4878-940d-359676f36d98",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36a6704-757d-4320-93ed-6117a0137faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "babaeaf3-04e0-4396-a7e7-8a47abdad032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef66cfe-4034-496e-94ec-0be4cc614ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfdfd3d9-1a05-4a9f-843d-9d1bd70f3915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cddaee32-c613-4d1e-9c3f-f917105bba75",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5aa7143-ff59-48b7-b921-6aac02cd9f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "555f2cc3-72e2-45dc-b600-b9573195f0af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1529328-228f-4244-8c15-a56e75e6757c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bd8c4f6-5753-41dc-9608-6646c6b0e9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612f5620-2c7f-4092-99d4-6225c486dfc9",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d3462fe-d481-41f6-ab03-027493dd37a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da2a5e04-350c-4d46-b815-f4ad66ea7efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33d0ba2-b2d3-49d1-9f2d-d48eefee84d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a38a5540-b5a6-416e-a63e-b2cfe4eb02c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42107181-c74e-4ea1-b630-b210642f5680",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6007be-34c0-4a59-ae83-2943668ae5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bcd27fa-52c0-46b1-a0e0-1a44d163f421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3a721f-0abd-4736-940a-842f6a0d2136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f975c5b3-b7d3-4ac2-9539-7a0d3a5f4d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14da30be-8b0e-40e5-bbee-16559f78aae8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e9c2b1-41fd-4963-a63a-4b660029a564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9e9fdd3-b9e6-4f1a-b029-8324305263f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb8883a-22cb-4ddd-80e5-292bcc7896d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "01a1c24b-5bfe-497a-8c37-178cc4b5fe8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4451dc8b-674e-49b2-a7b6-e45d3a43fc51",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db559af8-e147-4faf-ac87-272886698094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1abd3502-5dba-4c14-9514-479f58cc0ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3386b1d1-b58d-459b-a432-debbfe958104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cbca250-d074-46f7-b751-5a8fa0c37a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a371a7-f2eb-44e5-8c84-f4cd570772c7",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15361d7-b670-422c-90aa-0b5da95de1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "604569ca-ee9c-469f-963a-205141527a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd572db5-b522-4c96-9b8d-f753015e476f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be997012-3ea8-4c01-9e2b-d9c834943183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d2f6e0-4dae-4319-945c-264aa720287d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6dc28a-8cc1-4e7f-8505-6800ac3a214f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74bef57e-5b95-4e05-882a-b3fb5c230777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e416ed9-3e22-4480-af40-1f86f2671653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "47d2a03e-f935-4181-93a0-959fccfd73a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a79af2e-9a8c-4ace-8271-c30f147b361f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae57870-c2a1-4c01-84f9-ff27e998f403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e835bdeb-15ae-41db-a013-d915c369e584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b005b012-c144-4ace-bfa2-d2653bdf5bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a4018e45-bd05-4331-a296-4163cdec3bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0776d07-be72-4680-9e6a-c1f70b21000c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd1f63b-117e-49be-8f8a-9a52d628fea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bab3465a-ff49-4bd2-9302-ad4246ada96f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b24148-44a8-4791-9549-c7d4d0d67eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2e59dd31-b958-4d73-971c-fcffbd4fc6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07cdc63d-fbb1-4905-8edd-71fad94b0b8d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9561199f-efdd-4294-bbcc-23511bf61a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca1b5983-7bc5-49c0-9490-43829450c5bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9eb67e-cd90-4d27-932b-a95abbf51682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "277a3391-3cd0-44f0-b1ab-8befa4e03f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb2fe56-f3bc-49d5-a63a-2782fd7603e3",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c680ad0-7fa9-4deb-89b3-dbfd2dc95091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92fae9c6-d544-4b9f-ace6-1a9e878e34d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7a86d5-cc53-433d-adb7-b7988cdf1ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "606a45eb-b4fa-4822-994b-978347826c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309b2fc5-c450-4d9f-8d81-2f202af6f625",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3bd37fa-3388-47a4-be50-b7c159f8a891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ebe855a-5916-4b45-a732-1432f75facb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeef1a7c-993d-436a-825c-5e127de4a848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "944bab8a-e4d6-4ef4-a25d-f0619b287c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69207a8-bd47-447d-9b83-24580345a6f4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0686c800-75bf-483a-b8f4-9ef792f484d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "346da9e8-342e-43eb-95d5-de273e4a025f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b624c6-0c53-4806-bc45-648cc2a8baba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "13b62042-e7ed-4af2-b03c-fd0a97d26709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b42af28-2e4e-4d11-95fc-d0581a2e6284",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b53393-792d-4318-be2c-0e341f73ff4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4ecf0ec-a328-482f-938a-7898e01b1c48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c31acd-3641-49ec-a6ce-e57a6a6e6482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "93051bbb-4d92-4423-b302-fac3c73b8630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0d3856-9871-4f6b-b982-202b51b14516",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a80a94-acb8-49ca-9f05-43897fbade75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "400e5b21-1db4-452b-a964-57d4d9ec8bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ae25d7-8fad-4db9-8f8b-8f72fb446b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a63b94a9-b421-4f01-bf2f-8e6cfd7c3297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dbabc96-8418-4d75-be73-5bddebbc2823",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8706fef4-094f-4795-8439-06160aafd220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c33fa8a-a505-4c01-9de1-27245cd40235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9225dee7-c6b2-43bf-9247-a55a87fafa45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "19b0ed97-8bb2-4d95-9d7f-0869e12fca96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050c82da-acaf-4d33-a79f-22756b949655",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9d40ecd-0e90-4f07-b151-b92153e69256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "050d51b0-6aeb-4e8c-92a9-599da7a409fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27077e45-bf02-4bd6-afff-280122ae4700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b12e8c0b-feba-468d-aa09-659fbbc30679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5101d02-e1ef-4fd3-b56d-8bfcb76be038",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "233d8faf-51fc-47d0-a833-0910c4ca905f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21850129-8333-4624-a5b6-0904a6d2645c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d982ae4c-e75f-409a-8b3c-3b4926455b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d03e8739-e889-4f90-9da6-8e74a83eb70a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe27594-a15f-45b0-b069-77f11fc0659e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27902a67-fa20-4ce3-bc2a-6ca5d51746ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac6153d-4242-4da3-9605-00a0cf1c0f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "680ca4ed-17d3-4f6f-9c70-7324ce9f7a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2da70cfc-6c17-4f87-9900-1911a20d4883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cef852e-0554-42bb-95fa-b3a964da3f80",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4477b5-4c4f-43ca-9622-e06083f1134d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8af56c25-df29-4731-b4ea-61fbb57478e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489780ff-1c88-455e-8f64-2febaaa0a030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "00af6d08-d6d6-49aa-b1c1-90d9821ea2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c1fbdeb-7ddf-4531-8723-f27256e01c4f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89207f44-4334-4ff3-b965-f272eef5d1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c25ffd7-a063-4b6f-b507-d0b99d5f6cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0443943-0d31-46cd-be1b-a2013a5bd7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "884c066c-a08a-4f8c-afb7-62839bcf57b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7f9236-485a-4c7a-a758-b53791fc73ba",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e320b7e-2d8c-474f-8d55-ee6829a18ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cbb091e-68b2-48a4-944e-2796b78faeba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3f8789-dfb4-4bac-b84f-20d581841c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "53dc9f20-2a7e-42d5-ae77-42fb3fd30bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996ae965-02fb-442d-8b95-84f95034962f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "add37d56-bfe9-4657-9147-2b7778cfffe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4948e597-53be-4023-a3da-2167081721fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f51fc0-99d2-401e-a0d2-76286d0a759c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "330b3a3e-5c86-4197-912f-549a08f7861d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d8cc56-778e-42e3-ace5-08c3a7cef68a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2864b07-4ba3-4f4a-b2b5-c31115b8010e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfe0d113-583b-401c-9592-cac587802b9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70323bb-e393-4d91-b480-1532b63b7bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b24f281-4e63-42f8-8f22-c531dd992501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ec073f-05ff-4fee-bccf-7fc26b62be38",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e81a063-d382-4ed4-9e20-a1095811e68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13686545-0796-4e11-b6e1-2f0e13ae6e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d77cc02-6cdd-4e2b-9bba-6c568e93d7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c75b9530-2b27-41e8-b833-cbf9278774ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f027d3-caad-4045-baf7-44e3c3a5e09a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d32b59b-ee7a-4939-8e6a-0b9c17dd1ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c15c81ae-046a-456d-b013-206e2e322a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e909cb-4cff-48e0-a838-a049b98001c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fba5e28-712c-45ca-ba67-c3e2cbed3e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b28cc561-a473-469f-979a-a7437d9a4690",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f819f2f-49c7-48c3-91db-808f3c16c125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d05b2d19-2b51-4444-b49d-6d5156942e72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39cd2946-b351-4ee0-a41d-9a0c71dfd03c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "abb51a31-45a5-46dd-a045-668edba01418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8d3173-d172-4973-b9d8-6baafb3800c0",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d37ac3ef-d01a-4f3c-af3f-a252a39c84b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a6755d-1ec6-4c6b-82bc-7805a5dfe520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7d8b64-1cf9-442b-a173-50ee0fae9dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "59b96ac6-89b2-441d-bb3f-357c7dfba39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ce93a3-aa41-4561-aea0-07244ab4fc6e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49682288-0039-4270-bb2e-5c03339e0e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77c6c603-a1fa-44b3-8e0a-32ad329ae783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62535226-bcab-4de4-893e-a47829e83e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b9e09f59-53b9-4f97-ad73-b5bcae95119e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d62d79-4f7b-4a0b-86b6-43792ec320e1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9d5818-3d29-4275-ba0b-8a7622107c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c7b8802-5919-41b9-87b3-5d4d5fd884be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e50bbe7-6cc1-46eb-be45-eaf665adbdad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eddaf88c-5777-46e8-ae38-596f49c88c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36228da4-6abf-43b1-a7cd-8afffdc57541",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95aeff97-72ef-40e3-af46-02dc31c7d28d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6e48228-205c-4a07-87ec-8f743213166d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b33ec30-9591-43fd-ac33-f77897d1ca3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff879b1d-7899-420d-95c3-9f577a340df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0476f16-294a-4932-a433-2a317f1531ca",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64928d56-e910-400c-b06d-cafdcf9acddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f9813e-31cb-452e-8500-0011e01cc230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c11c6ac-6784-44e0-9090-110bc7b584d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b0ac8a2-6af8-4adb-8ecf-43d022352a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa5984c-11e7-4040-a399-87b2afe94ba6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6c5b49-97b3-4f0e-a824-0eb4ca6b9ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e39f0d-6278-47c8-9e57-9693020cdf25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba3e0bd-2723-4074-8795-b54dc7a4781f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cebdb55-920a-443b-82a8-74bab38cd664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebcffd7-fd93-45a6-b033-fe9b3866c9f3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd760160-34a9-4ac8-bb3b-7491d39c7382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "935801a0-872f-481e-bd19-436751990a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eef1371-89c2-4642-97f6-b2d5464bd480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb27df8b-1ede-4f30-9f87-4069bbbfb775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136b0721-6da7-4070-a6b3-fcf340b92b05",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6955c1ee-2641-4db5-825a-f7883d509a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "897d8504-440d-49b9-a36d-7fec1e0e0e44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7f5783-bf1e-42a6-bcc3-b224469f4357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6feb86d-72b8-4b2b-8196-541857da6c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "517dc6ac-f426-498a-b894-1b9cea8f0f64",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de5f034-e217-4727-bc0b-37ee1956379d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "218d1920-923c-4e11-9c92-bf85bceb986b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a160fe7-7ffd-41f1-83fa-d5ba2c24cb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "61fa43b0-e258-4545-b431-f9e34c5d4fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe6669e-f135-4455-88ad-9adfade8ff1e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaea0bba-c706-4516-af5d-f9ff33e875cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21af7b09-c98b-4238-9777-4db432aa5f2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348c6dc4-7ced-4323-adf0-92cd58eff62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2dd5974-e545-4257-9d70-ca264d6ee2e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "166ca2b9-db47-4b7e-98cd-4426283e03ad",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c471113f-5947-4d20-9e10-35156a67ba1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f058a1c-b442-4b49-b970-d227d243baa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045ce295-60d5-4cfe-ad0e-eb48aabc8ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dc423f5-51f5-49fc-8553-a79e732e4689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa69bd1b-8c48-4fce-a57d-e31db62d62f9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d712caf7-190b-49e3-a20f-b59b3a570b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bd21d89-6322-4415-9f6e-f6fee3fc36d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9db91c-00bc-4c98-b681-719576b1fb6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80f797d4-2fad-4d81-91bf-a3e75d553862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f647f12b-e7d5-45cb-9304-de6de706e551",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "211da48c-a2f5-4096-8516-1575e8b6bd50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06b44a13-0e53-4e37-beb1-44c7dcd9e3d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17dd36c8-2af3-4233-af0d-e4ddb623fdc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "16ac9184-6e2c-46b9-8bed-1804ec6b0e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29985432-20fa-41c0-bc4c-ad4fed2f1ee8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45005f0f-bba4-4692-b21f-2faf8ceee80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f80e05eb-ea3c-4f61-868c-dccc6e2a72dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc1474d-ca15-4568-952a-0fd506a66d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f28304c-4e94-4f77-9881-af4a636f7281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fad67c-9aa0-4595-9390-e1021776de36",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c171077-f8d2-457d-bfef-5304f27c2b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c60939b-006d-41fe-8a57-902fcee8c481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83cd197f-4a1a-4521-9324-1a3cdde0e62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b93219bb-dbc7-47f2-b854-2e8e16a64261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6805fa94-3efb-40f3-962c-a5b25275413f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "620faf9f-d914-495b-9214-7616c94e18db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e5cd343-7f6d-4f34-a632-3106897ceda2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ea13b5-ed21-452c-b863-3c8221d5d6a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca3043d-024c-428f-a0b3-0019cce5cee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c27b671-e727-45a3-89ae-e4d078315984",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8578bdfa-5c49-4bef-9ae6-4d0d8ef3d9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e24931a-74a3-471e-af33-ed094723f4b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e652530a-17f7-48f7-9c4f-4129255b6968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f186046-25f8-49e4-84ec-4d92ce2f8ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8fa27a-2275-46e5-b831-ed2720a54660",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ed753b-f4ce-4040-b3bb-45d3ca09ef18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0dce879-770d-4a7a-8e61-4727d9871a47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c61ec5a-15b0-49bd-8e5e-24ca555da343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d98c654-d858-4101-a2d8-a86e1f8bdf41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7fed0a-5162-41ce-b2b5-ea81b7e0297d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8797a3a-e55c-4316-a984-743327587f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39b7d357-51d7-4265-8c14-7d3bbf77170e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b078ad3-2840-454c-a91b-0ab3bc64e308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "371682bc-a322-419d-b857-24530dbdc1a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ecae95-a83c-4f2d-bd28-54c8852a613a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59037cac-f474-4ea8-9ac7-604f5cdb304a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eed76830-fce1-4db5-9cf5-07e54ac9e49e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cabcb32b-32b4-4013-8b59-213f0d602ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7876a910-d99e-42b4-a9bd-d925515c05ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27196e5d-f18e-44dc-9bf7-4494d78f5ed4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fefb6b0-0c19-4030-9ebb-6a454940735e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48e52d8f-85d0-4908-955e-68a1bcfb6f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8602cb74-f92a-403d-aaa9-7666e754971c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9da9598c-c4cd-45be-9233-a705ee3c6485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04020d15-1d6d-475e-9431-5452409a29a6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7386385-3893-433c-b522-d3fee1cedd51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a27dec0d-c54d-4aba-b80c-b64f53854d57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3b2bfc-e6c8-42e7-a29d-6952a974c1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "859f1080-57c5-433c-bd47-1165bd74adfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec93d87c-d587-4f18-8b69-7c6c3aa6a28e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ab645b-7c59-4f4e-9cfe-6e519a693617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc02e602-7127-401c-a6e9-c7e6d57f3c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444aa623-0889-4037-ac98-ca0329ae63fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6352b644-d548-4268-987a-2648c551d23b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddfbcd68-5e0e-4d17-9c18-23d56985c8a8",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "413e45ac-15e0-49cc-b1da-023c1bef8a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ce5dad-3544-40ff-9286-abd941c2ea62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5211a738-a7b4-446c-8cae-65daf919db56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "877ad0a9-c4e2-4ea9-896b-c972c0ba5281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4885f9-30ab-4792-8c19-7aa3f9fa2876",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "341ae09c-f81c-4fb7-9185-12cbea0cffec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a0d7f63-ea51-4b7e-96a5-c3d1a2386676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a45b93-2dde-44bf-abe8-cca63285379f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d02d859c-9672-4126-b858-96c504be608b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3f22ee-f10d-4cf8-9914-90d0c4c0ad3d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e0e62d-e377-41a5-9b5a-be79f924bb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e9c4d3-9d24-44f5-9433-70d4f306361f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1461889-e814-4dcd-94bb-4cb8c6d9f60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fa775794-69d0-4b9d-a56e-2f59bd64c624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861eb55c-65f4-4f78-bacb-9b5d73d0f935",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d322f5e6-dafe-4e18-893f-b57f43f015d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "286ce2f9-5cc6-4743-a062-071fca58a9bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e76128-6c43-4eb8-8b94-a6cb5a7c62cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5632b3f1-c67f-4b57-8f64-3fccf9c440aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1193e244-2bd7-448f-9a0d-d07ff0859a17",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738dccb4-ec6d-41c9-a624-41cfc9c2fa0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cfe8b3f-316c-4db3-96f1-a03741e50905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303d854c-a851-4b3a-81d2-bd2863b7a85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b69bbfa-fc08-44c4-bdc8-54bba777b0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01cec8f4-a1d0-4503-8fb1-34408d640513",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f7a64c-2705-4f55-950f-f110cdf3023a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b06fec-63bc-41c5-b82c-0b395943a8ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4f5197-fe70-4ca3-89f1-0be408d4d18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79342990-ee4a-4bb2-bace-a2152709acef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86cb5c50-920a-4ede-9f60-d081b9940ee6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "544f6450-58a8-4fbe-8ce9-6fcc4f54d415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77f193e9-74f9-43d5-8259-d5b94ae85ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7255142b-f04c-41d8-b009-8130375afa7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad724051-89a0-4d52-ad89-9f1328637150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1343ab2a-1eec-4a0b-9af2-e55f12b8a947",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "993f5105-35a9-4b95-85f5-e723b869c4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2914aeeb-15e5-4167-8f2c-04e7920de80e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452d8160-163a-4378-b539-757887aea764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a4922895-e6f3-4542-a243-f0095e4786c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5addc8f-9a67-48a4-9b28-831a347efc99",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d64c3ff9-ff05-4dd2-bfea-499a50e32d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d60d88cc-11c6-45d3-92af-66e9219d9397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbb2db0-f6d7-414f-b173-94692d7ad447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "37c879c9-1da3-48af-8cf7-ea0521ed1034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7eb699e-931b-41ce-b9f4-001829034809",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee9ba2a-7509-4adf-9089-ac5b99081a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726adb67-2972-4ce2-8d6b-8ee92eed9f5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b93310f-a28d-4c98-a734-b353901157b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc7b68b1-1d01-477c-a9e5-dea2d3645060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b3faaf5-1f56-4eeb-8c8e-48c6d1e4e686",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5f64e4-4cfb-4e25-89b3-88a170219feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c42a201-afff-4a37-97cf-e0fde9a60ae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48871505-4442-4177-af62-aa71d83105ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebdda5d4-27cc-4ee1-90e0-13dceb4fb8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4310e39c-0f9d-4b5d-a559-a100a346ff42",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd1b9c9-d1f8-433d-aa35-167504ec92e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac9e09b1-b216-4aab-b8a1-85d52263378e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "017ea45d-471a-494b-a12d-1120cda239c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "35cae500-3245-42da-84b8-db34fbb6fdc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21adffb-c461-42ed-90ee-c550ed524edd",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e2344a-8fd0-4f7d-8fce-636421ba408a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8fa0029-7b0c-4cc2-a139-774b42bbd0e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e556061e-e5a3-4c78-9869-af33c03c6bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "82b87cd5-488b-4813-8b13-d3ac024c2a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b974912-9147-4167-8d74-516f741989ff",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af802b2-6d7f-4e49-bf11-86f57d853771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f758909-93a7-4764-a19f-16ef0ccea42a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d59d10-b96b-4983-9379-58e07420ec4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6c260fc-3bef-45b6-b70a-5eeecbdad56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e800ee-a11c-4ffc-9881-a74303e9feb5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e35e508-16ab-478a-a52a-abfe0cd30387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "377ef00a-bfaf-41f1-bcde-5be7698d4ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4f95f1-a063-4b68-a7be-58b088cfa117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b3e0f66-9297-4dbf-9b04-3f4ff27476b8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f69e348c-a0a9-4db6-b1b4-2892a7118b8e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ca624a2f-b3d6-44e7-86ac-a15156b2f839",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c345ae40-ecd0-4457-9040-7f5597286580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "122f19f8-7001-4a46-a94f-65ea132c00dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf0fcba-efda-40bc-8af1-546a8153489d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "410968b3-e3eb-4ae2-95b3-9c8cac6438d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3e2e69-5c0a-4fe9-a492-ab58cf03e5d9",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec742788-b4ed-48e0-a78c-b0d75dc3f563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44a0b983-c11f-45b0-afdc-77254708aad9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826c2524-6de2-40ab-862a-d1718188d8dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98edaf96-aa04-4973-96ea-97cb8c762a78"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5fd99e6-9a23-48fa-8125-b38968bb1fdc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cec45fb8-0fab-42ea-88bc-e67d0b95584a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5e2a7af-1909-4164-b602-f877d59e34ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d81eb770-6124-4e83-a781-e6692e8f2372"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9dfc7796-0d4f-4c10-ae53-2ec40d9e159a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc990bbb-101c-4786-987d-aab17191c613"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a6624136-c5ef-4ac2-a389-f97ae89ac7a3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "46e4af44-c5e5-49ef-b6d1-ab718aae19be"
                }
              }
            ]
          },
          {
            "id": "20542099-de9e-46a5-b88c-c95135659986",
            "name": "Positive Testing",
            "item": [
              {
                "id": "67025ba4-9cf5-484d-b2cc-393ee74215f3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5ed03e4-953d-4ec9-bb9e-36ca33024e47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b2f3004c-b3a8-4fa7-b48c-91d1d30d0076"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "213ff6a7-a24f-4044-b469-87738ae199c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "71b2393d-2596-4464-b3d7-d941eac97394"
                    }
                  }
                ]
              },
              {
                "id": "879aa6a3-8a2a-466e-9572-b5f9491465f9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5a45fab-589d-46fd-aee5-03dd7ce4ab48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c1948766-6914-4f9e-aea6-9e02f67c2891"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af51397a-0857-4e48-bc8c-1d94c1d1ebc9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bc3b6262-3e29-404e-a430-70d3ee8a5357"
                    }
                  }
                ]
              },
              {
                "id": "9e368881-a721-4c0b-83ba-a914d2e8441e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1aeb7f3-995b-4f80-8318-74f973abe085",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0aea8d2a-3931-425f-8e49-bfd13547840e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1da421fe-dc2c-4f9d-901f-a6ca70402cb5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5e5b23fa-a9c5-4f71-bc84-8d2de7e58a6c"
                    }
                  }
                ]
              },
              {
                "id": "cce5869f-cc0e-42c2-ad6a-87640e534233",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9d0b392-3d04-47b5-8617-4e69e36fa044",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc35c312-d0b1-4c79-9d8d-648cd6fe2dd3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21c7cbd2-b1e7-4da6-aaf8-a6df6d388fc2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "aed998fe-f3e1-47cb-8251-c02f5666d90f"
                    }
                  }
                ]
              },
              {
                "id": "58700cac-db84-47be-a7dc-11a823886724",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "75f2d102-7bb3-4cbe-bb81-345f34f0e2a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aba2b967-be57-41e3-b7d4-32faf52c8eb9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2b67075-18c5-4f50-9fbd-f0a7d2add703",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6e83c0d3-ac25-4254-b645-d519a50b0437"
                    }
                  }
                ]
              },
              {
                "id": "0407838e-9d82-4b10-91fa-13565af46b7e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5109380-46b5-450c-9fa0-90ac1ed645e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4f5e7b65-5b85-4d44-9d5d-0e47a1b32004"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a0fb63f-ffc8-4c05-a329-4f0d4e5430a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "597e2d36-c5de-4d04-8163-8ccad35f6267"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e2cb07d0-8194-4f45-8f03-971a1a1d46bd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e2aedcf2-f116-4764-bcd6-2e6d4b75694d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ff1e42f1-80de-4cea-b664-8fead5308002",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "832566da-9bf4-42ce-9bc3-994d9170a5e2"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7247f719-95ca-4b34-9fce-9134bde5df6c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "03b8f75c-3486-4755-a996-dfe5b37a7052"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9903de9f-bd68-4d84-9764-f23c4d0a8e4f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e5bd4d5-fae8-4118-820b-7645549138b5"
            }
          }
        ]
      },
      {
        "id": "e96cd618-4e39-4b59-b4a4-bb90c65d6a34",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "93290cbe-876c-4a0d-8503-129790e3ff49",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6ef7971a-81e6-4d30-b945-40403985ab44",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e86558fa-9e57-49ca-9fa3-0971ab6965bf",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "867aaf42-c916-4384-b015-e7c4c6413037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4342325-6261-4ec5-afb1-2c0b56fec03c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2031c9-9bbc-4c6b-9f8d-e73c1c8de802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "87744f08-12f1-4867-9569-59cee3319ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6dc293-9b81-47b0-9fa5-26e9d6ebb8a9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d7a8de-e48a-4114-9af4-d3a5db1d70b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a9e35b2-797d-4625-87de-954d9b5662bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17bf8a5-d6f1-42bf-8884-53ed910163bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "27ed9304-427a-427e-b185-2828c9652868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6de509-ca5f-47cc-9bfd-77c0ee544750",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "537fecff-39a1-4abc-941b-b291a807d679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f11a5d6-93af-4cde-b148-e50667107ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db636fcf-6752-4e99-befe-b859c0b9c0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf3926e0-cba7-4b22-9972-2beb067f23b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d39fca-9b47-47cd-9fe0-de43adc80744",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b039329-bd5f-4b03-8ca3-0a5f47bf9607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d34d214f-77af-4706-9745-b5b13746ef6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518d49fc-c465-4de6-af38-de57a285898b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fd2fe2f-5b09-4e0d-b378-a68faf54ce3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbab825-bd86-4115-98c9-96235f0159b8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c701dc-f3a5-4632-aba4-d3072a149bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "658d2d3f-8514-4320-989b-85fd3564f5aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a85f6f-1725-42d1-bd41-85d49545e65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d029fb2d-91d6-4fdd-9c6c-362002471ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ee74ff-5241-445e-aca3-fef474fafcbe",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f3ea1f-3305-4396-a478-328ea711eb63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb61cf1-083f-4f5d-8380-c4a5ffdc434d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "469cb34f-2330-4f5f-8b15-f443e452a000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9178715b-43e7-4b2b-9f30-2cc08d1b9472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "168cb70c-6595-4658-af77-193c58b2c5d3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0857c0d-bac5-4a67-9036-8eb03f20cffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e368a791-e2e2-49f6-9ea2-dcc313090432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bc9a97-cbad-4f33-be96-05002a32ba66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fc12abc-278e-414b-ba6b-7470ed6f3e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae78a0f-4078-407b-9058-1ca3558a70b0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a479bbcc-19d0-41e2-8cf4-809be53f5285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de48b4cd-1ae6-4939-b184-92a3f925afb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6775658b-0781-487b-b414-a1b7faa66098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "259225f6-5608-4129-8fe7-65f7fe221cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be73d2c-db2a-4b05-a95e-bd6a1268d408",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "855fe416-e19a-44d5-b423-c63b7280b213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb0fd8e-888a-40c4-93d6-6c566c8f347b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa678f4-03de-46ee-b2c0-93a7b1a87c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f9f7802-df3e-4ae4-a615-3733d84401d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c472780e-b938-41f4-9de1-58c0a34b09cd",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6ab425-ae95-45ce-bbc0-45e874a995bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "797084c1-bd06-4e6d-bbcc-fa9a0bcea9db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc4f181-9ded-4e21-ab9a-a0d5f573f12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cab69c5d-22a7-4e89-a66c-f323f0747797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "712dcf58-7bee-4158-a416-4358fd58a264",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7d8e49-8700-4af4-aec7-19a7a6be804b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1920fb1f-1af2-4cc6-a62e-28d70bf3aec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c260358-c3ed-4daf-98db-373562975976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fa797d8a-5ef9-4479-aab7-6336d9b4b5e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a15f919-ba2e-48f1-b545-740974a02eaa",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1470c37-1a68-4b9f-aaee-47938039d237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7935eef-f111-4bb9-a202-2aac3b6d9ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93480ed-0b93-4c61-8b73-8d541788fde3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a27c5b58-a1a1-46bf-9361-fd5a9caa383d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dfabcfb-c739-43e9-baf5-057e7372a6bb",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697245b4-ad0b-4bb6-82e9-3a87f1545249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb109ad-7560-41c6-a383-a8faf0b32299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d88fb5b-4dd6-46e9-8a92-700a3ae4ccb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "db7ccda3-8c1f-402c-b533-025719cb2d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3a4ebd-55d5-4082-a0e7-f033bc589635",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0564556f-7fa5-4d87-ae3e-e483ef9efc11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1996552a-dab5-4f87-96eb-50af92c771a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888cc481-ef74-4f00-8677-6f7510f1f009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "85192dfd-452f-48c3-a586-0ace573b92b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d25ed9-8669-444b-92f7-a1a209cf7559",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4db5eb1-6830-4758-82d4-8e1d803ee89d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5144deae-7ea0-4737-95f0-179d4d4fe9f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1974c158-0e11-4b16-be77-7f9487eb4eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4a5c014-43fa-48e6-bcf8-b2bf09bf31de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5449272-2099-48fc-94ce-ebeb851693c2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4aff45-6501-46b7-9574-c223c20fee2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1515dafe-28be-4236-9cd6-262f494708fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4453d0d-732d-459d-a2f5-90a67e39ca48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "573d4606-4d10-4311-a61a-b0997b513e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6cc90c-7918-4504-90a8-caeeb76db938",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75aca73f-d14e-4c4b-890e-1c6601c5fa6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b20b569c-1314-468d-9202-a36b8e0f5390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3cd75d-462e-4b05-a981-ddb6234e8bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "06bb7c89-0ad4-47f0-b5a5-ed49afa222bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c84764-c41e-47ce-8bd3-87e5f6bfe3bf",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd468cfe-09a2-4373-818f-8559a30cec6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "367c0a37-4e5b-4927-8dd8-260595b6106c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede61cba-9fdc-43cb-b49a-882566eea017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c631d7fd-91de-4b7f-9e22-989396f4946e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33925ceb-aaaa-41bd-9703-dc9ba986e1fb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc8e436-9bd6-4888-a978-bb81d6aaef17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87673524-5b7a-4053-bc6f-1d9bd8b25729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ebe4b6-2655-411d-9bab-dcf3fde913f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8a72f9b-e817-43e3-8c92-44e194bfb044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230fc8d4-9e6b-4dbe-9967-72849e386b07",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9944dea-efe5-4861-a272-5cdda3abad18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4303602-d405-4c12-a9ce-78ea674cdc32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624fb15f-6a5c-4b82-ae22-7cf1f9e72833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c38cd00f-688a-4163-91b9-495f4ab18708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98099827-83e5-4d23-9531-5cb69ad0300f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64892ba1-37f1-4afe-b865-da5ee46a9fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5845e74-2e01-4c9b-95e6-60d19f4a7fcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8dbbeb-b063-467d-a7a7-4d635ce55228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a314b218-c0a1-4c0d-909c-225358828f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c3a96b-6ffb-40c3-9ff9-3d64ae15df77",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d8be022-2284-4e9a-a6b6-83ddafc11274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0300cf4f-6953-495d-94fd-ec35067d2a92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a73b72-d969-41da-ae48-0a50844c4189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1a5d7a4-712d-47ac-881e-dd88209e81e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc54efcc-4353-4abb-b242-8882abcd1f93",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "493d69d1-e8f3-4c08-a949-e2240307d8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29996b73-85c9-4126-a950-874609560291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607bd8a3-e564-457d-8fc1-fa66d12e43bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b066a85d-e991-47c8-ae96-c2a0b8b89028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a893db-53f2-4860-8f7f-742196eda0ca",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "813df087-c9be-4da2-b62c-86e266cad771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e794721-29ec-4f76-a82a-ea594179d3cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5ced11-a186-4d08-b2d7-40b9c037e147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a9808e7-f218-4508-b8fd-cf72d3a933ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5623ff5c-3dd1-4cf0-b44d-a791b62e7ce8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d791faab-bab0-4283-91b0-a085719dddbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2836a6b8-6fec-42d3-98c4-53d7fe5e4c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d6f505-a228-42e9-b0cb-9cb52753129e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "217b84eb-c15e-452a-951f-8751e50c26b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2ba521-5c97-4c94-8a98-ed592d4a2762",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05976bbf-9aa8-468c-bb74-bb1f6e830a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b0b912-68f2-418d-87a2-31414941e8fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88aa9170-ddf7-483f-b898-58baf7db7f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c59148f9-fd50-4681-add5-669dd064d434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80543a13-7170-4a36-9a11-9d24e18c125a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2511943d-21f3-4bb5-a553-d44359f21734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b6da158-10f0-4a15-8b45-505725adc024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736c20d6-15e7-4b34-b352-1f18d512c61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15f95ef9-a023-42a5-ac0a-615dfafea1e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0540b8f4-f8e0-4346-890f-14f67e1259c6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5401e699-dde9-4d2c-8b77-4e1fe6850b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "986d86ad-8f18-4cbe-87f6-83e1257bd66b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669049a2-4049-4e61-9970-3818f12d436c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c766a99e-6866-4ff7-a874-df435495e029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1104b61f-c24a-4698-b6a1-42efa94b0f21",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a0aad4-8cd5-48ac-a347-676f05e7c0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac6b6aa6-af4f-4379-92fe-42f590a9b857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb01322-b834-4afe-9cb3-e4b0f092f0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c5dece9-0582-489c-ae8d-e932c26a616e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5283d554-5e97-40b2-b50c-f6f7acb5adfb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e4506e-7c29-46be-9767-d8c74444c82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e92549-f513-4b7c-9816-872fd7b31367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f66269-8941-4b27-ba23-a7fa6d6b93a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f484d8ac-0655-42e1-b022-9f0828ab84ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fba5f6f-46ee-4b5e-a5bb-35c033a082f5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ff6486-7939-4a8c-852a-69f187d260ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b618e01-4167-419d-8b90-84fd353bb7d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529496b9-13a5-4f81-b394-2f4deefddb34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d22266a-347e-417d-9e61-c550aae35b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db9a3c6-714d-4ce6-ada8-e452b443e0e8",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27915852-bb1f-42d6-b844-a9e677e6655f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d8fe9d4-4974-44db-b302-e367952b3072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202d213c-a278-4e2e-980e-52f2eeee05d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc01d98-7e38-4b47-a8af-a7c746721275"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eea5b7fe-4075-434b-97c0-d3eb00247e38",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "00670b0d-ba7d-4fd0-ac91-5b320d8659b1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d094ab7-25cd-4b89-982f-feadf1c53742",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b52b8ec2-5150-48e7-b619-b989f8ae48d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7151a844-c484-4f3b-95ec-05f3a1c3ae93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2a58479-2321-4762-b1d2-925b32332bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b10f2b-03e1-4e34-9d8c-b2ebd2d7473d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e04fd3-79ba-4dc2-8646-2bf56e0896c5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "77145b92-db26-4390-ad04-d9510670fa11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c689f5b6-202f-4dd1-b318-1e94590a3eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ceb9ddff-fd05-4254-832b-bd3037186f50"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a2dae1d-f1f0-4a4c-9444-7ab13747f038",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82dbe219-f782-4a8a-8cd1-3d2ad8054369"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6eed647b-4bb0-4ef8-879b-a22ee64552c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e01a371-99d9-4c83-b643-07a95e0df68e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "102b0ef3-f4d8-424a-b84a-c3d99811a632",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5c45feb0-d534-48f8-95ff-819f01e80a7b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f25d8a14-d47e-41de-8b74-a701bf08eccf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b746bb37-b6ad-4791-82a6-3b540cca24e3"
            }
          }
        ]
      },
      {
        "id": "b3d10f50-5c54-4240-b1f2-5a6dc62ba412",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a80d31db-29d3-4fcd-8877-87525dedda1d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ffac5841-a876-475b-9559-714cbbf4059a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "741be5d3-4de1-4b3f-a6f9-76c896a0c2c0",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7e5967-e915-419e-93b1-470a882d69e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d770c500-31db-4aac-8df8-1915bc46a551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1d560c-51d0-4c65-a56c-7bcff61b8b0b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0dda5c-760e-4090-ad53-254145cf1f48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e1eb2a-82dd-4478-935f-cf6407d5ff6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef86d609-57bb-4844-9877-394533be10d4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e5b0dd-5ad1-480a-bb7e-43d08dca9e74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef8bc886-9b1a-423d-98de-d330c3f30cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030bc4ee-cd30-4245-8e8a-2f1800436d4e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc63d3e-fde3-4f07-841b-26ed915ac591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b37a0c1-c89e-4c6f-ae70-2f3e8a1b7bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d95db6f-74f7-4052-bf59-76344a0bb0f4",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20ef19b-97c6-4e06-9608-4519e3b72023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3afb77b3-42c8-41af-bbd3-71b63e74cffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281a6973-541a-4093-ab5c-8b863d21a799",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78634ce-11ef-406e-b014-fe3be0895865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d0083e4-211e-4d70-85d7-634db23eb2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27323a2d-7abc-4d1c-8d1d-8ceab89c94b3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c002046-6e32-4596-aaac-584bd7e1c140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0ba2c5-b29f-415c-8b1b-4c39321c87e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb36894-08c3-4d67-9cea-781c1be833ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65451dfa-6178-413a-a05c-7b77d7329faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f242c18-5bb5-4c6c-9ee0-d28f03f37746",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4261389-1a4d-4a63-b074-5ba6758cd24c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2163867-857e-4ade-94ef-7d1aaf8fab2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c4217a-d29d-4332-a7f8-729fefb8495b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9387d101-08e5-49b8-980e-f747ac68085e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52864a9-a4d5-49c8-9c35-0c001bc53e55",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a737bc19-5ba7-4492-8e65-c484e464419e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5072f04a-4853-41e4-acc4-30e244e7c158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e45f76-63c7-4c56-a01e-07fdbd1b4493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54020e80-2c5d-4dcd-b2f3-4e4da824ed2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f022e5c0-2101-4868-8585-2f44bfced361",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b0dada-8fc1-4d66-9ec0-eb5e5e56c8c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abb171d5-22b8-477d-bcc0-9cf44f9f60ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbf4f79-85d3-49bd-bd6d-a970e3451010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "056075a5-8b06-452e-8be5-7bfc210fffc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea92cac-eac2-4e9f-9869-77d697d15296",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e10d4ba-0b8f-4705-bae1-994c8580a987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "930f58c1-8671-468d-befb-551329c05c98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa02c9a-62da-4a06-abf6-94b63cfb7202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3d31dc5-5ab2-424a-829a-1216ee6905a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bae5985-7158-4de0-880a-04e6e30de0ba",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f217a73-788f-4ff0-b34b-7ced335f1200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d425c5d-cb60-4847-8334-4b63e21a02ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e06dc18-6660-4ddc-889c-3a9a81f03b8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "488745b0-5db8-4797-b7bc-8b834d59fb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f16763d-0045-49bb-9504-3adab4979fef",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b49bfa62-2bad-41d5-badd-3dff6304beee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68cb0a11-1a79-45e7-87c4-8594039d1a4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4679e3e3-3548-42f0-acd5-ea3fbb7bbdd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91d890f5-239b-458f-86f5-793c7f1947cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1bbe47-2d08-4992-a63e-acb75f0bb075",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a34ac1-8c2a-48b2-952e-30195aa4a7ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cbffeb3-25b9-4dd5-b868-5155e93173ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d6a87c-75e9-49a8-a5c5-bd2651c06a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d3a2ca1-5038-42d1-a7f3-10e6c59384df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9300fddb-adb3-43a9-95a6-a8a6021ed50c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af80980-3c6f-41a1-b396-abbe3f3a7725",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb1ea324-9847-411c-b80a-828d67677e73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73b0480-123f-4a42-a35f-a6e2104a9808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e8a12e1-d30e-4bcd-a23b-358aefbb0c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4b308d-1831-48fc-83d5-0fa417828256",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5699dd9-1743-4175-ac94-d6db1d275acc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b46d769b-5415-41e7-bb11-aec114284b55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc98e54-62d4-455a-95a3-80632f436c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a99901-b342-493c-9f4a-4d2e01d4b570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867aeb20-094d-446f-b82c-6d40405bacfe",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b20923-ad49-4bd6-a337-a2c2070391da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f221be-7208-4b26-90e0-0add4d4b048a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9335218b-12b9-4d00-b6b8-f8e570950d63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de200f8b-cc8c-4ef8-ad04-ca36c8f70bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f3e220-501b-465a-8618-5d7ca5f126eb",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60ba26f-d3e6-4296-8a98-45cf08f7cb7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af0506b6-ec15-42b5-bf96-c7d77e89de2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17970a5e-3a5d-4d97-a49d-e42917a0a301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0afd785a-a475-43f1-813c-893735884562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9385fde-ecb1-4edf-b3fd-69efbe09254e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a7ea9be-f01b-4744-852e-c9ed471dc38b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3071cca-3fa2-4aee-b55a-201bd8c2e77e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af443715-a726-4bb4-962c-985361eae42f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48cedf0f-6dda-4296-82e7-3cb22239ac2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da402cbe-e839-4cf8-ab30-3275870e16eb",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2acdeaa-d3b6-4048-bdd3-771be0853c14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4faa8b-1114-4873-b8b6-86e12b5bb92f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "442d1ee2-3a5e-48b1-8374-cd46d0c2cf56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8ac5ca3-0e83-424e-a94f-d843234ffc7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9616efa7-1fb6-425a-a58a-064a6afd7311",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a739e1-16ac-4527-b298-81d5c1d6056b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f198b62a-1cff-40de-8da2-5a0e3fb4355e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ca1d65-d2ae-4cc1-b90d-4a7be5b20e9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "123b378f-575a-467d-97ed-c1db7caa1383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9ccab0-6cb4-46ba-8383-3f4ef7349c8d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59bcc4c1-5185-4f12-a499-c89ebd56eb8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01d16ba4-6c8a-4e75-88f0-3ef8023b69df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10a31906-3a30-4983-8893-e99f4cb120fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8196148c-82aa-41f3-8208-d9465c742b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b3c4ea-6aab-484a-9560-89a996125be0",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf7fb95-38d7-40cf-b54b-5b42ef7e41be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c5ed004-c3fe-4e69-b575-9486b98ab459"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16d8f77-001d-465d-8dbc-a102b5cb90c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2015c349-bf79-4ff0-ab21-035d4f4c94d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26631670-5449-42c1-b2e6-707b48aa171d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f452d7d-cb4a-4b0c-8855-c5a488746051",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4e691ba-d9ad-4480-be68-8e90324cec8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79147639-8b00-4d13-86db-4f728adef1c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc3511d7-7d9c-46a9-a0c0-7684136044cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f439b730-50a1-45c7-a46c-7d2dd9bb73f5",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af31fd89-4dce-448f-b7f4-e20ca2e5b7ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f8673bc-49e9-4c0d-addd-c41f77c2f08b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c39bebc-b61a-4345-991c-c42b00285e18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f8a234e-eabd-4d6d-bf76-965913729aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba24f0c-e285-458e-9802-320403c73007",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a031e19b-a38b-415f-97d6-811953e4cefb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3934f862-a38e-4276-963e-d5412d993eb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed397a52-49d1-4e62-a176-60aea4f656a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d48d4e8-3c79-40de-9144-05bb7a806b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def563ac-e41a-4f8d-9684-06ed7e073860",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924929bf-6f77-4971-a7a4-4e13778d25e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8317957-0be3-4bb2-8a58-cc5a758c8a47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d14e9c79-9d7e-4dee-ac27-4fc164c05d3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23de2adb-c7d7-4da5-b0e7-f79fa74b09ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5092040-d2d4-470b-924c-aae0808b0173",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8b7700-7b14-4820-bfe7-10dd0f4b7131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c4234e5-15eb-4045-b3f1-83b1de78f904"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbbf5da-da29-4bd2-b34a-3d63dc92079f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ca0ae0-8b35-4a9e-9f24-a0987f1abe10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed7d61c-1993-48eb-b1e2-96086505b760",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8719bb0-d959-4384-b605-a1647b45c662",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79835627-a04a-4922-a36f-8c04087e84a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a8dc44-7540-4e2f-96fd-1e03f1efac95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d9875b-9235-4a41-8dd3-51dcf59d5119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b867cdcf-4918-4547-bae9-901297cac6d2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b44cd0-0bf6-4a6f-a231-9f995e38945f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67534799-a56b-4716-9ee5-9bdd045c7e64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f204bc-270c-4356-b173-0808cd585929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afc66f31-0e82-4c80-8bc8-52c1a422fb36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd9eec5-769d-4c0b-a074-16e656198610",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c34a46e5-ebf8-446a-b1f0-adaa45ba58e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5018dec4-8024-4643-aada-98c3d090c263"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce918ba-16b6-4aae-9663-2d3f3bfc51fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c5987cc-52c5-49ea-8889-ef62499f49f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4048d3f5-e301-4ab2-9f8d-f36de3b89fbc",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13b65ea-8f68-4905-9fb3-6b53f8129c48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f56f4316-7d83-4baf-b8b5-2bbf10fc6b95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55880041-ecde-4243-beb2-c1cb29f649bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c691d0c9-f1b5-4055-8245-ab3b5f4f1808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05fc813c-05ea-42ea-a9b6-e61ec33a6424",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a4b0b1-11a4-466a-8c1c-f414cecf8dfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cc6c5f4-a7ea-4f87-bd74-db53a2839dae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c2af1e-c8d7-4e86-afd9-975aec60f8d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55197246-6bee-4a6a-ae4a-4d4007b8baab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "878faa10-f118-48f6-ad0f-7a885791983f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b263f71-1a4a-4cb3-a393-46825dd6ad88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c94c426-7ac5-4de8-b0e7-a101a227569b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f54eb0f-dea9-415d-8c7d-a825be676fdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1f3b1c4-6964-40f2-890d-5df9fddf39b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d786912-fb30-41e2-a481-c3e57550ecc5",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf76390-18b6-4c73-8af2-91b1bc5f0b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33e3b4e0-db8e-4977-8c1c-4bdda3da4b37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fad6f81-e7f8-47f1-8ee9-e0c621887e70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdfe6e27-fd5a-4ceb-a24e-f43020e4068b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3a440a-a36c-464a-b363-c1e2c4f416e1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe0bcdb-5362-4e58-96fd-8f2257c14a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b29f2ff9-f7f8-4052-9105-89cf454e6763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c6c012-d42e-4387-ba39-a4a2f07080d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0684e427-5c6b-4b27-9093-603a927f4625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc438cf9-d9ee-4e61-8d69-96bead09fd7d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b70a22b-f551-495e-b337-13f8db931a22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d69a59-eaa9-4c1a-bbc2-4c69a5397d6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e2766ae-af53-4023-b918-062d319becd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c88ff4-6841-4020-996d-21b8ee750144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6cc41eb-de97-411d-beaf-3c9d7f439903",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de7018f-cf47-484a-95b1-8532dcce9eea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63d6d8bf-6664-4ba5-9074-62fb5ed83525"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c2294e-c0a3-427c-9559-43dc9f7027a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df297a75-0577-4b91-b5c9-99c2c07c376b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20325107-e7c3-487c-8925-354838bdeb17",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "638b139f-81ce-4b26-be0c-78127d689384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f820147-e592-4935-b907-66c3eb97333b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab874af-24e4-4684-ba24-e471b0799a7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2311ec85-6197-4785-8925-a6cbf19ed028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ccf06e8-d9ef-4ef9-85b6-e3b9b803195b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd392dd6-f415-4540-80c1-a105b2800119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9392a873-3275-404f-8d92-71c2b1202316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14121efb-13da-4413-93d7-cc6b13cf615d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af0edab4-9195-4a6d-abf7-77f2189c70bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a94e5d-85aa-4c89-b4cd-ac00fda5cab4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f802c3-78ee-440e-8398-7a4d261d6699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01095cbb-ce37-4402-a5c3-46584d49b173"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0fb52a2-2a18-493f-a686-8acc23a780d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "948e0890-c378-4cc9-85c4-22ff8e3e2553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028e7bfe-bb1b-409c-8f01-4eb33ad4e0fc",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc70b054-6c7a-43ec-9a60-559c167aab06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af00248c-e434-4cee-bae6-62e21877ef83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fe6957-9213-4a08-964e-9a15a833208b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f8b141f-acba-446f-98a5-f2dda7cfdf94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a97e31-beef-4622-bf0e-c961d052ad1f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8882391f-15fb-4f70-8609-9393d0d4af1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db7e057-4a20-4660-bc8e-d9164058ab1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e617344-b80e-4922-aa6c-62742382132b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d27cae6c-95b6-4932-981e-8803bb6a2140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63d89b5-5e85-4e20-851d-ade1dfd0d0ea",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a0af92-995f-48c8-9140-0e7925cdc5fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa33555f-ee62-4cae-b48d-663efad1577d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0f207c-40b7-47ea-8aea-638c2167d0b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e8fd6e-1484-452d-bb94-5de421d736d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b235c59e-5a47-4270-b36d-dddb2968e870",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63724b27-a29d-44ba-b620-fc8cf166ff60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82fb96df-29e2-4987-a60a-9d36df712941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "579e3421-13cd-4219-b160-cd78faed732c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a5411ef-6e86-466c-abdc-2bf37468a8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86458c1-ac05-4e97-942b-716f2da1badf",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6acaf8c3-ae9e-4f35-aba6-5372a036cd6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "782bcb95-3604-4a2a-94b7-ecb6b7b16811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a89dfc1-c525-494e-8d01-e160307afee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e940df8f-cb06-4de0-beec-fdfc60f39026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1bf4de-e451-4d41-bcd8-6f47e0452e2a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd16cab4-c776-490d-9b0a-ca4588c970f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1f67708-01d9-414d-a40d-5ef31dffc423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76df4523-a374-4048-96e6-e89b13e65cef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b65786f-f365-4a7e-8bb6-c0152c792d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f424b747-07cd-4d87-8fbe-d2a1b58af06c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0020fb7a-0c5e-4169-a208-2cc40153528e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e2906e5-61f6-4422-b365-f2dd455d13d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c7f8b62-0aab-4a0d-88bf-714f3395b894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91779f28-0bae-4794-b5cf-a12953fc9267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48f608f-67af-47c1-945b-f497fef3fe4c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1223b864-9688-4a54-b00b-62c4144b0c0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b29821cc-1617-48e1-8dd1-f85656b188d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7017e80-6fd1-4e63-8526-9a415a57b865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85628ea9-b136-4252-a80b-74bfa29951ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f14783-aec4-4b0a-b4af-ca5cb9901a92",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3dfeaf2-f3de-4b6a-b8e3-47aec8a800c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baa18fef-f63a-4f08-9349-c94d403f4848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1fdde08-3bba-4df8-8d9a-f1f45a2a8673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e47f82d6-48ba-4cf5-b62c-730422a88121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c2aaa6-faa3-4d56-a656-0ba77f45291b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33fbef6f-7bd0-4af5-9ada-56f2b7566bea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ecafd1a-571a-43ae-8531-551287f10fcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3912c89f-1821-4f30-bf08-4446f0e13a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5008468a-c7b0-42fb-a0de-75c58a1e519d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f22b9a1-f4ec-4406-96db-133a1670fc10",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed6ab57-3962-49a2-af0e-387a3b20d201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af16a234-08c1-4cd4-936f-8dafb3e5bd19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7c695e-afd5-4ce5-b692-a37e91414851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcf30c8e-0d0c-4b30-b220-818c506d2644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4c63d5-9c4c-4e3f-aa80-c98924a7dba2",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d4744a-2784-42e2-bc32-37ede7d0c431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad2d1790-7c74-4dcc-9e05-e5f6f181f41b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa694681-ca3f-4455-8502-a00c6e48b40d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12da1b6e-0a5f-4b96-8958-2ef7f520c118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7269ad-3523-43a2-abd7-4febd516050e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bd6c02-dc04-4741-9ac8-f3b03c333ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aa5c236-02f1-4b55-985d-e88dc925a169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7c16e4-96cb-4e1a-aa18-d08746915e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e39c5306-ab32-438c-a22f-60b711f43367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f24f4c-ffe3-40e4-8bee-3ba854fcf7b6",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e115cafa-d861-4c0d-bd8e-9f937fe35d05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c870d12-7425-4c74-ac5b-904f529f5dd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "242c0ac0-2500-41e9-b698-6b1cc9229119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6fd8874-f6f1-4738-ace1-f410a2cd3250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98097fd8-8dbc-4390-a069-0526b787adac",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03cd68db-60a1-4e20-9290-35b6efae06f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8a6e07f-2c88-4617-9a15-f57d704f13ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca971d1c-fd07-4f81-a6b4-14644dee8148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fafe654f-05e9-4030-a44e-ba0c8f038bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5090f14f-c448-4948-9857-3e6c3f249da6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b177012-44ce-4fcb-a3b5-cc9bb0f76dda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f05a9b32-6ac2-4d9d-b002-07a98a38592d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26f0fbf-363e-45eb-809c-9987901ef500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9e1a253-d474-49cc-b37b-cfd54c46134a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d456b6c3-c6f0-481a-85e5-6afb2846c7c9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc8812a-8f3b-44cd-92db-a168a8f12359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07a67d00-6468-485e-be87-a94e995dc773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f254948-1faf-4512-85e9-c1781a6d6551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ad1974d-3e3e-4827-a934-6990c64cdd1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c74b80-861e-4a6f-96e5-06adedc752ef",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0727718-4a76-405b-bf26-fb61c69c2180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cfb6129-5ffa-4f48-aac4-5404ab091a92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be3855e-e32c-4b70-ac5f-32db978657ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f750903-2ff5-428c-9738-996cd6897432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2105fe7-118b-433b-ad11-2fdb1222e435",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13efdde8-8525-446e-bf42-4c63e02c160b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04ae5e1d-305b-4cb2-839c-6312b8297092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a8ea0a-3f16-444b-86e9-78f8299a7714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f7788d-f215-47e7-8f0e-2565b593463a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89d0f79-8707-4c35-a8c4-0cdc15acc699",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1716b3-266b-4458-aeb3-91abb02419b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04f04d28-0361-4188-90c0-ead9cf803aad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecbd2a44-bb5f-431f-a879-5b0ec7d13cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f33476f4-4867-4783-8c6c-94250c4e33f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871e7213-9cf6-4c18-b6d6-c7aa0cbbeaa4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beccb418-ceb1-47f7-9872-d61930f60fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e0c9c3-1279-4b1d-b36f-5587f68623d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3754eeff-3e0a-4415-93b4-7b05573a1baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d03c31c2-8a69-4827-9685-5942c5f49814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce344c8b-a8b4-4358-bd50-98790bfeb66c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977fbef1-c4cd-4b2b-b676-9eac6624c82b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "793fa7de-64f0-4e33-8b73-49ec4e34c03e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40f86dd-8747-4097-91c8-8e5605ef8265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a33f817-b601-4d8e-b3c3-e559908235fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c750103-3e94-4f1c-8921-66e6f53dc0e8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aee9dd6-28fc-4017-b283-c217b9766810",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e28837fc-c486-4ec2-893b-69eca8034d35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5b887e-4bbb-4708-ad81-e89f41dbdeb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad0f120b-fbfb-4404-8863-ad3793715f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e57d22-d719-439d-af8d-860638bd4c2e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b691d2-9a6a-4f49-8ea1-4274d3058368",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5b4fbbf-68e4-4b1a-bb39-3f14c316b0e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9542dbc2-3e94-4dfe-8601-2fc776bf2862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "881c969b-6edd-4124-b1ac-9126f76af1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7c338c-7f97-4cc3-b6fd-c8b4a9647713",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e088f3f1-eb8b-4f3c-9c08-c88285b09129",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d67cca93-fdc3-4511-8196-04f9db01160d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd33df39-59de-43d8-a65a-a359ed44343f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5294b1a7-6642-4ed7-ac8b-46c3f902ea37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88f0b04-a2bb-4d99-b34e-526759d50a3d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8ea231-a2aa-4515-896f-af9f3028c557",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "763a0154-4bb1-41f4-9f97-fff798bcc10f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b0d207-5c52-474f-ba84-32ce4549fd98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d736ecd3-b0ab-4622-b107-70981ac50fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c20763-8e87-4888-9f99-e42c9c0898f8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbeced79-ae18-46c9-9d23-9c7be30df6f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d92478b-89b7-4fa2-a9b2-43798b12bf80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "700e0a2d-6c21-45ec-b778-b4979e8a2ade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb86a1bb-214e-4040-ba09-c8562cf175a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb7c293-3a25-4eeb-b5cf-c3ac77602161",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0c5345-0db1-45be-9663-3fd541bfb37a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "279dff3c-6de3-4b85-818b-eab5bd4562e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec71c5e-034a-436f-9792-a4d147f95f8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a46a2d8-73af-4010-9dca-152f8e0bcb7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "325cd807-fbe5-4b38-9bd2-d77707c4d164",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41176ef3-2728-47f4-a5ec-d67be57b6ce2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "087eb43b-3a21-48db-9259-d999f8d847ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d1cc57-73e5-49ee-b378-ed4356ca0a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "152e340c-9096-4a44-80c7-6c0fa87be944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79138d1f-71c6-4799-9044-e5a09bf7e133",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d40731-ca96-4206-8b08-74f2c250897f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1539641b-9454-4180-8800-730903b4f48b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc88af1a-7263-4354-b1c6-22aefec5cbb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ad9e25-5776-4b02-86e1-af90d673a028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21724da5-a99a-4605-9e6d-4b822a10c042",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea52105-36fb-4424-8f7a-9a545e73c7fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10037461-2776-45ed-8e4b-4645c7183b0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "982225e5-1a41-4ffc-b47f-7fa00742d14d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d6f28c1-0130-4960-bcae-27eb4d86ce23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147f2e31-e4bd-460d-970e-a7b072054b12",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e751d2b4-ea6f-4565-9185-47fd418d745d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76b56edd-25e5-454f-a05c-05be2b5c592e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c07fee-931c-410b-9c72-8f02717425fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d443e560-911b-4707-a8ee-04fcd9397d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68196077-dd45-40e8-a3e4-699c9e668aec",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939f598b-f3c5-40a2-926c-4348bc9e87a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0c50306-ae82-455f-ac5c-df820c3063f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0f4a0e-0f15-4699-8ee5-1575de74f5c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cfdffbf-863b-498b-be7b-afca83c3c57f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3ff583-5fe3-4f57-9448-1c7d4ce9bf92",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e3bd12-42e8-4ca1-adc8-f374e7b0d85f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d46257d0-cb4a-4615-a0e1-4a2874b074b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41f722b-dda0-48eb-a60c-11e55cf3bbd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aab4282d-2227-4e93-8d0a-524c145ca753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0252fe1-ecf3-421e-998a-0c676905e3bc",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec2f26a-04dc-432e-980c-db026c3c5b5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c285524f-1324-4c53-88b0-bb7e3e6a69a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8d3dfc-3895-4911-bc46-cd2f35312cf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04e53145-16e9-43c9-bd46-5b83ef094659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42082534-2eef-485b-9e15-257ae34d0278",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0610291c-2ee2-4744-ab27-c96adecf44bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d0cb78b-e09c-40bb-8382-d52e2b64caa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1350c38b-21f6-44ee-b646-2268e0d768e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33283530-679b-44eb-ade6-bd7b2c6ec724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2e6d10-0b11-4b47-8d4a-b35c13060eaa",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de7a03a-b2ec-45a9-a0a8-d22a8832d730",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d42e43de-cfee-4f81-9de9-5a203d4e6d88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "688c456b-57fc-413e-81c1-ec286ac35c22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d77eb0-b081-415d-bd6f-fa813407cf0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9f3339-77dd-459d-99e6-41d02de18430",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f8f73d-2fb9-4b09-acb8-68d0135631e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f35e52ef-c7d3-4b22-9ed6-96748bc417d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96204c2-1c49-44c8-9568-a71072189c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd85a140-7929-40f9-b468-576c24b36bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad9091e-2f11-4386-8d97-19bc58a05b9f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be92bad3-355e-4b69-be4e-53e4daa064cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0140f68d-b72e-4e1e-9e5b-66ec59fe0406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d631167b-49b3-4889-aa64-189848943e56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52f8a79d-4a14-45a1-a328-5dd1e08c9d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81fa800-b6c7-42df-8a29-15efa2a346f7",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91160c0-5475-4bff-88c7-498200ff5dff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c3e1de0-2968-4918-b1ae-0282ae7e7280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd16a6a3-b4e8-4305-8faa-60a99923a543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97181ff5-552a-4331-85ed-021c9bdb1a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc3e1f0-af0c-4f20-84db-124a678ec971",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f3e6dd4-ef92-479e-a86c-175b5be687a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f475e036-808b-4f75-9d34-2ce465cbd8f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16eb506e-1e6e-4e3e-bb18-8f6436bd0cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a9a337-1833-40a6-b298-fc6fe54714a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75325426-8a06-439d-a76b-5193bd5278dc",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c45355-124c-4ce4-b6ca-c2bc526c2d65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4df4f7da-7407-4a1f-b09e-d7067ce54f17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c8dd28-3b4b-4f9a-94ea-5b4768f009ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07da8d6b-bbec-4d21-9d00-f6c067352754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e73286-4074-47d2-87aa-40a4e198d2a5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9207a404-1ca3-4d35-b83f-cd36416d8224",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "972f8378-b6f0-496f-833e-c074163a69c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fd158c-d684-4db1-b4a4-3f43c24a93bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78d54478-0c0a-458d-9a1d-36f0a06a1056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688cf94d-7d24-4748-9633-7fbb69ff2d5a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca25a21d-cd1a-442e-8335-fe4261708abb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f19ed93e-df25-488f-b0de-aeed65aec758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5aa84b5-1b29-436e-a443-47784ed7b5ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d95b49-ecaf-4f5d-a639-4867622c509f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8aeeb1c-bb1d-4380-95c3-c6207769eba7",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7058b0b8-5a04-4050-bb67-5a98f352f8b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faba1ac6-bf75-42f6-931d-ece108203d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38383c01-1853-4aa4-a330-5171f627563d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab64cbc1-322a-41fc-ac5f-68a6421919f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63b9e48-aa29-46d8-9822-9f3f129951ad",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0472f889-ce5c-4d5c-a4b2-1032b9e05545",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36238d8c-c905-4d53-87ac-4b3f30ea5299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1a406e-01fe-4010-996d-02675f6e3321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13bc39a3-78d8-4b32-9297-a8cb03eeff16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f987a296-1fb9-4f99-a3bd-6522a600e027",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3345b5-4588-41cf-b34d-c8b7da759333",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c768fa6-a3b6-40fa-9e05-0cb9a6edeb84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d64ab5-39e0-4c43-828a-a1549f3e54af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e32537fe-d9ed-4d1f-9dd4-5d86bdf46ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efaf0c70-075d-47bc-b1c2-49034f020ef1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339cec8d-58e7-4ec1-9095-506b8b13bed7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1c7ecf6-13da-4585-9d5d-382f6dbba434"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "139830b7-b294-435b-921e-84b92dc41036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35028c75-91c2-4294-b484-86608488cdce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0246e75c-d2d8-4128-aa99-9906116a87a7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ff38a4-2a84-4c93-9256-2618c24275f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7cbaf2f-af6d-498d-9120-c085e98646c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce28f5fe-e74c-4e94-9ece-d32e841312fc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5231b1ba-bc4b-493f-a3b3-547cc5ba97d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7168991b-4006-4329-88ee-c1989eb9f8e5",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3acbdbf-15af-43f7-b549-60a0a5cf2519",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7bfd26c-a87e-4763-b61a-835c7d7793fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f336dcf-e276-4f9a-b36a-65f3b9d72435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff4607c4-7cf5-41d0-820c-9e6365ec0bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f0a828-4902-475b-a27e-d94979a72f2b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5bca37-859c-4e87-8208-82bfef4874d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94fac249-856f-4a3e-8392-10b0243fc0df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "568302e7-327e-47c1-9016-da2cd349d5c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07e114b8-f5b9-4f32-86e9-babc219d71d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12230df-5c4e-454c-9047-d6d19259912c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226e23d4-b36c-4c46-9c0d-c448d9ea69a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d969e669-17d5-4a58-b485-0ccc4ff1b8f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d76475f-5d31-457f-b722-38e30e87d23d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8a342cc-1fbc-40cf-8845-23ad3c5f4456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91fbd4d-bb39-4a11-ad3e-c6cf0c8ec594",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889af544-1fb6-47be-a6e4-9944891ade7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ffd1293-10be-48e3-88f7-00ad17e3bfa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b474ef-f185-4f58-957b-7bee961dddd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02e50787-7445-42ad-8a45-f8b5aaea0bc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efca7836-7180-4070-8eb5-b3edf0697149",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc1938d3-5385-423c-b2b3-9c9b11b364f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "605a7c09-be98-4ef3-8d8f-675693fa20c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba083718-3c9b-4042-abac-8434df0e21c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b4d54d-9a53-4368-8a75-8b229958073d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d23b89-734c-4302-93fa-b7675f49c567",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa8a94e-e6bb-455d-95f1-6c0515fdd078",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c9b247e-8906-4b56-9987-0cb8dcaaf92d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd6e295-44ed-4c1d-bedc-c773f56f61fe",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b57ca574-35c3-40e8-bcf3-988ccb2d5542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a91f4b-742a-43e3-9f1b-86e49f203b46",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f6016f-a706-4cbe-b4e3-721269bf3929",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4dea436-2ca4-4a69-8e21-af46c7bb318a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "840c546a-0795-4be9-882b-2d5d714be7d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aa783b8-a736-41e0-a28a-ada8bc2c34f6"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81a5ca46-97d0-4a9e-9083-540d21ee2bbe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1861acd-f2e1-4c0a-a68c-f97ed29fc3da"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a458fd0c-76d0-4e06-8528-78e39af0e7bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7fe40dc1-6e98-4193-a0f6-0cd073eea92a"
                    }
                  }
                ]
              },
              {
                "id": "4ee24dd1-1cde-4d5c-bd0d-56464b68296f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3667a52a-3ece-4a01-aeaa-5894bdd181fb",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f48fb34-7d22-414b-b41f-db9ea6754e12",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6453ed06-9367-4074-b5b0-bd360038c20b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff4aab3-1c11-43e2-b902-63d252747ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "560fcd32-6316-4706-a113-a9d67a225998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8cc35c1-7bcf-47b7-8474-0db4f82e3258",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7806a124-0581-4d4f-a111-13df6372bb9a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6f3f5557-0014-4ab5-ba30-68062170760b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f009bd-4ef4-45bf-9347-8d572fff65a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "340e9f12-e986-465e-a9f7-43048ec48889"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "200505b8-6b0f-40d0-88a4-435fa50ccaef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19455f62-3514-44df-9f1d-84f4617a0ddb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1672f79a-4866-415b-a607-fb1a9f94cbef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9282d190-b179-4269-b220-c9bd838ab794"
                    }
                  }
                ]
              },
              {
                "id": "105c4a1f-d588-4097-ae99-9ae9a15bbbf0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d91f774b-c649-46ed-ad81-798b69d9f03d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9e075c-ae13-4f11-ae6f-5da0354a0d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "3680729b-c8f6-4bfd-b1c5-b2fe924b69dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca16ad5-00eb-4cb4-bccd-2f384f1feb25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c141de-62b3-418d-844c-931978821de4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b2321488-9e21-49b6-8305-b3d8e50f268f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c8c07645-9e3a-4a28-a920-5a3e3a0baaf7",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df17cf68-50d0-439b-a04b-c8705e059b3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "838c5aae-1f1f-487c-8018-36edc29d17e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c0f6ef2-b20b-4729-8b1b-81469fe7beac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1bd211e-725d-4b00-89f1-4029c752a38e"
                    }
                  }
                ]
              },
              {
                "id": "58131645-ae54-465e-b695-3bad522f5c81",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "722dc723-0373-4139-b973-dd752850310d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "53145ecb-7f12-480d-b77b-c0120fd600ce"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "082dd35f-8b53-4f56-9586-febfb52d5ea1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e2ef4b5-a0f8-4ef4-95a9-736d384bb32d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd63b026-9d94-41ae-aa4c-24e631576c47",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "48b2f852-adb5-4e0f-98be-f61e4782cb44"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fdcf7189-1c1b-4b58-8cfd-ce3d4d085f0d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc2f2e33-a0e8-425e-847f-696186a13e5c"
            }
          }
        ]
      },
      {
        "id": "87898d81-163a-4098-8c7d-0aa877524891",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "595e2eae-a3dd-4199-a54a-ec7be41821bf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f6fc6f8-a58e-40e2-94c4-ae203bfe76c0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "33ec0a35-4682-4ee9-8f47-07fa3d693e7f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ef467b-b876-400f-b3e8-22622144d437",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4daa1a88-42ed-4f66-809c-56deae7e1f8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d35743-12ab-4b7b-b2eb-02404035b699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "816bd1f3-75f6-4801-8830-b5e46d844dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1d0d9f-581e-41f3-9153-5297ec7edd6e",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaaea97e-30a1-47e6-b0dc-710c53d4d274",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "546c250c-a332-4f4b-b164-c24a0d3b45e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fba01a3-4122-43fb-8465-281df2259f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c6fb589-5f3c-4deb-8b94-32941205489f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88ce7fd9-0205-4225-90e8-f38c0440db75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e75b305-5b57-4aa0-8786-1d6f4161f453"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "42635c14-7802-4699-8acd-5f9349e0fe8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63a45932-9cc3-43f5-8f06-9427c591eaf0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f0059a2-2604-415c-8842-e79e8a60c6cb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "95db630b-9ca5-495d-a60a-12cdb1afce71"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "374546cb-7894-42f6-b8f6-965722b4a839",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f99849c6-af24-4cb2-97d8-c7bbc2b9f1c2"
            }
          }
        ]
      },
      {
        "id": "a77a11b9-92e7-4a67-bade-7c4fa2f2ff9f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9330e54a-4eb0-40e8-879d-03f849b1afbc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5d9940e0-71ec-42f4-a092-6fa4964da92b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8d43e461-a3d7-4864-bbc1-d205fe2ace31",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68156bd-f91e-412e-a02d-45d7b7742409",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcd2d6fc-04ec-4767-a597-4f6c0a2ed60f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "956a4162-73b3-4a9d-9d14-0060e4236490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "129f40b1-2b08-49a6-925c-29af53da22c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0c5a41-efba-4f22-bfd8-17a4ca95e29e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ad0811-30c2-4dc3-a1cb-76ffe0fa1728",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e4591318-1bc5-4072-b94e-ac8453318d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f85f23-8b78-4b4a-8146-e43db09a9f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aec0ff15-2152-411d-8e2f-37aa1f262573"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ef1422c-47d5-4513-a7e7-6298e1885264",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae23f039-1cd6-486d-90dd-b76cf53ffb76"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6a23183-6d76-432f-b4ba-c17acd15f0cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c537a8e-cc5f-4976-be8e-f0ec36ffcc1b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4ff9506f-0ea8-4e98-8d67-df69ab116068",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "df553436-5e53-44e5-93c9-ec650f8b3753"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "927db2e4-9ea5-45d0-bb81-096ee2a28a55",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2d885405-1a4a-4aa6-bc52-7273750314b1"
            }
          }
        ]
      },
      {
        "id": "b49b3440-ad01-402d-9692-87d495605f87",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ce3ff30b-6f05-478b-8bcb-4d3294b0802a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "612cf040-e81f-46be-a71d-ea0f11542a37",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f6107952-0a8c-4584-a85b-a875c4554506",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a840ff2-f232-4297-b24a-f5c96462a988",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb5e3cf6-0f5c-4aac-a873-25761da17bca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e977b0e0-5bbd-4c09-9a8d-34a940c73f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d025ab44-8edb-48a6-afb8-300723addbd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00874da4-8714-4de7-8ea4-0a483a16c43a",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103efdd2-b382-41c9-933d-77e6ccd58e62",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a52b79c0-8030-4339-bf95-3496c2e1db7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1311605-5d55-4d63-80fb-ab5810a5bd87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "14ec87c1-9e90-434e-9724-596c88e07ef8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36881759-a574-4b2f-a832-f3572bcca5fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a7a86a3-bfd2-4e56-bc96-3c723d1b6d7e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "24981e74-3be7-4c4e-985f-bda68f125849",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4806803-c516-4a5e-8368-8fd463148242"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b476f186-80c6-467d-928d-1d75d047e1d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "18b3e504-71be-4d1d-ac9f-457e775b8238"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3833860-8b91-4b0c-8223-446a812dbab0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d1746cb7-28df-46c8-a685-8a168feea3b3"
            }
          }
        ]
      },
      {
        "id": "b5a101b6-57fc-48dc-bf45-c16d087fe0c4",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7d11342d-686c-4307-9056-cd9ad2223122",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a299f725-3cde-463b-b302-a75ef5351302",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4c435b4e-3684-4179-8818-57200ed206f5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6b5de405-fde6-4a6c-ad48-62879c815240",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "09180656-0aef-41eb-8020-03933b764b21",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 405.8576923076923,
      "responseMin": 8,
      "responseMax": 9093,
      "responseSd": 1101.4400813595998,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1684974987557,
      "completed": 1684975107602
    },
    "executions": [
      {
        "id": "7896e733-3376-4ab5-ba79-d910a525f8f8",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b0c4c14c-ea5c-4439-9cab-d4096d1ddd9f",
          "httpRequestId": "490a39f4-f355-4925-85b5-ba22dd76e9dd"
        },
        "item": {
          "id": "7896e733-3376-4ab5-ba79-d910a525f8f8",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e8f6c3ec-e716-4371-8ce5-c81a35ca729b",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 0
        }
      },
      {
        "id": "597c210c-9a16-42f7-9500-c123b942c82e",
        "cursor": {
          "ref": "edd798fc-dd32-4f84-a4d9-c5ae6c90f096",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1fd77cba-141f-492c-bac9-6c7ca41cfc94"
        },
        "item": {
          "id": "597c210c-9a16-42f7-9500-c123b942c82e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "cfce0efd-07e9-4160-99f4-21777f1d44d5",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "4c8703fb-faac-4145-8c10-da386b36ab8e",
        "cursor": {
          "ref": "95880fde-ba6d-4896-a62f-1c4de903d9bb",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4e9101af-6c5b-4012-957d-9bf7f30c4658"
        },
        "item": {
          "id": "4c8703fb-faac-4145-8c10-da386b36ab8e",
          "name": "did_json"
        },
        "response": {
          "id": "3395a15b-4357-4547-9dee-1e1a29819666",
          "status": "OK",
          "code": 200,
          "responseTime": 987,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175d8ed5-5f26-4650-b652-ae8d9141fc91",
        "cursor": {
          "ref": "2851e4bb-70e5-40bc-900a-ab85bcdc6846",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "aaf81fd8-6524-4910-97d5-8817bf11c5cf"
        },
        "item": {
          "id": "175d8ed5-5f26-4650-b652-ae8d9141fc91",
          "name": "did:invalid"
        },
        "response": {
          "id": "964db1e6-09e3-4631-bc60-abd3be180f96",
          "status": "Not Found",
          "code": 404,
          "responseTime": 900,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "175d8ed5-5f26-4650-b652-ae8d9141fc91",
        "cursor": {
          "ref": "2851e4bb-70e5-40bc-900a-ab85bcdc6846",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "aaf81fd8-6524-4910-97d5-8817bf11c5cf"
        },
        "item": {
          "id": "175d8ed5-5f26-4650-b652-ae8d9141fc91",
          "name": "did:invalid"
        },
        "response": {
          "id": "964db1e6-09e3-4631-bc60-abd3be180f96",
          "status": "Not Found",
          "code": 404,
          "responseTime": 900,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "ac0bd3bb-8dc9-4648-99ba-748a13093cb7",
        "cursor": {
          "ref": "46244c19-e1dd-424e-b8f7-92b85de3edb4",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8402b89d-2e73-40a4-ad89-7be5e36650ed"
        },
        "item": {
          "id": "ac0bd3bb-8dc9-4648-99ba-748a13093cb7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d3146bed-80c1-4c7b-b002-5dae1f19ab47",
          "status": "Not Found",
          "code": 404,
          "responseTime": 111,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c04df03e-aa6e-41e6-8686-785cf328f156",
        "cursor": {
          "ref": "1e205937-c600-4afe-8884-f13198c70a35",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c6f24dd5-49c7-4428-90ba-8a6f0110f5ed"
        },
        "item": {
          "id": "c04df03e-aa6e-41e6-8686-785cf328f156",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "7f66a29f-a3d3-4d8d-b64f-fbbadf35d94e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 120,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a704b6-10ba-442a-9fbc-1ab8cedb0652",
        "cursor": {
          "ref": "0710be15-5681-43a1-9906-4ff5faa026c4",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b4f87b37-89ea-4970-8bc1-3baf8eba8c04"
        },
        "item": {
          "id": "89a704b6-10ba-442a-9fbc-1ab8cedb0652",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cad9fc50-0db0-4905-b564-54454d647556",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "c86404d9-1ab2-48c0-abc3-817e6b27f4b3",
        "cursor": {
          "ref": "dfd919d3-bf1b-4e49-94e1-dd71e666c4e6",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "880f6e10-8830-4f62-8706-34cbff216760"
        },
        "item": {
          "id": "c86404d9-1ab2-48c0-abc3-817e6b27f4b3",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b4ed1518-41af-4171-b409-55f71147a4d5",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "c86404d9-1ab2-48c0-abc3-817e6b27f4b3",
        "cursor": {
          "ref": "dfd919d3-bf1b-4e49-94e1-dd71e666c4e6",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "880f6e10-8830-4f62-8706-34cbff216760"
        },
        "item": {
          "id": "c86404d9-1ab2-48c0-abc3-817e6b27f4b3",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b4ed1518-41af-4171-b409-55f71147a4d5",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "956c27e4-446c-4377-8537-8394fb9ba189",
        "cursor": {
          "ref": "70e4fb35-54f0-4f6f-8311-ec103aedb0d0",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3eacf436-74d8-4e58-b814-318a52acae15"
        },
        "item": {
          "id": "956c27e4-446c-4377-8537-8394fb9ba189",
          "name": "identifiers"
        },
        "response": {
          "id": "d43c7402-ba3d-4928-9d9d-b536e52f89d4",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "173739cd-23c3-412b-961a-d3b7390e63bd",
        "cursor": {
          "ref": "d91a8fc4-9076-413d-9106-b57623204696",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6e79a5a3-d985-4f7e-91cc-76fe8d709a95"
        },
        "item": {
          "id": "173739cd-23c3-412b-961a-d3b7390e63bd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bb408697-c9cb-4ae1-bec5-ec3013ed0f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "173739cd-23c3-412b-961a-d3b7390e63bd",
        "cursor": {
          "ref": "d91a8fc4-9076-413d-9106-b57623204696",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6e79a5a3-d985-4f7e-91cc-76fe8d709a95"
        },
        "item": {
          "id": "173739cd-23c3-412b-961a-d3b7390e63bd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bb408697-c9cb-4ae1-bec5-ec3013ed0f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0870c1e-1e86-467b-8654-0cd23ea68b28",
        "cursor": {
          "ref": "600493d9-0299-4209-9504-01f606542e2c",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3da0a194-5a35-4ebd-b933-b8034ff3d896"
        },
        "item": {
          "id": "f0870c1e-1e86-467b-8654-0cd23ea68b28",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "075554cf-3d9b-405a-8f54-38900b8d5e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83fbbebc-71ab-48a5-9aef-77db4fbcfb0a",
        "cursor": {
          "ref": "ddb72872-2f45-4085-8a6d-181858a7929e",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "71c6604e-a049-4c65-bd68-e71d04ac093a"
        },
        "item": {
          "id": "83fbbebc-71ab-48a5-9aef-77db4fbcfb0a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "67427597-929c-4304-bf9f-273fe3af1a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5989dc4f-431e-4d06-9fae-0fb8d699e03e",
        "cursor": {
          "ref": "ddd388c8-64c5-401d-8620-256540f9fa3d",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9d6d5e3f-acba-46f1-a0bf-538a63181345"
        },
        "item": {
          "id": "5989dc4f-431e-4d06-9fae-0fb8d699e03e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b579de38-32b7-4e98-a5f6-e68e6de7b259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fcb2abd-52a3-49ed-a3de-90bb7eba846e",
        "cursor": {
          "ref": "d566587d-cd00-4a4e-a923-30157fe481d3",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "052a6cf7-2532-44dc-bdc5-a9181333e293"
        },
        "item": {
          "id": "4fcb2abd-52a3-49ed-a3de-90bb7eba846e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "82535539-ff2a-4801-a0ff-d52f06db6972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad58694-daf2-4370-9ad4-552b5c63dacd",
        "cursor": {
          "ref": "6be44fd8-6781-49c9-b31d-935017956aea",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c7d6a377-859c-4faf-b42c-cfe2fcfed011"
        },
        "item": {
          "id": "5ad58694-daf2-4370-9ad4-552b5c63dacd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b73ec98b-d96a-419b-8e83-1b12684ccef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3543703-74fd-4496-b5d0-b4316e59c543",
        "cursor": {
          "ref": "bc445909-7b26-4bcd-b04e-0a6b07d8e0a8",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "194b5168-8c88-4f60-9edf-a91dcbe3b0f4"
        },
        "item": {
          "id": "f3543703-74fd-4496-b5d0-b4316e59c543",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f194b1d9-cf5f-4337-9668-6d0996d1d779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98908252-39fa-4d90-a07f-a76113e6459b",
        "cursor": {
          "ref": "82dab74b-dcc9-4a1c-9bce-5a26aa5a9604",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "aaed3193-ef9e-4c38-8591-da618d943123"
        },
        "item": {
          "id": "98908252-39fa-4d90-a07f-a76113e6459b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e78a13ac-9bde-4d36-ac67-8b52aacfe621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9840d966-5d64-4bce-a207-7556f9e64d49",
        "cursor": {
          "ref": "8dcfd2ef-b4ce-474e-a2b6-111ce6e7fee8",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "144ac5be-692b-47e9-868e-1ea7b5ce7d0f"
        },
        "item": {
          "id": "9840d966-5d64-4bce-a207-7556f9e64d49",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "738f850b-a84f-403b-9f36-5fa186ec2250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec28a0b9-07bb-41b5-a337-5e8152e80640",
        "cursor": {
          "ref": "5d817906-c5ee-46d8-8af4-3a74d3ec5640",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2997b811-38d1-47ff-9f1d-9cafa32a8d50"
        },
        "item": {
          "id": "ec28a0b9-07bb-41b5-a337-5e8152e80640",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2ec55603-bf5a-49b1-8f77-a1a1a2a77584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2daff6bb-1141-4d59-9035-3e7bd3bf18f1",
        "cursor": {
          "ref": "d84a28ec-deb5-41b8-bd15-fd577a65d1b1",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6ebe864f-63bb-4f1b-8133-5bf406a35d7e"
        },
        "item": {
          "id": "2daff6bb-1141-4d59-9035-3e7bd3bf18f1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e7fc2c4a-6d82-4a61-a8f5-5078bd14d4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0365d77f-0487-4b96-8e17-b825c9eb3fa7",
        "cursor": {
          "ref": "c5402a4d-c40a-42c3-bf58-67dafeb1b598",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "cfe2f423-8bb9-47d0-ac6e-8f27647bbeca"
        },
        "item": {
          "id": "0365d77f-0487-4b96-8e17-b825c9eb3fa7",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d5ade7c7-cb94-457d-a835-430f1c30f0e2",
          "status": "Created",
          "code": 201,
          "responseTime": 996,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "24a16a1e-1399-4dc9-b3ff-b9c25166db80",
        "cursor": {
          "ref": "ed252e0b-fa0b-4e90-8b07-fc24488edde9",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3e126dc4-ce83-468d-84ed-5be5ad0f150e"
        },
        "item": {
          "id": "24a16a1e-1399-4dc9-b3ff-b9c25166db80",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9812ce9c-8319-46a0-bb59-1f3165ccc02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41bd592-bddc-436c-bb22-250fe8f29930",
        "cursor": {
          "ref": "1af19373-946c-4c7f-942d-11325def29b3",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9bb3d771-f6a7-4c69-9806-4262d54c0d4a"
        },
        "item": {
          "id": "f41bd592-bddc-436c-bb22-250fe8f29930",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1b8c830e-2df6-4e66-a49c-d0ee6e90f323",
          "status": "Created",
          "code": 201,
          "responseTime": 9093,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "a17be7f0-315f-4a7f-a502-566cc074580d",
        "cursor": {
          "ref": "5e6d559f-33e7-456f-ba39-e17ae42f1cc2",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e4fa0364-ddfd-4fb9-91a6-7bcc4081df26"
        },
        "item": {
          "id": "a17be7f0-315f-4a7f-a502-566cc074580d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d24029eb-c7a7-44d0-8c04-b2c42f0ca342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d2f1d14-80df-4681-b7c8-1c8bb20aa217",
        "cursor": {
          "ref": "25b93919-88b7-4184-a909-82abb9eb76bc",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7335cd2e-4496-4545-ab68-8186a2130e73"
        },
        "item": {
          "id": "2d2f1d14-80df-4681-b7c8-1c8bb20aa217",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e8819abe-6f9f-4ad1-b9f3-73393b2bf022",
          "status": "Created",
          "code": 201,
          "responseTime": 4261,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "c6cfabb9-09a6-4fa1-aed8-52a60f7a88dc",
        "cursor": {
          "ref": "7f307a0c-a5ed-4ed9-9ccd-9136bb10fa8e",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "675acc1d-13e0-49c8-b225-104d70a810bc"
        },
        "item": {
          "id": "c6cfabb9-09a6-4fa1-aed8-52a60f7a88dc",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a0568d86-c0cd-42d1-848e-5fabb01737d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ba1d5c-3c74-4a28-8097-1ef456856167",
        "cursor": {
          "ref": "73e84960-7146-4b31-8609-12128d805089",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9e294f00-d86b-460a-9265-311b65ea2f0d"
        },
        "item": {
          "id": "37ba1d5c-3c74-4a28-8097-1ef456856167",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0c8eee6c-fb34-45e3-b2cb-485bdaed0e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16365870-648e-4252-a18b-5300376e2afc",
        "cursor": {
          "ref": "3a92531c-948c-4bff-9031-c7e5a438a947",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0ba3dc45-eb1b-44ba-b2c8-a8d7f7f8c745"
        },
        "item": {
          "id": "16365870-648e-4252-a18b-5300376e2afc",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "8b4f9b61-7b11-4cd2-b65e-8507ecd01419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fb08888-83ca-43bf-a2cc-9c95e9acac77",
        "cursor": {
          "ref": "ac50e082-79c8-4b72-bc23-9cfadc44340b",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f57aac25-0483-4ee6-8997-bbce4c21d065"
        },
        "item": {
          "id": "4fb08888-83ca-43bf-a2cc-9c95e9acac77",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "79b1f4ac-a00d-418d-a582-0739fca883a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c459f201-db03-4dfb-baf6-d75fe6248dd4",
        "cursor": {
          "ref": "57a03d08-86ba-47a0-8c44-175c4ec05aff",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "17024eb7-f8ed-4fb3-8700-34d9ca332653"
        },
        "item": {
          "id": "c459f201-db03-4dfb-baf6-d75fe6248dd4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "51ec6845-534b-4806-b2aa-0d09b25713cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0336548-0c76-4c61-bec8-ab3fad9d9ae5",
        "cursor": {
          "ref": "e118bb54-4d80-4194-b560-e98d73c4eecc",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f5a2e0ab-1908-4c43-af17-acc8c76526ab"
        },
        "item": {
          "id": "c0336548-0c76-4c61-bec8-ab3fad9d9ae5",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7f055fad-e2f4-419b-9aa2-e44d2eef451b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237e9aa2-f211-47ce-bcb5-80207f412468",
        "cursor": {
          "ref": "e8e48670-c18a-48db-b4d2-a8759be95b4e",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c47cb369-22d1-4e2e-997b-78c2069cb420"
        },
        "item": {
          "id": "237e9aa2-f211-47ce-bcb5-80207f412468",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "96b6752f-f13c-4e36-8910-f06590567ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111c277f-0883-4ccb-b3fd-6314b673c4a5",
        "cursor": {
          "ref": "31358703-ce65-4489-9800-886b810c4fa3",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c40c50b8-cbbd-4277-9d80-c3044b475df6"
        },
        "item": {
          "id": "111c277f-0883-4ccb-b3fd-6314b673c4a5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "26798fe3-7383-40d4-a684-e30199b03425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d34bc4-366d-414f-8832-295596b0a184",
        "cursor": {
          "ref": "6eb09012-9218-4bc4-8ba6-0ff844032cbc",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8ae8930d-8d50-4810-a77d-1dded5b46190"
        },
        "item": {
          "id": "e1d34bc4-366d-414f-8832-295596b0a184",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "bb0143cb-74d8-428f-874f-9ff243294249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d451d2-49ce-4bcc-998c-05bb60ba8a8c",
        "cursor": {
          "ref": "22844cd0-d531-4235-a0fa-2ed197a28867",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "21cb54d7-3e8f-4b8a-9a4d-97f0619f7cd1"
        },
        "item": {
          "id": "40d451d2-49ce-4bcc-998c-05bb60ba8a8c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e41e48a1-7834-4a11-ad59-404f8f195a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5928663-dcb8-4878-940d-359676f36d98",
        "cursor": {
          "ref": "39885e9e-2a65-46f2-b02a-88360933ceda",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "646b25fb-31c9-40a9-a7fa-a6e5d73982ae"
        },
        "item": {
          "id": "e5928663-dcb8-4878-940d-359676f36d98",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "32defb73-b190-40cf-b740-15957b1caf6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cddaee32-c613-4d1e-9c3f-f917105bba75",
        "cursor": {
          "ref": "71099a3f-1fa9-405f-8587-0f9da442d29d",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "baa543ac-b9b3-4e49-8cad-708a27c8ad08"
        },
        "item": {
          "id": "cddaee32-c613-4d1e-9c3f-f917105bba75",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9da079fa-a577-41cf-a940-8231c0004352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612f5620-2c7f-4092-99d4-6225c486dfc9",
        "cursor": {
          "ref": "9e9b4b4a-816e-4505-af7b-f2eca6739e7c",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7f9e2a7b-b6b4-4941-acc6-a0afe690a932"
        },
        "item": {
          "id": "612f5620-2c7f-4092-99d4-6225c486dfc9",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ff3c6ecb-c5d9-4314-ae20-224bd2d8feaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42107181-c74e-4ea1-b630-b210642f5680",
        "cursor": {
          "ref": "3a64bc10-50b4-478d-8238-8238df7d608e",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0b889294-18bd-4425-9498-9af610373947"
        },
        "item": {
          "id": "42107181-c74e-4ea1-b630-b210642f5680",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "fad4072d-eb69-4f72-975c-170a6a05cfe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14da30be-8b0e-40e5-bbee-16559f78aae8",
        "cursor": {
          "ref": "ff273aac-4c31-488c-acdd-fd62c1017915",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9ed1e798-5c45-4415-8d56-83c1779f1523"
        },
        "item": {
          "id": "14da30be-8b0e-40e5-bbee-16559f78aae8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "16f8482f-c6cb-4d20-815a-7d895e322277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4451dc8b-674e-49b2-a7b6-e45d3a43fc51",
        "cursor": {
          "ref": "29c5080b-3a78-4a6a-8bc7-a4fb2c6ef2b2",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "444ebb72-05ad-4e05-baab-1d2f706316fc"
        },
        "item": {
          "id": "4451dc8b-674e-49b2-a7b6-e45d3a43fc51",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c8b50c7c-ca8c-4bda-b45a-978b4632e063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a371a7-f2eb-44e5-8c84-f4cd570772c7",
        "cursor": {
          "ref": "8817ecc3-5626-4d9a-bd70-f2b7c0cb4d0c",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "915592b0-a3ab-467f-ab78-36dea8699536"
        },
        "item": {
          "id": "38a371a7-f2eb-44e5-8c84-f4cd570772c7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1248a3cf-810e-47b1-a91d-71c1c90836be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d2f6e0-4dae-4319-945c-264aa720287d",
        "cursor": {
          "ref": "293346fa-c541-45fd-a2da-00b5ed5c5a88",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c2a2cdb9-f3db-4a5e-b9fd-0d2ef2318cff"
        },
        "item": {
          "id": "b6d2f6e0-4dae-4319-945c-264aa720287d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5a2d24a1-8821-43b3-ae83-41f47454b87b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a79af2e-9a8c-4ace-8271-c30f147b361f",
        "cursor": {
          "ref": "930d09e4-2324-4949-9ce1-f6e0f2371866",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "648a3dc0-1e88-4a04-bea2-2163b1acc4d0"
        },
        "item": {
          "id": "3a79af2e-9a8c-4ace-8271-c30f147b361f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1f91d0a3-a8b3-443d-ac32-9fe7935e28a2",
          "status": "Created",
          "code": 201,
          "responseTime": 2747,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f0776d07-be72-4680-9e6a-c1f70b21000c",
        "cursor": {
          "ref": "b6ddd29f-0a60-436a-a946-a76c29cfa026",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "32179173-8aa7-4d5d-89b1-021f07c204d8"
        },
        "item": {
          "id": "f0776d07-be72-4680-9e6a-c1f70b21000c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1654f0f5-574a-445a-8c12-ae4d374e611e",
          "status": "Created",
          "code": 201,
          "responseTime": 2772,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "07cdc63d-fbb1-4905-8edd-71fad94b0b8d",
        "cursor": {
          "ref": "520e4e39-5ca7-45eb-add3-8191bad6511d",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9172e697-0e97-4918-a20c-1cf108136f4b"
        },
        "item": {
          "id": "07cdc63d-fbb1-4905-8edd-71fad94b0b8d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ed0188ba-e488-4697-8b9e-a7e1f71b7b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb2fe56-f3bc-49d5-a63a-2782fd7603e3",
        "cursor": {
          "ref": "ad5831fe-4fee-4c49-bc7f-d53dcbaa81ac",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5582f62e-e51c-4f59-9774-dabd12291088"
        },
        "item": {
          "id": "7eb2fe56-f3bc-49d5-a63a-2782fd7603e3",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "102f0579-c4f5-4209-b0d1-3b64eee141c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309b2fc5-c450-4d9f-8d81-2f202af6f625",
        "cursor": {
          "ref": "9095d3e9-b412-47a1-835b-5cbc90e60d21",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "84e87f89-a772-4459-ac1e-fb36a96b6597"
        },
        "item": {
          "id": "309b2fc5-c450-4d9f-8d81-2f202af6f625",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "09efcf2e-0667-44d7-8e13-faa7a9d01046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69207a8-bd47-447d-9b83-24580345a6f4",
        "cursor": {
          "ref": "4bd5af71-0820-4c1b-a29e-86a7bfd131e0",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "81f50175-df46-4921-971e-506bf1bf29c5"
        },
        "item": {
          "id": "f69207a8-bd47-447d-9b83-24580345a6f4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "dca43e99-a1cb-45dd-b8aa-9373f0fc66fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b42af28-2e4e-4d11-95fc-d0581a2e6284",
        "cursor": {
          "ref": "20a16cc5-68bb-4260-bb4a-671becd118ba",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "86a33146-5ac4-4b5b-b58b-f694765865c2"
        },
        "item": {
          "id": "3b42af28-2e4e-4d11-95fc-d0581a2e6284",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "0bb85c5e-0a23-4cf3-b72d-5f0a10174365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d0d3856-9871-4f6b-b982-202b51b14516",
        "cursor": {
          "ref": "b2c0cab3-5561-4e23-acb4-215eb8ca2c82",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4ffe8817-e6eb-478b-a4a2-ff93fc04390e"
        },
        "item": {
          "id": "5d0d3856-9871-4f6b-b982-202b51b14516",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "090a91c6-ead9-424b-a439-ff8548d835a7",
          "status": "Created",
          "code": 201,
          "responseTime": 3770,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "2dbabc96-8418-4d75-be73-5bddebbc2823",
        "cursor": {
          "ref": "899eecd1-1418-4f47-89d2-e59264418a3e",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "89daf2f3-3ab8-453c-9490-6ac90d4839d6"
        },
        "item": {
          "id": "2dbabc96-8418-4d75-be73-5bddebbc2823",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5c33050d-b48d-4041-89b7-3624557571cd",
          "status": "Created",
          "code": 201,
          "responseTime": 3147,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "050c82da-acaf-4d33-a79f-22756b949655",
        "cursor": {
          "ref": "b37ec6dc-16ae-4a21-87d6-6534a693ac39",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "92e18701-94c9-4bc5-a795-48a1c20c3d89"
        },
        "item": {
          "id": "050c82da-acaf-4d33-a79f-22756b949655",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "04b9d2ff-1c87-47e0-9791-b8f854a2efd6",
          "status": "Created",
          "code": 201,
          "responseTime": 2545,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b5101d02-e1ef-4fd3-b56d-8bfcb76be038",
        "cursor": {
          "ref": "be763b28-90e8-4625-b109-f41ae29f1115",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "59f15833-7283-4e63-a887-4d92648524c7"
        },
        "item": {
          "id": "b5101d02-e1ef-4fd3-b56d-8bfcb76be038",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "19913149-4bce-4e91-b11e-4a2fe311be3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe27594-a15f-45b0-b069-77f11fc0659e",
        "cursor": {
          "ref": "09378380-35cc-40f7-a166-87d9f9039708",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d2513a23-b9f3-4f98-9be5-190566f95ded"
        },
        "item": {
          "id": "cbe27594-a15f-45b0-b069-77f11fc0659e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "23600ec4-ac17-4036-98a0-8cc6bf5d5340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cef852e-0554-42bb-95fa-b3a964da3f80",
        "cursor": {
          "ref": "a898de58-b44b-4814-8f18-356106a3333e",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "755b4398-5891-461e-9fdd-b482ed10264a"
        },
        "item": {
          "id": "4cef852e-0554-42bb-95fa-b3a964da3f80",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ff790047-4da8-4221-b24c-f7185eaac2bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c1fbdeb-7ddf-4531-8723-f27256e01c4f",
        "cursor": {
          "ref": "3d1e915b-249b-4df2-b81c-02781828d33b",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "81b67856-b6c8-4308-aff5-f3dc8453f081"
        },
        "item": {
          "id": "1c1fbdeb-7ddf-4531-8723-f27256e01c4f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c9cdca86-37ed-4833-bb89-c4ff5f802272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7f9236-485a-4c7a-a758-b53791fc73ba",
        "cursor": {
          "ref": "793c3e1e-2469-427f-83fb-d7a808d29d95",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fcad300f-cff1-453f-9c89-120338ea6268"
        },
        "item": {
          "id": "6b7f9236-485a-4c7a-a758-b53791fc73ba",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "41797c68-1afc-47bc-b0c3-81f37222c929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "996ae965-02fb-442d-8b95-84f95034962f",
        "cursor": {
          "ref": "107c4ea3-0ebe-4560-ad36-423ba3f47f07",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f0bb27d4-8cc3-479a-9a87-37fb0e7c556a"
        },
        "item": {
          "id": "996ae965-02fb-442d-8b95-84f95034962f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8f8b9e12-7c36-43ca-b9f4-5e15443cb967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d8cc56-778e-42e3-ace5-08c3a7cef68a",
        "cursor": {
          "ref": "cd337314-8ba1-42c0-9872-55e3bdbc2d8c",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5920f2c0-ad9f-411a-bb0d-af216b862fca"
        },
        "item": {
          "id": "09d8cc56-778e-42e3-ace5-08c3a7cef68a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5a4dfb43-08a1-4c9d-b997-dcf6cfe167c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ec073f-05ff-4fee-bccf-7fc26b62be38",
        "cursor": {
          "ref": "c3d915c9-7179-44de-b534-14541a494d6c",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c7b1e81d-9670-461e-8a93-ca8aebeab5d1"
        },
        "item": {
          "id": "c6ec073f-05ff-4fee-bccf-7fc26b62be38",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "312bcc71-b984-44ed-bd88-0292d9d29a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f027d3-caad-4045-baf7-44e3c3a5e09a",
        "cursor": {
          "ref": "be112482-f4ca-4727-ad5b-8c29bdf0e819",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "60a34ed1-962a-41ec-90cb-304e8fe90a75"
        },
        "item": {
          "id": "d8f027d3-caad-4045-baf7-44e3c3a5e09a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b1560b75-8669-4dac-bafd-32d6b987604c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b28cc561-a473-469f-979a-a7437d9a4690",
        "cursor": {
          "ref": "cee6753d-389c-48cd-a899-ad46fbe6ddbe",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a230ed73-d336-4741-8fc6-74f920ebde86"
        },
        "item": {
          "id": "b28cc561-a473-469f-979a-a7437d9a4690",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e70539b8-e4d7-46b1-a762-349208819585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8d3173-d172-4973-b9d8-6baafb3800c0",
        "cursor": {
          "ref": "ee801467-1e7b-4d46-bad1-7c149f278ff7",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "129b1d0a-8e3c-4352-a9c2-d1c257a7cd9b"
        },
        "item": {
          "id": "9e8d3173-d172-4973-b9d8-6baafb3800c0",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8af088ca-e5b9-4c9b-8c34-f08ec9080ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ce93a3-aa41-4561-aea0-07244ab4fc6e",
        "cursor": {
          "ref": "4f61c241-5b80-4248-830e-89fed3bcd81a",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "37319c49-28b0-4e83-ad9c-0edb0a8a3480"
        },
        "item": {
          "id": "41ce93a3-aa41-4561-aea0-07244ab4fc6e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ea05f228-8683-455c-bd2d-c875a4c43ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d62d79-4f7b-4a0b-86b6-43792ec320e1",
        "cursor": {
          "ref": "879b5660-b1ea-4d3e-9f1b-1f1c29305f6a",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "86b844a3-72a6-42e1-8c6b-daf6d503df10"
        },
        "item": {
          "id": "22d62d79-4f7b-4a0b-86b6-43792ec320e1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d258841f-1a25-473c-bd10-7d04f3969dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36228da4-6abf-43b1-a7cd-8afffdc57541",
        "cursor": {
          "ref": "feb85a44-9ee5-4ba6-8bba-f056528ff43b",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a6949c16-6252-4b96-b594-285856357905"
        },
        "item": {
          "id": "36228da4-6abf-43b1-a7cd-8afffdc57541",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4db93980-bae0-4cab-adb7-50615c106788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0476f16-294a-4932-a433-2a317f1531ca",
        "cursor": {
          "ref": "d4d6084f-aec1-4c29-8462-97a565228a12",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e4b13e9c-cc87-4f25-ae21-ea4e4905a4eb"
        },
        "item": {
          "id": "f0476f16-294a-4932-a433-2a317f1531ca",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "66b87e4d-1bc1-4443-8040-a42c52c306e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa5984c-11e7-4040-a399-87b2afe94ba6",
        "cursor": {
          "ref": "a5cbf401-1da2-472a-b183-fd11c09e4d59",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9f525c24-9c6b-4948-81e5-d6923ec79f3b"
        },
        "item": {
          "id": "efa5984c-11e7-4040-a399-87b2afe94ba6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b0ab3b85-839d-4fdf-9440-a5ebd06d41b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebcffd7-fd93-45a6-b033-fe9b3866c9f3",
        "cursor": {
          "ref": "42df8e6a-f330-48d8-965e-e5e645ab7205",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e2d604fd-1b47-4c48-97f8-3ea86ecad431"
        },
        "item": {
          "id": "bebcffd7-fd93-45a6-b033-fe9b3866c9f3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c2311ab9-347e-47b3-93eb-11d997e901a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136b0721-6da7-4070-a6b3-fcf340b92b05",
        "cursor": {
          "ref": "6ce9cd5f-7999-41fe-96d8-20257231a571",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "1810b70c-c155-4084-a1dd-dd0b9e0c5dde"
        },
        "item": {
          "id": "136b0721-6da7-4070-a6b3-fcf340b92b05",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2f2796fe-1b24-43be-89f8-4c84273e8679",
          "status": "Created",
          "code": 201,
          "responseTime": 8388,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "517dc6ac-f426-498a-b894-1b9cea8f0f64",
        "cursor": {
          "ref": "c7d63605-87f1-4f9d-adb5-da2896cf6262",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a1994dbf-1c59-4988-9c60-2a4d1f64bbb9"
        },
        "item": {
          "id": "517dc6ac-f426-498a-b894-1b9cea8f0f64",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4c70903e-e58a-42a0-9ef3-aecdf72630c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 667,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe6669e-f135-4455-88ad-9adfade8ff1e",
        "cursor": {
          "ref": "e7062c0c-d6b4-471d-9371-07204d7551ac",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "edce04fc-b0cc-4b57-9990-adede8d8038f"
        },
        "item": {
          "id": "ebe6669e-f135-4455-88ad-9adfade8ff1e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f302d01f-d3d0-4805-849d-90a98f70e48f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "166ca2b9-db47-4b7e-98cd-4426283e03ad",
        "cursor": {
          "ref": "bfd3f4d4-5a41-40b1-b12d-2e2d5c3192d7",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "cafc3966-1322-4875-9219-f14c7b34958b"
        },
        "item": {
          "id": "166ca2b9-db47-4b7e-98cd-4426283e03ad",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2e0572fe-1024-4c6f-bcac-57c4e1fa256c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 437,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa69bd1b-8c48-4fce-a57d-e31db62d62f9",
        "cursor": {
          "ref": "7750cd77-ddf6-41b9-beae-f8d5d91a3fa1",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7ad2c321-a2f4-4cff-8d27-0df5107caf57"
        },
        "item": {
          "id": "aa69bd1b-8c48-4fce-a57d-e31db62d62f9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "704f6397-889f-4df9-9fe8-1cb34b6b38dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f647f12b-e7d5-45cb-9304-de6de706e551",
        "cursor": {
          "ref": "ce852210-fbe3-43ed-9811-1a03fcd229b4",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8b262b3f-d5fa-4d8a-b526-05c2b8b7583c"
        },
        "item": {
          "id": "f647f12b-e7d5-45cb-9304-de6de706e551",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "95557d87-42b9-40de-8686-7270a2446ae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29985432-20fa-41c0-bc4c-ad4fed2f1ee8",
        "cursor": {
          "ref": "4184f02d-5647-463c-9810-e957e1b78288",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3446fce4-6e9a-4e64-af1b-a52056b93fd6"
        },
        "item": {
          "id": "29985432-20fa-41c0-bc4c-ad4fed2f1ee8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5297bade-8767-43ef-9f87-ccbe78f0e6b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03fad67c-9aa0-4595-9390-e1021776de36",
        "cursor": {
          "ref": "6059995a-2c9f-4f48-b7b9-20779b105a2d",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "bcaaf639-817f-4549-a967-aed7f8aee028"
        },
        "item": {
          "id": "03fad67c-9aa0-4595-9390-e1021776de36",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5e744659-b3fb-46b8-896e-b51d04458fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 350,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6805fa94-3efb-40f3-962c-a5b25275413f",
        "cursor": {
          "ref": "1e4cc262-57a4-43f4-9462-7e71744b763b",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "03757263-4cf5-4b9c-9d90-200c90c09fac"
        },
        "item": {
          "id": "6805fa94-3efb-40f3-962c-a5b25275413f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0e3365dd-469f-411b-acd6-bf54bd35b577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 606,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c27b671-e727-45a3-89ae-e4d078315984",
        "cursor": {
          "ref": "47d9c08c-c8ae-48df-8bd5-7fe2592e92aa",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "23fb5eba-88b6-4d50-b243-499398a58c8a"
        },
        "item": {
          "id": "9c27b671-e727-45a3-89ae-e4d078315984",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "4f6b29d0-2807-4a46-a9df-0b73475a750f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 668,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8fa27a-2275-46e5-b831-ed2720a54660",
        "cursor": {
          "ref": "3bce1847-096c-4214-a073-a3786f735d86",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "66403fcf-7f6b-4852-a663-b12fbab8c119"
        },
        "item": {
          "id": "8a8fa27a-2275-46e5-b831-ed2720a54660",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e48ef5cd-2553-4e28-94e1-6ef38aac5192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7fed0a-5162-41ce-b2b5-ea81b7e0297d",
        "cursor": {
          "ref": "8f224c7c-d072-402a-a67b-272ea30e70b5",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d1caa339-3f45-4980-8158-9d682d736d96"
        },
        "item": {
          "id": "6a7fed0a-5162-41ce-b2b5-ea81b7e0297d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6bdc8e1b-5cf8-4d4c-8e1d-606adb10b471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ecae95-a83c-4f2d-bd28-54c8852a613a",
        "cursor": {
          "ref": "955bd0d7-8927-4537-87cb-030071e6ef0f",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "cc7dbb62-c06b-4307-a503-2e6fd3b1535b"
        },
        "item": {
          "id": "b7ecae95-a83c-4f2d-bd28-54c8852a613a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3647b1ac-356b-4369-ae6f-72033ab86ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 377,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27196e5d-f18e-44dc-9bf7-4494d78f5ed4",
        "cursor": {
          "ref": "30569db1-c19f-45e1-98a0-b0082f3d5400",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "64bd1236-d75c-4f2f-96ac-cb2a9deafaca"
        },
        "item": {
          "id": "27196e5d-f18e-44dc-9bf7-4494d78f5ed4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ac49f8cc-1c2b-4526-9943-0d9b3abf5208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04020d15-1d6d-475e-9431-5452409a29a6",
        "cursor": {
          "ref": "618f6aea-f89d-4fdd-904e-ce4a56a4278c",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6f6e4ed4-015f-465a-83bf-2eb16c3a8322"
        },
        "item": {
          "id": "04020d15-1d6d-475e-9431-5452409a29a6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2be47970-60a4-4364-a9a5-710fef42797f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec93d87c-d587-4f18-8b69-7c6c3aa6a28e",
        "cursor": {
          "ref": "ebbf79f6-5993-45dc-b725-f2633a376c91",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b07a613f-e5eb-4e64-8393-b2ea07428b95"
        },
        "item": {
          "id": "ec93d87c-d587-4f18-8b69-7c6c3aa6a28e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "11c25863-b853-4ac9-a0f3-2d060e255808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddfbcd68-5e0e-4d17-9c18-23d56985c8a8",
        "cursor": {
          "ref": "68a31ccd-fb77-4f8e-a96a-66cbcf83bf8b",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "50771324-5c47-4a68-a630-97597b19c5de"
        },
        "item": {
          "id": "ddfbcd68-5e0e-4d17-9c18-23d56985c8a8",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2e810c07-1f2c-4cda-81cb-6a371967b36f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4885f9-30ab-4792-8c19-7aa3f9fa2876",
        "cursor": {
          "ref": "886f8bfe-1a71-45f0-8fa3-0943ada722dc",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8d161e1f-0ffe-42f6-a87f-f178dac88be3"
        },
        "item": {
          "id": "ac4885f9-30ab-4792-8c19-7aa3f9fa2876",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ef1a8439-fce6-4956-b66a-e50494016b2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3f22ee-f10d-4cf8-9914-90d0c4c0ad3d",
        "cursor": {
          "ref": "78f6b923-3d00-4df1-bdba-4fcee591e8a4",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "fedfbece-5265-4033-a290-9c557f22ad1e"
        },
        "item": {
          "id": "4d3f22ee-f10d-4cf8-9914-90d0c4c0ad3d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "17a8df14-efaf-49a6-9b6c-eedf74f39661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861eb55c-65f4-4f78-bacb-9b5d73d0f935",
        "cursor": {
          "ref": "93ac58d4-6c1b-49f2-ba88-7612e38844e6",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6a12e62b-b2d1-46ff-8e59-428e0166f103"
        },
        "item": {
          "id": "861eb55c-65f4-4f78-bacb-9b5d73d0f935",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "52dfdcdf-99b4-4bff-b224-658200c71481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1193e244-2bd7-448f-9a0d-d07ff0859a17",
        "cursor": {
          "ref": "cf2a0344-5563-4b7f-9c40-da93ff95dfea",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a03d213d-c130-468c-a321-b417f9fb7011"
        },
        "item": {
          "id": "1193e244-2bd7-448f-9a0d-d07ff0859a17",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f01db1aa-99e8-4c0e-9271-ae6ffaa9b15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01cec8f4-a1d0-4503-8fb1-34408d640513",
        "cursor": {
          "ref": "a0f3ece5-21cb-4c63-bd44-5223fa29d9ee",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "37a807f1-5753-4681-abf4-8461314ef8bf"
        },
        "item": {
          "id": "01cec8f4-a1d0-4503-8fb1-34408d640513",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0fbd4aad-31fa-4d36-ac96-e6514ef81aab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 380,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86cb5c50-920a-4ede-9f60-d081b9940ee6",
        "cursor": {
          "ref": "1bd26bcb-a9f8-42c3-b680-63f4d0f04953",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8ecb1846-f6a8-4c59-b947-94010a6f8b41"
        },
        "item": {
          "id": "86cb5c50-920a-4ede-9f60-d081b9940ee6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "772846b1-8cc2-4279-a458-4cebbd5487cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1343ab2a-1eec-4a0b-9af2-e55f12b8a947",
        "cursor": {
          "ref": "bcbd347b-15b7-479a-91e1-a66056e00eff",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "be3474d5-92cf-443d-8add-2a26717f5f35"
        },
        "item": {
          "id": "1343ab2a-1eec-4a0b-9af2-e55f12b8a947",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ee04289b-de50-4679-a200-63c4fcb4ce4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5addc8f-9a67-48a4-9b28-831a347efc99",
        "cursor": {
          "ref": "41f3f89f-7a51-497a-9bba-d81745a09769",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "63893367-e7f7-4da9-be7e-7256accfc06b"
        },
        "item": {
          "id": "f5addc8f-9a67-48a4-9b28-831a347efc99",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "28ab1b38-e338-4a46-a868-3e058700283e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7eb699e-931b-41ce-b9f4-001829034809",
        "cursor": {
          "ref": "219f11a2-d292-4e36-89d9-ae0fd16263b8",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f41b1d88-018c-46f6-af79-2ecab38c574e"
        },
        "item": {
          "id": "a7eb699e-931b-41ce-b9f4-001829034809",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "aea9bb6a-8b5e-43bc-bfe9-78142a5d1c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b3faaf5-1f56-4eeb-8c8e-48c6d1e4e686",
        "cursor": {
          "ref": "a453bf1d-142b-4160-ac4c-e155297964b1",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0b139cbf-e71b-423a-8b2e-f769a384172b"
        },
        "item": {
          "id": "0b3faaf5-1f56-4eeb-8c8e-48c6d1e4e686",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9db72835-e6c3-4dd5-b8f5-26eb4a450dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4310e39c-0f9d-4b5d-a559-a100a346ff42",
        "cursor": {
          "ref": "b2263131-94d1-4740-8b22-ea95c81c16f7",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "dcebbc8b-fc65-46e7-9f3f-c6e249b22836"
        },
        "item": {
          "id": "4310e39c-0f9d-4b5d-a559-a100a346ff42",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f9944857-c899-4d6d-8018-0ce31b2e779b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21adffb-c461-42ed-90ee-c550ed524edd",
        "cursor": {
          "ref": "6b993289-e177-43bc-aecf-2ad21d98a2e0",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ba35782f-41b3-4132-91a2-4837e84feb74"
        },
        "item": {
          "id": "e21adffb-c461-42ed-90ee-c550ed524edd",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d920dc60-93e8-4f86-b10b-409e227c1d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b974912-9147-4167-8d74-516f741989ff",
        "cursor": {
          "ref": "dedc68b7-f482-4fc1-ad75-d9c87295dc1a",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0d93c4f0-fe62-4ab5-b963-76bc02f9b864"
        },
        "item": {
          "id": "8b974912-9147-4167-8d74-516f741989ff",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a7612e45-e138-4827-bc92-5bcb2c55f1a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e800ee-a11c-4ffc-9881-a74303e9feb5",
        "cursor": {
          "ref": "ae43ca3e-f64b-4954-81a1-6b4cfeda62fc",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ba6cb9cb-2ae5-4da0-906a-a7788b2cf72c"
        },
        "item": {
          "id": "c1e800ee-a11c-4ffc-9881-a74303e9feb5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "673e7c1e-1847-41b8-ba34-2570f60f3111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca624a2f-b3d6-44e7-86ac-a15156b2f839",
        "cursor": {
          "ref": "9058e828-6e3a-427c-a174-5efe87553957",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "98d0c439-f797-45a2-a9d4-4e13a9b2fda6"
        },
        "item": {
          "id": "ca624a2f-b3d6-44e7-86ac-a15156b2f839",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0a320b50-5ace-454c-9b35-fd305a0d56ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "ed3e2e69-5c0a-4fe9-a492-ab58cf03e5d9",
        "cursor": {
          "ref": "87d9d710-c48d-4a9a-b563-747054e544e5",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "49835d5d-d265-49cd-b077-531381dc730d"
        },
        "item": {
          "id": "ed3e2e69-5c0a-4fe9-a492-ab58cf03e5d9",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "7e0f7c0d-2926-48d4-8f34-74dc57b6a0a8",
          "status": "Created",
          "code": 201,
          "responseTime": 3391,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "67025ba4-9cf5-484d-b2cc-393ee74215f3",
        "cursor": {
          "ref": "a385694d-9545-4cb6-a67c-0833bff8c1ea",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "047de611-2626-4918-9e81-f1c0a3897d66"
        },
        "item": {
          "id": "67025ba4-9cf5-484d-b2cc-393ee74215f3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b5850003-2714-4dc4-aae1-aaea3f7c8aee",
          "status": "Created",
          "code": 201,
          "responseTime": 2123,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "879aa6a3-8a2a-466e-9572-b5f9491465f9",
        "cursor": {
          "ref": "e905404f-332e-45cc-92f2-15e8b9477285",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "21fa904d-f81f-4b2b-9d77-cfb40caccc8e"
        },
        "item": {
          "id": "879aa6a3-8a2a-466e-9572-b5f9491465f9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "465078e0-792c-4532-aa31-27a2f8c58b3f",
          "status": "Created",
          "code": 201,
          "responseTime": 2325,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e368881-a721-4c0b-83ba-a914d2e8441e",
        "cursor": {
          "ref": "891e21c9-afb9-4719-8367-a73caa5e6cb2",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c274057c-8a82-4fb4-86f0-1668f9ba6cce"
        },
        "item": {
          "id": "9e368881-a721-4c0b-83ba-a914d2e8441e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "dcf9a776-abcf-4e33-9786-a6ca1e7c927f",
          "status": "Created",
          "code": 201,
          "responseTime": 2641,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce5869f-cc0e-42c2-ad6a-87640e534233",
        "cursor": {
          "ref": "71c0c9de-0095-486e-bfd9-be4e274e3ca0",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6b14a20f-2f8a-4040-b7ac-fd324ccb05f1"
        },
        "item": {
          "id": "cce5869f-cc0e-42c2-ad6a-87640e534233",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "fd39eb4c-40f8-4bff-b2ec-0f0f8d26a64d",
          "status": "Created",
          "code": 201,
          "responseTime": 2717,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "58700cac-db84-47be-a7dc-11a823886724",
        "cursor": {
          "ref": "b7a6859f-1ff2-4159-b1fd-13bd3ff974a4",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "61d57691-9208-4e5f-be5b-5151669d93d1"
        },
        "item": {
          "id": "58700cac-db84-47be-a7dc-11a823886724",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5150cca0-56a5-4c5e-9a00-c09f6167eea0",
          "status": "Created",
          "code": 201,
          "responseTime": 2858,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-25T00:37:43Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-25T00:37:43Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "0407838e-9d82-4b10-91fa-13565af46b7e",
        "cursor": {
          "ref": "c2cfb0ff-b067-4059-b3f7-4d63064a96ee",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9558355d-d8de-4e96-90fb-34f320529a0f"
        },
        "item": {
          "id": "0407838e-9d82-4b10-91fa-13565af46b7e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "bbee404a-6acd-44d1-b44d-b46cb067ebd5",
          "status": "Created",
          "code": 201,
          "responseTime": 2364,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86558fa-9e57-49ca-9fa3-0971ab6965bf",
        "cursor": {
          "ref": "c79a563b-1f53-451c-89bf-616a04b9424a",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8441eda7-56ab-43f9-b97f-e959d7b93866"
        },
        "item": {
          "id": "e86558fa-9e57-49ca-9fa3-0971ab6965bf",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "933b7b45-6b58-4c26-9762-397a0a4519e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1166,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86558fa-9e57-49ca-9fa3-0971ab6965bf",
        "cursor": {
          "ref": "c79a563b-1f53-451c-89bf-616a04b9424a",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "8441eda7-56ab-43f9-b97f-e959d7b93866"
        },
        "item": {
          "id": "e86558fa-9e57-49ca-9fa3-0971ab6965bf",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "933b7b45-6b58-4c26-9762-397a0a4519e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1166,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6dc293-9b81-47b0-9fa5-26e9d6ebb8a9",
        "cursor": {
          "ref": "2558d04c-362e-4f98-8023-af74b26bdff3",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "14e91d2c-f7a8-4a73-b818-a19faf1d56a3"
        },
        "item": {
          "id": "fa6dc293-9b81-47b0-9fa5-26e9d6ebb8a9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "39a2f3a1-3851-4465-b69b-80def464e6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6de509-ca5f-47cc-9bfd-77c0ee544750",
        "cursor": {
          "ref": "659e578d-de9f-48bf-9f87-a9ae5316921d",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "55f065f6-2c0a-40e3-8dd2-720ba04c7576"
        },
        "item": {
          "id": "cb6de509-ca5f-47cc-9bfd-77c0ee544750",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f4d03836-16ca-43f3-9bf5-00f3f4835c6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d39fca-9b47-47cd-9fe0-de43adc80744",
        "cursor": {
          "ref": "e0eb0a65-f279-4051-96e9-8a888139c60e",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d0e91ab9-e611-4850-b721-3b996fc15aca"
        },
        "item": {
          "id": "80d39fca-9b47-47cd-9fe0-de43adc80744",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5b24bd5a-0405-4f03-8c88-2400cb01694f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbbab825-bd86-4115-98c9-96235f0159b8",
        "cursor": {
          "ref": "89376f13-f5ca-48df-a499-5e0a95c43264",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c6568d6d-eee8-41ec-8432-558b197f6c84"
        },
        "item": {
          "id": "bbbab825-bd86-4115-98c9-96235f0159b8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "200277fa-47af-4824-941c-dd56285bd6a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ee74ff-5241-445e-aca3-fef474fafcbe",
        "cursor": {
          "ref": "ea7e5c82-9b96-4c3a-9305-62795baa7c64",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ca4e73fc-76c5-45a6-8fea-099eb951a945"
        },
        "item": {
          "id": "16ee74ff-5241-445e-aca3-fef474fafcbe",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cf83003f-68c0-4b7d-8ddf-cd5e69f39909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "168cb70c-6595-4658-af77-193c58b2c5d3",
        "cursor": {
          "ref": "3956984d-f8fe-4996-8d09-3e2bd068bd83",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b9ca3d6b-f633-4b40-ba99-991b0b686f96"
        },
        "item": {
          "id": "168cb70c-6595-4658-af77-193c58b2c5d3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8ed1699c-7a8b-42e1-a6d1-5421f0f62712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ae78a0f-4078-407b-9058-1ca3558a70b0",
        "cursor": {
          "ref": "b1a27331-33ce-40f6-a713-9663e0e70452",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "59b67ac0-033c-4bf3-b216-3dc843cd369f"
        },
        "item": {
          "id": "8ae78a0f-4078-407b-9058-1ca3558a70b0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "318be052-2df9-4ff0-97d7-99b63ef9c620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be73d2c-db2a-4b05-a95e-bd6a1268d408",
        "cursor": {
          "ref": "e2475003-0b8e-49bf-9137-036511c5e8f9",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7112abbc-0691-44eb-ac23-6f73f40962cf"
        },
        "item": {
          "id": "8be73d2c-db2a-4b05-a95e-bd6a1268d408",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4f3412c6-47a7-47da-a00c-1261e6f728e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c472780e-b938-41f4-9de1-58c0a34b09cd",
        "cursor": {
          "ref": "80888c6d-a4c3-4de4-ae8e-81faee3355d6",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "28e9b833-f41f-4a0d-9365-b1025fba4927"
        },
        "item": {
          "id": "c472780e-b938-41f4-9de1-58c0a34b09cd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "72e93eb7-7d6e-4703-91d0-3b52a6def491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "712dcf58-7bee-4158-a416-4358fd58a264",
        "cursor": {
          "ref": "2da35e53-cf2a-4596-86b8-e45458b489b4",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ed1a4ba1-dea1-4e8a-8e21-d3f8dac99d29"
        },
        "item": {
          "id": "712dcf58-7bee-4158-a416-4358fd58a264",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "848b0320-8917-43ba-a9a0-36557a68fc9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a15f919-ba2e-48f1-b545-740974a02eaa",
        "cursor": {
          "ref": "ba1abfe8-a427-4a51-8501-297722698a8b",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "948ee072-9bcf-4dd9-86db-39efb83a0bf0"
        },
        "item": {
          "id": "7a15f919-ba2e-48f1-b545-740974a02eaa",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7fc75161-624e-4603-b70f-d3abb8d48cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfabcfb-c739-43e9-baf5-057e7372a6bb",
        "cursor": {
          "ref": "5f19c8ca-a2e1-4b36-9eac-b5e54be8e635",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2a7596fd-8f1e-4d03-86ee-1e3cada4c34f"
        },
        "item": {
          "id": "8dfabcfb-c739-43e9-baf5-057e7372a6bb",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f37c0dc1-c4a3-464d-82ee-9dac162eeddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3a4ebd-55d5-4082-a0e7-f033bc589635",
        "cursor": {
          "ref": "05b369d0-865f-4abf-8eab-fc02194448fe",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "05757870-fe2e-4e59-9f18-cae6bf458899"
        },
        "item": {
          "id": "5a3a4ebd-55d5-4082-a0e7-f033bc589635",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9abbdeeb-819b-4507-be4d-ff94d4314dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d25ed9-8669-444b-92f7-a1a209cf7559",
        "cursor": {
          "ref": "d041ec02-3450-43e5-b8fc-a3bf26494da4",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e7b3ecf8-857a-4c24-b69f-2b85086f89d9"
        },
        "item": {
          "id": "b8d25ed9-8669-444b-92f7-a1a209cf7559",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1156152d-c6fd-49f1-be2d-ed4058696491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5449272-2099-48fc-94ce-ebeb851693c2",
        "cursor": {
          "ref": "9d142f9f-4251-41fa-8340-cc733805df83",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "069d84cc-a451-4243-9869-eae129400ea2"
        },
        "item": {
          "id": "b5449272-2099-48fc-94ce-ebeb851693c2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "18b04879-74a2-4b9c-a37e-179463b142f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6cc90c-7918-4504-90a8-caeeb76db938",
        "cursor": {
          "ref": "b70cc807-a5b2-4491-acc6-bfc37ebfa2c9",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e15912b8-8331-4cb1-b50b-ac360209a21e"
        },
        "item": {
          "id": "ed6cc90c-7918-4504-90a8-caeeb76db938",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "93a8cf9c-e94d-4e59-bf8d-301e629bc74b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28c84764-c41e-47ce-8bd3-87e5f6bfe3bf",
        "cursor": {
          "ref": "805ee1ed-90dc-44df-b8a5-d8bd52409bf2",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3f469877-3cf1-4c8c-a882-929739c29cdb"
        },
        "item": {
          "id": "28c84764-c41e-47ce-8bd3-87e5f6bfe3bf",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d1c14ad4-b9d6-4e67-a473-3753517f30d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33925ceb-aaaa-41bd-9703-dc9ba986e1fb",
        "cursor": {
          "ref": "8ed0d525-b1f8-48ab-a484-8350e54d59f6",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6ed2abe0-0598-43b7-adeb-95c04c24ae4e"
        },
        "item": {
          "id": "33925ceb-aaaa-41bd-9703-dc9ba986e1fb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "89e810d4-4e8e-4357-a875-789de74d7c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230fc8d4-9e6b-4dbe-9967-72849e386b07",
        "cursor": {
          "ref": "abbe29c9-2ce3-4095-be72-2228a148bd00",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "058fe4de-2c63-4f04-ae99-a06566220d35"
        },
        "item": {
          "id": "230fc8d4-9e6b-4dbe-9967-72849e386b07",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "dca71707-7206-45a8-bff8-b71d242f9d57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98099827-83e5-4d23-9531-5cb69ad0300f",
        "cursor": {
          "ref": "5334809e-3431-4204-98ae-9c8fee802704",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9d28f0c4-c9d6-4a00-97b8-539506dda9c5"
        },
        "item": {
          "id": "98099827-83e5-4d23-9531-5cb69ad0300f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "66b848d7-2691-47d5-846a-314110a8727f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c3a96b-6ffb-40c3-9ff9-3d64ae15df77",
        "cursor": {
          "ref": "2ec053dc-a6f4-4fb6-bfa9-b1e4b5f88d10",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "18b61c30-3c27-47dc-b90f-e71f223effdf"
        },
        "item": {
          "id": "d0c3a96b-6ffb-40c3-9ff9-3d64ae15df77",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "539af402-19fb-4526-8a60-6eb3bc6ce3ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc54efcc-4353-4abb-b242-8882abcd1f93",
        "cursor": {
          "ref": "4e18c1da-b8f6-479e-95c9-1217d7d80d97",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6ccb66d6-163d-4b8f-9af3-36495264aa05"
        },
        "item": {
          "id": "cc54efcc-4353-4abb-b242-8882abcd1f93",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "76283551-92ca-4bdc-bcee-24122a23f374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a893db-53f2-4860-8f7f-742196eda0ca",
        "cursor": {
          "ref": "b523d8ac-e7a6-4306-bde3-b690c6bcec4e",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1ebba38f-4980-4e63-b5ca-c941a1d3142f"
        },
        "item": {
          "id": "b9a893db-53f2-4860-8f7f-742196eda0ca",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cc228f4a-45a4-4e2b-8bae-c1e9d66d2441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5623ff5c-3dd1-4cf0-b44d-a791b62e7ce8",
        "cursor": {
          "ref": "9682de87-56b1-412b-9879-4d3e874a2b06",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "df583365-2fe9-4cd1-8c46-d76eb9e47ff5"
        },
        "item": {
          "id": "5623ff5c-3dd1-4cf0-b44d-a791b62e7ce8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "aca9045d-2b02-4291-8c87-040ecf71da75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a2ba521-5c97-4c94-8a98-ed592d4a2762",
        "cursor": {
          "ref": "ee55a80e-3b32-43f9-af76-367d37c3ac63",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "23e8edb8-f2fe-4688-8662-ca7200e9eb70"
        },
        "item": {
          "id": "1a2ba521-5c97-4c94-8a98-ed592d4a2762",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "57a590ac-4bb0-41c7-8f65-ecf2c288001e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80543a13-7170-4a36-9a11-9d24e18c125a",
        "cursor": {
          "ref": "7f02c301-75a5-468f-9b34-dcbd95efd0db",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "289abd2c-0ffe-4de8-808a-f4c960892457"
        },
        "item": {
          "id": "80543a13-7170-4a36-9a11-9d24e18c125a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d05836d9-db45-47f5-9841-b274ae456d63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0540b8f4-f8e0-4346-890f-14f67e1259c6",
        "cursor": {
          "ref": "7db809ce-602c-4632-8e8a-3a94bfda42ef",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "fdc33c02-b14a-46c3-b7db-a154efb63774"
        },
        "item": {
          "id": "0540b8f4-f8e0-4346-890f-14f67e1259c6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a6f0b101-bdc3-4518-b791-739ebd5f2711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1104b61f-c24a-4698-b6a1-42efa94b0f21",
        "cursor": {
          "ref": "00149bca-10b4-44da-8ee5-6b2056a6f59f",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4620e696-37a5-482e-90e4-8617be4bcd9c"
        },
        "item": {
          "id": "1104b61f-c24a-4698-b6a1-42efa94b0f21",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ae1c0d1b-3396-4e5e-8d67-96c151a13bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5283d554-5e97-40b2-b50c-f6f7acb5adfb",
        "cursor": {
          "ref": "3ed3c6d8-7b8b-4892-8c13-719aa2bd7ad7",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ead1e316-e19f-43e4-8657-56992a6f2319"
        },
        "item": {
          "id": "5283d554-5e97-40b2-b50c-f6f7acb5adfb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e40593f0-efd1-49ed-8063-0a360ce440f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fba5f6f-46ee-4b5e-a5bb-35c033a082f5",
        "cursor": {
          "ref": "98f6852a-23d3-4124-a3af-dd53d94b384e",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ecd9a558-a14b-4e26-86ff-c68812643ec8"
        },
        "item": {
          "id": "6fba5f6f-46ee-4b5e-a5bb-35c033a082f5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6f4222ec-58b5-4208-88c8-1b32462eb52f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db9a3c6-714d-4ce6-ada8-e452b443e0e8",
        "cursor": {
          "ref": "6c1afe1e-3e46-4c4a-9bd2-6bab857b5d08",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ee18dcb6-1b6e-4309-becc-8c8f9feb479a"
        },
        "item": {
          "id": "8db9a3c6-714d-4ce6-ada8-e452b443e0e8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d5566946-8dc0-419b-b53c-c375c6c9f8ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00670b0d-ba7d-4fd0-ac91-5b320d8659b1",
        "cursor": {
          "ref": "ef578432-8580-4cdd-8edb-5311b2778932",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3a674061-c42d-4770-b95f-4078f147ee12"
        },
        "item": {
          "id": "00670b0d-ba7d-4fd0-ac91-5b320d8659b1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ebe124a6-5d7a-4d0d-95ff-445379cbb448",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "40b10f2b-03e1-4e34-9d8c-b2ebd2d7473d",
        "cursor": {
          "ref": "a5d99c95-27ec-4e6d-9eda-78cbfc2db9a1",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0ab866e9-90ff-494c-84f7-bd7338f77b8f"
        },
        "item": {
          "id": "40b10f2b-03e1-4e34-9d8c-b2ebd2d7473d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "4596c638-dc66-4913-9054-ab19d37f85db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "741be5d3-4de1-4b3f-a6f9-76c896a0c2c0",
        "cursor": {
          "ref": "33383004-7ad0-4a21-a98a-cdc66c7799fd",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "95b96129-21a3-4a4c-9891-e9072237f282"
        },
        "item": {
          "id": "741be5d3-4de1-4b3f-a6f9-76c896a0c2c0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "cb0d2308-f1eb-457f-a377-a2cbf83b7ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741be5d3-4de1-4b3f-a6f9-76c896a0c2c0",
        "cursor": {
          "ref": "33383004-7ad0-4a21-a98a-cdc66c7799fd",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "95b96129-21a3-4a4c-9891-e9072237f282"
        },
        "item": {
          "id": "741be5d3-4de1-4b3f-a6f9-76c896a0c2c0",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "cb0d2308-f1eb-457f-a377-a2cbf83b7ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b1d560c-51d0-4c65-a56c-7bcff61b8b0b",
        "cursor": {
          "ref": "b348f26d-aca8-40b0-b292-133ec9f5ae69",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e42a696f-f4eb-4665-91de-3ec0c4c870d1"
        },
        "item": {
          "id": "2b1d560c-51d0-4c65-a56c-7bcff61b8b0b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4f92f017-cd8d-4f1b-a435-3217d3cec7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef86d609-57bb-4844-9877-394533be10d4",
        "cursor": {
          "ref": "ad908a3b-9884-4db2-8be9-dc2092865068",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "bf4c563c-a1ca-4351-a6c6-0da3d76d62b6"
        },
        "item": {
          "id": "ef86d609-57bb-4844-9877-394533be10d4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9978ffb6-f667-4da8-82d8-60102faf5ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030bc4ee-cd30-4245-8e8a-2f1800436d4e",
        "cursor": {
          "ref": "1f5b03b7-edaa-4406-97f3-6eae8e96ee28",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "34feb046-e8a9-4358-9fb6-ae9cdc513915"
        },
        "item": {
          "id": "030bc4ee-cd30-4245-8e8a-2f1800436d4e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1d8048ec-634d-47d3-aade-98483b0894e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d95db6f-74f7-4052-bf59-76344a0bb0f4",
        "cursor": {
          "ref": "2027cbb5-3038-4a5d-9c49-8372098a9dbe",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c6c16375-1d6b-42a9-9fa6-ff32a374bac3"
        },
        "item": {
          "id": "7d95db6f-74f7-4052-bf59-76344a0bb0f4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7da7738d-0a8e-43a9-9e00-328e437ea605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "281a6973-541a-4093-ab5c-8b863d21a799",
        "cursor": {
          "ref": "ac2c41a8-6dc7-410b-a606-d1deb1d4f9ff",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f5da59ac-5bed-4642-aa51-ab87be771ecd"
        },
        "item": {
          "id": "281a6973-541a-4093-ab5c-8b863d21a799",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "736e7962-a5b5-459d-82c4-fadc81a67746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27323a2d-7abc-4d1c-8d1d-8ceab89c94b3",
        "cursor": {
          "ref": "680b8a64-6ac6-4a47-b1f4-603c94192950",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8f4d9239-1077-4597-a263-d5d2f2d1ad60"
        },
        "item": {
          "id": "27323a2d-7abc-4d1c-8d1d-8ceab89c94b3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ea16f552-aedb-4aeb-9ed9-6a914d043d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f242c18-5bb5-4c6c-9ee0-d28f03f37746",
        "cursor": {
          "ref": "7802a9a2-3663-4b35-be99-1334922528ef",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2d4298de-fbe9-48d4-a775-0650030f9eba"
        },
        "item": {
          "id": "1f242c18-5bb5-4c6c-9ee0-d28f03f37746",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5098029c-64e4-4833-af82-01b469ebdabe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52864a9-a4d5-49c8-9c35-0c001bc53e55",
        "cursor": {
          "ref": "007d8d79-1762-40a8-8e63-123fdef81547",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b7662eaf-8cf7-4f7e-b22c-5f820d194e38"
        },
        "item": {
          "id": "c52864a9-a4d5-49c8-9c35-0c001bc53e55",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "bc49aaf2-653c-4a98-97f2-76b7b1a58ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f022e5c0-2101-4868-8585-2f44bfced361",
        "cursor": {
          "ref": "89b73187-65e1-40c2-90c2-9005156f4b8b",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0ea84f6a-b47b-4a25-9378-a869f6a60ef4"
        },
        "item": {
          "id": "f022e5c0-2101-4868-8585-2f44bfced361",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "2cd51465-5034-4c45-885d-b0b93e702296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea92cac-eac2-4e9f-9869-77d697d15296",
        "cursor": {
          "ref": "37f3c675-791f-4270-8c95-891771f07943",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1dcae8d5-552d-4f8c-945e-980521cca422"
        },
        "item": {
          "id": "3ea92cac-eac2-4e9f-9869-77d697d15296",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e74248cf-40c4-4ee6-b25c-bbb13b154f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bae5985-7158-4de0-880a-04e6e30de0ba",
        "cursor": {
          "ref": "65aeb9e0-2acf-4b2e-af0c-341473fb63d8",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "17e1f128-2b78-4bf8-b0af-c48fa7683276"
        },
        "item": {
          "id": "8bae5985-7158-4de0-880a-04e6e30de0ba",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "84288335-4cce-411e-a3cc-dd712ac11b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f16763d-0045-49bb-9504-3adab4979fef",
        "cursor": {
          "ref": "4007485f-a65c-409d-ab62-d33b1035e968",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "780b0f0a-6c87-4fe3-86d3-1a90343fc219"
        },
        "item": {
          "id": "7f16763d-0045-49bb-9504-3adab4979fef",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "aff4e02f-14dd-4350-840a-ebbb4d7d9ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1bbe47-2d08-4992-a63e-acb75f0bb075",
        "cursor": {
          "ref": "45a4e5ed-b518-4dbd-a2f2-a12d72bc9dd2",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "afa81db9-bc19-40a0-a362-9e8cdada30bd"
        },
        "item": {
          "id": "3f1bbe47-2d08-4992-a63e-acb75f0bb075",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e91694a3-ff8b-414d-bdb5-9393f9e1759c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9300fddb-adb3-43a9-95a6-a8a6021ed50c",
        "cursor": {
          "ref": "efe00790-8489-43ec-ab00-eb1d157cb743",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "05b20779-2abe-4062-a906-3f869cd04935"
        },
        "item": {
          "id": "9300fddb-adb3-43a9-95a6-a8a6021ed50c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "548e5470-ac2c-4d57-a98e-f259e42b36d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba4b308d-1831-48fc-83d5-0fa417828256",
        "cursor": {
          "ref": "0a67e8f8-a418-4f39-a8b2-211a8e01539e",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "98cba11e-34f6-4d67-89da-39e44cdf74ea"
        },
        "item": {
          "id": "ba4b308d-1831-48fc-83d5-0fa417828256",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "bdfd4977-f5e6-44e7-927d-62ac8821624e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867aeb20-094d-446f-b82c-6d40405bacfe",
        "cursor": {
          "ref": "b39d602d-c161-4e80-a9cd-faebf2c1e472",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e1b9974a-e8b3-4f9c-a65f-a8349e0cf158"
        },
        "item": {
          "id": "867aeb20-094d-446f-b82c-6d40405bacfe",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0c98f72a-9efb-4309-9a3b-444a1930f80c",
          "status": "OK",
          "code": 200,
          "responseTime": 350,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "77f3e220-501b-465a-8618-5d7ca5f126eb",
        "cursor": {
          "ref": "aff18e60-5f6f-461b-bcce-16cc7a0999e6",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "29b08fa3-c26d-4dad-9273-5bf108f37a22"
        },
        "item": {
          "id": "77f3e220-501b-465a-8618-5d7ca5f126eb",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "77e83e8e-9bd9-4379-bb4c-d60809374d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9385fde-ecb1-4edf-b3fd-69efbe09254e",
        "cursor": {
          "ref": "926c36bc-a1bf-4f8e-b9aa-d69b6a63f85d",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "40277964-ab89-43e2-92af-bee7f18d8c7b"
        },
        "item": {
          "id": "a9385fde-ecb1-4edf-b3fd-69efbe09254e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5b5fe425-0f5d-48df-ba9d-2ac75d077c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da402cbe-e839-4cf8-ab30-3275870e16eb",
        "cursor": {
          "ref": "d4564c8f-f103-4113-940e-20a1f4948a4f",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f2ebce23-f7a0-47b4-82bd-9dfaddbdc646"
        },
        "item": {
          "id": "da402cbe-e839-4cf8-ab30-3275870e16eb",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e16970ca-e823-46ad-9bbe-c045662dcf7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9616efa7-1fb6-425a-a58a-064a6afd7311",
        "cursor": {
          "ref": "e294d523-c0de-4357-b932-72339196d2bd",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "02df9ff1-75e3-4728-98b0-9ba4beaea59f"
        },
        "item": {
          "id": "9616efa7-1fb6-425a-a58a-064a6afd7311",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9fcaf9b3-1877-41f5-acf5-1978ad1809ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9ccab0-6cb4-46ba-8383-3f4ef7349c8d",
        "cursor": {
          "ref": "52ad3113-8f1b-4592-8e2a-2e249228aa02",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "86ce483e-2bba-44fb-93cb-c84abcab10b3"
        },
        "item": {
          "id": "de9ccab0-6cb4-46ba-8383-3f4ef7349c8d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "811344f1-404a-4986-8a0f-a4759d703e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b3c4ea-6aab-484a-9560-89a996125be0",
        "cursor": {
          "ref": "0fb61599-55d8-4a07-9089-6ff6c8e5c068",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b51b0f9a-c141-43ba-b15f-c50a2746f01f"
        },
        "item": {
          "id": "73b3c4ea-6aab-484a-9560-89a996125be0",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7e4602c9-98be-4bcc-b4de-6c4db36a4b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26631670-5449-42c1-b2e6-707b48aa171d",
        "cursor": {
          "ref": "e5d35548-c676-448f-87f0-aea60870359d",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "734b4ad3-6647-4d82-9715-54c647aa694d"
        },
        "item": {
          "id": "26631670-5449-42c1-b2e6-707b48aa171d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b2ff161b-4b3d-4337-81bf-5e36ad737f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f439b730-50a1-45c7-a46c-7d2dd9bb73f5",
        "cursor": {
          "ref": "2e8d7cbd-ef3a-48e3-a5c1-0e391b1a09a0",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4383248e-c68c-4370-a870-1185af9bf339"
        },
        "item": {
          "id": "f439b730-50a1-45c7-a46c-7d2dd9bb73f5",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c810e3bf-db0d-4e16-ab0b-0528248b704e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba24f0c-e285-458e-9802-320403c73007",
        "cursor": {
          "ref": "e9652aa1-2dd9-4660-8a44-7049acc3d924",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "134a3b48-0492-4b23-8c5e-faa65f0907a3"
        },
        "item": {
          "id": "8ba24f0c-e285-458e-9802-320403c73007",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b7673577-6c9c-469d-af39-8669979d4daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def563ac-e41a-4f8d-9684-06ed7e073860",
        "cursor": {
          "ref": "33fc8183-08a4-47ab-b8e3-055a798bfddc",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "452c3574-7a70-40fb-a1c5-fa63b3e87ea8"
        },
        "item": {
          "id": "def563ac-e41a-4f8d-9684-06ed7e073860",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "da2cb71f-55a8-4223-a1b6-22b560bedcf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5092040-d2d4-470b-924c-aae0808b0173",
        "cursor": {
          "ref": "1b21e689-a428-451c-bc3f-660e86b6ff0c",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "df6bd793-1f9e-4b21-ae18-4b8b48da146e"
        },
        "item": {
          "id": "d5092040-d2d4-470b-924c-aae0808b0173",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c2a09304-96ba-48b8-bffe-2f40e1646d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed7d61c-1993-48eb-b1e2-96086505b760",
        "cursor": {
          "ref": "872dda2f-19f8-4155-9bd3-b52ed3a89943",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "85eef0c6-1de0-4b1c-bab8-4172e61d918a"
        },
        "item": {
          "id": "fed7d61c-1993-48eb-b1e2-96086505b760",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5c4d4790-fa4a-4150-a59a-9ee61f7f9319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b867cdcf-4918-4547-bae9-901297cac6d2",
        "cursor": {
          "ref": "d2ff70a2-4c94-4277-908c-bf61463ae5bc",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c0384777-450b-458e-9327-3c44d9b6c4f0"
        },
        "item": {
          "id": "b867cdcf-4918-4547-bae9-901297cac6d2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5e731085-8a93-4485-8e9e-9f09a41d59ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd9eec5-769d-4c0b-a074-16e656198610",
        "cursor": {
          "ref": "202cfb9f-6468-4e2b-9602-f6c6801c45da",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "51e96401-1665-4f40-8310-1d8e6bc0fc85"
        },
        "item": {
          "id": "1fd9eec5-769d-4c0b-a074-16e656198610",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "89895fe9-318f-471e-bbd4-376b8f3646bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4048d3f5-e301-4ab2-9f8d-f36de3b89fbc",
        "cursor": {
          "ref": "b4fc85be-93ed-4a89-bd07-382d55ee2561",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "88ab9b6f-6bb1-467f-b8e8-6acf5e2cab01"
        },
        "item": {
          "id": "4048d3f5-e301-4ab2-9f8d-f36de3b89fbc",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "98fa0ffc-15a3-4ba0-84cd-543c05648772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05fc813c-05ea-42ea-a9b6-e61ec33a6424",
        "cursor": {
          "ref": "79bdffa4-588e-48b6-bb15-e37dfdd440bf",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b7ab38e6-d27d-46b9-aea1-cf02b66ae500"
        },
        "item": {
          "id": "05fc813c-05ea-42ea-a9b6-e61ec33a6424",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "275486eb-730e-4d72-81c7-b386e4d424fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "878faa10-f118-48f6-ad0f-7a885791983f",
        "cursor": {
          "ref": "f63ca523-67b8-4093-94dc-39fe95c55c0f",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "85ecb83e-70fb-4bab-a81e-ce1cd2edebf9"
        },
        "item": {
          "id": "878faa10-f118-48f6-ad0f-7a885791983f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "22d5b847-03f0-4fc8-b22a-3754105a0296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d786912-fb30-41e2-a481-c3e57550ecc5",
        "cursor": {
          "ref": "06f6d4ec-fa86-450d-bddd-5a3d6bdd72ca",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "6240fd00-6ab7-42f9-b0d9-0406dfcc7bf7"
        },
        "item": {
          "id": "6d786912-fb30-41e2-a481-c3e57550ecc5",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6d6a9bf4-63a5-42b5-b504-4c19980fbbe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3a440a-a36c-464a-b363-c1e2c4f416e1",
        "cursor": {
          "ref": "c9474c3d-477b-4af8-a386-cce8c06aa75c",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c3f9c206-7628-49d9-afbb-a7660eb5cb2c"
        },
        "item": {
          "id": "bd3a440a-a36c-464a-b363-c1e2c4f416e1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "38cd3ecf-7faf-4a49-84f7-c79f72c155b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc438cf9-d9ee-4e61-8d69-96bead09fd7d",
        "cursor": {
          "ref": "1003b002-ad40-41a5-a4d4-b7430ddb124b",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "505d3821-6935-4de1-8b1c-1e1da72939f2"
        },
        "item": {
          "id": "bc438cf9-d9ee-4e61-8d69-96bead09fd7d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1fc12502-4afa-449a-9987-10c91a753ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6cc41eb-de97-411d-beaf-3c9d7f439903",
        "cursor": {
          "ref": "f9a3c51c-1451-43d3-8b65-45209042cea5",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ab461df3-aaba-4cc0-8490-4ef3e4b541a0"
        },
        "item": {
          "id": "a6cc41eb-de97-411d-beaf-3c9d7f439903",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "49f39541-0459-4207-a792-033be504499c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20325107-e7c3-487c-8925-354838bdeb17",
        "cursor": {
          "ref": "f244e67f-5055-4f82-b80d-1a8fdb9cdcc0",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "81c632ab-3c8c-45a7-8fd1-04277f4a43d4"
        },
        "item": {
          "id": "20325107-e7c3-487c-8925-354838bdeb17",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "acbeaa38-d5ef-4db5-9959-896d74b759c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ccf06e8-d9ef-4ef9-85b6-e3b9b803195b",
        "cursor": {
          "ref": "dba4e917-a3c6-4a1e-b63c-070bac32dbdb",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a34aadf3-159a-4c45-90e6-899d494b3859"
        },
        "item": {
          "id": "6ccf06e8-d9ef-4ef9-85b6-e3b9b803195b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9c24f85c-c163-4d74-a2ce-1f3c2fdcd427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a94e5d-85aa-4c89-b4cd-ac00fda5cab4",
        "cursor": {
          "ref": "e2d36b01-0292-41f4-b537-e7e12f0f5c60",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a766839b-faa8-461b-b6f7-b75be636e759"
        },
        "item": {
          "id": "98a94e5d-85aa-4c89-b4cd-ac00fda5cab4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b6d6d8f0-7434-4b3a-97c9-e5964a4ecf70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028e7bfe-bb1b-409c-8f01-4eb33ad4e0fc",
        "cursor": {
          "ref": "75347ff8-5253-4394-8c88-cab719e705a6",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c19a061f-b6a3-46ea-9eea-3cf4f95f9803"
        },
        "item": {
          "id": "028e7bfe-bb1b-409c-8f01-4eb33ad4e0fc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "19708f98-bd85-4956-8569-d02b7266fecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a97e31-beef-4622-bf0e-c961d052ad1f",
        "cursor": {
          "ref": "7112ca04-f2fe-4004-bd9f-2c9bb82403b5",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d4bf88ef-8625-4a43-a08a-03cab41a8a34"
        },
        "item": {
          "id": "85a97e31-beef-4622-bf0e-c961d052ad1f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "516f25da-eb40-4756-8056-f24bfa421467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63d89b5-5e85-4e20-851d-ade1dfd0d0ea",
        "cursor": {
          "ref": "9523915d-bcb4-498c-9c72-c903aae4f0eb",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ce7475cb-0b1c-4d93-8a9a-c8b4a71d9ece"
        },
        "item": {
          "id": "f63d89b5-5e85-4e20-851d-ade1dfd0d0ea",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b15641e9-efff-4c4c-ae10-9283f6b76930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b235c59e-5a47-4270-b36d-dddb2968e870",
        "cursor": {
          "ref": "1cc687e9-22ca-4847-880e-9be9e1280018",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "28ee1dd5-f2ad-4795-b345-ea119d9e7995"
        },
        "item": {
          "id": "b235c59e-5a47-4270-b36d-dddb2968e870",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9bed018d-3e20-4ac2-8900-505e8086af96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86458c1-ac05-4e97-942b-716f2da1badf",
        "cursor": {
          "ref": "5c59d804-982f-4fa0-b2b2-f9b3977f6e1c",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f449296e-ad3b-45ff-af7c-6e95262d4033"
        },
        "item": {
          "id": "b86458c1-ac05-4e97-942b-716f2da1badf",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2249d86e-152b-434d-ad73-cdaef8dc2155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1bf4de-e451-4d41-bcd8-6f47e0452e2a",
        "cursor": {
          "ref": "01639a6a-b5d4-45a5-bc31-4bc5747aaf72",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e1f3e646-0b28-4862-980e-7ddd5c9d95c9"
        },
        "item": {
          "id": "0b1bf4de-e451-4d41-bcd8-6f47e0452e2a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e4f8dba4-6c1b-4b12-afac-a0c5296b9caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f424b747-07cd-4d87-8fbe-d2a1b58af06c",
        "cursor": {
          "ref": "27af84e1-c9b5-4250-8a7c-4f9725ddb1dc",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "747f9fdb-4eb1-49c9-b0b1-582db40d343e"
        },
        "item": {
          "id": "f424b747-07cd-4d87-8fbe-d2a1b58af06c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "cb3b7218-98c5-4028-b7dd-89749f8b23e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48f608f-67af-47c1-945b-f497fef3fe4c",
        "cursor": {
          "ref": "232a88ea-e423-4619-841a-b5474587d57f",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8e0d649a-3d5d-4148-8f92-2dba982479e5"
        },
        "item": {
          "id": "f48f608f-67af-47c1-945b-f497fef3fe4c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2c207c7a-96ab-464a-8453-4ef30d485313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f14783-aec4-4b0a-b4af-ca5cb9901a92",
        "cursor": {
          "ref": "94f80851-7412-4621-ace3-e05b0866de73",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "51571517-8d92-425d-bf1d-e7859b7aeb31"
        },
        "item": {
          "id": "42f14783-aec4-4b0a-b4af-ca5cb9901a92",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0639d255-7cef-466b-be27-379087bacf6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c2aaa6-faa3-4d56-a656-0ba77f45291b",
        "cursor": {
          "ref": "83eabe8c-c04a-4dbe-a149-5c5ea6bba45e",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "06093932-055d-43d5-9341-20bfc00874d1"
        },
        "item": {
          "id": "f7c2aaa6-faa3-4d56-a656-0ba77f45291b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "726efa47-f14e-4879-a7c7-0110b98855a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f22b9a1-f4ec-4406-96db-133a1670fc10",
        "cursor": {
          "ref": "0a53da9e-5324-4076-89f7-97fece16716c",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "98e3c4a0-c3f1-4880-931d-23de6ab35b92"
        },
        "item": {
          "id": "4f22b9a1-f4ec-4406-96db-133a1670fc10",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a95aefdb-6eeb-4cdc-898c-18a888627f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4c63d5-9c4c-4e3f-aa80-c98924a7dba2",
        "cursor": {
          "ref": "dd703b18-5695-4681-b2a8-3f5301cb5f70",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "62b11dda-ee57-44c6-8cc6-5acdf96c8d63"
        },
        "item": {
          "id": "1d4c63d5-9c4c-4e3f-aa80-c98924a7dba2",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "6514c281-e3e5-4170-863e-22299890af7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 288,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c7269ad-3523-43a2-abd7-4febd516050e",
        "cursor": {
          "ref": "7da8de24-704e-4213-9420-6c9b81bcf6ed",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "dc69e2b2-a878-45df-a417-cadb2e632b53"
        },
        "item": {
          "id": "4c7269ad-3523-43a2-abd7-4febd516050e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e6a4e110-d047-491c-a077-86229c8176a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1180,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f24f4c-ffe3-40e4-8bee-3ba854fcf7b6",
        "cursor": {
          "ref": "516453fe-a839-4499-80c8-fcb54080a884",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f631a16e-c96d-4d9a-8f25-3255301c5faa"
        },
        "item": {
          "id": "e8f24f4c-ffe3-40e4-8bee-3ba854fcf7b6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5f4ab1df-45c2-4a69-8729-edac9ddffa9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 279,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98097fd8-8dbc-4390-a069-0526b787adac",
        "cursor": {
          "ref": "15c62b51-8822-49c3-a790-af507be6a5ee",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "226099f7-c09e-4055-bbdb-6f8cf68b6f1c"
        },
        "item": {
          "id": "98097fd8-8dbc-4390-a069-0526b787adac",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c0d93aca-bc6a-49bf-9c4f-4fb4597a4a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6451,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5090f14f-c448-4948-9857-3e6c3f249da6",
        "cursor": {
          "ref": "879a7d24-a8ae-42e8-9778-31f5d5d7a48e",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "2dddc216-7af6-4cc4-a505-cd38bae21a83"
        },
        "item": {
          "id": "5090f14f-c448-4948-9857-3e6c3f249da6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6c5204e0-7b24-4922-9ad6-e382eeb90cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d456b6c3-c6f0-481a-85e5-6afb2846c7c9",
        "cursor": {
          "ref": "c6a40d25-05b3-47bc-93ba-a2a191f09d52",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "78e37712-0e6b-42a7-b478-74d9378dd239"
        },
        "item": {
          "id": "d456b6c3-c6f0-481a-85e5-6afb2846c7c9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "72d48ccb-dc42-4099-a34a-1ce018420108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c74b80-861e-4a6f-96e5-06adedc752ef",
        "cursor": {
          "ref": "f536dcc4-cdf0-4f70-9b11-ab795018cf13",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0ddcc4d1-6a0b-4e2d-bdb2-535959d7cfe7"
        },
        "item": {
          "id": "80c74b80-861e-4a6f-96e5-06adedc752ef",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "fb8313b7-e461-4b52-9a31-5ecbe8b51257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2105fe7-118b-433b-ad11-2fdb1222e435",
        "cursor": {
          "ref": "c67d1616-51ea-40dd-be13-13b12bc5d984",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cb45bb6b-62fd-44b3-ab65-892eb3add8c5"
        },
        "item": {
          "id": "b2105fe7-118b-433b-ad11-2fdb1222e435",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6b4232c7-635d-4f4f-b952-425ef2fd7f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89d0f79-8707-4c35-a8c4-0cdc15acc699",
        "cursor": {
          "ref": "db1b4411-12d2-4b6c-bd67-81d4f04c48e2",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3991524d-0600-4c00-bef3-f2fe25ef5322"
        },
        "item": {
          "id": "a89d0f79-8707-4c35-a8c4-0cdc15acc699",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e7953899-21de-4e4c-b2ac-02e1f46c2faf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871e7213-9cf6-4c18-b6d6-c7aa0cbbeaa4",
        "cursor": {
          "ref": "6f0ad052-45dc-4f09-8b00-8d04b3a47c0a",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6637b6cf-b61a-4723-a8df-dfb4243f0041"
        },
        "item": {
          "id": "871e7213-9cf6-4c18-b6d6-c7aa0cbbeaa4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9941a2e0-a197-4499-aead-8f67893b9454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce344c8b-a8b4-4358-bd50-98790bfeb66c",
        "cursor": {
          "ref": "ace1fe13-1e55-4558-8d5b-136c50b4991f",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "edcc45c8-e2a1-4e1e-a881-6dd9170e2ffe"
        },
        "item": {
          "id": "ce344c8b-a8b4-4358-bd50-98790bfeb66c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "76848ea0-e01f-41fa-bebb-cc5a6eba0737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c750103-3e94-4f1c-8921-66e6f53dc0e8",
        "cursor": {
          "ref": "9032f433-7c0d-46fc-a467-147b7eb8af57",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "16ccd3b0-0ae0-478c-a1a4-92870c85d8be"
        },
        "item": {
          "id": "6c750103-3e94-4f1c-8921-66e6f53dc0e8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "27abb33c-945d-400d-be0e-d01cf39da052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e57d22-d719-439d-af8d-860638bd4c2e",
        "cursor": {
          "ref": "3bb85399-671e-4ee7-b085-2e5d212b8cbf",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "efe02f7f-d147-4ba0-8c79-203399336971"
        },
        "item": {
          "id": "74e57d22-d719-439d-af8d-860638bd4c2e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c55b8416-d5da-415f-aa86-fe7e5e9ff0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7c338c-7f97-4cc3-b6fd-c8b4a9647713",
        "cursor": {
          "ref": "c8eba175-27d6-4a45-b12f-64803416a6bf",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f5fe172d-3559-4678-b55a-b2586bace820"
        },
        "item": {
          "id": "bb7c338c-7f97-4cc3-b6fd-c8b4a9647713",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ff876ef5-60df-4744-bedd-4872505a0a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88f0b04-a2bb-4d99-b34e-526759d50a3d",
        "cursor": {
          "ref": "9e8ba31a-406c-4f15-b6fa-b0297b9fd285",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c2f1791c-c8ec-405f-a74a-ad4c62eedffa"
        },
        "item": {
          "id": "e88f0b04-a2bb-4d99-b34e-526759d50a3d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7940e28d-387a-4187-8524-ed4e1fb914fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c20763-8e87-4888-9f99-e42c9c0898f8",
        "cursor": {
          "ref": "8094a03f-b5ed-4cc0-a631-2ebb9f20b9cd",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7a744f89-5442-4565-a2a2-68a1abb68584"
        },
        "item": {
          "id": "f4c20763-8e87-4888-9f99-e42c9c0898f8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "03f28879-1d8e-4719-a27c-2cdbcae55ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb7c293-3a25-4eeb-b5cf-c3ac77602161",
        "cursor": {
          "ref": "5ff38142-6676-4c50-b658-4c0c6ef777d4",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1ff4ea94-ed78-4d4a-a443-adfb3eb4e0ae"
        },
        "item": {
          "id": "bcb7c293-3a25-4eeb-b5cf-c3ac77602161",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "88110f78-2753-45ec-b700-0b1d10e0be59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "325cd807-fbe5-4b38-9bd2-d77707c4d164",
        "cursor": {
          "ref": "daf44180-c41e-4603-8307-055eef18a9a5",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ac01eede-d8d6-4898-94ac-b21693e8df96"
        },
        "item": {
          "id": "325cd807-fbe5-4b38-9bd2-d77707c4d164",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b66a83d1-7876-4cd1-a903-75a7ef799992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79138d1f-71c6-4799-9044-e5a09bf7e133",
        "cursor": {
          "ref": "10af16b2-768f-4238-9d4b-b4e0f38cb418",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b74f624b-87b6-415b-8de8-f9ca7669f76e"
        },
        "item": {
          "id": "79138d1f-71c6-4799-9044-e5a09bf7e133",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ad72d2a6-b04d-4435-9640-6fca53929dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21724da5-a99a-4605-9e6d-4b822a10c042",
        "cursor": {
          "ref": "d22c7d2a-844e-4d1a-b236-9829d2a1f191",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f1688642-7f8b-4964-a8a8-a5b9974ff251"
        },
        "item": {
          "id": "21724da5-a99a-4605-9e6d-4b822a10c042",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e67c548a-2475-4422-a410-1c20b96eddf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147f2e31-e4bd-460d-970e-a7b072054b12",
        "cursor": {
          "ref": "31dd95b0-e0ea-4694-b61f-e30e9dea4ebd",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d7354f1c-733b-4f76-96e2-99b42d8d94f8"
        },
        "item": {
          "id": "147f2e31-e4bd-460d-970e-a7b072054b12",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "68dd7f16-098a-4c7e-937f-968e3e9ca294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68196077-dd45-40e8-a3e4-699c9e668aec",
        "cursor": {
          "ref": "571e9384-a8a2-485c-8d8b-de8e3426f545",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7a8dcb42-bc04-4610-a3e0-45deb7bdc36c"
        },
        "item": {
          "id": "68196077-dd45-40e8-a3e4-699c9e668aec",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "265ee4d2-1495-4233-a837-ada57703205c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3ff583-5fe3-4f57-9448-1c7d4ce9bf92",
        "cursor": {
          "ref": "89d8f495-d3d7-4b5f-a4a3-71908a71e217",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7cdd82a0-dde3-40f7-b8bf-2fa7ab3aecdb"
        },
        "item": {
          "id": "fc3ff583-5fe3-4f57-9448-1c7d4ce9bf92",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3350f3f4-9185-41f7-adf8-731f02589c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0252fe1-ecf3-421e-998a-0c676905e3bc",
        "cursor": {
          "ref": "5d51230c-906f-4494-a8a0-110cedf338f0",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6173febb-c070-4a33-8268-69fe0151dc20"
        },
        "item": {
          "id": "e0252fe1-ecf3-421e-998a-0c676905e3bc",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d52c9fc8-b5e4-4baa-9ca1-aedb12b8db2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42082534-2eef-485b-9e15-257ae34d0278",
        "cursor": {
          "ref": "ddfa9521-1eb6-4028-8a9d-173287f02d49",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "611cd06c-2815-46cc-807e-2006a3a18a2e"
        },
        "item": {
          "id": "42082534-2eef-485b-9e15-257ae34d0278",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "de383ce4-919a-42c5-b2f4-3c5aca801e39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2e6d10-0b11-4b47-8d4a-b35c13060eaa",
        "cursor": {
          "ref": "c18ed33d-fd86-4e17-83ba-cd39c9fcd554",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c2989ed0-87d6-480e-8a44-333b147ba131"
        },
        "item": {
          "id": "fb2e6d10-0b11-4b47-8d4a-b35c13060eaa",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "cf67c7b7-caed-4128-97a6-2ab9bb22bab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9f3339-77dd-459d-99e6-41d02de18430",
        "cursor": {
          "ref": "566a0c3f-6d59-428f-a823-fa7a0f6ffdc7",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d9ff4d2d-a3f3-4174-8cd5-516e9c8c1f0e"
        },
        "item": {
          "id": "bc9f3339-77dd-459d-99e6-41d02de18430",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8c9a16e0-a75b-4bfc-a64a-7bfe40c3b84f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad9091e-2f11-4386-8d97-19bc58a05b9f",
        "cursor": {
          "ref": "4060f3a9-aa8f-4647-b549-65abb5b0505f",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1b495b83-60ff-4066-9867-28c918b363e6"
        },
        "item": {
          "id": "6ad9091e-2f11-4386-8d97-19bc58a05b9f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ddd21c8c-3add-4fc5-87b5-84cb7b5db774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81fa800-b6c7-42df-8a29-15efa2a346f7",
        "cursor": {
          "ref": "6980a642-37fc-4fdc-b528-488184d2f7c6",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "bf08a1e7-7708-4181-a549-e9d0418f1625"
        },
        "item": {
          "id": "a81fa800-b6c7-42df-8a29-15efa2a346f7",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ecda8a5c-ec32-4fe7-adf2-8ea9de28f3d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc3e1f0-af0c-4f20-84db-124a678ec971",
        "cursor": {
          "ref": "5b0489a6-41cf-44e0-9d79-1f42cce78ae8",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "720dae6e-11e7-4a66-a28b-067f1cce8265"
        },
        "item": {
          "id": "dfc3e1f0-af0c-4f20-84db-124a678ec971",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6ab3c095-d7cd-4c1e-a3f5-c3227f169af2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75325426-8a06-439d-a76b-5193bd5278dc",
        "cursor": {
          "ref": "f093836e-0bbc-4200-a5fd-bebcc5892975",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c7760d1e-f489-4fc4-b47c-e8cb06d38921"
        },
        "item": {
          "id": "75325426-8a06-439d-a76b-5193bd5278dc",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "621a5eef-f0ca-4ca2-9319-71c32851b7e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e73286-4074-47d2-87aa-40a4e198d2a5",
        "cursor": {
          "ref": "97c15fa3-a50d-4203-b3b7-518f41c9ba7d",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "22ecf7a1-fb50-432c-a861-60878cd1a1bc"
        },
        "item": {
          "id": "f8e73286-4074-47d2-87aa-40a4e198d2a5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3ff0bfa1-3540-4bb7-96b9-eb5dcde34b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688cf94d-7d24-4748-9633-7fbb69ff2d5a",
        "cursor": {
          "ref": "6ef9bffd-cd32-4b4b-99f8-7dc189e42ad9",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "454d01d8-5e3f-48fb-b13d-ef572a18c326"
        },
        "item": {
          "id": "688cf94d-7d24-4748-9633-7fbb69ff2d5a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "acf245c5-ed56-4eaf-9377-d29d9589a6ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8aeeb1c-bb1d-4380-95c3-c6207769eba7",
        "cursor": {
          "ref": "23c75a24-0126-43c3-be65-4ab971790291",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f0442559-6a19-4e50-b9f1-b02303aca4ec"
        },
        "item": {
          "id": "d8aeeb1c-bb1d-4380-95c3-c6207769eba7",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0dab9001-d556-4edd-a5b6-9c43e937d521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b63b9e48-aa29-46d8-9822-9f3f129951ad",
        "cursor": {
          "ref": "7a69a2df-d315-4a1c-b204-7376cb7a4cf1",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "93815304-9ab6-433d-ac36-2479f360273e"
        },
        "item": {
          "id": "b63b9e48-aa29-46d8-9822-9f3f129951ad",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a520af56-6902-4982-b2f4-6fcf3d98806c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f987a296-1fb9-4f99-a3bd-6522a600e027",
        "cursor": {
          "ref": "47da6f2e-54ea-4c76-995f-93e0510f5852",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "411965ad-4f45-4b90-a65c-5cbdfbefd5d7"
        },
        "item": {
          "id": "f987a296-1fb9-4f99-a3bd-6522a600e027",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "40c19f16-057c-4a53-80b2-1f6ba74e03cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efaf0c70-075d-47bc-b1c2-49034f020ef1",
        "cursor": {
          "ref": "87a64ee6-f8ea-42e9-8315-3f80d287afe1",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9217f0e5-58cb-4f43-b285-d3d577161523"
        },
        "item": {
          "id": "efaf0c70-075d-47bc-b1c2-49034f020ef1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2aae85ea-76e1-469f-88b2-a58090b34333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0246e75c-d2d8-4128-aa99-9906116a87a7",
        "cursor": {
          "ref": "3101c96f-3d85-4cf1-b9a0-c98dfd2f5052",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "8c6fef1f-367a-4c8f-b49e-1e1f9ee56a97"
        },
        "item": {
          "id": "0246e75c-d2d8-4128-aa99-9906116a87a7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0383af9b-95e4-4f2a-b3d9-1d5876aa2807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7168991b-4006-4329-88ee-c1989eb9f8e5",
        "cursor": {
          "ref": "ab7530be-5d50-4159-aad8-8b510f4083a9",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "42e17edb-ad51-42fb-b6f5-75568a06338c"
        },
        "item": {
          "id": "7168991b-4006-4329-88ee-c1989eb9f8e5",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "50cff50e-c658-4b5a-9d78-556ec4b428db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f0a828-4902-475b-a27e-d94979a72f2b",
        "cursor": {
          "ref": "cf229ddb-8df8-47da-b42c-215975ab43a6",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "682f6e33-eaea-435e-835c-276f818870fd"
        },
        "item": {
          "id": "e9f0a828-4902-475b-a27e-d94979a72f2b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a4d0f06d-b9a7-4f40-bea7-6c9c6b6ddcf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e12230df-5c4e-454c-9047-d6d19259912c",
        "cursor": {
          "ref": "6fe4cd04-4c8e-4462-8ae9-1c7e2eb6f63e",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "76c08f3f-59e2-4aa2-bee7-0f194afcc05c"
        },
        "item": {
          "id": "e12230df-5c4e-454c-9047-d6d19259912c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "dfcf9c03-996b-4de2-aeaa-b85dcc37592f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d91fbd4d-bb39-4a11-ad3e-c6cf0c8ec594",
        "cursor": {
          "ref": "f47e8fb0-cc62-4f03-a011-34a59613b835",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4d9b1987-1bed-4246-8bac-92396d5b1195"
        },
        "item": {
          "id": "d91fbd4d-bb39-4a11-ad3e-c6cf0c8ec594",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "415d5d48-c6c2-4f90-afd2-ff63ff9b0dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efca7836-7180-4070-8eb5-b3edf0697149",
        "cursor": {
          "ref": "568f5b48-2330-4593-b005-5a5b05ace62b",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "79a32745-2150-4595-9285-0f647d7764fd"
        },
        "item": {
          "id": "efca7836-7180-4070-8eb5-b3edf0697149",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "72139ddc-8230-4e32-a2a6-5a868229cf68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d23b89-734c-4302-93fa-b7675f49c567",
        "cursor": {
          "ref": "83351f56-2f9a-4817-8020-c17ff95ee161",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "efd46366-0f01-49e3-b98b-be89e5b25de0"
        },
        "item": {
          "id": "b1d23b89-734c-4302-93fa-b7675f49c567",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b0845bd1-bf70-4802-b275-63bb7ab4d55f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0a91f4b-742a-43e3-9f1b-86e49f203b46",
        "cursor": {
          "ref": "3cce5abe-a166-4155-b2ee-51cc24d7853f",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a278d6b6-2d5f-4af7-aa5c-8a66a05d9109"
        },
        "item": {
          "id": "e0a91f4b-742a-43e3-9f1b-86e49f203b46",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2e32dd0f-0e01-48f3-92df-036f1cf4c556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3667a52a-3ece-4a01-aeaa-5894bdd181fb",
        "cursor": {
          "ref": "2065bfc2-f678-4e5b-804d-bf87bbc0d2c4",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "76c70af0-b81b-4639-a855-12096a99150f"
        },
        "item": {
          "id": "3667a52a-3ece-4a01-aeaa-5894bdd181fb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ed6eb9c1-087b-4cdb-80bb-49c1d3541c39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "c8cc35c1-7bcf-47b7-8474-0db4f82e3258",
        "cursor": {
          "ref": "4056e80f-1210-46cf-ba7b-280a1636ff10",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "90fd7b2a-3c8d-4cd7-abe7-9b091701f4af"
        },
        "item": {
          "id": "c8cc35c1-7bcf-47b7-8474-0db4f82e3258",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "b8bd22d6-c1a3-45d1-a129-f7b12531d6eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "d91f774b-c649-46ed-ad81-798b69d9f03d",
        "cursor": {
          "ref": "35b5d14a-52cf-468f-b1d5-59cdbc726529",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f808b186-0b1e-4cbe-950c-d1cd9614dad3"
        },
        "item": {
          "id": "d91f774b-c649-46ed-ad81-798b69d9f03d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "87741ac0-e098-435e-b662-cd6297cc1f40",
          "status": "OK",
          "code": 200,
          "responseTime": 172,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c07645-9e3a-4a28-a920-5a3e3a0baaf7",
        "cursor": {
          "ref": "75cacea7-8e9e-42bb-91c4-db8a986e6524",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5877cbcd-c04a-464e-9dea-d0cca6170cc0"
        },
        "item": {
          "id": "c8c07645-9e3a-4a28-a920-5a3e3a0baaf7",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5b7654eb-cdc3-43b3-934b-4644c3f3dbeb",
          "status": "OK",
          "code": 200,
          "responseTime": 2510,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "58131645-ae54-465e-b695-3bad522f5c81",
        "cursor": {
          "ref": "258e3205-6d2d-40ac-9315-6ecd80d9c149",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "25ac8911-ba34-469f-aff9-513d5d4287c0"
        },
        "item": {
          "id": "58131645-ae54-465e-b695-3bad522f5c81",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "32bae585-cd49-4282-a538-2d5a8ed737ea",
          "status": "OK",
          "code": 200,
          "responseTime": 2673,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ec0a35-4682-4ee9-8f47-07fa3d693e7f",
        "cursor": {
          "ref": "72654b00-3f84-4be0-a7d0-57e56fd704fb",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fac20a2c-245e-4ae8-a5b7-61dcd88a6e75"
        },
        "item": {
          "id": "33ec0a35-4682-4ee9-8f47-07fa3d693e7f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e03f93ca-b810-450e-8dfa-b00a9d00f8e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "33ec0a35-4682-4ee9-8f47-07fa3d693e7f",
        "cursor": {
          "ref": "72654b00-3f84-4be0-a7d0-57e56fd704fb",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fac20a2c-245e-4ae8-a5b7-61dcd88a6e75"
        },
        "item": {
          "id": "33ec0a35-4682-4ee9-8f47-07fa3d693e7f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e03f93ca-b810-450e-8dfa-b00a9d00f8e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "33ec0a35-4682-4ee9-8f47-07fa3d693e7f",
        "cursor": {
          "ref": "72654b00-3f84-4be0-a7d0-57e56fd704fb",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "fac20a2c-245e-4ae8-a5b7-61dcd88a6e75"
        },
        "item": {
          "id": "33ec0a35-4682-4ee9-8f47-07fa3d693e7f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e03f93ca-b810-450e-8dfa-b00a9d00f8e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "4f1d0d9f-581e-41f3-9153-5297ec7edd6e",
        "cursor": {
          "ref": "5a7482bb-4dc3-47c2-bd68-a0d00900bb79",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f18dc19d-7830-457a-accb-a80238600951"
        },
        "item": {
          "id": "4f1d0d9f-581e-41f3-9153-5297ec7edd6e",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "ad05091a-0654-4047-a47a-7faceb75de91",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "8d43e461-a3d7-4864-bbc1-d205fe2ace31",
        "cursor": {
          "ref": "37fe9f20-86ca-4e90-8723-1fb3b64c36b9",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "34b70d31-5544-4cff-aecd-6e9cdc249522"
        },
        "item": {
          "id": "8d43e461-a3d7-4864-bbc1-d205fe2ace31",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6445df17-1010-4292-b9fa-a8795c2a0c47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "8d43e461-a3d7-4864-bbc1-d205fe2ace31",
        "cursor": {
          "ref": "37fe9f20-86ca-4e90-8723-1fb3b64c36b9",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "34b70d31-5544-4cff-aecd-6e9cdc249522"
        },
        "item": {
          "id": "8d43e461-a3d7-4864-bbc1-d205fe2ace31",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6445df17-1010-4292-b9fa-a8795c2a0c47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "4f0c5a41-efba-4f22-bfd8-17a4ca95e29e",
        "cursor": {
          "ref": "77e76346-85e1-4bae-bd7b-99a3ffd431e5",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fe0c4b3d-012e-4dce-b799-f97439b60688"
        },
        "item": {
          "id": "4f0c5a41-efba-4f22-bfd8-17a4ca95e29e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "c5534f4e-00d2-4471-833b-ef25ee163ba5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 153,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "f6107952-0a8c-4584-a85b-a875c4554506",
        "cursor": {
          "ref": "5be4f785-e662-4c0c-9273-a61402f14ce0",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "aa21999e-8794-4452-9227-1152ac3eb056"
        },
        "item": {
          "id": "f6107952-0a8c-4584-a85b-a875c4554506",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "36f110b9-d666-4d56-b27a-87e78c9f4144",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "f6107952-0a8c-4584-a85b-a875c4554506",
        "cursor": {
          "ref": "5be4f785-e662-4c0c-9273-a61402f14ce0",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "aa21999e-8794-4452-9227-1152ac3eb056"
        },
        "item": {
          "id": "f6107952-0a8c-4584-a85b-a875c4554506",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "36f110b9-d666-4d56-b27a-87e78c9f4144",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "00874da4-8714-4de7-8ea4-0a483a16c43a",
        "cursor": {
          "ref": "a43e8cec-ede4-4fd0-a8f6-42aace1d6d93",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f060be98-b1a0-407b-ae63-529d9c2ce4f8"
        },
        "item": {
          "id": "00874da4-8714-4de7-8ea4-0a483a16c43a",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "82526186-7bc2-47a6-9186-b21d7305da64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}