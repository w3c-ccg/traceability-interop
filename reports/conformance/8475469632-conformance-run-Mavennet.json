{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c11bbca5-3b00-421a-8eae-2b0b7472ac6c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4d5f1719-a476-4ae6-856d-29d6a8afe619",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a04a85b6-4d0b-49ee-8ce1-6ecee85b40aa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fb9fd69e-81e3-451e-9651-cf9953ce4314"
                }
              }
            ]
          },
          {
            "id": "4a44cde4-9da2-474b-9dc6-d561347901e0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4c653848-861f-4322-a163-a88f0e018f90",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d244e4d6-fa71-480c-90df-9089983d19db"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "32a311f1-414f-4638-8868-6d8f482ed306",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8761e363-a507-40a8-aa7a-9a0454d71cc7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "587eec30-5210-4227-9d7b-d8355a182c3e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b34649cb-e261-472a-85b9-b33f7c4635ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "71302e0f-fd17-4004-8002-218cd138ef7a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "faf46990-6fca-4034-89da-4179bd58f590",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8fb7e4f4-32bd-41a8-853c-d2a75e148110"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "de866165-f776-47ac-9a5a-de57b411f2f4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "81713c38-346e-4f21-8ef8-0549dee29061"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "71d2c230-340b-40df-82df-6cd88ee9c659",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c637f7b0-9d14-4fe1-887d-92b72b38ece8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "655e1e9a-cb1b-4cec-bff9-f7de302fb376",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "04f1d564-5cba-471d-8262-3afd2645e332"
            }
          }
        ]
      },
      {
        "id": "773406df-a5c0-4190-a003-583ed7376b2d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "cf486341-b305-47c7-900e-47e45206d73a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "802b7282-e18c-40bf-a6d8-7ff63872fa52",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7c301d8e-cdef-4d1b-9791-77f7d346eebd",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ecb84ff-dfa4-42ec-a35d-6f928f3ad501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e4d4818-29a5-41ee-a06a-75525b2d4e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e474b1-17c3-416a-9ad0-b9c2e97e4f5a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60fad2c-261d-4871-8152-95755feff176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4f28cd0-d8b0-44a9-a363-97f13f480719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76a162df-d767-404b-abc9-3a76b71817ab",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6436b479-3d2b-4e68-9b3f-329d8602b34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "255c2012-7a3b-4cd5-950b-482463966d8b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4737d7c0-0940-46af-8050-97c2fa854307",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "22125a57-fd32-4433-831c-01cafd92fac8",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d878982-310c-41df-a3da-87d6c7b406ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69f1542f-ca7c-4db2-84be-3ff59991fd56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7295da86-c22b-467c-96e7-38778df42ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb47094-59d6-482a-b08a-5a9dd0ebdb1c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d90caf01-26b9-42d1-a76a-938f66290917",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6d1c1d09-d23a-41ab-aeb4-10ac9038a189",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca6c2841-1051-46cb-a8bb-c482f7c255d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c878885b-4ff1-4f3f-80e9-5eba6a78036b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "32969d2e-a195-4e5e-949c-dc5ecb9ed4c6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "1fe9d74b-f434-4f03-9db0-864383a95a01"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "384ec485-3ac3-4203-b0a9-82c874c6e75b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ee4f348-8cd8-43cf-865c-fb0295034889"
            }
          }
        ]
      },
      {
        "id": "5025ca07-7748-44a7-a780-65379b909599",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7f05cb6a-48f2-4101-b5f2-43e99c2874fe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "02f4d866-9cb7-4bd5-8ab4-d59d74331070",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "95486ce7-72dc-4a8d-9d4b-179bdd5d72d7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e63a00-9bbe-4651-acea-4443c3bcc181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "633521be-f514-4cb9-bd71-e09417622f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecabcc11-ba19-4c44-b58f-1c05a0e3c81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b6ba380-0dbf-4484-bdb8-f39e972cd9ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7441fa37-804d-4f80-a0f5-a51b2f8c629f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06910e6f-42a4-4212-acd3-55c8803915a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "295185df-fa53-44ef-b8e6-4144cd5348a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcbd9bb7-c9c5-43da-a086-f7c8ea9c0982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1ce92b9-02ab-4123-883d-179e95c71276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b44f96-8124-4f3e-a9dd-1c9badcaf3df",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e96ea22-de6d-40ce-af74-295393518627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5330d02-da56-48c7-a72c-2613d5c65547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18dca910-805c-4140-b958-d2c43a13dea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a812a5a-3a0e-4ca7-9012-e75c9ad55923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ae822a-3241-45f0-940d-85661bf58fb4",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "158a3715-d813-4d4d-82cb-d578e481c58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2d7abd3-c527-4362-9e2b-4945de295c4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6704623-26d1-4d23-aabc-39b2348fbce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7f24488-58d2-4aaa-8516-6cf038b97f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b40436e-cd04-47fd-a755-faeef27f3aa4",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1e863e-db54-492b-8025-ffbbea9bee91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d95c20c2-3ebc-4908-949d-90f14874905b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f04b4f-9b0f-4ec3-9d93-679cf6cad14f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa01323a-f6e1-4c42-ae9e-60966e6a9c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe6cf0d-8e92-40bc-9859-bd0f3ecce28d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc88e008-ffc1-4184-97d4-11b219412ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad07895c-e3a4-4d78-be81-211e281f061d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488af4a6-a8cc-4361-baba-192a0097973c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e495540-73cd-4368-bdcb-8a7d3c408a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11b74a7-a1f5-4800-9c9a-afbd3112463f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7bda817-cca2-4d98-bfd9-17db288b9bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca6f0fd-fb99-4e60-ab3d-f3ee2fb5ba36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d893d96-fa8d-446f-bb13-391bceda436e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea4ed26d-4bda-4556-9d5f-44a1282fc64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a4ee11-7519-47a4-8037-2c5f6a61c6e6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cccc25b9-0c66-4bdd-ac3d-83afef0c4247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0453397-460c-4b4e-a216-a428424f68c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5088245c-375a-46bf-bd65-92f9ef26a78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca45cf3c-ccdb-4ddc-870b-54ae57342b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6dab719-f66e-4ee3-bf0b-1ec516e6e873",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2ef194-a57a-4449-9977-654371ce3a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c760247e-98aa-4742-b5d0-799907bf3ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a0c834-4811-4fb8-9ef4-e5b296b99be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36ad7dab-162a-4853-b3be-bb39edbc19dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d298557-4c88-461d-ad04-44d575fd5e1f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa166f63-ab30-4ffc-af45-ddfb4247b095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6e8d592-8af2-43a8-a3cb-64cc556e282d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c948dddd-b7ae-4b7f-8dba-671d26aef588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80478d86-a0f4-4cc2-94d0-f8e19c432049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f55ff5-1952-4528-b533-f8a65d1c8151",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "456c0f67-ed19-45ce-9027-dfc6eec1556f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe79cc4e-99cc-4b4f-b67c-2cd16f1c4d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da751270-776d-4604-97d6-687b9d6a5e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e1122c7-c85d-4d4f-91d2-786148b4fb5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "982a7645-0444-48a3-a406-a27a4537699b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04fe339-1351-4a5d-9981-b693a53109ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ddd96b-e4ec-433f-8e83-a544eeb4ed16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0354c21-e113-46fe-92f2-0be37f98601d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1fed0f47-a659-4ffa-9d3b-b4ac4e1a916b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f85490-7db3-4bc1-9060-3c190699c870",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c329b5-21b6-428a-9647-49047bd96efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c22c0c4-2be9-483f-af5a-527be3e1143c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8027bc84-f2bd-4949-98fe-5d6e111edc43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e18fa97-4478-4b23-a802-19ca2a1e8d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5fa4f96-2639-4057-8319-53cca5fb2fad",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec96b71-d84f-4ab8-bb41-f8f3867e23bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f881a9cf-4d5f-4dee-b481-870893433ab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849f9765-fcd9-4089-875c-cf54663d4c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69760c55-7c6e-4ea9-a595-d057d707ff14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac6a405-fb4d-44f3-a804-149e56385bff",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65290436-d7e6-4f67-9a6c-875aec9df72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c7b9b99-e24c-4d85-b9b2-a4f432c49094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b64ac2cf-19bb-4bbf-974f-33b37e701e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "413d3b05-c568-47b4-87b3-2b2abed3956c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35418356-8de1-4473-b927-2dd2a3d43091",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3c3416-c73e-4c01-a2ac-c263ac81e33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45465b59-f897-4c24-a9af-375a4b1f7e2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c84ef9b4-26d7-40bd-a25b-84e73fcd3eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa9594c5-df6c-4606-939a-210b1dfb30a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56e32ab-62e7-4ef6-b00b-9f4078cb2893",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32924ee0-c46a-42bf-8775-60a4b01c4bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5725ae8-139b-42a2-b5e5-5dc238569d69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dab22d3-7118-4a56-8d26-85a0e10ca2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c5ed002-5a19-420e-b051-5d68e8d9d060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d73fcd-b4bf-45ff-899e-6b924e12a0cc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76969883-5bf1-4b69-8dfa-3c5299972a04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92fa50a0-ee58-4e34-998a-3b557a356378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d00b894-40df-4fda-be6f-e3eaef087e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c560a6df-dc1c-49e9-bc0b-4ecb8da47680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c080bcc2-2c2b-46f8-a7e1-99e830ca7602",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c776f46-5e7f-4641-9d0d-922f3d1431fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5940ba83-3ba0-413f-941a-91d6a28bbd52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0249c633-e11e-4644-98fb-ec0272816e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9888581-1dee-47c1-9aad-7f148e419a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa029dcb-b361-40cb-9ece-92ea7635354d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ebbfb9b-677a-4726-a313-92de3bfeb8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a8660d9-572a-4fc4-8e9e-d69ba39e52f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff3802c-f3ff-4a22-bfac-275e0900bf64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd6b1d71-151e-4857-92c7-8ebfd0b9cf3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d46c91-212d-4940-b3cc-6899705ee52d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3376d0f-8bd3-4978-945b-13699e70f6b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a69a128-39f1-4311-9920-c2703c062115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ee04bd-0682-44da-907d-58a8019ec455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1391b65c-6c8d-4117-979c-e30c8d028008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e2f444-bc13-4f09-87b4-7f6a0d88e1ce",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4541c0d8-564a-404b-b6d2-5929f13770d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cfb0ba1-b9a0-4943-8db2-9338deb2b592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d30dbe-be8f-4e67-9621-b04f6b79af79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e591eef5-0a6b-4d3b-a7a4-04c6b04ec667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210b78e8-62dd-48a5-bc47-91ad9aa6cdb6",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58937ab5-b431-4a1b-8034-361f2ea0345a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c55f81b-042b-468c-aa70-ee6357ec991f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf17aca-2850-4193-8ad6-f993314307e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5a7b1b64-9370-4b2f-a9f1-04d76c93f981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ae9dd0-025b-4b7f-a04d-c0b8095bfdab",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09da117-db28-48de-bbb2-9f30581bac46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "930b8772-1d90-42bf-8ef5-4581926b9397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2e2ad0-70f7-4873-bc25-326b6ba7a2dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "69ba71e1-2171-4044-8f78-0b1838800097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea07e5b-850f-4e57-96f7-2d33452c07c9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69ea73e-c92e-4c77-81c1-ebd9c7dd25dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a1d575b-56cc-469d-894e-e84ad9c03507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8dddfb-a697-439d-924e-f820cd49f4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c83f84d-dd5d-4177-87b1-d53041bffd4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27f6bb1-430a-4ebe-ae6b-1c9e5473e147",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3653d0db-855d-4e85-8fde-fabde5255740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60200c19-528d-4c4c-8b9d-e493b1f6d827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0773b7ce-708d-4b79-9393-d66e77f774ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "403a2bc5-416a-4fea-8961-0807dbe4c177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97edbf39-6dd2-4947-a660-2840f118ed88",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "376a5524-f5c8-45ab-9218-7ee0689eab43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc79847e-ca61-4569-937a-baae435f58bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5aeb40-5bca-4b1a-aa34-e6aae4290c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9567353-9fd2-4f2f-b349-c88383258b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5bca460-6479-4571-bda4-f981701791eb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af314873-930f-4e35-8ee5-5cd05098ded5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07a6739c-f2ec-48b1-bb98-29f6dc42d76e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24fda8cc-ae59-4438-b125-fddd642406a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dbdbb60-84d8-45d8-b732-da6f6585dfb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f4d90a-66fc-4ee7-87ad-af02606373fc",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f829bd3-be3f-4bec-b028-15d364e3deb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ce8ba7f-2604-4cb5-bd6b-36fce8cb34e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84a5ec2-f229-41e0-a7a4-8546fda492b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d947be60-9544-40d8-a10c-96e4f4d9bafc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66118cf1-91ca-4b17-ab96-b745a221b94f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "665fe318-2160-4a69-b87a-4ea9d44f45d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3816d253-afff-4056-aefa-5412ea246f78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecbc3ac-03de-46cb-99d1-62f379399df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f091e880-45c1-4790-b211-cbbd3e9fd28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36cd9845-3c91-44d2-8ff2-4400e0305ec0",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f0ff04f-6a7f-4967-8813-56cb51526378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01423fe9-57be-404f-8baf-b8c8104a383d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f457dc54-97eb-406a-b8e7-be7b783780f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "46e3fb36-6f22-4ae2-abf4-e817f6669f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f25fc55-ac2d-4471-8908-945763cef95b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30cd1e72-6fc7-44cf-9c21-23237926e9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a97cd920-6d03-45a9-932c-ce8b96021dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f5fc0d-6417-43aa-b5b9-4acb00af1660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fbb54b0-2976-47fa-9d27-f784067b8423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccc408d-7c59-41b3-8423-18b6d903746b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb11c1d-726c-412b-a9ae-b498c6367a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cff5b200-e2d5-472e-9f85-0cdab137f9d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9fcc65-006f-4438-827a-18adde8a1b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2dd1c804-d627-41de-8810-efb156d07eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7858901c-df71-4c95-b42c-8f284b99141b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f52736-1759-41fb-aa87-64adf99ebeb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "590970e6-5200-45f6-a5bb-a22bb6a1867e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1017bc-7bc2-4ae6-85f9-2df306aef389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "49d59626-96f1-43bb-9070-ce45ecb763f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e71f93-d0b2-4745-b7df-5ed459da91e5",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11afa0dd-185b-4fba-9f51-66afee3152d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6511b56c-3f03-48b9-b6e0-3399a5498c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b4d0e7-4dfb-4ab3-9b8c-f5c41783a69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "bb263281-7868-41d4-b934-efaada5d8a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d22bcb3-ad72-43bb-ab0f-84d84a8a02ec",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0bc5a9a-a95b-4e49-950c-ed9b58091f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89468fd0-4273-4834-ba87-7de363112965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa758b7d-672e-4d18-b429-1fbba2510fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9be16df1-8191-4bd8-8991-9db34e6df956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70235633-200c-47a8-9d16-0263b2f1090e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcde4bdb-e474-4a24-a9c0-2a1da797cc00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e389e0b5-8bd2-4f7b-999c-26dc7a4e94c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d21d076-f301-4ba3-9340-620e370f57e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbeed2c2-cf1d-4e15-a2ab-dba3a64f6273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3fe38e-37ee-4d16-87e2-ad17f6405350",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40476c5d-dbc8-465a-8e2e-5e91026ab477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35107ace-ffef-4cdf-9f1c-a42e54d57638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05834515-2e85-4d57-8e05-1adf6cbb3852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b02a39-0385-4adf-ad6c-99afa0bcfedc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ada5799-5901-458c-9415-8c2e95fce13b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce45d5b-46bf-44f4-970a-4cfb72402a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f46543b1-5f38-4580-bd2e-377eb227eebe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba261844-8b57-429a-971d-bf38a996a20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3220bed7-212b-4b8d-b684-2afc1a7b3411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc82292-8a04-403a-9546-0dc7a573272d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d5df4e-c4bc-496a-bda1-2edac953784d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67fbd8b6-f9b4-4acb-8640-9c827a420ca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb6f4c6-764c-4b21-9840-473d59c6c8f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0206a7b2-c8c2-48bf-800d-9ce3b33fc838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4dd2a01-cc1a-42cf-8840-83c10e81b6b9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a1bdc8-f311-420e-aa7e-8594d53ae13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a92a785d-c626-4d2f-a9c2-d772cf379b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f6164e-7d83-4963-b493-0538d33da0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "edd57811-2ef2-497f-a345-37eda3661643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d4de92-28ae-4048-8a29-03400b286ef0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fc289e-2d3e-412a-b093-33a5c1922a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48e9b220-da91-4106-8d0e-2db7cffb4163"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bec89c6-9707-4d4f-bcc0-15804c01cae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2ceb6eda-f682-4d68-bc0a-bc718afd69ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7be196-3369-4402-8660-ec1e95e76b01",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6792bbd-7942-4ab9-a948-fe588720c4fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce96a294-d6f0-40fd-a7d3-2a87daa076bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3643f896-cfd3-40fe-8dbd-d979b1f9da90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ac56e12-cb1f-47be-96f1-ed1e4f3bad94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2bbe961-5458-4e5d-a5be-aab25328964e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1bf516-ae36-4b91-9172-2827693a3576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cdf2602-cd1b-4753-85fd-21a6afd402e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ea0980-a975-4103-8491-23cf1cc1c8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d99aabb2-e44a-48cd-9b47-a8c7123f9e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11db610d-7cf4-4b14-abf9-f4077195ca2a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17fc341-865d-46b6-ab54-b8386a130d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf9f3a2-93ae-4bde-a3ac-44f20a3dbc54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52317280-9832-4044-a939-3cf19521824e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f2f67d-51a8-4f86-98a4-9e9ed545bb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca356c19-cec4-4b24-aff2-46eb02fb5e07",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5498f2fa-e38b-4945-9c03-e20329fb4aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c2b0a2-16c1-4d8b-b52b-a4d874c89926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e938ae25-fbd8-432d-a311-c3974a47a918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a534ab1-e35f-4614-8026-5fc4819f9e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7816054a-1d9a-46d0-b789-c52e7a91514c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b1f85e-5428-44b9-8399-743021f233a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b14d9e7-0b7e-4900-84aa-78077d2907f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c9dfa4-956d-4c0b-9950-e9a7aeb961be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d678e346-9731-459e-baf1-d572c8eef3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b0ffa28-b3ef-4ac4-b205-acfae3b9f10a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c16153-9f90-48ab-a4c9-cb468f432102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2db1751-c1d7-407f-86b5-a80173c756ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5434f231-983e-4dbd-86f9-e7af64a33e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c186bcb6-05dc-4fef-9623-121044c34204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9c28e4-7086-4ee5-9b2b-84612de11efb",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "247ce6c4-6d93-4b15-8654-766849c7a072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db7ce98f-be75-458d-a700-199e63e39df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6844b5-c1b4-401f-9510-c97c0af64ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2d6a2db-c748-430e-8836-05cb811f1d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9bda8c-d238-4523-bc35-5ab6ad0399a2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f918ae-fe1c-4a0b-9ffc-f5ceb2448adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd12e432-a637-4009-a3b5-979aa84b9e44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd367b6a-04ca-4211-9f40-ff656ce6755c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b991aa93-a286-4ed1-91c7-1a4e2f7a9740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987268d9-d529-4baa-8e68-5783ef491d67",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0fc64d3-79f1-4e41-a74f-40469474d5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e1d5b12-0064-4daa-b7bc-f6d7a9410d3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f742d2-59ef-426f-a15a-443b203d3ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bebd593-e2f4-474e-850a-d4b875038975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5531c776-1fb6-4279-b4a0-7d16d56680dd",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e355a5-624c-4220-8201-9bfd9eb84a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e18ca832-d4e5-496d-a908-2c575f80f395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34135469-e1b4-4d82-a1e1-29667a71afb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "81b8a21c-e334-4647-bca2-16ab80d0cf9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2026ffbb-a0b7-4124-825f-8f6e3677ca3e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74e542a-04f9-4256-9a06-d80ddb9a25a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485ed42a-a83e-4192-9e7b-6d0cc6638adb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999b3a6c-cb6d-4197-82e0-94140e807184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b99bd53-0bf2-437b-872f-03ca36d9d192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d8bd1c-b7e1-4650-9798-61f2f81f0324",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb63840f-5c2b-42b4-861a-331218e1a36f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "737913de-c305-429c-822a-b0d38ee4084e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2dbc966-11b5-4d21-a0a9-c5244e5237d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3443934d-7d4f-4730-a870-2394946666c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436421a9-6b9f-4556-a65f-5d9bef255d26",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9495960e-a87f-4fa5-be3f-6554af707e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b966a83-4fe2-4628-9e1c-3660f70ac721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2696c21f-490c-412d-ba13-7baffcbcc706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b31cab6-c2f4-481d-adc5-845a94d9f132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e399509d-e4ce-433d-9a10-7a32f49252d2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c2fb0c-9b9c-472e-ae5d-92f00acf4107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "919988cf-cd50-4128-b544-7a12fe7e6b9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c746ed55-006b-4352-9f71-c5518e9fcff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "07efc060-df0f-4206-b409-197d2600e829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44848872-1119-4401-980e-096bdf4b72d6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa61085-508c-400f-b78a-54446c6d9efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd8656b8-e3b5-416c-b989-d3bf8f92a755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8918d792-123f-4703-98f8-b7709f278b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "84b82321-1a6d-49f8-832e-a00cf738993f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3e6bba-d218-4625-bd71-87c2d58d3c3b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68b36492-f53e-4fe5-934e-2b604a48a52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "786f894b-e04e-434c-b834-aebb9b561416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c1fa53-2045-4d40-b546-72605719d47e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "14137e31-eea6-47b3-a930-0c3980b11599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837a8cde-0612-44d2-bfed-5a0f0d3f880f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d871365-eca1-449d-9078-f83a10efc74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6c8b480-9d7d-4c0b-914f-26b165ffbe73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3ebf88-de97-4ceb-bc5c-1bafc02b65d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f0c52f6-5de5-490b-87a4-37b5570130a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2ce04d-a53a-4f30-a18f-b70f9ea03c46",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f510e58-6571-44ca-9689-0013ef2a74c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e1dd002-2f61-4c39-9c01-d53d5bc564c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986af288-736f-4016-95e2-41acd4113dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ed4a50b-38de-4ea7-95ec-b183703883c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a160940c-88c2-494e-850a-216329f1a43c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b43e24b-f6ca-4e9b-a3ad-8aef5219a58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "363fd3e1-8934-43bc-89c8-8ea3519de4c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615fd346-3a5b-4f38-a30f-1c1113ba1cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4710833a-8423-4f07-a416-9f7009ffd830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5642c7f-10c0-4079-b231-3a716b58dc94",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "962739dd-0693-4fa0-97f1-be290dfe5c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96196be0-5686-4845-a432-e37aac884344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c41d3d-4cdb-46b5-9ac1-7655a03b26d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "17216f4d-6cc7-4239-9a17-f18fad578789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66fe9c4b-15d7-4513-a12f-fbdb8876460b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4afc5f43-d88e-4b18-a47b-656ce4983831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a69c5417-c36d-449c-a318-f2094c4200d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4acd969a-5190-44a7-b609-56644ceb0707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "207a00f3-044f-4822-955f-e26a332a0e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09867456-d14d-4b71-a5d1-70a5fee2a9fb",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72173925-b408-4ffe-910e-4549d9aaa915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f99d6cd-d4d5-4e20-8618-76ae89871a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f9c290-f8d1-4d28-b8ee-94726120a2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5055726-ee0d-418a-84ec-3af44b988399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40c374d-dd64-4796-89dd-ceaf859471e7",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26450ab0-7b4c-4a0d-85d1-af250adcb683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f57485a-5572-4efd-a2d5-13a34eac822c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09cca84b-b120-4904-b514-e4536d68c823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4788392-507d-4866-aedf-504fcf327e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6b27aa-5bb4-491c-bd7d-69ebe91380ca",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3477a4f5-fab6-4de3-a4de-ea9609e3042c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57c4e10-55b0-46f3-b302-774ab481934d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e95ac4f2-5bfa-4310-97bf-5805e6df3b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be802266-2903-4dd3-aa26-b323be06db6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b79807-7fa8-43f2-a2d2-6031b789855d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f460cf-36d2-4bdd-8892-4ca55bef8963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fee5d8b-c53f-4889-b87f-b8908efe61d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c05807-eb81-4110-ba02-14fc7976eb77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4464969d-af41-4d52-81aa-7c1c0327e08d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4429d3c1-ac4a-4e78-8b7a-96be0d8aaeac",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d18c8e-5790-4b01-8c2b-372d006c1711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f273fe8-1c8a-4957-ba5e-31ccc74ceb6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80172467-5306-46fd-9a2f-eaf0ebb5fe44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2882ef50-bf5b-4cbe-98dd-926df483f4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a864296-df35-4465-9854-acfc3f3a5473",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea5022b-a39e-44df-b7da-8b05da88438b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e2d0ce3-a486-4f33-a6b0-ed9df4bedcf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe289f6d-13b2-4a3d-bee2-2b05796505ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfaa718e-3f71-471a-bf3f-38468ed7da97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2368db-a08c-4d77-bfaf-a40f4864684f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df7198f-e9e7-4c17-9920-d891c21dd31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eba56f9-79b9-420a-ad7a-1269c8f6588a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97db0ee0-3c07-4128-8c6c-863511d417c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a0a911e-1a74-459e-b50a-e6d5498a239f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74beb26c-a9d6-40ac-927f-bef03f9a6048",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8385c93-72fc-4f8b-98b0-fe4bc063c2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d75f6f-101f-445f-9941-4eeac113425b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f403c5d-8900-4f87-80ed-933c5516a1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "35b393be-e2a5-4c6b-a659-6db0edc22de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b8aa13-b970-46dd-8c3d-1daa7e36eeff",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71996d10-0032-4844-88e9-3de3cb7bd8a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dac41cc-2b8d-418e-9cb8-7e3890cc70b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14506bd2-ddb7-4402-bd31-2961349b6185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bad11f0-a900-4bd8-9418-568b04b9e9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b764a7-ac9b-43fc-a7c7-9f8c48b1c39b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9054d5b-15a6-44e7-ad33-ea0912ea922c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ff3652-0585-464c-ab16-c77231955603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6166155-059e-468d-a3b7-86aa947f1b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "28a30a8d-c682-46de-beac-2e128f44da02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045d8c50-5423-4537-9604-f8f7dc0f8cac",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bdf2bd2-9ac5-41da-9183-086b49377c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8265022b-0030-4771-a3a7-361aab70f301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d09ad27-bdf0-43d1-b66d-6fd7f04d31c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6bdbc26d-e4c7-4261-b1a2-39bdc8c8b361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "682cfa6a-5b76-47f0-8381-61264c618db3",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "853b355b-35ab-4ebe-a9e5-683a2c0a5370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a74f959-05fb-4823-94e5-816b7f1e2cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2b8b38-d128-429c-b7e4-b49e6348f512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e029ff84-2e47-4425-bb3a-60e361c35a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e40f03c7-2877-4ef7-a13f-0ceb4f913bfe",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed62c54f-a47b-428b-87e6-2bd68e118631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca10b401-edfe-45d3-bfb5-59211a9bed1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb42b72-013f-4847-ae9d-a7266214c511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2547b1d1-b719-47c2-ac8e-c401ac9daebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a0563a-35b5-4008-8503-196282994bf3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f97189-973e-4cd4-9f4f-97f8b03a720e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b696fed1-72c4-4f42-a42b-a15f390f5037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f668b78-edd8-4f0c-a943-59ea64d5ba48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "affbbf99-6314-42b2-a764-0ab6dd43b4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd44f616-27b1-419d-8bfc-2cfec4a8dbc0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bebd901d-b310-400e-935a-fe07d8cfcae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c7b0259-4dbf-41a2-9698-f46df4fc373f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f78f2d-92cf-4668-b007-ec30a9b4379d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fad1f59-3f48-4216-a3a7-8f384417cab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c337fe9-c427-4b47-9451-a1e77082edba",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c296f455-c74a-476d-a357-31cf61ef6f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2850306c-a66c-4ea2-96ff-19d29d110d34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b1a62c8-c1aa-4028-bbaa-2dcb5f0b7819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ff6edc9-a6d5-4fa7-b3e4-2a41e11a7cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b582cd14-f814-42c0-b7ff-b81a877d2f62",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b6b8ef-4778-41e0-bb1d-ebc4ca8df7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ad39657-57da-4e24-9686-c34f44f4f6ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0c0214-19b0-4444-b9b9-8b0308f312e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f631389b-b5e2-4169-a0db-8310ddd3019f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "280682af-6fe9-48e6-8aa1-2e051760c10e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a13ecf-ea57-452b-b547-518597af944d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a32578ec-fb46-4231-bd58-11e50e941154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50204f12-757d-4570-ac7b-781e55aee066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "71e5f1af-c33a-44fc-9cdd-c7ee0fd5900e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d2927e-275b-4f21-8751-1ce182546946",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9381078-bfe1-49ed-9834-d9531fb63ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0faf841e-ff81-454b-a1f1-3b417e67ecc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944305ea-a37a-495c-80e3-481dc8d45137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6182b49-a577-49d2-9d15-ea48645ad077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9071b8-9c5b-41fa-9694-7c38454f48ab",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "005370b6-3ec9-4bfe-a725-61a6e5f6b72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "118af16e-ae92-482f-bdb2-c0c0f8bbfbd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f1d38d-e740-4c60-9ac8-0b56e759460d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b817db-0083-4bad-bbf4-aadf6f09b17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e9e965-3ec6-4d4d-9fcf-10076517976a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4e6e4f-aeb1-4852-bcca-722be0b3204c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "474dc282-e106-48df-a3d7-1b319d7af16e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6fc93a-235f-419b-a625-94c5c3049ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c39e73b5-6eac-4733-879b-3fa12516dbbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f82724-4f67-4b8e-ba86-89d8d1352a36",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ae4d94-4064-4d96-8a46-d360b1ab3187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a7ac93-c1fe-4c58-892b-3fb2010ca91a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c0fff3-6662-418d-a1b0-c87c9390ea2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "723cfa34-0e0d-4bb7-96bf-6c2d0d6aee1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415210f8-a15d-48b1-b53d-5843041a7de5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7168c239-d612-42e7-b6b9-3da8a08e7ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "880c6816-72ed-400d-bc46-c59aa1d2535b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668e8104-7aa6-4128-b91a-dc17a50c8e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d26a35ba-2ddf-433b-a365-4d3a9364ed73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7250c5-0fd9-4654-84e9-efed2574a7c5",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e2b251-d92c-4843-8043-39d375bd8885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3941788a-249f-4ffe-bd0f-686e3e1b79b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab2a1f7-eb10-48bd-9c4f-69c7b9710042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5398acab-f316-4b65-9211-d436ced279ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2f94f3-b31b-4dca-997f-fbd40e278057",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beffb6b4-e2a7-45f0-b526-b32876e33dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96336d2e-efe5-4df4-88f3-d995288f5b1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb3ef25-44ce-41bc-b4d0-574b8f757e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "af3fd5cf-abf0-4507-adef-d5c6dedb0004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf1aded-9f0e-4788-9b0c-68f3cf25f264",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89834234-29cf-487f-acbc-7b7016f7b733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e80391a9-5d55-4a1b-a4e6-b388e80fd94b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12cdcdd7-7b97-44ac-8246-207272c7e880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f018a704-8409-4823-b5e9-de758c86cc82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf052dd-4ccc-4635-a281-cef79d7fcc8d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c19290-1ac0-4119-8e59-0f014b7f5153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bf900de-c96d-4401-83f9-c1452a70f9c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43fee669-ffc2-4357-a030-a1976a13aa9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b64daf59-50ba-43a6-aa55-3a8de37210af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4114c343-4ca2-4b87-9f50-57faaf098ae3",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b530b463-7397-45a5-b5b7-88842215d208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2848aa8-ce0a-49a3-aaaa-7319d121b1ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7964255a-42b5-4ac6-ad09-78cc4d900c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e3b4c50-2311-47ee-8469-5c38c2b1fece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8996609d-ba39-4482-b6eb-7c27d069579d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca98c02-ac17-4dd9-82ef-42da5b7a29b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f6d71972-ec5d-4c6a-9a67-461f1b7b1761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f0a54a-7be8-4bff-bf7b-eccf2457115a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf96ca0-e8f0-4ce4-8622-7ae35120861d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9ae12833-fc4c-4679-ab53-5fd9d000f0d3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d6a3c40c-e80b-4135-aff4-3d3eabf0c82b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ee6173-ee36-42ae-9a6e-4ab0a328e451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e55ff43-24a6-4cb5-be55-d38fe3347bbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a901f2-00f4-4e35-a783-9972d368142c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d6c0255-5773-4d33-adb4-4a39a8839b15"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8dc47b0c-6d9d-417e-af97-5f17705fc8e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35cc15b7-ce57-48da-b31f-21c4926e2410"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "00578514-a9a4-44c6-aef3-fcb9bf74dbec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d8f6fdc-2d00-46a9-82fa-6a6af114abfa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d52744ea-9c0b-4484-a091-a9f1b06292a0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e7b89555-c586-40bf-8f2c-3d401a89f71e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "16448bf4-ddde-40ac-b893-df20618aeb00",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "55ecb2cb-bd4c-4067-b4c8-c707cbc958ca"
                }
              }
            ]
          },
          {
            "id": "2519ec17-4f3b-40cb-81bf-9e61cbd3a751",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bd592f5f-8750-4eac-88b7-79e8100dd262",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "81a53e8d-f9f1-42cb-9995-ff449e36261c",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6ff101-d48f-4935-83a1-738e8f6dfdf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "11452653-fcb6-41e2-a6a8-b199ddc45e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7db7ad-8c58-4c48-a882-87ee587b5b65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bccc088-3a87-4195-b330-cb88e61e7d70"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b0271672-8b7b-42ac-80fc-c63a67c3e65b",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e48bd386-d410-4bcc-a333-385637165788",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b22b2e83-2022-4ab7-a5ef-8fe78f100afe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34194652-5c3f-4446-8f5c-885e59130ef8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7307d147-b9b4-4202-8dcc-1e6626eca929"
                    }
                  }
                ]
              },
              {
                "id": "2935c4d5-b04f-421b-9347-8aa9a6e9d21c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ef7851b-b90a-4559-beaf-ed9454d3b9c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8a5c3855-0019-4a96-a2f3-7535cd257edc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b2b1edb-fad3-44da-894f-65106340f289",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b11c95bf-0e45-4b57-ade4-5eb9aa05329a"
                    }
                  }
                ]
              },
              {
                "id": "535ae43d-6beb-43b2-899e-9e95e03039f9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8536e7a-2b16-433b-ab33-1ce364fc34f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5bc1f3b-0038-4bd7-8881-65b4649311d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5d80d4f-6dfd-4a1d-be5f-a0958d6ae503",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7cea214d-6cf7-47b2-a6f1-7fc27f49f1c7"
                    }
                  }
                ]
              },
              {
                "id": "e77a2160-d8dd-437f-9b54-66b5688b1e8c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ad24c54-06e2-42e4-874a-1130fdf68df2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c37d829d-01e1-4aab-ba16-de605786138a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0673a4e0-8072-4960-a576-625215b09b9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7cd00191-a1fc-4cab-83f1-9e0e2384632a"
                    }
                  }
                ]
              },
              {
                "id": "b6890b99-f0ae-497d-9351-5433a9fe5bd8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca11d315-fb8f-48df-a15e-b3a83f15acdb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a0d547df-f64a-4d60-b8aa-798b3fc6ba06"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8a2d573-faf0-4404-83c6-4d06c1b36619",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c2ee4113-b49a-43a1-a8c6-2385883081fc"
                    }
                  }
                ]
              },
              {
                "id": "0704b099-bbdb-4396-b147-e4103b9c667e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19813aba-7622-43f6-8e18-7b857fca6087",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8c78c699-8d74-4c43-b015-80d6ed769c30"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d578343f-0b49-4db2-83d0-824031149209",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "30ebbd14-fac7-44e1-8dd7-7c96578f0aa5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "71bb1ffc-7d5e-454e-ab98-3df5665c8390",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c74d02c-de59-4ded-87df-d47fbac67d04"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f24353c7-b633-46f3-b39d-b1a107d50642",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "983cc952-a6da-4ecd-b9b6-0cd4ce7570ed"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a592ed65-738e-4298-8f50-3ad41fb981b6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "beaef09c-ea3e-45fa-9b75-9f0b637150c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "504c0dd1-b613-411d-b4bf-17db2f873909",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ead0d10-1e2e-4a1f-983f-88d08f1bbd1a"
            }
          }
        ]
      },
      {
        "id": "14c9a3c2-b5ab-41d3-a6b5-4027279b3c2c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a7b98330-1162-4260-a99b-34d5015eac0e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "72ef5b5f-2d86-4c6d-8e8c-49b13822829d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "de44eaaf-ac6a-4e8f-ae1a-d5610fcb42ac",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90065c9c-518c-4aa3-9575-56bd2e85fdae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab465166-a420-4869-89c2-27414e4e7a57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2579351-2676-4334-8153-efe6d5af5ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f97cca44-c858-4156-9ee4-f83017beb49f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f84e704-c923-4ea9-8ada-e91e085f0a0d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "920fa969-8487-4403-903e-ee3abb50e51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "337babfb-1bf5-49bf-b87f-5955fa725c4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7f7ec4-280d-4273-9928-bab56f73715d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3de6b48-a4f1-4315-b8b2-66ea9b4c7d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1dac3b-9c98-4c17-8f96-567dcadd9310",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2472a911-4856-4ffc-8adf-67d8f07228e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9820c25-07f6-4e05-a43e-645460ae669c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de77c782-82b9-4133-bd57-521fb7e8f854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9f9749d-1887-4635-a72b-582b5f7de05f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64fd8576-cfb2-4e7a-bb02-b2e7df4e59a2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4603afb6-2cce-4103-931b-f61481271447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1cd2001-987d-4c1c-bb89-c9009d314ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ead0519-26bb-4a5e-8fdb-7e0e617b2049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "869ff435-b2d2-4666-b773-9385a2b59a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809bb7c2-8e81-49ba-ac3f-5138e5f8846f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0883db8d-e816-494d-9b77-201b76f4fb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91c41a91-1c36-4bf3-a90c-bb0ee85cac40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f968b4fe-6370-4d4a-9482-642839686d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aeb9e8c5-fdb4-46c8-b8a0-3e28099ba879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71dc3e94-408c-403a-95c8-a42a551ea64e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cfe1c3-4bac-408b-aa8c-c014221241dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f02863be-51a0-4e85-b301-175e856ba2f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e53f6f7-5aa4-4f42-87f2-d8d0f2f8ffab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "57697bf3-82ea-46f6-8c0e-c0b7a9854ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5355b64e-786b-43ad-94e4-bd1f40f22986",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad87c1e-553b-4a8f-ab31-7b6d83d858ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a5de68-156e-4e25-be38-b3e840286ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c6c476-6630-4e99-ae0d-28807f5710a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ad903b1-a3b4-4fa8-b9c8-d7028d4131b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b80b2f-dd2c-4a78-9454-1c768e01902b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b620237a-2df5-4aa9-8390-2e0b2b8abe07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d24688fa-8443-483c-aa33-453eb67c7959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1878c6-c2f3-4946-b7a0-9e9affeed40f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e005cb0-73b9-4bf3-88b6-91921b2bb7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a27b566-6feb-4ad8-b7ae-4487a9e1d734",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "029c66fb-a0b5-413f-9220-23157f9f9475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef4eef4-0512-4682-bab0-b09d2a93d2e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451f814e-4ab5-423b-9765-8f9f2a65ceeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "77f4960a-e529-4ffc-99b7-15e3b19df43c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08b9422-65aa-43d3-9740-deea026a6caf",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c6739d-7c94-4edb-9fdf-56abef9c4acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c042ee9-b474-4ef9-b120-316c5a96ae8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff30587-434a-4994-bee3-5017e052ef78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa8fd87b-2961-4bff-9033-a4a31c6a2547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ec3b87-b5ed-41f8-83c1-b40681e91265",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e91739-b004-4bf4-8ca0-48256f706e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a9219c-35e8-424e-ba6a-4cfd05ddfcb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c460ecf-9302-4582-8c2f-2728f33944bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "54d5dc85-1afa-4753-b8c8-9323c911de44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ed15ad-50ee-4680-b442-22a052d88353",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d67fc18-d751-4b87-b6c5-1a75f79deab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f34dba69-87cb-4679-85e1-9a407dd2e31b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8212f8d5-c784-4614-a0db-ec2a1a2c052b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7c5893ab-9e26-42c2-ac6a-fe87f5e8b3e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4451d7bf-4991-4bea-882f-a41c9e8e9331",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc19f57-a632-470f-91eb-e90e9cd14304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b0eb8c4-1c18-4d3b-b44d-ffd977d5bcc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e2ffb7-0f86-41fd-82fe-3cb116414a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04eefd08-27c4-47fc-bfa6-22508c93aef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15a7e341-e77f-421f-b8c7-5b1618aff032",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8312c7-0df8-4ced-aee7-591a2244563f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "481584b5-9757-435f-8e6d-be8500025427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ccf2d8-e99d-43e5-ae41-1297814e7aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d51fb1-cf3b-484c-bdb5-aba745297ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05a6830-f349-413e-88d4-a65a98e1afc9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "559d2b56-be3a-430d-8576-932a83e8201b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "512611e6-8db8-4d92-94c3-dfaeb7bd3cc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a745f66-bc21-4e67-a152-80d1c894787f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "768435e0-e23a-45ef-a36b-e59a3cc4345f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e9e9cc3-a0d6-44da-876c-b0c533152436",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c954d8-b653-42e8-81e2-ecd29286981f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2539c9c1-ddc7-4d67-8afc-62361c7ed52b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735d97bd-35f3-4637-8a8c-2b8c371aa419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "679c9bea-08ff-441e-b603-e3d6b14fb474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7fee3b1-c2a7-4b6f-bfc1-8dbbe1676094",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1750b4ee-63de-4375-a95c-332b5c4a39c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0252caf2-8011-48cd-a848-9e56fb4f6b40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f9e2c3-6382-47e6-8bbb-67240d0b09b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a7d7f5d-6ce3-401d-a5d0-1e71874e597e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4793ab86-a023-4821-9ffe-eb0b946023ad",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd2bc00-3221-4b08-8282-8620f8dd16a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1e4b271-8c4c-4a8c-a663-791f3f30a713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc12149-e0b6-4f85-8ef0-59f0302737f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f576aca6-b82f-499e-b936-c6cde737fae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee4f937-9baa-445c-a2ac-189e2e15632c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf4c06f-03fa-4f7a-8bd0-a5bfefd3c4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b175afb-0ed1-41a2-ac62-7915ba4b2835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7fa4a56-8645-4365-a1b6-7620a8e8edd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4bf44d6-8589-4b31-b733-2610fe28bda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb3d64f-1c60-4566-9c89-42a8d19caf94",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9b2f6c-c5ba-47e9-a3e0-5b6d737fba59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c33cde36-91db-4062-a36d-a6a265b8bc43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8870fee1-96aa-4ef2-9b31-e47f8316fb18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36df7296-5152-4200-8d69-318f139c7230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1aefa5-ed42-4433-91db-2dec5c8d8221",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17915e01-35d6-44c1-bbe0-8a784dbb6b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c1d5ed-e8f5-4b98-9978-ea8099922fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c04422-cfa4-4040-8f8a-7bed2722d4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9de4d6c7-4ddf-480e-b1db-4a39e92960f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4989120-c592-4827-bd33-32badd63ce68",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d38303b-ae5c-42f2-8134-fa11814d948a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "334d3e04-c151-4f0c-9ef0-135f45ca6b03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6035c9d-ffe4-4934-91ac-3e49649a4603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4b517cc-4ad8-427f-a814-996ff5335f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54dc0153-1929-4558-a78d-902c7572008b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6556a5c-7fe8-44da-9141-3b6e2060f078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bedeb37-eb09-4d2c-a6cc-7b81fee0b249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c521696d-4c35-461b-9c95-2be51a38c447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa40b11a-553d-4491-aec6-b34279cd5b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba32d2a6-e52e-4bc5-b708-537ab0acf72a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7bfa3c-952b-44a1-833e-e821b4dfd8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73153094-d93a-444c-907a-cb29ed57898f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769810e5-4fe2-4e88-89ef-1075c7c70159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf50cc9-4af7-4dd9-b8df-c4414eb95b9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d16d48-3620-4433-8549-33e39945d418",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3349c4-37da-4a6c-82fc-60ac37130cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b53ae2-7f18-4ac6-bddb-222a388f6b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f154063e-9786-45c2-bb33-9f4253521c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a539b8c-f8db-444c-bba5-d7241e4898e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84bbdbe6-bf05-4610-9e7c-550b60c55476",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b535a373-dcf4-4060-ad2a-a08dd271659f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1d1d1c4-7aa7-4429-86d9-167559af79b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3296b06-85e5-4492-ab4b-8a2f30372261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4223baef-c4ff-4777-88e8-a2f7fafa8659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e2b5a1-40cd-4912-8920-7314dbd0af05",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59de1ab-2e21-4031-9f20-7e731e35e00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f7108e6-0837-4d77-8f90-4874f21ad4c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a100eee6-5dfa-4481-899a-cfb4e9c99d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d54a4cf1-9920-4a84-89e7-d91c219805ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754f660e-d199-4881-9d2c-e2043162ed8b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6b2249-8262-49b4-a029-3ee9ba9b870d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "151dbf74-6151-42f5-9688-0927a1f39bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5224edfe-59c3-4b73-90b9-54639b45ad37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fba01504-6282-4bd2-9527-d3d2552cccae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1429ea2-1965-4872-92d7-fb33d59ca68e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ca0f86-84e0-4e5b-bc76-97df702b49db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "353a53c8-b400-4c50-afd9-3be30be7cc48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb1ad077-0f8d-4de1-9a05-2d738a4f02bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "151dbf0c-fe36-4dd8-beb3-5999c2fec6ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d4dada-e41c-456f-a7bb-efa75fd22ef8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612311af-ce7f-422c-8e59-d95a52681816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6daa20c3-f03f-43c0-91d5-4a51fab74e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c210f87e-a093-42fa-8b4a-e00f52cf146b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbbc9422-a3aa-4010-8e1a-e2342ce21b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f58b573d-c0f8-4213-b219-19314a36c1cf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4240df4-dc08-4e5e-8c8c-75995e990eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c31f080-3a69-457a-8762-548c33cb1109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85be6b18-c0ab-42d9-b2bf-7b3d94af49b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4e4a5d7-723d-49f9-a41a-a0d46737ed78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aba043e-3154-45fc-9e00-2e5dfca30480",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a24478a-bae4-49c0-9755-884ce43b3cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e277fd2-9c4c-4ed1-a6af-6418d0b1a9e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca7682a-399e-4617-8e38-b089a30c269d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b63a47f-117c-47bd-97d8-8dc26300e17d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cd337e9b-76eb-4737-90ac-1b0e4bc9abfa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4d28c3b1-39a8-4c9f-a211-5fa41e2d8b2f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff8ab798-a816-495e-9378-4d5a594e97d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8c36450e-ae68-49db-aecb-6d5078452acc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40f6ff9-6835-4af2-8806-5a7deb03eb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dfbd199e-15d7-4eaf-a48d-a920b94839ee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de2bba64-b623-42f8-9384-f2dbee90c987",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d4857b4-c41e-42fd-8556-5e9d0e28a891"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2661532e-3b61-4957-b91d-14d2853d67c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7d134ef-d328-49a9-8dca-c6efaf6c4ffa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b5b69a6-6b39-465f-b653-b3ace2a965db",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "60c26083-1997-4bcc-bcbd-ba08745a325e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "17f4ed51-637e-4b42-886a-2bfe43f794d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "56ece29c-2146-4975-9fb5-033b2b48a191"
            }
          }
        ]
      },
      {
        "id": "5662d58e-42c8-4fa8-b19c-135601365c60",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "ba111bc8-5aba-4b62-9424-7d87b3cf7858",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e3701326-a5d6-4d04-9cc0-ed44757f199f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4e5ab9a6-b32f-4691-8004-c7924b6d45d2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53ab681-241a-485e-92e9-134ef128fd6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c52bfe77-0c30-4f06-b6a8-2bcb55791878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56f145d-e4c0-4f4e-b051-0677ab164c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc225ba-61bb-40a3-a818-d564383eee12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e135b7-9369-4fd7-897b-95f9bac014ab",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29f9e4a-eb48-40fc-b1ee-68f0341c823e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b09c19a7-2cf7-4324-93b3-fa12d81cd1e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5e46c5-95c0-4507-8096-922386c633d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb6a3f81-715c-4d3d-9ee2-d69880fcf671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d58f3e4-53b0-44df-a232-d3ad9fb029fe",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b1c5eb-cf38-4bcc-a1a6-1c9845a474c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289eb464-6e64-4bb2-8da9-bd86af8df9d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6f0a2a-38d0-4164-9b88-9fdb7469e798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f802a967-990d-4904-aab4-5682cd2a1b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd1f60b-5af6-46ae-9f48-8d54ff56591b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ce1a60-bdc9-40f5-9a65-30f5fa3d3af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be7e6f97-0323-41ca-989e-bb66ab88056e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ecf715-2d35-466c-bab6-a7497cd1479c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f8e0e4e-e896-4263-83fe-df417a05169c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56894c03-a338-49ce-ac87-3fb4b7d73e92",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e406240-605e-4e3d-9e80-e4ad4c38ab90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f55d8e0-d962-430f-922d-319d4a4c73f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a67e7b-fdd0-45fa-8d6b-08e2f6664968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aed8e27f-dc58-4299-9e33-8ca5f5e201f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20927f00-dd69-4735-b0c4-aa3c6085cbc2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "905148ea-463f-4bba-bf91-80faaa52a235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76dca060-fd9b-4583-98f6-13ea7831cee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b972225c-3977-4e5f-9e33-dbcb5c793448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7072819-b8b7-4fdc-a9f1-9c2ada8e7de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d3b6e3-659b-4eec-9c88-b3a25877d4c9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9320927c-a2ac-4bea-b4e3-c09ba6dea2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b28e9418-c3dd-4c2a-bda3-75fd146e08ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b2d67e-2134-4d50-ad58-e3902e355839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "db567e59-8e0c-41c4-a8d4-db69fd2f91a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703a4d04-8e4c-45d7-a390-0c226ef05598",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7627ad6b-cb42-4c6c-a862-cbf0113adf03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8bedd1d-1663-4b65-9c42-126302df17ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b526f7c8-e7f9-4b40-b373-f7bb6cb5b72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "13339e9d-312c-4eeb-8682-2c65d4738520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409278a8-547f-4ccf-a8f5-ef9c8247d2f5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4c0736-c2ce-4cb5-8104-11e8f0e608bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "769704fc-dd4f-4af0-887a-73b331de59bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa50cdb-6389-4957-b93c-cc746a2df1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee656b4-3966-4041-a177-b1eb6b320866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b0bb5db-9292-46e8-a3f5-a3c640f9f8ec",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68b9c08c-6894-4d12-823c-c78ae58d1066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f99bc196-8577-4142-ad30-be38f70c6300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b6d3bd-aec3-48cb-8e36-73d36056a0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd391156-6fda-4c15-885d-2bc71d1d990f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb26af9e-e103-4af0-b515-e0bc89b48f25",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "318dba82-306c-4fd7-8c72-d7d2493665b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8103853-2d56-45ff-aae8-bac3610a6542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b25d30-6597-4511-87cb-8c0ba51757d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1f882e4b-0303-4fa6-bfa5-35f3bdbeb6d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a2d0b8-3a7d-4a59-99ee-f9c5f79e0185",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c39f19-02ef-4405-bc3c-6afe52137bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "815ebeb7-5e47-478f-93bc-39343bfd1f79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a30f6f-660c-49ef-b4d2-67218ff482ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "44609379-1c80-4cb0-9592-5a8ad8e8a1b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad912984-3f41-4b79-849f-73245b5eb654",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c1b69a-8976-4130-9885-f54dc1f93869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f03bb67-5026-409a-b421-bdb09cea5054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99931234-732e-42ab-8bcb-df33c49c1393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b54c9a98-ec98-4a88-9238-6eee7ead04d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f009fe37-8e4e-4dbb-825d-4cb689dd490b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ee858b-b225-4142-a33f-0e1dcf0a1d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adb7c728-151c-4ad5-930d-1ed96a9df60d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c1b659-3d8c-4814-aad5-f6940c8739d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "08ff2bd8-7777-4c16-ae90-1919f50bdf7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698ebfd7-6e1c-4736-bf96-54d16a40eabd",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "740052ee-c05e-4305-9643-8094e7d0d9fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae1fc22-9352-4afa-9ca7-7fc49560293f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216141ea-974f-411c-a1fb-5fa37ed4964d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "12a5ca54-56bf-471c-bc23-de2259364247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddda3148-3718-4a38-bfc5-3b8270c4900e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2ab36d-5dcf-4622-9a67-8387ba6e6331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b218fd0e-138d-44d7-ae82-d70f5937ec1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb422c5-711d-4d43-b87a-b79ea8273478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf2f9248-e656-4a39-a77a-5b7a7f47e543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b0ad73-1d45-470a-b419-2ff25f0c5ca8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a74b8d8-3412-4bf0-aa63-a9b08a099fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b367a47a-f465-4df9-81c2-addf7428329d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e58c0e1-c9ba-48c0-9d95-55e86e0c52d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "96f62c79-68c7-43be-8256-663ec7359fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595a1592-0de6-4093-9eca-2ba8bc49c14c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87134fdd-67bd-4fb2-a741-6aaca6fe579c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db9e6b8-9b10-46d0-891b-1e281f1efc21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452d8e19-81bb-49c4-b1a0-976b2872d3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9aa7846-f761-4639-b26c-348b404d348d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14359824-8b4a-402b-823c-ae9b2ea43c9e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb69aa7-c09c-44c5-bfa7-15fb8ac5e971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff861a6-4b2b-4bd4-8995-4c2c531ef162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d20a8c-5d47-49ce-af68-9aea3509764a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78e91f18-a763-4ff1-9c80-0446bd9d68fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab78fdf2-d451-4d06-802d-e28f39fe51cc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf27aeb-4f13-400a-b395-e1b7a6ccd837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e407b9be-1934-41f0-bba9-f81a2f0cb225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308d2d36-8e0e-447a-96bf-258c03a74572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b27d322-5de7-4c16-a751-08e2d3455f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6bf4d5-a248-4992-a7a9-cf170f93a9c3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af9ca06-4528-4525-a794-5c9e0dc6a327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bdce34f-8b58-44a0-866b-4ca3a16db3a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bebb230-573c-42f7-a6c1-df4aef39938d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d4756dc-d5e8-4375-99ac-29a170742a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a0f791-6363-40e0-9e2d-b392ec7594cd",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44c7b43-3d7f-4d0f-a6e5-9d3b46204082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1169902c-4cd5-4433-9102-0b4dc23b0452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6396db-09cf-465f-9fd5-91bdf2304481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "407ec604-1a9f-4f25-a6d3-728794161f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8490be90-67bb-41f6-a57e-6def443034b1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4816746d-7a2f-43ec-a59b-f470b66948a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19780cfc-c6f9-4012-b165-ff97cce82a61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ddd0bd-a2c9-4ce0-afd9-45a4b7377797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a22349e3-919f-45dc-8eec-e3910b764097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d69ca2-d106-4e09-83ae-13a749ead847",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "121766ed-ec1a-4631-9b8f-9f95525a23e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d035c00b-4542-4fd1-93b6-b5e257424376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1ee51d-f59a-48f0-bc28-bddabb83f726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd58bdd0-3887-4519-9430-4da56b222df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f7199d-b8fd-465b-b210-aad51ed8b558",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb627c51-c4a8-4ef1-9c21-43b26ae1887d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bbf9002-d1e0-4795-8338-5b1248039ba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e2d68b-2e59-4611-8a3c-6c0723ce1c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e1abd5-5f14-4816-8017-0cbbc7b647a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a768b3-2255-4346-8b36-a0d308cbace6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b838c5-89b8-42bb-880b-98ae1d937f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fb75375-a293-4a09-87a6-482b0bdae35d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b8d482-146b-428c-962b-72de44c044e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19cba860-199b-4dba-b807-c074452b15bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a38ad4-bbe2-4643-b1d1-c5c3a08eb0d4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3671316c-4e95-46ba-b0a9-b2ad5e8800a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74f81463-586c-4655-8169-358c9acdb6f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9fb324e-a312-4090-abd4-90d452c2723f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc3c4b50-7f9c-48c1-8931-4fde7c671796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a768b7-ba0d-410d-8e66-f089c6273e16",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6623047-04c1-4d37-8aef-3c7d2c702399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eddd447d-20e1-41e8-84ce-1611fd2fc9f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "090a55aa-73c8-48e5-9061-630d25443565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c89944c8-9460-42eb-a93f-1a116a1bdaa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0751aa28-0e7d-43f1-b73c-2c9a4bdf73d5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b063a8-0cb5-4e75-ab86-6b915f5681be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "630e6b25-c8d4-4de2-849a-80bef2d6916a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d980e023-1e68-4bca-b180-4fc503423bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0290315-f525-463a-987c-72756c890b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1807adea-5421-44a6-ae58-a6eddee225a3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "754457e4-072d-4239-9aad-d22061e32740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080df632-1d70-4b53-8f1b-bbf6a13a2085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69c50894-c962-4333-9b6c-6d60b29d243c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ef42014-3c51-4d1e-8a3a-1a2a662a0975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f432a05-c0cf-486c-b5cd-8b191a8c269a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6043ca14-28d3-4c81-848b-8bb31ae298d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac852d47-dbe6-4022-812f-6344932b72c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e459917-9f52-4be2-878b-2c06d1e5c84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "441c6580-384a-4b18-8a96-0e8b3357231e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f637b5-fe96-402c-a03e-c516b3f437dd",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "457c1971-6a13-4026-9381-4bfc4a733633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db6f34d4-c653-4e3c-9da2-848ad110dbeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a4fd8d-f270-4947-94e0-930067c9d50e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4578efd3-64c4-441e-9c43-19822b99ca55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4863ce-e1a0-416a-bc26-3bbfd1923e64",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "348902b1-ed79-4e28-b46b-eb3f7611d4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3573040b-6f72-47e4-9622-ba9d4e2557cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3c7e11-fe64-42db-961b-d4a6dd80db5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db5a1773-b57a-4b8c-8385-5f4ba50c83ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe75c46-de9e-4ad9-9356-294567a64dc0",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19419a3-8cbf-40e6-881a-224998e46903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a29c16b-fb37-4891-9e14-f207808acce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b7b8d3b-ee5b-4772-84c4-1ac2efe3941c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98c0278b-da71-44fc-8c5c-86380b8db977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43c0781-4eab-4b45-a4c5-72f9b8e74c9f",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a04bb5e-eb09-4d6d-b96a-5ef28744ebe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6725df8-9796-470f-87c4-4417047e9a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63148c0-c07b-4b3d-a578-fcf2a5070fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61056c78-6780-4396-a819-37693d95f118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437fdb03-2af2-4e56-8a2f-7a57c7a08e36",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8cb0f7-67f6-4dd5-a865-f1bb3299f798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17749457-39a3-4d96-af7b-9cf4ba9cc3d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d68dedb-bbbc-41cb-82d4-5ae3a2078223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f10b674f-bd52-4ac9-bb7f-1f2550480716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6480367a-410f-4b3e-a539-70d2b699595a",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "000b3d40-a46d-49f0-a1b5-b8b66df3eb3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "700e2b5a-0d11-4f62-9c66-951484f22d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f002d030-7ce4-4b5e-b459-9e452554450c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa17dd8-75d5-4078-a7e3-a090bcfc5d4b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "59c86044-c22f-4193-b37f-76a892288f2a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "686e58fb-2db0-4e88-aeb2-b82480e0d58f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d785496-4c7c-4fc4-a1df-769f8b1e5e94",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "aa881af9-db88-4e2d-826f-2a0fef00f744"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce727077-1d9d-4026-a5b6-7bbcd5da09f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54a8bcda-c60b-4eb2-9cbc-ec57b607d2a1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6eee5175-86ac-4c86-94cb-57832fb665c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4e5c01c6-0c50-437d-9fc0-4d3e52d0ac36"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4904a98a-b098-4912-a4be-9aa53bb2fc3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "619adc2d-3820-4d13-8fdb-80786587a460"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ae90510-3c6a-4e3b-8ef2-3160a48027da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ed90fec0-97cf-4686-8da5-beef995a651a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88281b26-d934-4b39-bdf3-795051b46d64",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "33ef4982-e5f9-47ac-b170-ca8b09dfb3ea"
            }
          }
        ]
      },
      {
        "id": "53691a50-a609-4d41-8b2e-3271f36670d7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "efdef0d0-0f63-422c-b379-fbf5366c2720",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7fff9667-aa6c-4a69-ac99-ca7da7586fd4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "47d0e04c-12da-4736-b510-ff902bbf4ce5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6af2ca5-9a47-4cfd-bb35-18bb6733b54c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0afdeeaa-3a4b-46bc-b7f0-92dea159fbe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30c6a9a-1906-471f-8b96-a6f92e918fff",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acbe1c41-8d28-463b-9205-8334e26f4767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e1d3f5-39fe-45b8-ac7c-fc88e3ef7836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b82f5227-70d9-4e23-88b2-67245af66ca8",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d64766-53a7-41c3-9ac9-ef17b2bd54b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4018ed1d-5b0e-410b-abae-845281f510dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f205d2f-fc4a-45b0-adc4-353f5acd5939",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e6ae787-13e5-4235-bb5f-12a044e2a7c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4df4c5bd-b5ce-4ba9-95c3-871f00def145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836453df-67ef-4cd2-98c9-0b688cf152f0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "881a2b24-701c-44f2-9d25-863de6bb88f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df9876ba-251f-4226-ae42-ceffdff7de50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d50cb07-14a3-4174-974e-3a47342c5fc4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8ff3da-0ce1-4c27-82c4-24debbb443b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "244d68e6-5b4d-481d-a368-343f588d6bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c12eef-4962-4e4f-b3c0-92a4708abef6",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4461e0f8-513c-4194-9d64-62568bad1465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c483c415-e573-4cf6-bc70-bf5f277834a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d6edbe-1228-4f8c-b57a-840d5b6e0994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af1ec441-e0b1-4112-a2ea-5a8d8b621713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663d6b5c-491f-4cd7-aa92-e59f40cb85cc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef78a15-0a41-461a-b4f6-afe517e62857",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e61c3245-acec-40a9-8e2d-8f7fea5037c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "596093e7-3eb8-4da3-a960-ede83216ad7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "931f507f-1a26-4d78-94b2-aecef8995e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cb5526-fcd9-4d5e-92b9-4bb68b73b280",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb59e8e7-2263-4245-9cfa-80f9ca46ef85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db8089d4-4b16-43f7-8547-0d8b85ad5ad5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f186b546-fb4b-4830-9ff0-df1032840475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df523697-f199-48a5-b656-a7ed3a2e8255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fa521c-2535-4d34-9f64-a8a8aac4d807",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c592af62-9e31-4efc-b740-ea6c75c3235e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3d9a4e4-9f95-4c2c-aa58-18b7dccb9405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f42371-94f1-4be2-ba87-1cec03b5faf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ef99162-33b9-4a48-ad32-c2a945d76b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16298f3-0534-4f23-b205-f9159ce4ce43",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1eeb87-7853-4c3f-b55a-e45f446c63b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc51fe60-e7f6-4c51-b239-30721fd34179"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f3ba19-66dd-4abb-bd65-d90a8a352c26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06b06d42-2c68-4c40-868e-bcbe1c178ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f7c6cde-22d1-450d-8ec7-3c4e0f2632db",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ed8464-b4e9-4b6f-8998-d988b3b9ef08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8b6f1d-4770-4d5b-8607-12cfb221b62e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "649b68ca-678a-47b0-bb22-f4fe44a04e84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa7d6ec9-9437-4418-bd18-1d0b357eb034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c99b46f2-089e-461f-835b-1e2a00bf0088",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4778359d-483a-446e-a59a-ff9a6a1ab750",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efdaac34-5bf0-4496-8d72-ded39df4a663"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76839824-0fad-408e-b00f-d4955fe893b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "264354c5-3893-40bd-9c7b-70a8dc2b2b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df09094-90f8-48b4-893c-6c16f05636d0",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a842128a-3b78-4788-85db-81c34935e0b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60c56157-4dc5-454a-989d-7102b2dbd7ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c55ba0-3c2d-4e36-b226-4a41f4e63d49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f8a75de-a6f4-48ff-9759-4d42a392cb45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dfc426d-4442-40d9-9d33-c3f400689f8c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ecc994-2bba-404f-a9dd-5df95d4fb06c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ab4fbbe-a9e9-4b03-b448-969b2a1ab26e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4c06f8-13f5-46aa-8446-f25e7b8bf48e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a59bde49-f4c1-4595-8cd5-c2d91814cdc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5659f96-316e-4df0-893a-f35bd7b361c3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c33545-80f7-4c1c-90f2-0f512a22a0c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4875c43-9c81-4882-a158-a47b7e8164b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60106fe7-0ef2-4ec5-91ae-7b953c7ba738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e1e8ae-462f-475a-b6a1-58afd9050690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c8d4e9-1a4f-4438-8f43-5c4d292fe819",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54780046-169a-42d9-bf96-c8af71ea94c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb0cfa8f-d1ab-404d-bbc7-d9d9aa4d4808"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97fe4eae-9674-419e-98dc-96bf422a84e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c4faff9-ca04-4c22-9f86-7dd843d16f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a68a82-408d-44a0-8459-347a87cfd8bd",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4362dda0-2de6-463c-9f7e-3ba00234ab82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f522bf-33e8-4bb7-8fdc-d6abcef3e91e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "852d0dc1-8536-4e8f-818d-32e5d9aef63e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "044c167e-e00e-4098-85fd-cbebe4595133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5315af59-e291-44df-99e9-39015196e89b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fcb69e3-b644-4946-ab24-6446ad0d847a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01f791b3-e66f-420a-a820-dfba798fb556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4427c8d-64f6-4ae7-b027-78050f2dccce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40b101ce-75fd-432e-a685-a9f54a3c54ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce433bdf-172f-4a34-8d9d-44ba4024c7e9",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643e1a51-94be-4f86-8593-a9175305f205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30ac190f-dbea-4aa1-881a-e4b031abdc76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffddbdd7-6da8-4f11-9307-155f0c733a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b630413-c615-47da-b8a7-00542132215c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be50c3bd-28d6-46b0-af50-8f3f00076287",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8ee996-7c28-4920-a16d-a1cf1ea700dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07b77c05-1e94-47f3-9197-f17356b4aa74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba7fa86-1f1a-4d64-8f84-3d87076362ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afeff417-5b7a-4731-a00b-9164ee5be791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214adda3-3ae2-4483-9885-7438a5cf3b13",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31da22ba-3adf-4dfa-acd8-e42b6f242b92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae81ab8b-18dd-4ca1-b082-fb48ebec2e78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90f6716-2225-4fc3-8b42-e9f20b2186da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08bb9d39-d8c0-4d90-b50f-0a5a213e434e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee34cf62-eca0-48c7-8110-e912e3a3715a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df247e0c-7603-48ed-968e-b7486ff56a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80e93b86-6627-4fbb-a421-e8538797f3f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafcbaa4-a2ce-4e0c-beb6-ab0e2118de50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4643d3b6-ae7c-4305-b1c5-8e1149919c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea794c8e-9484-4430-a45f-0871da9704e5",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358ac6de-460b-410e-b21d-a1a2978d349d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c34d92a2-fe8b-4e9e-8431-9ccec8f4fdbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a108cb83-79f7-41ed-91ec-46960556abb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5725ad0a-6994-461e-afec-dee5b4a4cda0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b42f9b-a770-4c64-8fe0-687592d2cc36",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a96773b-1ccc-439a-8ce6-7813d69a300a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15b94e54-0bdb-4629-95bf-811472d35b93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bff81d-e502-4e75-97a7-bcf04d6d8d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60dbd59d-f162-4135-aa3d-6c8421766320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39664f08-f0cc-45e4-b7e9-870a1f6cc6c9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e50d9f-98fb-41f7-a284-a7625c1a710c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4be8e6d9-fa94-49c2-8128-b3e15788b81a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f05d4d6-3ad0-4e3a-a2cb-3733894194e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e77c01c-6680-4a5d-8659-b3c283961a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67cda77a-ec21-440c-870f-6525eee9477c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3057a05b-5a78-47fc-8ad5-6ae0e3938065",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b146067-3a5a-45ae-92d8-f1c4005efa0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d5ceb63-57a2-4ab0-a7a9-18f9d3fa7b6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60d507e2-98e6-4931-94d5-1139ec287044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0814508f-c16f-4559-9810-841cd0c70254",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920b84ac-b1ea-48c1-81ea-ede4e0b98698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e2bdfad-3a79-4768-910b-b63467105917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e5e679-cb63-47c7-a971-cd0c0fa11093",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c48c03-0fb8-4dac-8282-d4ee324cd8bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3529e03-9e4e-4fb6-98cc-124723e01fc4",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a84c5ee-49fb-4ce2-9071-5b3474b64c42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce9fcc22-4e52-4ebc-b035-0197b53e002b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c67d151-250f-418c-87ab-3b0e2a74183d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e55f147f-f5bc-4434-af26-44c85fef9b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d523032-0cee-46ab-894d-95d4df57b9a6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f337e0-c799-4057-ba8a-d5ab1d301482",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e9c970c-458c-4e6c-9e4b-5ebf6f1b31bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef12f698-c3d3-4ecc-b356-0068fe7c0e57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c01d9b1f-a324-4216-a628-e2b311106aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1673ba8-f4d0-4a6d-9382-3cf5306be687",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2ef76f-c5c6-421a-ac7b-2232c84b1279",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25858436-c7d8-4c6e-96e5-44dc2e46ebfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2c1c9e-7c15-4571-92d0-c71db244a7c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67d62802-5ca8-45ab-9913-9569e8f9ba0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e3e1a1-b648-4986-b4ea-02cef2af36bf",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa046956-b8f9-4325-b2bd-f668368b196f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53d7e90e-6494-4b62-be77-7cb06b3a3e2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9925d3-84c1-4bc4-b129-6b3ec8feb036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0507cd05-769b-43e4-a955-888b16652d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668f4903-fa14-4d7b-a5c5-ad2f6dd7a5eb",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5479178-82ec-4558-9727-c562a656cd34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6204866-f3a5-4981-b676-a6bfa00c647a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad219cf-d0c5-4598-be7f-82a3121f4e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d7ade55-e35a-48e6-b917-033a73b455d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e157d7-8153-4b78-b504-18756f822050",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b705b38-2e8c-4b4f-bfd8-6a788da823e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1c98fb8-a342-4e67-92b9-b99036de3cbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54cd45e-c65b-4f49-a9d1-ab9660c0c7d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c42b4f9b-51dd-4e93-9cd7-df3345b80c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f707274-08e0-4a72-98c8-6d97991af971",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441338fc-10c3-47eb-aa08-2caa2f85c1ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "139c5bb9-53a6-4722-8301-d18d33f846aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "267c05d9-f948-4e43-a019-03b89e6e3d88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee1ba573-1c89-4519-931d-e39764aa5a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ee4771-2192-4b4c-9070-8edf5ba76e23",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c974f5-a5f9-4d52-a378-842a2ced3667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4011976-d3ef-4eeb-8ec6-75d34eba6b62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3fbc0a-5e20-4803-827b-cc9d72160717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a994add-c28a-4091-b967-8cb7deebc984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abad82b-399f-418f-968b-3f9f0355d1f2",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7dc4c7-84e3-42aa-b066-dbe200211bf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf8c5007-39f5-4a23-922c-bea9108052fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9830dfb2-e02e-43e1-82f4-6b7eca7777be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fe10148-10a4-4ef7-96c7-c58febecfc51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc69e2b-952d-4de5-bd9f-42b0c726ebef",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b71960-2cfb-438c-9a42-01f145eb95d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59db950f-bfe0-4a32-8636-70204b0459dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3097ed4f-b993-4061-9642-d3448ef57006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4e05040-40f7-404a-8fe6-41ba80631232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab75d69-8af1-40de-9801-ce66f3cdcaa9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e14c7b63-b49a-4eba-bef3-180570c7213f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83825ac2-9f30-4c5c-8f62-5e8b00cf2cb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ded294a-b2fe-4225-afd4-7d794008a1cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0a9fb85-c68c-40bd-9464-42cfeecdb64e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26177722-f9b4-4f65-8750-e151e1de1b85",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f570319d-7d36-4bff-afe0-a2d5f5d1a1a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3948bef0-cddd-4681-a4ef-8d24a8d5c989"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e878ba-d31d-4047-b4e3-2a1a389ef71c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7066219c-b643-4828-a85e-764ed3d12264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f21b69-77b3-444e-b586-1e3d9378e96c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301ca406-2c7a-4412-9841-d6e9db314096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae34d9f-874f-433d-b89b-1033fd978105"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ffb6d2-d8e9-49af-bee9-f724aa0d0660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819e8ca6-3164-4ebf-962f-1ca50b04fe65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f30244-3533-4ae1-a8b7-09145f0b5f9c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80234a6d-6a68-400c-a316-816bfe4a3d61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15cc2e34-1a84-4b17-9326-36f616e435da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7428473-7396-483d-9f69-606d5592c6db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b8dc677-2bf7-4fab-a3c7-1615e68fc5ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f13a861-1ddc-4abb-ba6f-feafb7fcc5d6",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce8b3f4-8087-4baf-a46f-5eebdd7e2285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c71a5f-6b5d-4123-ac9e-ca34d6aacf8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b023c03e-b11d-4b93-91f5-5384ad83f216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc04ac42-7628-4c7d-bb71-b81d1746e29d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2d8596-93c0-402a-94e2-5b58de4dea26",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a80f89c-8dcd-4742-8622-a6dd71abc5e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b300efa3-4640-4cc7-8d68-11967789fc42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb19c00-3b13-4181-b150-92a9bcf1d194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f52e5144-24f2-4c48-8027-ee13a14327b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19cebda-4761-4e62-bc25-767368ef3c64",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30404bb1-a52b-470f-8315-b2a222d3b859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26cceef8-333b-4b29-9638-ba3057e3ca34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a506b98e-cdb7-4cf6-80ad-d5fde584c89a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b085a838-2ac7-4392-829b-aeee53e15dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3789984-fe14-4f1b-a2f3-20c1ff452085",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8327e416-fa63-40e4-bd1e-0999d97757de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb034863-75a9-43e4-9314-25eb8f9e55b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "669cbd6b-9204-4ba8-99ce-baa75c8f3c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e9c3c85-7701-41ce-bc18-3bf64aa85352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "940c0bf1-7ee9-4e42-97ae-eedd17798d3b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d2e2f9-7129-41eb-a9c2-aa301961990b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34d7d46f-861a-41e1-9190-5b0b92a0a7d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4caade-c1f2-41b8-a9d6-0c53b8dcacd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f269c516-96e4-4418-88d5-e36d2e88897f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843c9b3e-8579-4896-9cc3-105a458a49aa",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8aa2f9-f2d7-4b32-914e-5937db86180e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec260373-3237-440d-9ef3-899e3b949031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fcc4daf-a9e3-4cf0-94af-6244f1e507c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c7835e2-dd75-483c-871a-d28d10b3d731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f20b5cf-63c9-4547-84c9-8155179b2b4f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8ce95d-b331-48bb-b7fb-c2dd8981b291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1cde22e-2fce-4ffc-9eb1-0e65f0def0ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "273058b1-d20e-4c27-a0cf-a2ccaebed5df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23b8eb19-fc0f-41da-92e7-fe0fcd4d1c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7738a093-1c26-4ad7-bdda-cdc63af917e3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7657366c-fa70-4eee-8495-518ea4af3adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e96f6f2f-81ba-497f-826a-1a67b384c23d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "385d047b-d8b8-475b-87a6-e85330615a73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c0ac57-e01b-44b1-bae4-7ce46075a097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8123eb8e-62d8-4310-9f65-ebd1c6eb979c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c3f311-05eb-435a-9b88-5687115f54c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e3e6d2-45ac-4034-b325-d1e195a2a389"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f84ecf-85ce-4c9c-946c-476963b45efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76e390c2-7b87-4985-a1a2-01d7c88de0cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79dd7969-a429-469e-88e7-0d5de5507922",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c02a45-c8a3-4e4b-bb2a-ddb1289acae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8bc6fbe-494d-421d-8964-424105ebcf03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b65d029-21a0-423e-960c-91c7fb3043ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59025745-f1cd-4d7c-810b-42b39f46782a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea4f046-6114-4726-bac9-13936bc89d81",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3a2809-4069-4206-bb83-5c0264d878fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b3bdadb-3a08-4b36-80fc-8d9a3a0c6e97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "870aaa66-17de-489e-ae2d-33b17fb443ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "993bc6fa-192c-4223-baf8-b6240949cf86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2185ee4f-1a8f-435a-8061-c29f8dd1b4ff",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da74e7f-62ff-4ed4-8367-020e045b6311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c55e06-1560-447e-a1bf-d4e5f4120f88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3ded6d-9266-4b2a-be80-1aee18451b63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a217047-23b0-41cf-b9f3-c617497ae7f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69cd323f-55ce-4a66-8def-0ec7f5131d79",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479ff3ed-c181-4089-aaec-e526cdb77bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b3abde0-2c59-4c8c-852d-2fe71525ab1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "671cc98f-d1f2-44fb-901e-1c5bff95b190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd921455-2906-4f29-97af-5e42f4f41fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774bbb06-e1fe-4208-8a7e-9dc08c5bf9cc",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26b9411-5b98-4671-a9c6-09b3e621da1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d31188e-d7d0-44ab-81da-be45a094da8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a4a650-44c9-44d9-b681-dbd1e91b8714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea7d7b9c-f0e6-41ad-afba-0a3eace5c534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fde7964-b84b-438f-aa37-88a73d3cb427",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff395976-1096-4dc5-b8b6-09af692a0d01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4d4bc12-0869-4e94-bc9d-21050640e942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ced5df3-135e-412b-a5d1-1efe30a1cbe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a269421-1538-4e97-9a4f-0fbc60dc6412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c02f614-ce58-48a1-86b6-56ff80e78c8b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9892cea-ad5d-4f5e-a2f3-44bd6dfe504e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df452e99-6deb-4633-a2e6-808faf9836e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b35f2f-7968-46fe-a545-1170975589c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fba13cef-f16a-4e52-8d21-09c3c2cf61a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636bd517-f5be-45a2-8d6a-5c9f7896f20a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86496530-ab84-4977-91e0-eb923ad71be9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94abff09-fded-4625-8d8a-d0e785fc0979"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcba8e1c-89de-45e5-929d-3bcaa3ded07e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e611417c-0940-4f68-896a-03184e237e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1a5cc6-cc7f-4701-8022-78fc6d67469b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990bc37d-16fd-4d5c-8d0c-787347b68d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8de730f-886b-4e2c-8561-974845b140e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "305946b7-10a1-4981-81a1-b466a4e77b14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2130760-18b0-4226-b55f-a8fbaa5b1b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6dd085d-0acb-4396-949c-6969e63beb45",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ff2902-c2f9-45dc-8723-b8b7040c8102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52aee90a-01b7-4257-8b77-66ccd6da0262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a9b1b9-fc09-4827-a63e-cb258820552b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f43c329-d337-457e-9c9b-fb0027e013d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa2c45b-4827-4c08-a0f8-97a6cf7fd017",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a284d6-4b5f-4e1f-9ab8-e31c2517d9d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "188602f2-314f-4937-88e7-634faf1fac5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5177a96f-5088-4ccd-9be5-560d0b8e6234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "927fc83d-8134-4361-9508-e9e99766e179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e317832b-41a4-4622-978c-2a0708fd075f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82140d4f-c0b9-48e3-b28a-d4ef66441554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "333a4565-2a53-42e6-9e99-fc40d233b0c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "968169c9-b9a2-4d4b-8bfc-78a19d65a342",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe34274c-5a00-4326-b2f2-bf79515ab4d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c37d7c-aaf4-40cb-93cf-346149f58d83",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a865ac-9d16-4844-a55a-9ed1fb0419a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f225d50d-8f48-418b-a678-bdf116eda6d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca29285b-927a-42f0-8ddc-f269e6aa7e5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05f9b70d-c507-4ed9-8ad6-9fc89be61428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e22b8d-c572-46bb-b7fe-50fe5f63b10d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e68a573-a5e6-46e0-8693-dc0ab73a9356",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b00917b8-d264-4582-9da8-139f63e4567b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0106a07d-9bcd-423f-836c-587eab005b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b53403c-c866-458c-8a2d-0fc84b73d964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2bf3bf-4623-42b3-9343-2941b9e1394f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bebc221-543a-4f2e-9aff-552f6d722be9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "926ae4de-56e1-4da0-a0fa-bde0b25d179b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8d11bd-f4a8-4057-936f-aa319a0948a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf70e36-57fd-4e08-bc9c-2e198b51b350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3641b4e-3b09-45ce-a71a-a0ad0af45f98",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e54e137-fe84-459c-9d8e-a0c4c6bf933e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fe2901e-1af6-4bb6-ace6-b89d04443a2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53ad6b9-4387-4575-a03c-50643747ee17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "475ce8ef-7cf9-4963-8085-f6564f2f627c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2344088-736d-4f04-96fc-879a1159e9c2",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c039ace6-8f75-47c8-89e4-3268434ec67a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec5ac53a-640a-40ab-b277-8816e57cf7ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc8975f-bccb-4cf6-aef1-74ddd60d293d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9e68323-78df-4ab8-b40a-b0abf671c586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c688d749-bac7-4ac4-b731-40207a6793cf",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea770a99-cbc1-461d-9982-d55154315662",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ebc08b2-642c-498a-9a8b-d63bada372ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3787ea1-3d3b-43c3-b627-c1a77498bdb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3838319d-0581-4de7-98d4-b6c6e9e3e5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6719db-9277-464a-ae0c-28a92a10efed",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63452d4-3cf6-4279-9172-2f9710e75d3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5286399e-8cd8-49fc-b819-4591b7cc18d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2dd4d5c-45a3-41a1-85ea-c63ebad6e67e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "983a54b2-fd64-48ac-a5fa-33b673e19523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2d68b8-e983-4e6b-a9e6-a1653848b1de",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a76b56-c772-461f-a053-3db761f62e6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca8424fe-ca68-4d32-96e6-bb76d2109eb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3722b995-4540-42c9-8b51-5a832a1e09b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fd0cda3-6400-4b06-a27c-69dec9bd55b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1364fd5-419e-4efd-a72c-9224757e8caa",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab414b17-6712-4c68-9e95-68db665c001b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df484f9e-2f16-4c10-be88-572fb38b09ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5a4715-65b8-49f5-9d96-0c0c0e459ffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78002d6d-ac35-43c7-8306-dd5ff82a842f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ceeecb1-574e-4cf3-b185-2887f6e4af23",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3722c463-636f-437e-85a4-e86ac9a54bac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d6008d1-9f57-4e42-8032-797ff0977cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d97a7d-d6f5-4269-bd01-c3fb9ad96b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ab8e32-d0f4-423c-9ade-4a6a187418c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375e7e19-ad9e-44c6-834e-b2fac65301dc",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9908eb2e-4abf-4f45-978b-1a0aa00e7fa2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e8b3017-7bbe-4830-84d4-253fcb1842cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0756c405-7d0b-4785-a1b7-0fc836b9f94e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "749bc1a6-97d3-418a-9ffc-e3839a2f7e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63772c97-8274-46b0-abb7-184d241dc3ed",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84724829-b72e-40ea-bc41-f786d044ac08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05aed12d-6b9e-449e-8ae3-0a017d21fbdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d1a915-d45a-4bb5-9807-96f09e417297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68036dd3-0c87-49e8-9966-883282506754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86edac42-fe8c-4fe0-814d-178d46dfac0c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "504fa1b4-8a6e-48ca-9840-e7f8670e315d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86b13cde-631b-4004-96e2-4edc4f7d95f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb99a0d-0868-4489-8749-b0305f8e2bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "860005fe-643e-4c81-9b27-6296ddd615d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb1174a9-9545-4f77-8459-e8fb8511a4f5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71666c0-5a40-4668-a24f-9e7b58ec3f74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12fa2ad0-88a5-4d10-8d02-164090ab07c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf09b69d-f6b8-4827-8933-0ec9619e0f3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16a45c5f-f86d-4b4a-887a-4697edca47c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528b4e4c-2410-49e0-bf0d-be96124b00b6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f6793e-1419-4509-84cf-561d0e89ee63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eabd5284-c628-496a-b288-3d9a22544cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9859329-489c-480b-80bf-0a564429a495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "196d9485-3cd0-4950-a8fd-c04a0d4d1c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542e271f-4bf4-470d-861f-62a494b4b625",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24a3e7e-fb4a-454e-84f6-c49bff755a19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9beb651-b363-427c-89cf-94fe5a8e9cc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51321df0-70ed-4c3f-8a9e-ec6f4e6f0f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d68d08bf-3cdb-4146-aca2-be374f280675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8858086b-aedf-4862-83b2-0faa2a85fa08",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e906dd18-a878-47e6-9ead-febc0370e091",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6927931-6dea-4cb0-945d-abc4e3bab12d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc987c1-8ac8-4a0f-91b1-a8da641bcffa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "031c3716-c4fb-4b4d-bacf-c37a8d9fff7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d511c04-3aa6-48a2-bac1-95c40f1625b9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a4073f-d846-4431-b6ed-b96f7eefdaaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3019f43-9d01-422e-b79b-aa962d41a625"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee92c6b8-4f78-4c24-91fb-2a229a1ef306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b3edf1-97b7-4627-940f-1d666a3d9cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ad82e6-a143-4fca-a07e-14e386e7f2b0",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb41447-5803-4bf8-a041-48e49cbb9390",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9e01f97-76b1-4323-8189-9159c5bc38f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06baacf-438c-40d5-8432-ec09e7b6e193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed1250d0-4b4a-4f6a-8f48-5ca8b9dc9edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8687e0e2-d740-40ec-93ea-2c4e34bf6c6b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed773400-13bb-4e94-9f24-379e5e0a73e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f361a27c-f2cd-42ea-877d-df5232ad4c3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e86706a-af9f-4285-b50c-b5ff8b255b68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a161a5c-6856-4b15-a40b-1b3d38fa0887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0237e8ad-0b9d-4a14-ad13-a2903cd7dd6b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37669fef-7a4e-44b2-bcbc-d3b8036b0586",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d16c4cf0-8e28-48e9-9ec0-76d68617f963"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "686cf19c-81b8-4be7-ad69-eeaf1196efe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f4669e-504f-43a5-b0e0-e13e589b348f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f4a20c-f62b-4e78-b57d-cf0cf514fe70",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6bc3ab-5dae-4853-95a3-987ea80ab5e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d066137-bc45-4d86-a73e-1296dd193c12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c16ff74-7701-4d72-b78d-fb8d31133c24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc3e7d35-ec31-4eb4-a1fb-9a4a44d835c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f5e347-2b26-4b5c-995f-4ecfbf98b859",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3e55f0-17c5-48af-ac4d-49e2d9d79e06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2075808a-5177-4c7f-b958-67ba7546e8aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c3376f-7163-42e1-b416-d3ca0ca30e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b50aa174-8a3c-4bcf-850a-581c463fcc05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c87015-b2a1-4fb7-915d-8910dcb9e9b5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1982a7-03bf-48ed-88ea-b5bff3a078e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc9ec560-2277-41a1-8256-62e0b66b42fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71dc4c74-6a00-4ddb-ae44-6c55f66aa26d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a7c79f-9a1d-4855-bae7-fbb4d00f1c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea771a9-68b7-479b-af50-733194d9c4a6",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6e23cc-1df5-42c2-be8e-c60659dfb57a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88f409ef-5701-45f8-b93f-1e250aac6ec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dac1c1c-f0e2-41f8-bbef-5d282a9bc4f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9c63d36-09d1-4755-9229-2c9f5aa97f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15946fd2-c82c-4d9d-b932-cf0ec1d56b70",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f973a145-e52a-4ac9-9d9b-d2f5e2b7c651",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "474cafa3-28c2-4500-92e6-dd17a0052561"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "449b03c7-6c9c-4d7a-8689-79c8a39a8223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23df9974-7e25-4de7-b048-8e1bffe55140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fbd57b3-bfd5-4e02-b4b5-022fc8f75a16",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f31451-7ba9-4932-856b-3fdaf6200272",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2fff440-e1e0-4e39-bec0-5fb45ecf3f54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8569aa34-955d-456f-821c-535509f1ac55",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "909d8dbd-501b-4377-9f93-523048dd9eb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7daca3ec-da02-48a4-b632-4d55e27119f9",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19429584-064d-4359-afd5-e68f2e006b4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6190508-26ab-4b73-8caa-34568fc1a41a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d991e5-7114-41c1-ac46-a013c7e0987b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ba002f-2eb7-4475-8af0-0167ba7f4f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8805ac1-625d-48d6-8f8c-6864a62af02c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b697fcc1-6629-4ab3-a6f4-375990962ff7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f82e2ef8-269e-4a85-a5d1-e2b8be8d72dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "015a4946-90de-4ebe-8fd1-9cb86af05eed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d73405-d5e7-4709-be4d-dd1ee5a9d468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d29058-286d-45ca-943f-d030fa5797a2",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46739053-49c6-4bfe-8147-4e09df1e4d19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8673bf68-61e0-4ef5-b936-8f2d56b67e08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e4798e-6de3-457c-a826-9c41ee72cbb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3dcf475-4d56-4bdd-8d78-71486f34f273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a33252-4b76-4c7b-8ed3-d5aeb4d33383",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c07a938-ccd7-4e11-a662-4a2c38d334d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18ca8abc-e54b-4ada-9331-aee243285b80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40cd9824-defc-460a-8dbe-bb0ff937946a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1be523ed-a2d1-49a1-a668-292babb6dc81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9477f278-a818-4c8d-bfc0-add26be32c07",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94253339-7688-44f0-bb51-12d5f5f1031c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acd21c18-07b0-45c6-a0d8-0668f6b4a7e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f73889c-7fec-465e-a55d-8a404778eb62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b3ce8f-7b89-4bd3-be9f-1e4cde36be4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19207ef3-9ccd-4325-bd0b-ef45e9ed4c2d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f766fcdd-babe-426c-a35d-ccac2a845ad0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b42f05e-df01-4c0b-b88f-9d721894e789"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a125e08-3ab3-4a70-bf6b-1436a97e472f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dafbae88-bbb4-40be-a964-d6eab43cd228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61623f5-867b-4b5f-990a-1d0ffbec1473",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d33c6d-2ee2-445d-a582-32e351d73da8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6bcb6f0-8594-4b1c-b167-7b5e095fa76d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d3538d-4049-430e-b7e4-a4edec98b08c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dea2f37-d8c5-4a0d-a661-f074651e972a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d299870-0dc9-46d8-97a7-7fd6da582692",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dfa517fd-5f96-418e-ad57-1219fab15676"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b530f81e-8ea6-424a-853c-b64f2a3f2335",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9abc9e79-6c24-4791-8d3b-59a73da3bd1b"
                    }
                  }
                ]
              },
              {
                "id": "98519aba-6ab8-444a-82f4-6ca28061d948",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "829ba7dc-0220-45d0-85ae-60252393066b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2396ed45-da92-4255-9d71-240ea8885439",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a5cc04c2-9f7f-4fde-afe4-ad24ba1e6da2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f18fcf0-5310-4c0b-8167-65a010fe3051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b78bbf3f-9d9c-4f60-a7eb-61650443025c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "689531bf-2947-4d1a-8a82-21a105d8b615",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc8a62db-71e5-490c-a8aa-ab693ef505b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8a25152-0113-435f-93c7-3f8e2bebb6e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b1f62fe-d5d4-4549-80e1-58bac82b7825"
                    }
                  }
                ]
              },
              {
                "id": "010708ac-7e16-40c0-8957-e79fe7a72348",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8c701c4e-5eb2-4475-9468-c34a12c77f12",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8ebe78-d78c-4f8f-93cc-870487a73428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "41bac6c4-6ae3-4b9f-8a7b-dc70dd1970c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba7c5ea-4eab-4d89-9cc1-4bcda350347c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5f04383-3e50-4457-8e85-ee1339fe403e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7698f3a7-eb6b-4c54-acc3-30871fa40a7a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2003e302-87b0-42ac-9c51-65ee8d18e995",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d9da5a3-3283-4ea4-a6c7-acd0b3bdf415",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f3a729ee-02eb-4001-ae54-64849d0ac80f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8451e5ed-4dee-4e16-a94b-62504ea02720",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bcf66a74-276a-47e4-b16d-7fd7b2052810"
                    }
                  }
                ]
              },
              {
                "id": "a2aa48bb-c720-4871-a397-c614311fff81",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9f11441-5aa2-47ba-ad40-25ede708edf7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5dd865f1-ceb9-423c-b8db-415b751eb739"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f9aa0aa-0c0e-4f4c-b189-10250d0094f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "629c0540-33b6-45c6-ae7e-649b2793bba0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4fa6de66-81c3-4813-ad57-0ddc4e8f704d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e206a6d5-5ee8-41e4-bcf3-3b8995704816"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c0fea8f-ac82-46ec-a406-6cd428fc763b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f0979c6d-4596-4b2c-8df3-ffc9be4d6f35"
            }
          }
        ]
      },
      {
        "id": "b23c1ffb-ca4f-4fe5-82a5-6d36d69ee1f3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5921ca86-bcdd-413f-acf4-5d347f9681cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b019e8b7-2a95-482e-a9de-58e0ebbe768c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "be5e6b8c-6732-47ff-bd78-178d7ae47664",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9396e74b-4c9c-4aa1-ab74-1c53a8d95a6d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c1eaedbd-b4b0-4333-a8e2-ee53beb0873a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "937a440b-d79a-444e-94ba-5a7ec80b3f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be353e3e-1f13-4100-82c4-6c917552b71c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68c79f97-d8f8-40b6-b685-b741621ffb1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d6aff3a-f033-43ec-b5da-863b62c4182a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "24effd6f-8ac4-4b77-a083-109dbc68aa60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e64056d3-3977-4044-a4ec-3f9ae2202d88"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79a244d9-9241-4a6e-91c5-24c4a1ce91c8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1ea0e863-b421-4d6d-ab4a-cefc2d6601b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c52054df-1572-4f3a-9ddc-4d13e9b25d43",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "908a255b-b95f-4ca0-8a7f-e46f1d75d631"
            }
          }
        ]
      },
      {
        "id": "446f310b-528b-433c-9818-80def3fb3947",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "701a4410-f7f7-46b2-9d1c-7cc654afd031",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8234970c-b51a-4287-a3b7-f795cbb0459e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3a775347-4151-48d1-bbb9-0cd1636d2d87",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41488bc5-ab6e-43d2-ab7a-b6184cf11c98",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07d03416-c03a-42de-a9b1-fb36fd828258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86acec39-0ad1-4754-a195-afdc3835e75b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78e18dbe-75d4-415c-9a14-ae0516258828"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dccb04e3-ac97-4d31-b72b-769271105a9f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0f54635-87e4-4c6c-988e-aaf6e8c747a5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "76f80818-bf0e-45e8-88f6-559babc79446",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b31bc57f-9d42-4114-aede-54e8dc045d85"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91c5620a-b9e4-45be-8774-4d0040bd8ced",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ca968951-a2f7-409e-8afc-c46f3da45453"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9e548db9-2390-4489-8e75-5a310947cb18",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3440bd7e-8156-44f7-8562-7131bb193699"
            }
          }
        ]
      },
      {
        "id": "905c0ce9-7394-48d1-b9a2-a82eb328d178",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b1398470-6593-44d5-896a-21ffd887fb05",
            "name": "Negative Testing",
            "item": [
              {
                "id": "171d3bc5-561d-49a8-9ccf-faf7f054fb12",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2930937f-89b6-4ade-9a8c-94115d861cf3",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac44415-a1ad-4ff2-986f-b374e1b57975",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19971d19-f494-4f4b-ad65-d25d73060109"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e1568d-4f02-4a9d-bf9e-246ed09cae4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d13f4154-98c6-4fdd-b177-55119ba4b98e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b76cae64-603b-46f6-ac09-d5976f6cce2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dab8da84-51cb-43a9-b097-28238e665c52"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c573617c-f601-48e0-b65f-424e905bf91c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7bd8b595-9ad1-4119-8736-b0e39e27b137"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a34050e7-f09e-4aa8-8184-350acc29eec8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "102ed9bc-201e-4ea5-b311-79c2c4b7e545"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93ef197a-fc57-435b-81b9-2bd904681f2a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53040e6d-b424-4de4-9c05-551c41c0fdd3"
            }
          }
        ]
      },
      {
        "id": "4ca5dd1a-4503-49fd-a066-4970b6870a01",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "78f1fa4d-cb45-4704-8bbe-fb17fc86282c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cbeff3eb-5d0d-453e-9d99-e52dc687ab11",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9064a62d-2913-4d89-97ba-69fc70c466fa",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5a36745-3a43-4760-b830-8bf95a9d5c62",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "547ce169-34f7-428e-aa94-b3c4636c0cdb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 110.12982456140348,
      "responseMin": 5,
      "responseMax": 835,
      "responseSd": 70.09222487329458,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1711672462380,
      "completed": 1711672503149
    },
    "executions": [
      {
        "id": "4d5f1719-a476-4ae6-856d-29d6a8afe619",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fbcfedc2-0267-4698-a0fd-058e168ff654",
          "httpRequestId": "21b47962-4b49-4d44-891a-7dd24e84e8e7"
        },
        "item": {
          "id": "4d5f1719-a476-4ae6-856d-29d6a8afe619",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ceaefde4-d960-4ff8-866a-2548cd17e201",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 0
        }
      },
      {
        "id": "4a44cde4-9da2-474b-9dc6-d561347901e0",
        "cursor": {
          "ref": "45ed6432-340c-4448-af2b-447e32dcda41",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c209de0f-24a9-4616-ad50-719cf950eab6"
        },
        "item": {
          "id": "4a44cde4-9da2-474b-9dc6-d561347901e0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "32c500b5-b9eb-4eef-a8f1-d9c37ab9c4da",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "587eec30-5210-4227-9d7b-d8355a182c3e",
        "cursor": {
          "ref": "d046a7a7-de6b-48dd-afb0-93a473d26716",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bdb7881c-75ac-4f4e-81f2-9601c820092a"
        },
        "item": {
          "id": "587eec30-5210-4227-9d7b-d8355a182c3e",
          "name": "did_json"
        },
        "response": {
          "id": "27223a61-6439-4b31-8f4e-e93b3c09cdf6",
          "status": "OK",
          "code": 200,
          "responseTime": 457,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c301d8e-cdef-4d1b-9791-77f7d346eebd",
        "cursor": {
          "ref": "6659417c-2500-4af3-a884-ec5a0f5df39c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "754365f4-630e-4148-8ab6-124dea761cd8"
        },
        "item": {
          "id": "7c301d8e-cdef-4d1b-9791-77f7d346eebd",
          "name": "did:invalid"
        },
        "response": {
          "id": "44675cf0-6bd5-4281-9cf2-b2b529e78034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c301d8e-cdef-4d1b-9791-77f7d346eebd",
        "cursor": {
          "ref": "6659417c-2500-4af3-a884-ec5a0f5df39c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "754365f4-630e-4148-8ab6-124dea761cd8"
        },
        "item": {
          "id": "7c301d8e-cdef-4d1b-9791-77f7d346eebd",
          "name": "did:invalid"
        },
        "response": {
          "id": "44675cf0-6bd5-4281-9cf2-b2b529e78034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e474b1-17c3-416a-9ad0-b9c2e97e4f5a",
        "cursor": {
          "ref": "8b508eb5-f561-409c-8bcf-1eef8245667b",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "83919733-8556-4b0b-aec6-4926f969b274"
        },
        "item": {
          "id": "a0e474b1-17c3-416a-9ad0-b9c2e97e4f5a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6cc600e2-58be-4e6d-ab1c-a8d6a27f37dd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 234,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a162df-d767-404b-abc9-3a76b71817ab",
        "cursor": {
          "ref": "0dad72e6-af1b-4801-8357-e9cb86000010",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a3afacb5-f62a-48dd-8291-938b03365bd1"
        },
        "item": {
          "id": "76a162df-d767-404b-abc9-3a76b71817ab",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "12e5c6d6-275a-46d8-8782-b9bd4471fb1f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 95,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22125a57-fd32-4433-831c-01cafd92fac8",
        "cursor": {
          "ref": "fdb4d3a4-2d0a-4752-9d60-c7839e2557aa",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e9887cbd-0172-45f6-b7a8-b5f941691bbd"
        },
        "item": {
          "id": "22125a57-fd32-4433-831c-01cafd92fac8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9ab8ca17-5631-4974-b1ff-4e433a47342d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1c1d09-d23a-41ab-aeb4-10ac9038a189",
        "cursor": {
          "ref": "02d8362d-2222-4c46-ab22-b514f893f67c",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "da2b0fd4-25c2-4f5d-8718-0da3587ec9aa"
        },
        "item": {
          "id": "6d1c1d09-d23a-41ab-aeb4-10ac9038a189",
          "name": "identifiers"
        },
        "response": {
          "id": "d531a3d5-9570-4636-a070-9adce2425c2a",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95486ce7-72dc-4a8d-9d4b-179bdd5d72d7",
        "cursor": {
          "ref": "803401a2-87a2-4411-8e5e-efb93642a2a4",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "982e643a-049c-43b6-a349-7608aeca774b"
        },
        "item": {
          "id": "95486ce7-72dc-4a8d-9d4b-179bdd5d72d7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1068398b-50b6-4f9a-9584-4b779a936397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7441fa37-804d-4f80-a0f5-a51b2f8c629f",
        "cursor": {
          "ref": "65437294-f73c-4f24-9a4a-c99d194433e4",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "205ad5b6-d55b-4be3-a62f-f981d68842a4"
        },
        "item": {
          "id": "7441fa37-804d-4f80-a0f5-a51b2f8c629f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "65aafa2e-6048-4c4c-af26-c2ce25b0a660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b44f96-8124-4f3e-a9dd-1c9badcaf3df",
        "cursor": {
          "ref": "02811c86-62ee-4d84-afba-087ef6b5173c",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f1f5bf12-9075-4d09-9ed4-4b5e75d2a305"
        },
        "item": {
          "id": "17b44f96-8124-4f3e-a9dd-1c9badcaf3df",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f696985f-def4-4a12-8560-5853ee8fc06a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ae822a-3241-45f0-940d-85661bf58fb4",
        "cursor": {
          "ref": "a55318db-bb6a-4490-964c-6f00cd490f15",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "87317ef0-e9c9-4d0c-8bfb-3285259ace44"
        },
        "item": {
          "id": "c9ae822a-3241-45f0-940d-85661bf58fb4",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5f69d99a-2df2-40e4-9076-5f50870c54c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b40436e-cd04-47fd-a755-faeef27f3aa4",
        "cursor": {
          "ref": "5792b5a0-7ae6-48e4-8ddc-5afee2eeb84d",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "518db199-d756-424a-adf6-2abfe7e8125c"
        },
        "item": {
          "id": "0b40436e-cd04-47fd-a755-faeef27f3aa4",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "aabf14b3-85a3-40ee-b967-aa494a8c505c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe6cf0d-8e92-40bc-9859-bd0f3ecce28d",
        "cursor": {
          "ref": "bfb32f7b-aa6c-4e62-87ca-75fcdbf243a3",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1a7cb4b5-4ad0-470c-86f6-2b67f658a2b2"
        },
        "item": {
          "id": "8fe6cf0d-8e92-40bc-9859-bd0f3ecce28d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b5d98052-c1b6-4323-b5a1-22c9d252af23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c11b74a7-a1f5-4800-9c9a-afbd3112463f",
        "cursor": {
          "ref": "2a23c70a-2937-4b86-acd8-d3430e526af7",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a77055e5-c952-48a0-81dd-676f62f8da53"
        },
        "item": {
          "id": "c11b74a7-a1f5-4800-9c9a-afbd3112463f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ee353d1f-570c-458c-8771-10d9fa6628c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a4ee11-7519-47a4-8037-2c5f6a61c6e6",
        "cursor": {
          "ref": "f92d555b-4473-4c24-a527-6b9b61c1f85b",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "24efbac0-0195-442c-9473-a578c8a0ebdd"
        },
        "item": {
          "id": "83a4ee11-7519-47a4-8037-2c5f6a61c6e6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "86f87a98-ee27-404b-aac0-e51a129f6f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6dab719-f66e-4ee3-bf0b-1ec516e6e873",
        "cursor": {
          "ref": "a715c4a0-92d7-4e06-8a27-c4acf7c3b715",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b2a3650f-ffe4-4149-8137-4f1ab3aacdf8"
        },
        "item": {
          "id": "c6dab719-f66e-4ee3-bf0b-1ec516e6e873",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "27d00d0b-7f9d-4a98-8380-b60e904af3b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d298557-4c88-461d-ad04-44d575fd5e1f",
        "cursor": {
          "ref": "420d1aa0-74b6-49d6-ae3e-723d1d75262f",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f4bd14a6-385f-4ba1-8a83-3f25bd69cab1"
        },
        "item": {
          "id": "0d298557-4c88-461d-ad04-44d575fd5e1f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "40a0baab-cb61-4630-9156-7734d4d9eb20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f55ff5-1952-4528-b533-f8a65d1c8151",
        "cursor": {
          "ref": "717d8959-e1ee-4404-9641-9a855dd8e6d4",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b5afdd8a-1047-4f19-99e7-7ef50435c16b"
        },
        "item": {
          "id": "52f55ff5-1952-4528-b533-f8a65d1c8151",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e9341e6b-ddc4-4003-9fab-2ec8431f04ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "982a7645-0444-48a3-a406-a27a4537699b",
        "cursor": {
          "ref": "6fecdaf3-0305-4275-bcac-874e48ec2483",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ff25dd47-a18c-47a6-9b70-6bc7cf98bc59"
        },
        "item": {
          "id": "982a7645-0444-48a3-a406-a27a4537699b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "59b306c4-a22d-4883-8917-23c66ebf3170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f85490-7db3-4bc1-9060-3c190699c870",
        "cursor": {
          "ref": "6996d9a6-6f22-4757-94e5-1ebe07730631",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9a21aa3a-7b36-40ad-8a24-6acfbf66f52e"
        },
        "item": {
          "id": "24f85490-7db3-4bc1-9060-3c190699c870",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4dca9684-45ee-411c-9df9-94dfeb6e8837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5fa4f96-2639-4057-8319-53cca5fb2fad",
        "cursor": {
          "ref": "9c670b7f-5189-44f8-897b-6a40ceb5f332",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f5da6580-c7d0-4e28-9fa8-f96537196a60"
        },
        "item": {
          "id": "f5fa4f96-2639-4057-8319-53cca5fb2fad",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "c5693fa6-2d16-492f-bd0f-797527c81708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac6a405-fb4d-44f3-a804-149e56385bff",
        "cursor": {
          "ref": "59fd2016-e894-462d-897b-fb957dc13f86",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "09b1dc88-5c03-4fd4-8ffe-04fff3e00a51"
        },
        "item": {
          "id": "9ac6a405-fb4d-44f3-a804-149e56385bff",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "fa8908f6-7537-4c83-a6f6-f94a6b59f000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35418356-8de1-4473-b927-2dd2a3d43091",
        "cursor": {
          "ref": "fc98f54f-3707-4a42-bb99-793b6df618ee",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a5de4802-717b-4d45-8217-3bc649d5531e"
        },
        "item": {
          "id": "35418356-8de1-4473-b927-2dd2a3d43091",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "53974987-7bdf-4dfa-8c50-0eb2268280b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56e32ab-62e7-4ef6-b00b-9f4078cb2893",
        "cursor": {
          "ref": "1f43c30c-9788-4ba2-a1b2-0cd88937bb0c",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "fd5b7917-a82a-4bbd-9e92-7b32c32d355f"
        },
        "item": {
          "id": "b56e32ab-62e7-4ef6-b00b-9f4078cb2893",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5a5259a7-2219-4a56-8ed5-c594963633ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d73fcd-b4bf-45ff-899e-6b924e12a0cc",
        "cursor": {
          "ref": "fa1c9732-9eb3-4c86-9db1-419b23924039",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ab39adf9-cff0-4de1-8ff0-fc9d72e89d6b"
        },
        "item": {
          "id": "45d73fcd-b4bf-45ff-899e-6b924e12a0cc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "cddfe784-f819-4eed-bff8-9a65add0ea61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c080bcc2-2c2b-46f8-a7e1-99e830ca7602",
        "cursor": {
          "ref": "7c754691-050e-464e-a2e2-8977c9b6b079",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "cb31b583-ce59-4966-91bb-26072e018d45"
        },
        "item": {
          "id": "c080bcc2-2c2b-46f8-a7e1-99e830ca7602",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "721e2990-8753-439d-8772-68fe0430bdff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa029dcb-b361-40cb-9ece-92ea7635354d",
        "cursor": {
          "ref": "7c181548-ea85-449f-8798-3fc545dfbcc2",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d8ebbf16-18b2-44e6-a804-ab0b60b3955f"
        },
        "item": {
          "id": "fa029dcb-b361-40cb-9ece-92ea7635354d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b720f295-b865-40db-8cb9-d5cfc7b29ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d46c91-212d-4940-b3cc-6899705ee52d",
        "cursor": {
          "ref": "289ad7b0-8575-4cda-9263-c15036fcc26c",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "402c124f-694c-4cc2-aeee-90238844e350"
        },
        "item": {
          "id": "01d46c91-212d-4940-b3cc-6899705ee52d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "87847cf4-b4b0-42b5-9c63-d2c1e651cf5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67e2f444-bc13-4f09-87b4-7f6a0d88e1ce",
        "cursor": {
          "ref": "6517dda2-3757-4e5d-aba8-03079a6f45b8",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "441c27f1-9a7e-4a55-b961-f2deb47425b2"
        },
        "item": {
          "id": "67e2f444-bc13-4f09-87b4-7f6a0d88e1ce",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2392d0eb-1dc9-49cb-b0f3-11c15a8eee78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "210b78e8-62dd-48a5-bc47-91ad9aa6cdb6",
        "cursor": {
          "ref": "0c7ceeff-4bbf-4609-a277-91b604cfe443",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "57d34fc0-6f5b-4d77-a1a5-86728409baeb"
        },
        "item": {
          "id": "210b78e8-62dd-48a5-bc47-91ad9aa6cdb6",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "58e9e64f-2cd7-40b4-b4fc-0a01e5c34939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ae9dd0-025b-4b7f-a04d-c0b8095bfdab",
        "cursor": {
          "ref": "9f25c941-47e3-4b69-829a-77787feb504f",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ba2fb8fa-3e72-446f-a949-8dae6225f2b3"
        },
        "item": {
          "id": "91ae9dd0-025b-4b7f-a04d-c0b8095bfdab",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d4509429-6905-4213-bc86-e1ab8153e797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea07e5b-850f-4e57-96f7-2d33452c07c9",
        "cursor": {
          "ref": "71f948d3-325d-473d-91e2-c0cc46200dfe",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a15de3bd-26ae-4820-b1f6-2732b5f39d47"
        },
        "item": {
          "id": "fea07e5b-850f-4e57-96f7-2d33452c07c9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a50bb48c-6b4b-4b20-8994-a0080b3b64f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27f6bb1-430a-4ebe-ae6b-1c9e5473e147",
        "cursor": {
          "ref": "1cc5dd1a-2dc2-464b-a1aa-0c718d62a9d2",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "33610165-6aa0-48f6-ad8b-442e962ac025"
        },
        "item": {
          "id": "c27f6bb1-430a-4ebe-ae6b-1c9e5473e147",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8755ea3a-2569-49b2-92e3-d030d183fcd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97edbf39-6dd2-4947-a660-2840f118ed88",
        "cursor": {
          "ref": "d6bf6298-9709-444d-bb5b-527926b9b875",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "07fb1119-e350-4c7e-88ea-c54518016228"
        },
        "item": {
          "id": "97edbf39-6dd2-4947-a660-2840f118ed88",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1b044cd0-1442-4709-921c-0ca1c376ef00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5bca460-6479-4571-bda4-f981701791eb",
        "cursor": {
          "ref": "29c28843-66d3-4f79-baad-ac31924a9421",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a128ed02-fc6c-4e61-9170-8156b3b1c51a"
        },
        "item": {
          "id": "d5bca460-6479-4571-bda4-f981701791eb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "003661f6-ca4b-445b-85a8-f41ddffeaed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f4d90a-66fc-4ee7-87ad-af02606373fc",
        "cursor": {
          "ref": "054e2aba-b671-4ae6-8b6a-6fd40d1f3455",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "2916fedb-11f1-4389-afea-67edcb994690"
        },
        "item": {
          "id": "e9f4d90a-66fc-4ee7-87ad-af02606373fc",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "397dac64-94ca-4b0e-87a0-adb8636cb310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66118cf1-91ca-4b17-ab96-b745a221b94f",
        "cursor": {
          "ref": "9255ceea-95bc-4842-bcbe-ba8786ad7091",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b206bd6b-6026-47bb-89b9-cfb9ab0a64b3"
        },
        "item": {
          "id": "66118cf1-91ca-4b17-ab96-b745a221b94f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7f29791e-ae4f-4b8b-9fd9-ad4558bd0a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36cd9845-3c91-44d2-8ff2-4400e0305ec0",
        "cursor": {
          "ref": "e0d9e5c6-5c28-4d22-8fee-975078ce790e",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6fe51525-de73-4c01-92ea-4a7ce761ec28"
        },
        "item": {
          "id": "36cd9845-3c91-44d2-8ff2-4400e0305ec0",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d958be0e-21d9-4e06-9c98-58681dfc3318",
          "status": "Created",
          "code": 201,
          "responseTime": 835,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2f25fc55-ac2d-4471-8908-945763cef95b",
        "cursor": {
          "ref": "df499797-c482-4589-862d-1d9fbd1a8aa8",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "182feaee-808f-4e5b-8d61-30c1429f471c"
        },
        "item": {
          "id": "2f25fc55-ac2d-4471-8908-945763cef95b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2c293890-dd68-4ee3-84cf-a56392067f66",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "eccc408d-7c59-41b3-8423-18b6d903746b",
        "cursor": {
          "ref": "62a39c70-aefe-46d8-9159-6f6760200590",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9c5c3758-82e5-4416-8d41-7a64ef8ee5e7"
        },
        "item": {
          "id": "eccc408d-7c59-41b3-8423-18b6d903746b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e55de114-bd83-435b-a585-42a4788ceec4",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "7858901c-df71-4c95-b42c-8f284b99141b",
        "cursor": {
          "ref": "a9ea91bb-f111-460d-85ee-c3a24cc2f274",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "74572be1-997e-421e-b8c7-37ff1a6e2071"
        },
        "item": {
          "id": "7858901c-df71-4c95-b42c-8f284b99141b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "3639511f-a79a-48e4-83e5-8e96382becbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e71f93-d0b2-4745-b7df-5ed459da91e5",
        "cursor": {
          "ref": "2c9df347-0bd1-4417-b069-1e96be401286",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "04a452e2-aa3b-4abd-ab63-dc1067e8ec07"
        },
        "item": {
          "id": "03e71f93-d0b2-4745-b7df-5ed459da91e5",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c3be66ee-4016-4725-9379-797034b18892",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "0d22bcb3-ad72-43bb-ab0f-84d84a8a02ec",
        "cursor": {
          "ref": "30d2a12a-2a0b-4076-96c6-8387aa9ddabd",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "509be5c9-2f3f-43ef-bfea-7cd46f72c496"
        },
        "item": {
          "id": "0d22bcb3-ad72-43bb-ab0f-84d84a8a02ec",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "52bb56e8-5ede-434f-83a1-05cb1e312c6b",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "70235633-200c-47a8-9d16-0263b2f1090e",
        "cursor": {
          "ref": "aed00a4e-204c-47e1-82e7-30ba292a4ebb",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "91ff22f6-9bf6-4f96-b4c6-f117bfa50dd3"
        },
        "item": {
          "id": "70235633-200c-47a8-9d16-0263b2f1090e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2cb03a38-a7a2-43c8-be59-e35f79b35e0e",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "fc3fe38e-37ee-4d16-87e2-ad17f6405350",
        "cursor": {
          "ref": "d1700b96-4346-46a2-911c-0a9587bb12f6",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "55036d26-c28d-414f-9fa0-dcce2ac8de50"
        },
        "item": {
          "id": "fc3fe38e-37ee-4d16-87e2-ad17f6405350",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1fc60e28-dcf9-4de6-a9d0-3caa1cd6d40b",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "3ada5799-5901-458c-9415-8c2e95fce13b",
        "cursor": {
          "ref": "66c2d5da-8312-42ba-bfd2-4671b16089c5",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8c545b80-aaf7-4d30-b460-5904e439753d"
        },
        "item": {
          "id": "3ada5799-5901-458c-9415-8c2e95fce13b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2e0f79bb-86a7-4f5a-8122-88d08f14150c",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "cbc82292-8a04-403a-9546-0dc7a573272d",
        "cursor": {
          "ref": "02340c7e-6897-484d-82c7-2648e58622b8",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9783876b-33f3-4b62-afef-652487578c79"
        },
        "item": {
          "id": "cbc82292-8a04-403a-9546-0dc7a573272d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "60affcc1-194b-49f9-ab7b-55ce7d855252",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a4dd2a01-cc1a-42cf-8840-83c10e81b6b9",
        "cursor": {
          "ref": "79ece388-15c6-4c0a-990c-534da0131307",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a69af298-d786-46c1-9bec-a23b3703bbcb"
        },
        "item": {
          "id": "a4dd2a01-cc1a-42cf-8840-83c10e81b6b9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c70cd82b-f21c-416e-9fd8-4f5303048319",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c7d4de92-28ae-4048-8a29-03400b286ef0",
        "cursor": {
          "ref": "f6db9abf-f342-4651-a03a-1c4611cc1fae",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a70be836-c778-4087-b328-477f1a58738b"
        },
        "item": {
          "id": "c7d4de92-28ae-4048-8a29-03400b286ef0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "da6b0513-151f-4685-8c6f-5ed3498d0dd2",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "3f7be196-3369-4402-8660-ec1e95e76b01",
        "cursor": {
          "ref": "6864ba82-9a0a-4d8b-a795-d4b372195c12",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2f14fcad-dca1-41bc-800d-35a3b8c09faa"
        },
        "item": {
          "id": "3f7be196-3369-4402-8660-ec1e95e76b01",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "62a40a1d-236c-430d-b001-f08d2177f1e5",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d2bbe961-5458-4e5d-a5be-aab25328964e",
        "cursor": {
          "ref": "95e1b3f6-02ab-4e44-876d-357f11ef42bb",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8272d373-3d3d-4381-a1b5-97f2e2318cce"
        },
        "item": {
          "id": "d2bbe961-5458-4e5d-a5be-aab25328964e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "36a60d03-6232-4727-ae66-bbc04cf4c6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11db610d-7cf4-4b14-abf9-f4077195ca2a",
        "cursor": {
          "ref": "0ad1e027-38e4-47a3-8c45-36bef802f02c",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2553370c-bd8b-4ccc-a062-ca52faeab704"
        },
        "item": {
          "id": "11db610d-7cf4-4b14-abf9-f4077195ca2a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "da55c834-2ed4-4b58-baef-3af94c44a6bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca356c19-cec4-4b24-aff2-46eb02fb5e07",
        "cursor": {
          "ref": "9b19e30d-ac74-4ebc-885e-8bdc6aca002c",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b8e1d078-f44a-4a39-a377-90bc00861ba8"
        },
        "item": {
          "id": "ca356c19-cec4-4b24-aff2-46eb02fb5e07",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ddfbfca2-2525-428a-b5f7-552d0de1a866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7816054a-1d9a-46d0-b789-c52e7a91514c",
        "cursor": {
          "ref": "49f468db-921b-421e-84fd-aae4f1b8dd5d",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3eb62834-1c82-4539-9109-9d87a5c536b7"
        },
        "item": {
          "id": "7816054a-1d9a-46d0-b789-c52e7a91514c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1d238f45-f97c-45ce-b9e0-71d6879ad8bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b0ffa28-b3ef-4ac4-b205-acfae3b9f10a",
        "cursor": {
          "ref": "60e1597c-a441-457e-b5e0-768debb1c806",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "97d11c9a-b088-4e34-bdd9-bfc4cbea9e98"
        },
        "item": {
          "id": "7b0ffa28-b3ef-4ac4-b205-acfae3b9f10a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5d8515fb-0a73-4c4c-b489-02995a405386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef9c28e4-7086-4ee5-9b2b-84612de11efb",
        "cursor": {
          "ref": "e3bc490e-ba0b-4934-81b6-ed52ee628067",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b004a4f8-79e0-492d-acff-069a85d5c07b"
        },
        "item": {
          "id": "ef9c28e4-7086-4ee5-9b2b-84612de11efb",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9a7a8e30-8bfb-4b62-8270-ca8d7a223fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9bda8c-d238-4523-bc35-5ab6ad0399a2",
        "cursor": {
          "ref": "937fd367-4465-4edc-a38b-dfafbb353fbe",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4679bc0c-2108-484e-8cca-50dcaedf946f"
        },
        "item": {
          "id": "eb9bda8c-d238-4523-bc35-5ab6ad0399a2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b4a7d6d4-2dc2-4607-8ccf-f7ef7bade7f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987268d9-d529-4baa-8e68-5783ef491d67",
        "cursor": {
          "ref": "02667631-69d3-48b2-ab1c-0c8127316c73",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "90a2c9d6-97fd-401f-9434-c5ecf1fef51e"
        },
        "item": {
          "id": "987268d9-d529-4baa-8e68-5783ef491d67",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "29189cae-7a4c-4c3c-9163-c68701409501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5531c776-1fb6-4279-b4a0-7d16d56680dd",
        "cursor": {
          "ref": "0813262d-843e-4470-9332-5c8e4872c0ac",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "94dd7e99-e89d-4c73-b666-9b59353a1c9b"
        },
        "item": {
          "id": "5531c776-1fb6-4279-b4a0-7d16d56680dd",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "cad83114-3d84-42aa-92c6-892555ed623e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2026ffbb-a0b7-4124-825f-8f6e3677ca3e",
        "cursor": {
          "ref": "e76d9fb8-a459-479f-8144-c7fcca5fbe19",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7684cd5b-6408-465a-83a2-a931b48fa984"
        },
        "item": {
          "id": "2026ffbb-a0b7-4124-825f-8f6e3677ca3e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6cca0374-bc11-47e8-858a-768c3da01875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d8bd1c-b7e1-4650-9798-61f2f81f0324",
        "cursor": {
          "ref": "2398cb04-5471-4ddc-9858-4535a24adda0",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "dd710154-b464-411e-b474-aa6303c383f9"
        },
        "item": {
          "id": "64d8bd1c-b7e1-4650-9798-61f2f81f0324",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3205263d-d5b5-475c-b14e-f6f5b8141ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "436421a9-6b9f-4556-a65f-5d9bef255d26",
        "cursor": {
          "ref": "f02f7d9d-287d-4a9e-9e46-24691bc4c0ca",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "986cff12-96bd-4e5d-91b3-3ba15af2dd34"
        },
        "item": {
          "id": "436421a9-6b9f-4556-a65f-5d9bef255d26",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "32108f42-c023-4643-b742-5f647dbe73fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e399509d-e4ce-433d-9a10-7a32f49252d2",
        "cursor": {
          "ref": "dc174e60-32b2-4c19-816d-874d3e790d05",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "444b27a6-c48f-4c5c-929e-19eb194944a0"
        },
        "item": {
          "id": "e399509d-e4ce-433d-9a10-7a32f49252d2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b4b43e94-4b6d-4c40-8bb4-f1f37f7ab00b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44848872-1119-4401-980e-096bdf4b72d6",
        "cursor": {
          "ref": "71a89809-4d86-48d1-afe7-a46f76a5d4f9",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0b37f179-4dc3-4fc5-b7a9-7a0e537fb899"
        },
        "item": {
          "id": "44848872-1119-4401-980e-096bdf4b72d6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7cba7a99-f1ec-42bd-b892-00106448242f",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "5a3e6bba-d218-4625-bd71-87c2d58d3c3b",
        "cursor": {
          "ref": "7a089838-cf5b-4944-b82f-6dc5a35344c4",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "91e9e0e1-c1d4-4550-b73f-cfcebfe4bcf7"
        },
        "item": {
          "id": "5a3e6bba-d218-4625-bd71-87c2d58d3c3b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "656554e0-1b07-42cc-84a7-76ac0b099637",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "837a8cde-0612-44d2-bfed-5a0f0d3f880f",
        "cursor": {
          "ref": "9cdf6b28-95b4-4e14-a5e7-aab4a11f92b4",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b2f288ad-5a73-4029-ad9b-ae6939fe0b6b"
        },
        "item": {
          "id": "837a8cde-0612-44d2-bfed-5a0f0d3f880f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5fe2e9eb-7641-4eeb-84e5-3755c1134250",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "3c2ce04d-a53a-4f30-a18f-b70f9ea03c46",
        "cursor": {
          "ref": "e4488453-0976-49b0-86eb-444414feb5ea",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7cda59e8-72d8-44e3-a3e6-b46086136858"
        },
        "item": {
          "id": "3c2ce04d-a53a-4f30-a18f-b70f9ea03c46",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "cbf580d4-0f3f-4e2b-9278-12cce8bb19b4",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "a160940c-88c2-494e-850a-216329f1a43c",
        "cursor": {
          "ref": "9ee8ee2c-57ed-48ca-b1a4-0f773e5aad41",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ebdc8dcc-24d5-44b5-912f-654554eff398"
        },
        "item": {
          "id": "a160940c-88c2-494e-850a-216329f1a43c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3f3723fe-e87d-4fc9-961d-f33d507c1a7e",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "c5642c7f-10c0-4079-b231-3a716b58dc94",
        "cursor": {
          "ref": "1d9ecae2-7618-4b75-a1ad-bacb6ff56b13",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5536a3dd-0c04-4f40-a2b5-062c2b95761a"
        },
        "item": {
          "id": "c5642c7f-10c0-4079-b231-3a716b58dc94",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7da30245-93e4-4cd6-bfcf-b30b31de259e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66fe9c4b-15d7-4513-a12f-fbdb8876460b",
        "cursor": {
          "ref": "53b7279e-1037-4e9c-9331-43130578b095",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b94aecdb-df7f-4503-a0c2-455e2e861eeb"
        },
        "item": {
          "id": "66fe9c4b-15d7-4513-a12f-fbdb8876460b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "adc95eab-7d37-4b2e-82f9-d57d24778efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09867456-d14d-4b71-a5d1-70a5fee2a9fb",
        "cursor": {
          "ref": "bef11901-ed3f-46a3-a080-a2b784eed628",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4562230d-94cb-490f-b167-b326bd80cd22"
        },
        "item": {
          "id": "09867456-d14d-4b71-a5d1-70a5fee2a9fb",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0014d9a8-cfb3-4829-b440-bae318e94edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40c374d-dd64-4796-89dd-ceaf859471e7",
        "cursor": {
          "ref": "d37198ef-df0f-49d9-9340-5653d8ced97e",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "47599127-5ce9-44ed-a8b1-2fff61916faa"
        },
        "item": {
          "id": "d40c374d-dd64-4796-89dd-ceaf859471e7",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "cc13334e-a17e-441e-852c-18013989d85e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6b27aa-5bb4-491c-bd7d-69ebe91380ca",
        "cursor": {
          "ref": "67b48e85-0ae4-46cd-8392-59b2ba749864",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "67f66a62-aa74-4e02-bd18-c0eb8ccbcf3c"
        },
        "item": {
          "id": "4a6b27aa-5bb4-491c-bd7d-69ebe91380ca",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d8d00732-0209-43c5-9bf6-f09d16fcf989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b79807-7fa8-43f2-a2d2-6031b789855d",
        "cursor": {
          "ref": "626d1c58-60ef-46b5-8a55-a2b01350f2c6",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d8208f0f-a85e-47da-aa36-4de3b87e8c50"
        },
        "item": {
          "id": "72b79807-7fa8-43f2-a2d2-6031b789855d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6350b403-ee2d-42f6-aca3-3b7fbcbe7063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4429d3c1-ac4a-4e78-8b7a-96be0d8aaeac",
        "cursor": {
          "ref": "510bb190-2711-4e3a-9af2-1e31c091de89",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a3fcc7c4-b0dd-4516-ae6d-be246ba8393a"
        },
        "item": {
          "id": "4429d3c1-ac4a-4e78-8b7a-96be0d8aaeac",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "25c8c237-8a05-45b0-a887-8b81d8bcae0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a864296-df35-4465-9854-acfc3f3a5473",
        "cursor": {
          "ref": "c733d304-6dc7-4768-889c-cbd9e6df73fb",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "88885f3a-d178-43a9-86d3-ba6c04b6ef95"
        },
        "item": {
          "id": "4a864296-df35-4465-9854-acfc3f3a5473",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e8832570-08e1-4eef-8e0a-74c99a51add3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2368db-a08c-4d77-bfaf-a40f4864684f",
        "cursor": {
          "ref": "439b9236-fbd5-4fc0-b870-d46dafddcb04",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8112acf2-a5d5-42a6-b235-8fe73e033ca6"
        },
        "item": {
          "id": "0c2368db-a08c-4d77-bfaf-a40f4864684f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "fcb55681-b973-441d-a5b8-3d8862f39e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74beb26c-a9d6-40ac-927f-bef03f9a6048",
        "cursor": {
          "ref": "287d5187-77b4-4748-ba9c-641b8f42923e",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "479dc099-4ebf-49d0-9086-b1ef054a5a8c"
        },
        "item": {
          "id": "74beb26c-a9d6-40ac-927f-bef03f9a6048",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7b45c138-1efd-42ff-914b-3a28e0d535ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b8aa13-b970-46dd-8c3d-1daa7e36eeff",
        "cursor": {
          "ref": "93d0e803-3eea-43ce-a6a1-2a86430388d4",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "64e1bfe7-cad4-4c56-8a2d-5c3d3e957546"
        },
        "item": {
          "id": "d8b8aa13-b970-46dd-8c3d-1daa7e36eeff",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3016a2d1-5f0e-4f53-8036-ba7371aa1045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b764a7-ac9b-43fc-a7c7-9f8c48b1c39b",
        "cursor": {
          "ref": "80d26ad8-1540-4c81-8daa-99b14dd95a1a",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "10ffc9cd-0e85-42d4-bb62-ce65e936b431"
        },
        "item": {
          "id": "d8b764a7-ac9b-43fc-a7c7-9f8c48b1c39b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2af615b8-ea71-4961-8da5-01d9b0cc9a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045d8c50-5423-4537-9604-f8f7dc0f8cac",
        "cursor": {
          "ref": "1e63f079-ad97-456f-bd87-a6101d9c63d7",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b9dfa2bd-4451-4f03-bd7b-5312b591cf04"
        },
        "item": {
          "id": "045d8c50-5423-4537-9604-f8f7dc0f8cac",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b947f402-f0e8-4733-beb1-0bf3f1f39fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "682cfa6a-5b76-47f0-8381-61264c618db3",
        "cursor": {
          "ref": "698659b9-ba4d-42c0-b249-acc40855a65f",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c320ec6f-4006-4b13-abed-6c788ab46bbc"
        },
        "item": {
          "id": "682cfa6a-5b76-47f0-8381-61264c618db3",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "cf03dc65-c2f2-4871-9afa-bd61e9d2e835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e40f03c7-2877-4ef7-a13f-0ceb4f913bfe",
        "cursor": {
          "ref": "acdf6a2a-2a76-4167-8035-5963caa748b4",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "75ffa291-3efe-47c3-bc96-30ad293ef72e"
        },
        "item": {
          "id": "e40f03c7-2877-4ef7-a13f-0ceb4f913bfe",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4dbe6364-e6bd-4c54-ab78-622b6179463f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a0563a-35b5-4008-8503-196282994bf3",
        "cursor": {
          "ref": "e429fb3f-c30a-4af3-a633-abe6988eb1f0",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "bb9f974b-5a49-411c-a89d-a1c3f04ea8af"
        },
        "item": {
          "id": "e1a0563a-35b5-4008-8503-196282994bf3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "75c2462c-21a5-4b89-9ada-3ab1535e24a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd44f616-27b1-419d-8bfc-2cfec4a8dbc0",
        "cursor": {
          "ref": "59ed8c7e-c443-4a80-bfc5-b88e06ffd632",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b5e3750b-58cd-43ed-b036-038a6b72bb1d"
        },
        "item": {
          "id": "bd44f616-27b1-419d-8bfc-2cfec4a8dbc0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ce97ce32-3d6d-4224-b384-9552d596e828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c337fe9-c427-4b47-9451-a1e77082edba",
        "cursor": {
          "ref": "a43aa459-cf1c-486a-a45d-198c1520afc5",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e7496dfb-392e-43e6-b0bc-ccbb8ef8fc12"
        },
        "item": {
          "id": "9c337fe9-c427-4b47-9451-a1e77082edba",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d53a76d5-aead-42fa-81ad-9a366f94386f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b582cd14-f814-42c0-b7ff-b81a877d2f62",
        "cursor": {
          "ref": "3cdfc48e-d5cb-424f-82cf-ac5988b47f93",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f8d923b4-2c6c-4b51-b700-7f1a06ac11b7"
        },
        "item": {
          "id": "b582cd14-f814-42c0-b7ff-b81a877d2f62",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5601575c-656d-41eb-b6b3-513bd016be09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "280682af-6fe9-48e6-8aa1-2e051760c10e",
        "cursor": {
          "ref": "1e875059-e5d9-4628-8003-65beee3f9544",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c8a58da5-64f2-4f2a-af0b-b73b07778537"
        },
        "item": {
          "id": "280682af-6fe9-48e6-8aa1-2e051760c10e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "26231313-eba0-4bf7-be3f-34d6d5b1399b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d2927e-275b-4f21-8751-1ce182546946",
        "cursor": {
          "ref": "b55391af-964f-49bd-aabe-187a48a5bc2c",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "79da0017-0873-4a54-a853-5cbc014b8384"
        },
        "item": {
          "id": "91d2927e-275b-4f21-8751-1ce182546946",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "11a54f8b-4bd7-4312-9e08-21b9521bb37d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9071b8-9c5b-41fa-9694-7c38454f48ab",
        "cursor": {
          "ref": "cf53b8f9-a33d-492b-83cd-7839fcdfbc17",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4a391aaf-7289-45c6-9b1e-fa1fc6d34dbe"
        },
        "item": {
          "id": "4e9071b8-9c5b-41fa-9694-7c38454f48ab",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "61eaeb79-abee-4b8f-92b7-75b75466a4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e9e965-3ec6-4d4d-9fcf-10076517976a",
        "cursor": {
          "ref": "ae209285-5691-4dc2-98c3-7944863f598a",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "6e161fa4-e906-43fc-95a2-d1b68ba135e8"
        },
        "item": {
          "id": "b0e9e965-3ec6-4d4d-9fcf-10076517976a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5d5f4131-490c-45d6-8296-7fcce344eb74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f82724-4f67-4b8e-ba86-89d8d1352a36",
        "cursor": {
          "ref": "c90dd8ce-cd84-49e4-b8e4-d8bf9ef579a2",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "950da0e7-0b1c-4a8d-8881-be0eb322cadd"
        },
        "item": {
          "id": "c3f82724-4f67-4b8e-ba86-89d8d1352a36",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e41afcd0-0b3a-4e70-a216-2bb871c2f475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "415210f8-a15d-48b1-b53d-5843041a7de5",
        "cursor": {
          "ref": "591276df-b399-468c-9f5b-2c988439871b",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e94663fe-454b-4591-be6e-1965a3aa885d"
        },
        "item": {
          "id": "415210f8-a15d-48b1-b53d-5843041a7de5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "cb4746e1-6975-47a0-855d-6017806f017c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a7250c5-0fd9-4654-84e9-efed2574a7c5",
        "cursor": {
          "ref": "e0cf6bde-b4ae-4b18-9086-7f6ac37cea33",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "49cd0d62-ef6f-4719-883b-c08430e6ffd4"
        },
        "item": {
          "id": "7a7250c5-0fd9-4654-84e9-efed2574a7c5",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "663839a6-d50a-4ab3-8a59-77174c2efd11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2f94f3-b31b-4dca-997f-fbd40e278057",
        "cursor": {
          "ref": "8cdab383-3819-4311-a7cc-84293abdf556",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "041db7ee-9636-4ed1-b2bd-fff2cfe9edf6"
        },
        "item": {
          "id": "ed2f94f3-b31b-4dca-997f-fbd40e278057",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0482b7d0-03e0-40e5-b333-f0cbe8f9f0e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf1aded-9f0e-4788-9b0c-68f3cf25f264",
        "cursor": {
          "ref": "d084d97d-b756-4e4f-9039-aa2299ba8cdb",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "dd95957c-5869-4a90-a639-5fad376e2b97"
        },
        "item": {
          "id": "ecf1aded-9f0e-4788-9b0c-68f3cf25f264",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2cc8cafe-cb3d-488a-9ed1-941b331900e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf052dd-4ccc-4635-a281-cef79d7fcc8d",
        "cursor": {
          "ref": "eaf6cd36-dc0d-4b77-b3a6-ef192e409a5d",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7911fa4b-9252-44b9-88f2-d5121d158f96"
        },
        "item": {
          "id": "3cf052dd-4ccc-4635-a281-cef79d7fcc8d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3056a953-af1b-41eb-aea7-8e2a179fdf57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4114c343-4ca2-4b87-9f50-57faaf098ae3",
        "cursor": {
          "ref": "ae931867-040b-4105-b5fd-ad58bda966c5",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e0ed2163-1334-4153-bb02-35dc94e7e8fe"
        },
        "item": {
          "id": "4114c343-4ca2-4b87-9f50-57faaf098ae3",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5595dfe1-b1bf-45ac-9455-ee7bc6ccf805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8996609d-ba39-4482-b6eb-7c27d069579d",
        "cursor": {
          "ref": "2a0fd97a-2d7c-42f3-9cfe-5cf4ee263968",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "20844407-4cd3-4c56-871c-b72acd18b02f"
        },
        "item": {
          "id": "8996609d-ba39-4482-b6eb-7c27d069579d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6d43f6a3-b837-456b-a6d8-77bc86cdf03b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a3c40c-e80b-4135-aff4-3d3eabf0c82b",
        "cursor": {
          "ref": "6edd4280-c703-48e9-9383-8119632bbcb3",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7815ac76-a3cd-4441-bacb-d83bd90c8912"
        },
        "item": {
          "id": "d6a3c40c-e80b-4135-aff4-3d3eabf0c82b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f910ed67-1a04-48f1-8ee9-30fb2f198839",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a53e8d-f9f1-42cb-9995-ff449e36261c",
        "cursor": {
          "ref": "bc398c5b-d052-4f34-b54a-aaa5d2b03c0d",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "550f980c-62d5-4b84-842b-497164d89c0f"
        },
        "item": {
          "id": "81a53e8d-f9f1-42cb-9995-ff449e36261c",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "57c7ed00-5b2e-4697-8003-cab65d08b7e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "b0271672-8b7b-42ac-80fc-c63a67c3e65b",
        "cursor": {
          "ref": "85b10ca6-3675-4d42-a353-a3949399dd29",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a56e599e-347a-491a-bc89-80e835d41e46"
        },
        "item": {
          "id": "b0271672-8b7b-42ac-80fc-c63a67c3e65b",
          "name": "credentials_issue"
        },
        "response": {
          "id": "164cebc7-cb66-4b4d-92e3-992c9ca92a1b",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2935c4d5-b04f-421b-9347-8aa9a6e9d21c",
        "cursor": {
          "ref": "542739f2-021e-4517-83ed-313c97e66452",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e0c3929b-854b-4db1-afcd-74224b488aef"
        },
        "item": {
          "id": "2935c4d5-b04f-421b-9347-8aa9a6e9d21c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "938661b7-1007-4a25-bc7c-24ae53ea88e2",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "535ae43d-6beb-43b2-899e-9e95e03039f9",
        "cursor": {
          "ref": "5b27ad26-9f0e-4da1-bb82-b6fa991fee7c",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e191288e-d204-4297-86b1-803e1f79df64"
        },
        "item": {
          "id": "535ae43d-6beb-43b2-899e-9e95e03039f9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "526c2ccd-f34d-4506-8cb4-9adcd93644c4",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77a2160-d8dd-437f-9b54-66b5688b1e8c",
        "cursor": {
          "ref": "202485e9-5700-480b-9e8a-aec90d941dcd",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "64c35782-189e-4402-9649-5e7e71660c95"
        },
        "item": {
          "id": "e77a2160-d8dd-437f-9b54-66b5688b1e8c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c1bb72bf-2508-4eb3-9c54-272418f03499",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6890b99-f0ae-497d-9351-5433a9fe5bd8",
        "cursor": {
          "ref": "ab014622-74d4-4e08-83ff-90443234c156",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2944f3a1-db78-4d2b-8d9f-b2a6af0ac59b"
        },
        "item": {
          "id": "b6890b99-f0ae-497d-9351-5433a9fe5bd8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b0edd55d-6a5d-49ca-8d0a-01f0db98e955",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-29T00:34:40.807Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-29T00:34:40.807Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "0704b099-bbdb-4396-b147-e4103b9c667e",
        "cursor": {
          "ref": "fec442a6-bf07-4dcd-bed2-01539a212500",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3d6baa2e-dd36-47ec-a32f-baae1ee4f137"
        },
        "item": {
          "id": "0704b099-bbdb-4396-b147-e4103b9c667e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3886e53a-3074-468d-be9d-8c59def132ed",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de44eaaf-ac6a-4e8f-ae1a-d5610fcb42ac",
        "cursor": {
          "ref": "f0a0adf4-5527-44c5-86ac-0cbd7858f0ef",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "027200ad-803d-4469-afb5-6e5b283d21cc"
        },
        "item": {
          "id": "de44eaaf-ac6a-4e8f-ae1a-d5610fcb42ac",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f17d2793-0a34-41fd-a597-12629d76519f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f84e704-c923-4ea9-8ada-e91e085f0a0d",
        "cursor": {
          "ref": "907aea28-76cc-4cd5-b5e7-b7b1bec1c862",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c80431da-9400-4b3f-a702-c8699887d74e"
        },
        "item": {
          "id": "9f84e704-c923-4ea9-8ada-e91e085f0a0d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f503c706-40a9-4adb-9d66-312217e31c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1dac3b-9c98-4c17-8f96-567dcadd9310",
        "cursor": {
          "ref": "1b4ddc0f-a8b3-4389-8c91-207e1d7bf647",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "fd19db02-0993-4ef1-9c96-309fae1a83a1"
        },
        "item": {
          "id": "1f1dac3b-9c98-4c17-8f96-567dcadd9310",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "63cfba31-5582-4904-ac56-324e00ddf9c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64fd8576-cfb2-4e7a-bb02-b2e7df4e59a2",
        "cursor": {
          "ref": "242d09e9-95eb-42fa-ac2b-c6c7c652e7c7",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "044a3147-fa7a-45ce-8766-f1a0bee5c741"
        },
        "item": {
          "id": "64fd8576-cfb2-4e7a-bb02-b2e7df4e59a2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "173c2edf-9850-48cc-9d4a-1e682c16059e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809bb7c2-8e81-49ba-ac3f-5138e5f8846f",
        "cursor": {
          "ref": "289c2832-501b-409e-991f-8afb390d8fef",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "129dab50-475f-4d48-a54b-719d8030fd6d"
        },
        "item": {
          "id": "809bb7c2-8e81-49ba-ac3f-5138e5f8846f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1cfab78c-9e8d-4186-9b15-f436d0daa8d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71dc3e94-408c-403a-95c8-a42a551ea64e",
        "cursor": {
          "ref": "c3d42589-8d7e-4bf2-ba62-7417dbc8df98",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b55e2104-7f69-427d-9992-28e325ed35eb"
        },
        "item": {
          "id": "71dc3e94-408c-403a-95c8-a42a551ea64e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a47e6899-4b6c-4ca9-9b7e-d41edd223d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5355b64e-786b-43ad-94e4-bd1f40f22986",
        "cursor": {
          "ref": "2c4d55df-4b64-4cf7-b4d4-c6739f433dbb",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c902864d-f56f-4de2-9810-0da74eab9fce"
        },
        "item": {
          "id": "5355b64e-786b-43ad-94e4-bd1f40f22986",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "444e4e8e-ea62-423f-8799-5b9ee007cc62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b80b2f-dd2c-4a78-9454-1c768e01902b",
        "cursor": {
          "ref": "a5a05e71-ba6e-43f4-96ff-e654c475db28",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d8d95189-5181-498d-99a1-b7455801f837"
        },
        "item": {
          "id": "e6b80b2f-dd2c-4a78-9454-1c768e01902b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e65675cc-384b-48cf-bd54-a5fadb6ea767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a27b566-6feb-4ad8-b7ae-4487a9e1d734",
        "cursor": {
          "ref": "2aec0c76-670f-4762-a347-54fe5323f233",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "e18fbd0c-4af6-4ef0-a8d7-b4eae537aa32"
        },
        "item": {
          "id": "2a27b566-6feb-4ad8-b7ae-4487a9e1d734",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "11aa90a7-c4a0-4fb6-ad44-c6fc189e1a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08b9422-65aa-43d3-9740-deea026a6caf",
        "cursor": {
          "ref": "c2ed6f90-6e93-4185-a5c2-6b2012dfe84a",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "becc74d6-2e14-404c-bc0a-b955f19b983e"
        },
        "item": {
          "id": "f08b9422-65aa-43d3-9740-deea026a6caf",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e941ed73-e4ea-41f1-95ca-e7ddc36f454b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ec3b87-b5ed-41f8-83c1-b40681e91265",
        "cursor": {
          "ref": "d8dde779-9127-4e75-8ed6-d37bc6ae2d1f",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8f440fd6-e813-43d2-9f66-5ce4de01c80f"
        },
        "item": {
          "id": "35ec3b87-b5ed-41f8-83c1-b40681e91265",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6c35e222-e966-413b-84ca-cf300179660e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ed15ad-50ee-4680-b442-22a052d88353",
        "cursor": {
          "ref": "224667b0-8f6d-433b-82c1-a5780e0067e4",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3693c6ae-2969-4dc5-a532-93d163ea2a12"
        },
        "item": {
          "id": "b1ed15ad-50ee-4680-b442-22a052d88353",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9fdbe42f-5020-45a3-802a-7cad53fe1e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4451d7bf-4991-4bea-882f-a41c9e8e9331",
        "cursor": {
          "ref": "14134c00-f607-4249-a223-31b05330fb0b",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d0fd7931-a9b4-4c84-9ae0-22c75908154c"
        },
        "item": {
          "id": "4451d7bf-4991-4bea-882f-a41c9e8e9331",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "21acfde6-e629-467a-ace1-98c5dedac889",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 132,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "15a7e341-e77f-421f-b8c7-5b1618aff032",
        "cursor": {
          "ref": "ee0bce27-487b-4089-b184-e96e28ffd167",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "30486ead-50c3-4232-95df-52f78f877f44"
        },
        "item": {
          "id": "15a7e341-e77f-421f-b8c7-5b1618aff032",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f3d9a8bc-6b66-44e1-84b6-6e9336997294",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 142,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "b05a6830-f349-413e-88d4-a65a98e1afc9",
        "cursor": {
          "ref": "22f332dd-31e5-462f-a34d-a9be239889cb",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0c627bc4-5192-4f71-a976-5f95de240522"
        },
        "item": {
          "id": "b05a6830-f349-413e-88d4-a65a98e1afc9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c7325b2e-c34c-4a08-ae45-b595d9960642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e9e9cc3-a0d6-44da-876c-b0c533152436",
        "cursor": {
          "ref": "c00174c1-8f5c-464c-a623-5c222a7f4e8f",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "529b9f43-7e7b-4248-8d78-73fe0226df62"
        },
        "item": {
          "id": "2e9e9cc3-a0d6-44da-876c-b0c533152436",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0460d5c9-f515-4fd4-b258-d8834e02696a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7fee3b1-c2a7-4b6f-bfc1-8dbbe1676094",
        "cursor": {
          "ref": "653a6af8-f9f1-4aae-bdcd-aba58dc171a1",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9c0e3bf7-ca50-4bab-a1a2-cb61b099855f"
        },
        "item": {
          "id": "f7fee3b1-c2a7-4b6f-bfc1-8dbbe1676094",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c9da2452-fbdf-421a-bae0-6e7951ae35b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4793ab86-a023-4821-9ffe-eb0b946023ad",
        "cursor": {
          "ref": "83c69ade-c569-4b24-8e6b-03b96fc78bc8",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "35d608ac-6b29-48b2-b275-db37692eba77"
        },
        "item": {
          "id": "4793ab86-a023-4821-9ffe-eb0b946023ad",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4e22b1cc-be22-4b9c-8fa8-ce2a9fc815c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee4f937-9baa-445c-a2ac-189e2e15632c",
        "cursor": {
          "ref": "a7e7cb8c-9a42-4c0b-be6a-715e5aba727a",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e293e5e2-beab-4acb-b76f-9282e771c7e3"
        },
        "item": {
          "id": "1ee4f937-9baa-445c-a2ac-189e2e15632c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f6393046-a520-46b3-9d8e-4ba4a71f9c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb3d64f-1c60-4566-9c89-42a8d19caf94",
        "cursor": {
          "ref": "9138cc6b-0b93-4545-9338-b0273a3c3886",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "04bc39e7-e475-4356-bd3e-5fc277496bed"
        },
        "item": {
          "id": "adb3d64f-1c60-4566-9c89-42a8d19caf94",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "58528137-a40f-417a-81fa-afbfab00898d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f1aefa5-ed42-4433-91db-2dec5c8d8221",
        "cursor": {
          "ref": "19f5234b-8e4d-491f-b288-2e550d5920ab",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "55c4fc18-4a4b-41e5-95ce-2f1db467780d"
        },
        "item": {
          "id": "6f1aefa5-ed42-4433-91db-2dec5c8d8221",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "811f94fa-59cd-4452-9acf-2f0933a8a735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4989120-c592-4827-bd33-32badd63ce68",
        "cursor": {
          "ref": "cf2f921e-8c44-4699-bcd8-2cbc16debf0c",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e631b302-7b86-4429-b42e-734a5c13bb25"
        },
        "item": {
          "id": "c4989120-c592-4827-bd33-32badd63ce68",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bae44211-8ccd-4c19-b117-c689617289d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54dc0153-1929-4558-a78d-902c7572008b",
        "cursor": {
          "ref": "6fd6d40b-d23e-485a-8a4c-0f623e8f6424",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "38277cb2-652c-42da-8869-1dd99df0c002"
        },
        "item": {
          "id": "54dc0153-1929-4558-a78d-902c7572008b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2d28b4c0-1d57-4aa6-ad70-eca3def8e99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba32d2a6-e52e-4bc5-b708-537ab0acf72a",
        "cursor": {
          "ref": "a650e485-77e2-4389-96f4-627f901efa6e",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f3240ffe-a979-40a2-a9e5-745959c67cad"
        },
        "item": {
          "id": "ba32d2a6-e52e-4bc5-b708-537ab0acf72a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "aa3626ff-183b-4dde-bacc-748489bd45f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d16d48-3620-4433-8549-33e39945d418",
        "cursor": {
          "ref": "cfde0ff0-51c3-4b0f-befa-3c8a2010af4a",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "342cea4b-1ebd-41c9-8180-9fade78f11e5"
        },
        "item": {
          "id": "d0d16d48-3620-4433-8549-33e39945d418",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "71dbf1de-8f17-4864-b258-a691f9689d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84bbdbe6-bf05-4610-9e7c-550b60c55476",
        "cursor": {
          "ref": "a1485c17-9871-4160-bbcc-d65c4d990382",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2b86c3db-d9b0-4cbf-81f1-01191b70df6a"
        },
        "item": {
          "id": "84bbdbe6-bf05-4610-9e7c-550b60c55476",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3782a5a8-6e90-43bb-b7e3-ef0f48fea928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e2b5a1-40cd-4912-8920-7314dbd0af05",
        "cursor": {
          "ref": "fb001be6-8a1e-41f3-9d75-86ee6b8d7f4a",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "56e4030e-8c48-4870-9f14-d3a7404da63f"
        },
        "item": {
          "id": "d3e2b5a1-40cd-4912-8920-7314dbd0af05",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "01410f34-dcdb-4271-b4bb-571441c6acdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754f660e-d199-4881-9d2c-e2043162ed8b",
        "cursor": {
          "ref": "90308bc8-c694-4b39-a894-054da63a6009",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b5b62418-6140-4f34-8649-40610d07f498"
        },
        "item": {
          "id": "754f660e-d199-4881-9d2c-e2043162ed8b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e06929bb-f873-4856-a26f-7171476e2654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1429ea2-1965-4872-92d7-fb33d59ca68e",
        "cursor": {
          "ref": "93e5d146-2971-4dd6-8d4d-a27b1d59a6e7",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a4891458-60b7-48df-88aa-464ccf1e9cfb"
        },
        "item": {
          "id": "b1429ea2-1965-4872-92d7-fb33d59ca68e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7712b45c-e52e-477c-8f01-6c912238e443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d4dada-e41c-456f-a7bb-efa75fd22ef8",
        "cursor": {
          "ref": "12fd6eb0-1c63-43f5-b35a-4eb38f06e1ac",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "87429b82-8bcd-411d-80fb-34dbbc2ea83b"
        },
        "item": {
          "id": "74d4dada-e41c-456f-a7bb-efa75fd22ef8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f963c4f7-4265-4df6-a2a1-3392e7db9eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f58b573d-c0f8-4213-b219-19314a36c1cf",
        "cursor": {
          "ref": "07659e8f-4b8c-45d0-93b9-c33d1c7b9147",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "41c0683a-f07e-44b2-bfff-37d48749d657"
        },
        "item": {
          "id": "f58b573d-c0f8-4213-b219-19314a36c1cf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5dfbff79-1ead-487b-8711-eb6a262deb7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aba043e-3154-45fc-9e00-2e5dfca30480",
        "cursor": {
          "ref": "790b2632-dd7f-42cf-849b-b3987f11c3a4",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "af876565-e874-4050-bda9-3fd040939cd3"
        },
        "item": {
          "id": "9aba043e-3154-45fc-9e00-2e5dfca30480",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ca08b057-43b6-42e0-b345-b670563556b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 120,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "4d28c3b1-39a8-4c9f-a211-5fa41e2d8b2f",
        "cursor": {
          "ref": "d0ff8eb0-15d5-4653-90ac-a63af0fa3f84",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2783fd6f-8795-4694-98de-5a1714c848b7"
        },
        "item": {
          "id": "4d28c3b1-39a8-4c9f-a211-5fa41e2d8b2f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3a9f0667-cdf1-44d8-8ad1-7762ca79d44f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e5ab9a6-b32f-4691-8004-c7924b6d45d2",
        "cursor": {
          "ref": "25a961f1-280b-4a32-9026-3f4c983fb44b",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3a1c1be7-0011-4379-a893-9da62ea61a0c"
        },
        "item": {
          "id": "4e5ab9a6-b32f-4691-8004-c7924b6d45d2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0d86e2a5-c7db-45bc-9037-ea8f9d84f418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e135b7-9369-4fd7-897b-95f9bac014ab",
        "cursor": {
          "ref": "73c80c6b-846a-4d5a-83af-4e50dab6ccbb",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "12f3ee77-f5d2-4223-ab29-363e834d843c"
        },
        "item": {
          "id": "74e135b7-9369-4fd7-897b-95f9bac014ab",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "87cbfff0-f8c3-4d10-8170-ba84c99108c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d58f3e4-53b0-44df-a232-d3ad9fb029fe",
        "cursor": {
          "ref": "e51acc25-7e31-46a1-8faf-ba2ba3b4f394",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "6f19c9ce-19e4-4997-b6ab-2d9cda902312"
        },
        "item": {
          "id": "0d58f3e4-53b0-44df-a232-d3ad9fb029fe",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2d6b8257-da88-45fc-8a74-7086e7d7487d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd1f60b-5af6-46ae-9f48-8d54ff56591b",
        "cursor": {
          "ref": "6ca0dcbb-4494-4bf4-946d-937582d3c312",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "44a691be-ca85-4cb5-b8bd-d73c2f8c58ae"
        },
        "item": {
          "id": "2cd1f60b-5af6-46ae-9f48-8d54ff56591b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4bce966b-fe3b-4ae6-a699-fe836d6215f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56894c03-a338-49ce-ac87-3fb4b7d73e92",
        "cursor": {
          "ref": "4dffa111-1d7b-4746-82c4-32d1792351a0",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "fed1c40e-eb66-4539-a24b-5715d56ec1d8"
        },
        "item": {
          "id": "56894c03-a338-49ce-ac87-3fb4b7d73e92",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "aef84c13-3453-44d4-b81f-9bf04fbd9029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20927f00-dd69-4735-b0c4-aa3c6085cbc2",
        "cursor": {
          "ref": "e4dae5a0-d1a8-405f-906c-bb1bc4a1258b",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "196ba40d-e36a-43b5-b86e-633341da642d"
        },
        "item": {
          "id": "20927f00-dd69-4735-b0c4-aa3c6085cbc2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "35089789-c81d-4a17-9747-9f0f4f0b3851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d3b6e3-659b-4eec-9c88-b3a25877d4c9",
        "cursor": {
          "ref": "0363a6c1-afa9-4a10-b87a-cd2ab796f8fb",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fba6ab9b-605a-41d4-9f52-3ac478f0810e"
        },
        "item": {
          "id": "c0d3b6e3-659b-4eec-9c88-b3a25877d4c9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4d71c31e-f538-4b31-8807-27db473e8656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "703a4d04-8e4c-45d7-a390-0c226ef05598",
        "cursor": {
          "ref": "a9100f04-74f3-46ba-a15c-1e4403e0e8aa",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ad1cc2e9-11a3-4549-b221-c7c796454244"
        },
        "item": {
          "id": "703a4d04-8e4c-45d7-a390-0c226ef05598",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "105a2a29-03e3-4701-be5b-c08c2bdd8e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "409278a8-547f-4ccf-a8f5-ef9c8247d2f5",
        "cursor": {
          "ref": "015942d0-87e6-42cc-a89c-000d8804dcfd",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d2f3d65f-527b-4343-9bd3-e44ffe50e455"
        },
        "item": {
          "id": "409278a8-547f-4ccf-a8f5-ef9c8247d2f5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f6f11c56-4f78-4917-a4cd-8bb38fa8a842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b0bb5db-9292-46e8-a3f5-a3c640f9f8ec",
        "cursor": {
          "ref": "98e9073b-b450-4f98-bd65-87e07d1a38e2",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "87ba0085-bcdf-4bee-8e92-3ede1f9a4a55"
        },
        "item": {
          "id": "6b0bb5db-9292-46e8-a3f5-a3c640f9f8ec",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9450ea32-7162-4489-a813-d196dd2fa6bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb26af9e-e103-4af0-b515-e0bc89b48f25",
        "cursor": {
          "ref": "b8ec7e35-0bf0-4022-9231-0facc7723500",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "39744dc8-549d-435f-8eb0-9a1c7f16ada6"
        },
        "item": {
          "id": "fb26af9e-e103-4af0-b515-e0bc89b48f25",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "66c87315-8574-4ff4-bafc-1381ded9064f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a2d0b8-3a7d-4a59-99ee-f9c5f79e0185",
        "cursor": {
          "ref": "c18b7ea0-266b-41f2-a787-783c61a0f250",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4fa2761e-f691-4e59-b332-85f6f19e770c"
        },
        "item": {
          "id": "c7a2d0b8-3a7d-4a59-99ee-f9c5f79e0185",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e40a6977-89dd-40de-969a-fda0d7d559d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad912984-3f41-4b79-849f-73245b5eb654",
        "cursor": {
          "ref": "e25b1091-9ff4-4041-ba84-063af77086ed",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2bfa495a-ebb1-4d69-8d22-a0c863b0ec06"
        },
        "item": {
          "id": "ad912984-3f41-4b79-849f-73245b5eb654",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "aa9237ab-e235-4634-b04f-8c7261944ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f009fe37-8e4e-4dbb-825d-4cb689dd490b",
        "cursor": {
          "ref": "1f785f31-6b76-4a5d-ac67-02adfacbacba",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "542a98bb-0a21-411b-937a-160a42723cd9"
        },
        "item": {
          "id": "f009fe37-8e4e-4dbb-825d-4cb689dd490b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "18eee45b-e74b-4265-9b98-78429baff966",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 108,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "698ebfd7-6e1c-4736-bf96-54d16a40eabd",
        "cursor": {
          "ref": "02010215-f6c4-4ef8-8b16-544c169f150c",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f83f2d1b-27ad-45e0-aac3-ff0c74c840b3"
        },
        "item": {
          "id": "698ebfd7-6e1c-4736-bf96-54d16a40eabd",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5c27a338-89c2-4118-840d-fb9db65b1e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddda3148-3718-4a38-bfc5-3b8270c4900e",
        "cursor": {
          "ref": "855a265f-a1b6-4e52-967e-6a210eb8cde9",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4545eac9-4aad-4619-a165-d6e22c3083ca"
        },
        "item": {
          "id": "ddda3148-3718-4a38-bfc5-3b8270c4900e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "40048a54-1fa2-420d-a86d-2bf0c6e2d844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b0ad73-1d45-470a-b419-2ff25f0c5ca8",
        "cursor": {
          "ref": "5253ab66-859f-47c3-ba81-1fe1d9154b47",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a770bc5b-50f0-4cf7-82f7-7f2b206269a2"
        },
        "item": {
          "id": "c7b0ad73-1d45-470a-b419-2ff25f0c5ca8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "79f1bbb2-7c56-4509-8f19-25ba796285d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595a1592-0de6-4093-9eca-2ba8bc49c14c",
        "cursor": {
          "ref": "ab7c9923-5f9e-46ab-a259-5c65756e4cad",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d07fa434-f54d-471a-b265-2b5f03a72134"
        },
        "item": {
          "id": "595a1592-0de6-4093-9eca-2ba8bc49c14c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "543136b7-ff5d-47b6-9b80-6d2bedd10182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14359824-8b4a-402b-823c-ae9b2ea43c9e",
        "cursor": {
          "ref": "e9e0f12d-2ccb-4c7c-8a0f-0a1486c2e502",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "0d27166f-97e0-4cc9-bea3-a4ba5f726b1d"
        },
        "item": {
          "id": "14359824-8b4a-402b-823c-ae9b2ea43c9e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3aca7406-7f39-4ae9-80ec-2e648bfcd5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab78fdf2-d451-4d06-802d-e28f39fe51cc",
        "cursor": {
          "ref": "7ca3705a-ae0b-4cb8-987b-0efdd3400478",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0ead54b2-9398-4b0b-8ac0-b022844e2f17"
        },
        "item": {
          "id": "ab78fdf2-d451-4d06-802d-e28f39fe51cc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "10762425-cb85-4bd5-958e-4fd4fb8b1004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6bf4d5-a248-4992-a7a9-cf170f93a9c3",
        "cursor": {
          "ref": "2b400750-87a2-46de-9109-55b880dec2d9",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "796a4ebf-e47b-4a9b-8313-1d98a37fc377"
        },
        "item": {
          "id": "df6bf4d5-a248-4992-a7a9-cf170f93a9c3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "794b9513-e640-4efa-a1c1-9e28fd90ac8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a0f791-6363-40e0-9e2d-b392ec7594cd",
        "cursor": {
          "ref": "7aa441af-31c4-4924-8229-4a022e733145",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3790f67b-891d-4200-9325-f121b96e9d08"
        },
        "item": {
          "id": "d7a0f791-6363-40e0-9e2d-b392ec7594cd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "58ec7e4d-05dd-4f63-8531-f5231a26d817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8490be90-67bb-41f6-a57e-6def443034b1",
        "cursor": {
          "ref": "46190f6c-6c0f-41a7-8f4c-00a4f5e637e9",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9682bf7c-b5c0-4c7e-9b39-1630e0e56590"
        },
        "item": {
          "id": "8490be90-67bb-41f6-a57e-6def443034b1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7bb75a2b-e8f4-40ef-be56-157a57419915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d69ca2-d106-4e09-83ae-13a749ead847",
        "cursor": {
          "ref": "502be498-af60-4f59-9c36-e1b97eb7f031",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "df1ae9b8-f2fe-47fc-8b8b-bae9d5894ced"
        },
        "item": {
          "id": "e6d69ca2-d106-4e09-83ae-13a749ead847",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "04f1a772-e846-41d1-80e4-ddc889d9fe0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f7199d-b8fd-465b-b210-aad51ed8b558",
        "cursor": {
          "ref": "fdfef3e5-89a2-48eb-9924-fe889676469c",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1ca21923-e056-447e-93a4-5e7155dafa23"
        },
        "item": {
          "id": "a7f7199d-b8fd-465b-b210-aad51ed8b558",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "25741518-2914-4608-a3d0-a4da3cbc66e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7a768b3-2255-4346-8b36-a0d308cbace6",
        "cursor": {
          "ref": "4db09fbc-81c1-4e63-b10f-8cbe977fd35a",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "912bc479-7599-4262-a260-9df35a5980e5"
        },
        "item": {
          "id": "e7a768b3-2255-4346-8b36-a0d308cbace6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "588651cf-ea66-48c0-98be-a76a168ece46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a38ad4-bbe2-4643-b1d1-c5c3a08eb0d4",
        "cursor": {
          "ref": "be7b7dff-c11e-4958-be35-a52eb686b62d",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e49535ee-9ed8-4f82-9535-b3bd72440d64"
        },
        "item": {
          "id": "91a38ad4-bbe2-4643-b1d1-c5c3a08eb0d4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c3be03bb-95dc-4b04-ba1f-6d440ccf1094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a768b7-ba0d-410d-8e66-f089c6273e16",
        "cursor": {
          "ref": "842c6244-84bd-4b2c-9c23-5e6a5d24c5e2",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "0a2e5485-e478-46f4-846e-599565a022a7"
        },
        "item": {
          "id": "72a768b7-ba0d-410d-8e66-f089c6273e16",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "766e8ca6-7011-4dd3-91e8-f4f19a26da81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0751aa28-0e7d-43f1-b73c-2c9a4bdf73d5",
        "cursor": {
          "ref": "6f87b478-e775-4a4c-b025-66e06b172c87",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2b1c4d43-4683-4bd9-87d6-c04c53365a0a"
        },
        "item": {
          "id": "0751aa28-0e7d-43f1-b73c-2c9a4bdf73d5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "81cb6633-7de6-46b6-b9af-c7664b9ce1ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1807adea-5421-44a6-ae58-a6eddee225a3",
        "cursor": {
          "ref": "b299d3ef-a1a8-4386-9779-622e957203ae",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "332dd77f-7ed8-4e53-9c5b-1ace3d384960"
        },
        "item": {
          "id": "1807adea-5421-44a6-ae58-a6eddee225a3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d775e06f-381f-422b-9170-4d5346c5ba72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f432a05-c0cf-486c-b5cd-8b191a8c269a",
        "cursor": {
          "ref": "dc98f5dc-a7c7-438e-8ca9-bcabf65eb8f0",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "22dd0788-17e9-48c5-a4d2-90b94cc5c090"
        },
        "item": {
          "id": "7f432a05-c0cf-486c-b5cd-8b191a8c269a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0ed524a1-8d03-484d-a1b4-774e2fcb10b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f637b5-fe96-402c-a03e-c516b3f437dd",
        "cursor": {
          "ref": "2b2109df-dc0a-4ad4-984a-4311c1ddb520",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cb17f7fd-d400-4585-94f3-4d8de8d0bd77"
        },
        "item": {
          "id": "f3f637b5-fe96-402c-a03e-c516b3f437dd",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "8bbf7e51-ff7c-4a89-912f-c0690566f4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4863ce-e1a0-416a-bc26-3bbfd1923e64",
        "cursor": {
          "ref": "ed891693-0647-4d39-a6a4-3c4b3d3b5a2b",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "10323ddf-ccca-419d-a0f3-c05db2c01176"
        },
        "item": {
          "id": "bb4863ce-e1a0-416a-bc26-3bbfd1923e64",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "86c475f3-a06b-48ef-af86-9d1c2bd78404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe75c46-de9e-4ad9-9356-294567a64dc0",
        "cursor": {
          "ref": "e3391705-19bc-4c6f-b2a5-dfdc82f6d5d1",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e2f4842b-d7d9-486b-86ef-f4fc9f40db18"
        },
        "item": {
          "id": "3fe75c46-de9e-4ad9-9356-294567a64dc0",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "187358f3-bbf8-4f29-a9c2-b92a9387c217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43c0781-4eab-4b45-a4c5-72f9b8e74c9f",
        "cursor": {
          "ref": "51349f83-c6d8-4593-b757-b66f04a053ee",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e6ba7963-0ab4-4b29-98d7-cb15b92583e5"
        },
        "item": {
          "id": "e43c0781-4eab-4b45-a4c5-72f9b8e74c9f",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "90d0769a-3304-48d0-b748-24668b3bce94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437fdb03-2af2-4e56-8a2f-7a57c7a08e36",
        "cursor": {
          "ref": "da75be59-56a8-4a97-8733-27d5791cc256",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e446d8f4-0805-40c0-a60d-d3bb56d49a42"
        },
        "item": {
          "id": "437fdb03-2af2-4e56-8a2f-7a57c7a08e36",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "30c51791-b5ab-4053-982c-17881d775daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6480367a-410f-4b3e-a539-70d2b699595a",
        "cursor": {
          "ref": "207367dd-cac3-4dba-a747-56b687b96b4a",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ba7a4a49-a926-4a7e-832a-54f40e5e1d9a"
        },
        "item": {
          "id": "6480367a-410f-4b3e-a539-70d2b699595a",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "00bcfb01-d945-4523-871a-9ad9d76413c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686e58fb-2db0-4e88-aeb2-b82480e0d58f",
        "cursor": {
          "ref": "2dfdcc7f-de4c-43ae-a7ce-50de26bdc299",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "97e42670-68cc-41c2-8a7b-10f33fde3a62"
        },
        "item": {
          "id": "686e58fb-2db0-4e88-aeb2-b82480e0d58f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "44cfa75a-1c1e-47dc-96ed-c987ead90b17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d0e04c-12da-4736-b510-ff902bbf4ce5",
        "cursor": {
          "ref": "99001feb-443d-43eb-a05b-496164c9a512",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "cdf8ec06-d41f-4018-aa12-bdec6fb832dd"
        },
        "item": {
          "id": "47d0e04c-12da-4736-b510-ff902bbf4ce5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c6a7c343-237c-47ba-bedc-6f4edb31afb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b30c6a9a-1906-471f-8b96-a6f92e918fff",
        "cursor": {
          "ref": "866987d3-c3a6-41c8-8a42-b7e2040feb26",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "957a93aa-5e1a-4c0a-9aca-f42b6e9d85c1"
        },
        "item": {
          "id": "b30c6a9a-1906-471f-8b96-a6f92e918fff",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5b8bde9f-ab90-4642-998c-45b1809c74fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b82f5227-70d9-4e23-88b2-67245af66ca8",
        "cursor": {
          "ref": "85067235-296f-4ee3-889d-bc0fb432c14c",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "cca2db73-217d-4559-b01d-dea78938b597"
        },
        "item": {
          "id": "b82f5227-70d9-4e23-88b2-67245af66ca8",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6ce3507a-a861-414c-bd3d-7d42b0b578d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f205d2f-fc4a-45b0-adc4-353f5acd5939",
        "cursor": {
          "ref": "22a5ac6f-6218-45da-a329-59ea396cd68d",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "6ec9db57-4bd5-44c6-9ef5-df6d485e4085"
        },
        "item": {
          "id": "9f205d2f-fc4a-45b0-adc4-353f5acd5939",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d0670fb2-4bf0-4db1-bf75-79ea9d257c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836453df-67ef-4cd2-98c9-0b688cf152f0",
        "cursor": {
          "ref": "3f2f503a-c8b7-4518-b73a-d61390f55704",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "dcd083f7-2e87-4d06-b013-f802ccf1ccd7"
        },
        "item": {
          "id": "836453df-67ef-4cd2-98c9-0b688cf152f0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "98360f84-ecd9-4084-adf9-114b5a9c6aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d50cb07-14a3-4174-974e-3a47342c5fc4",
        "cursor": {
          "ref": "29c64e29-7ffa-44f2-94e9-2dcdca23e0c1",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "dca574b1-a550-43b0-8092-1288dd8f1a47"
        },
        "item": {
          "id": "4d50cb07-14a3-4174-974e-3a47342c5fc4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6eb2ec8c-9147-45da-af7b-bbbeb71e851f",
          "status": "OK",
          "code": 200,
          "responseTime": 163,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "08c12eef-4962-4e4f-b3c0-92a4708abef6",
        "cursor": {
          "ref": "b929cbe7-c280-4c97-9026-6d526536e02c",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a3e157f2-5867-4a77-a72f-3d55d2d746ad"
        },
        "item": {
          "id": "08c12eef-4962-4e4f-b3c0-92a4708abef6",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f092fc71-6068-4a5d-8f0f-a9f41a91100a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663d6b5c-491f-4cd7-aa92-e59f40cb85cc",
        "cursor": {
          "ref": "c8f0e39f-26ca-4cac-b2a6-7dd3942cf0a0",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6a21f03a-b1b1-49c9-aaad-5a4d61809e9a"
        },
        "item": {
          "id": "663d6b5c-491f-4cd7-aa92-e59f40cb85cc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "873abfd4-dfc2-4bd5-9496-40eb516fc013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51cb5526-fcd9-4d5e-92b9-4bb68b73b280",
        "cursor": {
          "ref": "e8199183-0785-43eb-8279-b9302f56f076",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3cd257c4-6dae-45d3-a060-25e3d52b9c04"
        },
        "item": {
          "id": "51cb5526-fcd9-4d5e-92b9-4bb68b73b280",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "96d61ec2-bb75-4b22-a480-e2c4e332e0a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fa521c-2535-4d34-9f64-a8a8aac4d807",
        "cursor": {
          "ref": "2e5322cd-8879-4003-902c-ded055c4666f",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b7d44ef1-f5a4-4e03-90cf-72214ed849fd"
        },
        "item": {
          "id": "55fa521c-2535-4d34-9f64-a8a8aac4d807",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "fa04c268-762d-452a-90e2-1f21852b3fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16298f3-0534-4f23-b205-f9159ce4ce43",
        "cursor": {
          "ref": "40ab157e-ba71-499a-ad94-70a145f6e3df",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4b96c92d-996a-46c7-81a6-30b43a66f6b8"
        },
        "item": {
          "id": "e16298f3-0534-4f23-b205-f9159ce4ce43",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5b1d17e4-92f9-48f2-a45e-c81028daf51c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f7c6cde-22d1-450d-8ec7-3c4e0f2632db",
        "cursor": {
          "ref": "6b6cfccb-c986-451b-893d-e82ab8db02a3",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "649e9ca9-1580-4c3d-ab0a-11ff9ea31fb9"
        },
        "item": {
          "id": "1f7c6cde-22d1-450d-8ec7-3c4e0f2632db",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3de5e07f-22b3-4935-af79-007bf8dc4632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99b46f2-089e-461f-835b-1e2a00bf0088",
        "cursor": {
          "ref": "40b96ae7-cbad-4f38-b08d-a4600d2398b3",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "bd3a33ca-fd83-4327-91ca-16579d1c12c7"
        },
        "item": {
          "id": "c99b46f2-089e-461f-835b-1e2a00bf0088",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "19a8f234-c62b-4299-93bf-7a0f2a3e1a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df09094-90f8-48b4-893c-6c16f05636d0",
        "cursor": {
          "ref": "8fae5f04-626b-4275-8746-8e2685dec7bf",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "fc526f92-6e48-439c-911c-fffcb4c2f0ac"
        },
        "item": {
          "id": "5df09094-90f8-48b4-893c-6c16f05636d0",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bbc31867-f549-4840-ac28-689283433981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dfc426d-4442-40d9-9d33-c3f400689f8c",
        "cursor": {
          "ref": "ce24af46-ae08-4523-8c32-ec11b9de11bc",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0898b4cc-feb6-42fb-91c7-4e3fb31438f0"
        },
        "item": {
          "id": "0dfc426d-4442-40d9-9d33-c3f400689f8c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4f58e43f-1828-4f19-bb04-fe56305784ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5659f96-316e-4df0-893a-f35bd7b361c3",
        "cursor": {
          "ref": "b379adab-bae1-4310-a578-8651e8d539f7",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "60da36d6-da8d-4614-b2cc-e84cd3dbaa83"
        },
        "item": {
          "id": "d5659f96-316e-4df0-893a-f35bd7b361c3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a50ec94e-e88e-4ae4-aa97-031291668741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c8d4e9-1a4f-4438-8f43-5c4d292fe819",
        "cursor": {
          "ref": "e8fbfddc-ba07-474b-b5e3-d08097ab7bd2",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6331cad4-b84f-4bc4-80df-5677a2825aab"
        },
        "item": {
          "id": "80c8d4e9-1a4f-4438-8f43-5c4d292fe819",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b274c357-39cc-4058-8f06-75eea4d9eb75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a68a82-408d-44a0-8459-347a87cfd8bd",
        "cursor": {
          "ref": "ad9fd29e-9ea1-4178-bb39-7399b7942d03",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "28518499-445d-420a-90f3-4dcdb6a456b5"
        },
        "item": {
          "id": "a1a68a82-408d-44a0-8459-347a87cfd8bd",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1e68220f-7640-47d4-8d09-fa504f074b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5315af59-e291-44df-99e9-39015196e89b",
        "cursor": {
          "ref": "e91d43ef-ca62-4dff-8ea6-80d964f503f4",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "63154da3-6c68-4d29-8cd3-6e0223414a24"
        },
        "item": {
          "id": "5315af59-e291-44df-99e9-39015196e89b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c129cd24-66f6-4a09-8cbd-eb6787096905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce433bdf-172f-4a34-8d9d-44ba4024c7e9",
        "cursor": {
          "ref": "208f6e56-ddf6-4ec7-953e-cf456beb2308",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "72e93c81-929c-4c17-ba02-e923dfa0c076"
        },
        "item": {
          "id": "ce433bdf-172f-4a34-8d9d-44ba4024c7e9",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "db17e8bf-4050-4e14-9a48-2573f107b56d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be50c3bd-28d6-46b0-af50-8f3f00076287",
        "cursor": {
          "ref": "97111ce3-fa88-4b36-a5a6-fc84caf9ccc6",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e840f09a-2ccb-48d6-9ab4-4c0e7ad941df"
        },
        "item": {
          "id": "be50c3bd-28d6-46b0-af50-8f3f00076287",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c588e5f2-dca7-4be5-b64e-267afaff38c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214adda3-3ae2-4483-9885-7438a5cf3b13",
        "cursor": {
          "ref": "02ed60c2-d45a-49ce-9d0d-24f9a10e20b2",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "0217937e-e1cb-4ad3-bfe3-9b73c4fdc296"
        },
        "item": {
          "id": "214adda3-3ae2-4483-9885-7438a5cf3b13",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "68f3a8f1-bf9b-4392-8f85-9c4a1e899881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee34cf62-eca0-48c7-8110-e912e3a3715a",
        "cursor": {
          "ref": "599175a6-8ae6-41fa-8868-0e1d5439984c",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f56d9c51-ecc0-4518-8a17-6b9ecaeab55f"
        },
        "item": {
          "id": "ee34cf62-eca0-48c7-8110-e912e3a3715a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b23e888d-ab5f-4b13-ac09-6c790a153326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea794c8e-9484-4430-a45f-0871da9704e5",
        "cursor": {
          "ref": "bd23a09a-a4f2-4676-85d0-889ca45bfde6",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4ac236a4-9c79-4790-9ebc-f78a62ebb034"
        },
        "item": {
          "id": "ea794c8e-9484-4430-a45f-0871da9704e5",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "73639eed-865d-472f-9007-7ef7d42ca0ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b42f9b-a770-4c64-8fe0-687592d2cc36",
        "cursor": {
          "ref": "7bb9229d-aadc-4567-870e-348d2d31d7fa",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a1ac45bb-2708-40e5-840c-4162823e6321"
        },
        "item": {
          "id": "20b42f9b-a770-4c64-8fe0-687592d2cc36",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "eb579d46-b1f9-4133-b3dd-45d5101e7f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39664f08-f0cc-45e4-b7e9-870a1f6cc6c9",
        "cursor": {
          "ref": "6b29b82f-48c2-4908-9518-00e43fdd9a8d",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "f505c326-eea2-4e2c-8846-5d591b86ae18"
        },
        "item": {
          "id": "39664f08-f0cc-45e4-b7e9-870a1f6cc6c9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "942171b9-3e83-469c-bba6-30c1183ca756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67cda77a-ec21-440c-870f-6525eee9477c",
        "cursor": {
          "ref": "196341cb-a829-41a3-acaf-6a944a21a2d3",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "159b5709-44e3-49a1-91b1-1a7831df1d84"
        },
        "item": {
          "id": "67cda77a-ec21-440c-870f-6525eee9477c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b26b2ba0-082d-4cb6-8e64-e40cdacf5ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0814508f-c16f-4559-9810-841cd0c70254",
        "cursor": {
          "ref": "ffbe2769-6d2c-4819-816f-177521abe05a",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "83ec131e-6b1a-401f-82ef-22c340a1ca13"
        },
        "item": {
          "id": "0814508f-c16f-4559-9810-841cd0c70254",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f9ff99c7-f0d8-40d6-8e1d-7121eea77e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3529e03-9e4e-4fb6-98cc-124723e01fc4",
        "cursor": {
          "ref": "62fc6c50-3bcf-4bfb-a8e0-6f742cf79c6f",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5ed5fdc0-1e24-4280-8a63-4c50397421b3"
        },
        "item": {
          "id": "e3529e03-9e4e-4fb6-98cc-124723e01fc4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5ca9b1e2-51d3-489e-9fa2-2a0d01507e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d523032-0cee-46ab-894d-95d4df57b9a6",
        "cursor": {
          "ref": "098adb2f-fe66-499b-aac5-8374b8ec689f",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6867fc8b-f1b3-4159-81c8-7a40d6595cb9"
        },
        "item": {
          "id": "5d523032-0cee-46ab-894d-95d4df57b9a6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d7f47126-ce32-4dca-aa0d-3e23b215dcfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1673ba8-f4d0-4a6d-9382-3cf5306be687",
        "cursor": {
          "ref": "23c5c5c8-529c-4d6b-a65e-50da477e3975",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "cd489bd5-b22b-443c-81c3-679926732715"
        },
        "item": {
          "id": "d1673ba8-f4d0-4a6d-9382-3cf5306be687",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "eeaf4ddb-075a-475a-a9e9-51dbc7fe3480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e3e1a1-b648-4986-b4ea-02cef2af36bf",
        "cursor": {
          "ref": "2aa7dfff-d7f6-4563-a40e-efca9b68f5e1",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "48ccd332-f569-4100-9d74-ebb59a550e5b"
        },
        "item": {
          "id": "b1e3e1a1-b648-4986-b4ea-02cef2af36bf",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "126f7854-e073-473c-beb6-a4c49e2f659a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668f4903-fa14-4d7b-a5c5-ad2f6dd7a5eb",
        "cursor": {
          "ref": "52e379d2-a527-406b-b25c-b892babcee83",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4fec979a-dac7-409a-96bf-5f63f26696d4"
        },
        "item": {
          "id": "668f4903-fa14-4d7b-a5c5-ad2f6dd7a5eb",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ad9b7f1d-27b6-4b0a-84e5-b412ac9a394b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e157d7-8153-4b78-b504-18756f822050",
        "cursor": {
          "ref": "12855029-426a-49e5-8d8c-3e9fa6de20f1",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4441d102-7606-4af8-bca7-ba9452715352"
        },
        "item": {
          "id": "48e157d7-8153-4b78-b504-18756f822050",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "61fa268d-537e-45e4-b42c-0a6f3369d778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f707274-08e0-4a72-98c8-6d97991af971",
        "cursor": {
          "ref": "d15340ab-218f-4a2a-b750-9ada5c86262e",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "1783d9bf-2d55-4d1b-93dc-64c30c363c59"
        },
        "item": {
          "id": "7f707274-08e0-4a72-98c8-6d97991af971",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a58d0340-6e82-4d8f-be24-cba2a5cba61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ee4771-2192-4b4c-9070-8edf5ba76e23",
        "cursor": {
          "ref": "d4675d02-e5e0-495f-bea7-3d78a8a4b84c",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1c10b927-210a-42ae-ab43-507dd12c70a0"
        },
        "item": {
          "id": "37ee4771-2192-4b4c-9070-8edf5ba76e23",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "cb164a7b-029a-4f4d-8931-107cfef21b55",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "2abad82b-399f-418f-968b-3f9f0355d1f2",
        "cursor": {
          "ref": "f59d635f-567c-46d9-985e-16b8dbb3c96d",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7a7b5f76-3dbf-45d5-adec-4dc75bb4216c"
        },
        "item": {
          "id": "2abad82b-399f-418f-968b-3f9f0355d1f2",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "578da696-c659-43e1-a859-7ce6206e1bb7",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "7bc69e2b-952d-4de5-bd9f-42b0c726ebef",
        "cursor": {
          "ref": "e4ccd8fa-e4d3-4b4d-b638-58c179684478",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e5f02eb0-7eab-4af7-b4d7-d3e8a9ae4678"
        },
        "item": {
          "id": "7bc69e2b-952d-4de5-bd9f-42b0c726ebef",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fd84cfef-04c0-45eb-9432-51c24713a94e",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "fab75d69-8af1-40de-9801-ce66f3cdcaa9",
        "cursor": {
          "ref": "213664b9-6d35-4790-94a1-198fc6d99b73",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3670abeb-bad8-4566-a188-709d912c57cc"
        },
        "item": {
          "id": "fab75d69-8af1-40de-9801-ce66f3cdcaa9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "95ff7630-560a-4cd3-96f4-119f636a39d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26177722-f9b4-4f65-8750-e151e1de1b85",
        "cursor": {
          "ref": "5298895f-e579-49e2-8db9-6def99ba5e11",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1f8f47a0-cb55-4d9b-966c-56eb9d8509f0"
        },
        "item": {
          "id": "26177722-f9b4-4f65-8750-e151e1de1b85",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "228f8c26-01bd-4e22-8992-10dc4826fc75",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "20f21b69-77b3-444e-b586-1e3d9378e96c",
        "cursor": {
          "ref": "2c6d2844-0708-4dd2-a767-522b8daaa8d4",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "afc9b57b-82e0-47bf-abd1-355a8b7e4cf5"
        },
        "item": {
          "id": "20f21b69-77b3-444e-b586-1e3d9378e96c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e6b8f206-2042-49d9-a257-0bbab3774f8f",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "28f30244-3533-4ae1-a8b7-09145f0b5f9c",
        "cursor": {
          "ref": "a7195b55-a244-4d3b-a900-3231be558994",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a374a4bd-2177-461f-ae2e-982d7a810267"
        },
        "item": {
          "id": "28f30244-3533-4ae1-a8b7-09145f0b5f9c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "94560807-6da9-4218-ae6d-25bd28a05c72",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "6f13a861-1ddc-4abb-ba6f-feafb7fcc5d6",
        "cursor": {
          "ref": "87f4691d-276d-4ed7-a3ab-696dbab44b9a",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "793f86b4-af73-46b6-80da-dddf7afd3b2c"
        },
        "item": {
          "id": "6f13a861-1ddc-4abb-ba6f-feafb7fcc5d6",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3ba5e6ed-b687-4b65-9fd5-addbe03d292b",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "2d2d8596-93c0-402a-94e2-5b58de4dea26",
        "cursor": {
          "ref": "88614df1-247b-41b9-a49d-dceabdf47059",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1f076a25-a645-459e-a8aa-4be492f4f279"
        },
        "item": {
          "id": "2d2d8596-93c0-402a-94e2-5b58de4dea26",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4b08aee0-4a86-4b95-b72c-257d0d12eaaf",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "b19cebda-4761-4e62-bc25-767368ef3c64",
        "cursor": {
          "ref": "8ed1de32-41b8-4530-aa29-396afd4e0c9f",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2bbaecbb-5a35-4038-bb4d-21b7c383f7eb"
        },
        "item": {
          "id": "b19cebda-4761-4e62-bc25-767368ef3c64",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "011f68b6-efff-4790-ad58-66adfd47654f",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "b3789984-fe14-4f1b-a2f3-20c1ff452085",
        "cursor": {
          "ref": "501d9050-392c-4693-8d7c-04eb0ebfff03",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9ecb0736-cbee-4f51-9b96-e9ef6e9c0d55"
        },
        "item": {
          "id": "b3789984-fe14-4f1b-a2f3-20c1ff452085",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "84bb306f-67ab-45ae-9930-a5ceb6b398d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "940c0bf1-7ee9-4e42-97ae-eedd17798d3b",
        "cursor": {
          "ref": "83162022-e356-4876-a329-d9d7fead6bf4",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "777c174e-339b-4955-bf10-9b66ac94cf6d"
        },
        "item": {
          "id": "940c0bf1-7ee9-4e42-97ae-eedd17798d3b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "418f218c-91d0-496d-8339-518c242d8406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843c9b3e-8579-4896-9cc3-105a458a49aa",
        "cursor": {
          "ref": "152cbc93-ed74-4631-a7fc-b2cd331dde87",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9a897854-e106-4577-810f-98a8d9342696"
        },
        "item": {
          "id": "843c9b3e-8579-4896-9cc3-105a458a49aa",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "23976257-69e3-470d-ae1e-80a743653a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f20b5cf-63c9-4547-84c9-8155179b2b4f",
        "cursor": {
          "ref": "3b4840e1-e5fd-4270-b2c6-1dcb1a63fb32",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "30e26417-97e3-4666-90fc-a1c432d48a3b"
        },
        "item": {
          "id": "8f20b5cf-63c9-4547-84c9-8155179b2b4f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b269a284-04a5-4cbe-a130-8e444c89343b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7738a093-1c26-4ad7-bdda-cdc63af917e3",
        "cursor": {
          "ref": "3a0006b2-1dd4-414f-9e56-7e1f7a26e9bd",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f91ace2e-1bfb-4fe1-b41a-a47c5e624584"
        },
        "item": {
          "id": "7738a093-1c26-4ad7-bdda-cdc63af917e3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5ed22953-5ec1-4a23-a54b-d56d5d93b02b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8123eb8e-62d8-4310-9f65-ebd1c6eb979c",
        "cursor": {
          "ref": "4b1822cc-3337-48de-9de6-0bddcc0598ea",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a24f3746-da20-4989-97ac-7f03abe123e9"
        },
        "item": {
          "id": "8123eb8e-62d8-4310-9f65-ebd1c6eb979c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "07c8c952-38fb-4e8d-b30f-a9d71c05ad3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79dd7969-a429-469e-88e7-0d5de5507922",
        "cursor": {
          "ref": "ac813aff-8b40-4938-abbd-1377de1c6a0b",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2deed5b5-58fe-4453-9a20-db95172e4323"
        },
        "item": {
          "id": "79dd7969-a429-469e-88e7-0d5de5507922",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "967837a4-bde5-4f11-929c-aaa435d12a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea4f046-6114-4726-bac9-13936bc89d81",
        "cursor": {
          "ref": "bb425736-6270-4637-bcde-6c2316afeef6",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cf25d9f7-12e0-4cca-96ba-77c7e34a9db3"
        },
        "item": {
          "id": "fea4f046-6114-4726-bac9-13936bc89d81",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1fccdbac-550e-4f6a-babf-48f3654005ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2185ee4f-1a8f-435a-8061-c29f8dd1b4ff",
        "cursor": {
          "ref": "f95bf4e4-69d4-4343-86e6-cf9c6d42cc29",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "92f71736-edc2-4c38-ba3f-5631a275fabb"
        },
        "item": {
          "id": "2185ee4f-1a8f-435a-8061-c29f8dd1b4ff",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "33d35ef8-c4f4-496b-a948-60a14bc646d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69cd323f-55ce-4a66-8def-0ec7f5131d79",
        "cursor": {
          "ref": "5d840d79-9678-4fda-a2c3-71ee126e98aa",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2397fee4-83c9-4230-a4c7-57717e39fc0f"
        },
        "item": {
          "id": "69cd323f-55ce-4a66-8def-0ec7f5131d79",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c6bc54c9-8e25-44d9-91e6-00c294064a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "774bbb06-e1fe-4208-8a7e-9dc08c5bf9cc",
        "cursor": {
          "ref": "66448850-6e91-46b8-a0c9-6bb31dc8a2c2",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9816d714-71a9-4e10-9b87-fb02e71aa005"
        },
        "item": {
          "id": "774bbb06-e1fe-4208-8a7e-9dc08c5bf9cc",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b913c6e9-dbb2-4747-89fd-963a0715a474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fde7964-b84b-438f-aa37-88a73d3cb427",
        "cursor": {
          "ref": "bf367c51-9d15-44ba-8957-3cfdb622d2d0",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "cbbf2a1d-a75d-492b-98f6-5f11085e0eb9"
        },
        "item": {
          "id": "6fde7964-b84b-438f-aa37-88a73d3cb427",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5e1f522c-8138-449e-8bee-ae583119fa52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c02f614-ce58-48a1-86b6-56ff80e78c8b",
        "cursor": {
          "ref": "a2b31bdb-6aee-410b-a891-6b1a7cabfecb",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "dce64160-a9d6-4633-8f5c-d19da79efc8e"
        },
        "item": {
          "id": "8c02f614-ce58-48a1-86b6-56ff80e78c8b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8788d124-aeb5-4452-ac21-ffcac988d2a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636bd517-f5be-45a2-8d6a-5c9f7896f20a",
        "cursor": {
          "ref": "272389cd-74bd-439f-aa7f-fd331c3c9cbe",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "be8f6e40-75b8-404f-8718-b8d232cb2ef1"
        },
        "item": {
          "id": "636bd517-f5be-45a2-8d6a-5c9f7896f20a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "580fee2b-e7b8-49b5-b46c-42430325f467",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "2d1a5cc6-cc7f-4701-8022-78fc6d67469b",
        "cursor": {
          "ref": "3bb97218-9dda-414b-8806-e366760035c3",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "62edbf15-c7d3-4c98-a3a1-53a9b888f899"
        },
        "item": {
          "id": "2d1a5cc6-cc7f-4701-8022-78fc6d67469b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b98312e4-5488-472e-9a71-7410d06b7013",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "f6dd085d-0acb-4396-949c-6969e63beb45",
        "cursor": {
          "ref": "73479814-c018-4c73-a088-401a163a83b5",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b69c4195-6dd4-47cd-8612-17b066c62d17"
        },
        "item": {
          "id": "f6dd085d-0acb-4396-949c-6969e63beb45",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "df93b677-bc8c-4031-9e08-bbf34ea14c8c",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "4aa2c45b-4827-4c08-a0f8-97a6cf7fd017",
        "cursor": {
          "ref": "dadbeb24-efe6-43fb-9d0d-cb8cbc9c2854",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a9c80187-ed10-4ba8-9595-43ea0f24e1fd"
        },
        "item": {
          "id": "4aa2c45b-4827-4c08-a0f8-97a6cf7fd017",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a696710b-c806-4dd0-a2e8-d90ace54c9df",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e317832b-41a4-4622-978c-2a0708fd075f",
        "cursor": {
          "ref": "d2433f1a-3d86-4eb7-98a6-afa92380bc47",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d000ca73-6c17-4932-a8e4-f2fd826717bc"
        },
        "item": {
          "id": "e317832b-41a4-4622-978c-2a0708fd075f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "dbd1b203-aaa5-4011-92de-b6d6da2e0e0f",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "25c37d7c-aaf4-40cb-93cf-346149f58d83",
        "cursor": {
          "ref": "779cedb1-130c-4bda-a412-6a848e117d1f",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "986e8174-e5dc-47c6-b967-e7578e38aed8"
        },
        "item": {
          "id": "25c37d7c-aaf4-40cb-93cf-346149f58d83",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1e0776d2-bb07-490a-8df7-f94b78c38bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e22b8d-c572-46bb-b7fe-50fe5f63b10d",
        "cursor": {
          "ref": "9a4a35e5-0ab1-45f6-b2af-a59a7d38b586",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6d27a56e-4806-4ab0-957c-c716e3490278"
        },
        "item": {
          "id": "48e22b8d-c572-46bb-b7fe-50fe5f63b10d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0445ea7e-1d97-4300-b106-1239202f8668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2bf3bf-4623-42b3-9343-2941b9e1394f",
        "cursor": {
          "ref": "fdc5bc5c-385c-45e1-93ce-2d62839d3693",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0a18e4e0-4f42-443b-ba60-0dea432a6285"
        },
        "item": {
          "id": "5b2bf3bf-4623-42b3-9343-2941b9e1394f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1f2d0359-9954-4a66-a5e8-d923782d350b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3641b4e-3b09-45ce-a71a-a0ad0af45f98",
        "cursor": {
          "ref": "5999f2a7-a107-4113-b1d7-b99b4f4b832c",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9350e97b-1af8-4922-9698-983a2e049643"
        },
        "item": {
          "id": "c3641b4e-3b09-45ce-a71a-a0ad0af45f98",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "2a3d3b57-91ad-4878-a43d-5c0318090651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2344088-736d-4f04-96fc-879a1159e9c2",
        "cursor": {
          "ref": "03a671ae-0895-4fe2-a404-a8e0f1e8d57a",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "50ec47c3-88c4-4e9b-9f61-cccb1d95be6b"
        },
        "item": {
          "id": "f2344088-736d-4f04-96fc-879a1159e9c2",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a9109daf-10e7-4e02-a4c1-8e6d4ed116b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c688d749-bac7-4ac4-b731-40207a6793cf",
        "cursor": {
          "ref": "d043c078-442a-4748-a5ce-d9f1f291899f",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "499cc84d-9900-4788-85a5-39b59912f7ea"
        },
        "item": {
          "id": "c688d749-bac7-4ac4-b731-40207a6793cf",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a7aa6dd4-6e15-4653-9171-7c7efea69410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6719db-9277-464a-ae0c-28a92a10efed",
        "cursor": {
          "ref": "cfce3d5d-f557-4724-92fb-e20da195d4b9",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6e6c5824-6ce2-4287-9029-eb055c834f87"
        },
        "item": {
          "id": "9e6719db-9277-464a-ae0c-28a92a10efed",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "36b41ef4-1906-49c1-8af7-e2c8a26ee15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2d68b8-e983-4e6b-a9e6-a1653848b1de",
        "cursor": {
          "ref": "94606cb1-bfaf-4a2f-839a-a91fb7b99d7d",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9f654ef7-2f37-43c4-bf85-34e9e6496fe2"
        },
        "item": {
          "id": "bc2d68b8-e983-4e6b-a9e6-a1653848b1de",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5bea7ace-709d-4a80-b6c2-245bb5a70ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1364fd5-419e-4efd-a72c-9224757e8caa",
        "cursor": {
          "ref": "d4e79abb-bdad-4971-863d-cbdb6c75c656",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e6a52fc1-eb9d-4104-b7ed-3a36afd4362c"
        },
        "item": {
          "id": "d1364fd5-419e-4efd-a72c-9224757e8caa",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f2477500-e624-4715-8f7f-778377e17d33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ceeecb1-574e-4cf3-b185-2887f6e4af23",
        "cursor": {
          "ref": "5347866e-7629-4065-97c3-baa1f1f45930",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "4ab4f176-453d-4de3-83eb-8d4d5da3b07f"
        },
        "item": {
          "id": "3ceeecb1-574e-4cf3-b185-2887f6e4af23",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c69d38e1-0bf9-402c-a5b6-b59b3833140b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "375e7e19-ad9e-44c6-834e-b2fac65301dc",
        "cursor": {
          "ref": "79714702-48bc-4cfd-afd5-0aaf2cf8cf63",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "9b646e87-2cf6-457a-a541-386ac1218c60"
        },
        "item": {
          "id": "375e7e19-ad9e-44c6-834e-b2fac65301dc",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ca200760-ba79-432a-91c9-39fba110ab2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63772c97-8274-46b0-abb7-184d241dc3ed",
        "cursor": {
          "ref": "f0910b83-2c55-4f65-a6a7-217eeeeb57da",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "51517e25-f431-4fae-919b-5efe126d7a02"
        },
        "item": {
          "id": "63772c97-8274-46b0-abb7-184d241dc3ed",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "21bb4b48-fad9-4789-b4a3-a8ec654ff419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86edac42-fe8c-4fe0-814d-178d46dfac0c",
        "cursor": {
          "ref": "28f88d82-5b4f-4e2f-b2f4-0e9c7cc3e33a",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "fa311393-bcbe-4410-b1a2-af36a6501080"
        },
        "item": {
          "id": "86edac42-fe8c-4fe0-814d-178d46dfac0c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0251287a-5e99-41bc-bd98-c901005e7dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb1174a9-9545-4f77-8459-e8fb8511a4f5",
        "cursor": {
          "ref": "f18cd6ff-eebb-40af-8f4d-569180061b1a",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "41d9a50d-e879-47a0-a03d-56e1570ebfe7"
        },
        "item": {
          "id": "bb1174a9-9545-4f77-8459-e8fb8511a4f5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "1a798d65-39c7-41e4-9070-c10a1c5df7f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528b4e4c-2410-49e0-bf0d-be96124b00b6",
        "cursor": {
          "ref": "69578950-01c7-4194-8a92-9246a582c4d8",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "f9df6495-972e-48ca-815c-e0d54ee4c6bb"
        },
        "item": {
          "id": "528b4e4c-2410-49e0-bf0d-be96124b00b6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1052a819-a0ef-4117-b99f-72f980d07319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542e271f-4bf4-470d-861f-62a494b4b625",
        "cursor": {
          "ref": "2666b630-3aff-4ae9-a689-dd2a5be99cda",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "a43ff46c-133a-438d-ba4c-81bd638962e8"
        },
        "item": {
          "id": "542e271f-4bf4-470d-861f-62a494b4b625",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9bae4282-bf2e-46a5-bed0-6f3e2caadfdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8858086b-aedf-4862-83b2-0faa2a85fa08",
        "cursor": {
          "ref": "082c31cd-3321-4ffe-85f8-79b2655bf2e0",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "638287a3-7459-4230-b1fe-544fd3ac7048"
        },
        "item": {
          "id": "8858086b-aedf-4862-83b2-0faa2a85fa08",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2335a2b2-4993-4b53-b2ae-7b3bcd26d2df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d511c04-3aa6-48a2-bac1-95c40f1625b9",
        "cursor": {
          "ref": "0f4bd557-c99a-4dc3-94b7-e7a0f6efeafd",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "327bb434-c721-4fe0-99f0-7764dab0f6af"
        },
        "item": {
          "id": "7d511c04-3aa6-48a2-bac1-95c40f1625b9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "88e3466e-7b43-4985-a0b8-ab57a3ceee2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ad82e6-a143-4fca-a07e-14e386e7f2b0",
        "cursor": {
          "ref": "48df3f8d-8899-49dc-9d6e-3fecf7b55981",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "010fa7ef-695c-418a-8f50-7fefe59090ad"
        },
        "item": {
          "id": "f1ad82e6-a143-4fca-a07e-14e386e7f2b0",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "55f907cd-851b-41d8-bb41-f1dd4ebb2c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8687e0e2-d740-40ec-93ea-2c4e34bf6c6b",
        "cursor": {
          "ref": "f88941b0-e31e-4ced-ac51-ba94c61f4015",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "de4094a5-ddb7-4a44-a1c4-745ef57e671c"
        },
        "item": {
          "id": "8687e0e2-d740-40ec-93ea-2c4e34bf6c6b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2e3dd3a9-1c6f-400f-831e-2ff3dcb9d9b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0237e8ad-0b9d-4a14-ad13-a2903cd7dd6b",
        "cursor": {
          "ref": "6a0d926a-f100-469f-9403-5564c5741c4c",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "75b1adca-1f70-4c30-aa86-a581cc6e0620"
        },
        "item": {
          "id": "0237e8ad-0b9d-4a14-ad13-a2903cd7dd6b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f5141c66-4a51-45cd-93cd-0e60642f72df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f4a20c-f62b-4e78-b57d-cf0cf514fe70",
        "cursor": {
          "ref": "d686120f-d328-4530-9fd5-a16a31c3ff84",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "0d800337-30e6-47c9-b499-f51960975c0d"
        },
        "item": {
          "id": "51f4a20c-f62b-4e78-b57d-cf0cf514fe70",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "78a6f7d9-f40a-4f16-87a6-0c27cc9d6b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f5e347-2b26-4b5c-995f-4ecfbf98b859",
        "cursor": {
          "ref": "db0b1aed-1751-4b89-a07c-efde92bc0551",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "b31702c4-4d5b-4e92-8183-cbad929ee55e"
        },
        "item": {
          "id": "34f5e347-2b26-4b5c-995f-4ecfbf98b859",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6c2ca673-8902-4069-8366-8d47cfafbd9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c87015-b2a1-4fb7-915d-8910dcb9e9b5",
        "cursor": {
          "ref": "56188f26-8e39-46ab-b88e-b84d09d308dc",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "973d9a05-adf4-4f90-829a-09ec3f6a7cfd"
        },
        "item": {
          "id": "31c87015-b2a1-4fb7-915d-8910dcb9e9b5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "294b045f-295b-436a-a85c-364185b36c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea771a9-68b7-479b-af50-733194d9c4a6",
        "cursor": {
          "ref": "b80619f0-ad9b-42e1-aaa2-8486a0511e62",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "6193de4a-a0b1-49f2-9f17-5e25c40be75c"
        },
        "item": {
          "id": "7ea771a9-68b7-479b-af50-733194d9c4a6",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e987638e-ea82-4652-b17a-3322b196a1b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15946fd2-c82c-4d9d-b932-cf0ec1d56b70",
        "cursor": {
          "ref": "dbd92f6c-f095-4482-9563-bc78bf458879",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a73b305c-e36d-4da0-8e3f-97db71659428"
        },
        "item": {
          "id": "15946fd2-c82c-4d9d-b932-cf0ec1d56b70",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0c656434-cf97-4d48-87cc-474de537392e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fbd57b3-bfd5-4e02-b4b5-022fc8f75a16",
        "cursor": {
          "ref": "03e8e81f-95eb-4e4b-ba33-7128cf1a416f",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "d5f21faf-91fd-411a-8f1f-69a546630d3f"
        },
        "item": {
          "id": "7fbd57b3-bfd5-4e02-b4b5-022fc8f75a16",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8a6f25a4-b514-4e5b-aa6a-cd7dce762c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7daca3ec-da02-48a4-b632-4d55e27119f9",
        "cursor": {
          "ref": "582fbc63-d7aa-4daa-b7f6-57a605373f5a",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "6c9982b1-43ac-42bd-af2d-99ee89cb29a0"
        },
        "item": {
          "id": "7daca3ec-da02-48a4-b632-4d55e27119f9",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "087e5b80-130f-434a-8a9e-6d3319464c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8805ac1-625d-48d6-8f8c-6864a62af02c",
        "cursor": {
          "ref": "0a290f5e-8f5c-43ab-b329-799f8632afc6",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "c21172a9-287b-4d5f-b491-2a380632aba2"
        },
        "item": {
          "id": "a8805ac1-625d-48d6-8f8c-6864a62af02c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3825c2bc-e423-4ed7-a376-1914c27e95c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d29058-286d-45ca-943f-d030fa5797a2",
        "cursor": {
          "ref": "f59401ea-2ed5-4192-89dd-e2dd38c92ff2",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "af1ca291-3954-48ed-bd4e-9735e3673797"
        },
        "item": {
          "id": "76d29058-286d-45ca-943f-d030fa5797a2",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "24dca42b-5548-4a59-bb5e-ef6bbbaacde2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a33252-4b76-4c7b-8ed3-d5aeb4d33383",
        "cursor": {
          "ref": "87c0fd8f-fda2-4570-b09e-22b3d522853c",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "486c500f-1ea5-4a55-9daf-f95a9abd3e60"
        },
        "item": {
          "id": "93a33252-4b76-4c7b-8ed3-d5aeb4d33383",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9e86a832-b066-4241-8b97-85a8b738c20f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9477f278-a818-4c8d-bfc0-add26be32c07",
        "cursor": {
          "ref": "ada481c9-cb50-402a-960c-0f458e03e446",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "2d09bf10-5d46-4881-b10f-6ea93e9ae242"
        },
        "item": {
          "id": "9477f278-a818-4c8d-bfc0-add26be32c07",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "fe41c123-0fce-42af-aaa4-beccceb7605c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19207ef3-9ccd-4325-bd0b-ef45e9ed4c2d",
        "cursor": {
          "ref": "07f5263f-044e-4fcb-82e4-c6cb045fe773",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "c770e70d-9be2-41af-acd4-8a36355f9176"
        },
        "item": {
          "id": "19207ef3-9ccd-4325-bd0b-ef45e9ed4c2d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "db9756a9-81e4-48f1-8895-1b7683a9331d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a61623f5-867b-4b5f-990a-1d0ffbec1473",
        "cursor": {
          "ref": "ebd25263-a8e3-48e7-8aa6-0c7972f44062",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "5f63830c-30af-42cb-8a96-5839966cabac"
        },
        "item": {
          "id": "a61623f5-867b-4b5f-990a-1d0ffbec1473",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b310ea33-4e83-4839-bee0-b6134d6d0ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "829ba7dc-0220-45d0-85ae-60252393066b",
        "cursor": {
          "ref": "ec3daae4-870f-43b1-9f90-19bfb5ef35f0",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "7209d8f7-1e4b-46fb-a570-8369f5fb7f40"
        },
        "item": {
          "id": "829ba7dc-0220-45d0-85ae-60252393066b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a71394f8-cd84-4e7a-8a8c-2adbc8a40320",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c701c4e-5eb2-4475-9468-c34a12c77f12",
        "cursor": {
          "ref": "b876cc8b-7a7b-476e-babb-34672798ac02",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "85b96b3f-e7d8-4b4c-ada9-1da44c1fbd8c"
        },
        "item": {
          "id": "8c701c4e-5eb2-4475-9468-c34a12c77f12",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "0b54f150-9a60-4add-ae87-86a34d024fc4",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "2003e302-87b0-42ac-9c51-65ee8d18e995",
        "cursor": {
          "ref": "33d7f376-cf4f-4af7-a8f2-857001e69b01",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "f7756173-a15a-46cb-8ec7-065ee8889675"
        },
        "item": {
          "id": "2003e302-87b0-42ac-9c51-65ee8d18e995",
          "name": "credentials_verify"
        },
        "response": {
          "id": "17755433-9b3d-4282-bfe1-69a511416265",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2aa48bb-c720-4871-a397-c614311fff81",
        "cursor": {
          "ref": "0be49306-c238-46d2-aba9-1eb45b90acbe",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "2cd82a28-bbc7-482c-96fe-995ab0975ec5"
        },
        "item": {
          "id": "a2aa48bb-c720-4871-a397-c614311fff81",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "52c134ff-60c8-4f6c-9006-a1dc98641db0",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5e6b8c-6732-47ff-bd78-178d7ae47664",
        "cursor": {
          "ref": "e5c1b7b2-8529-420b-ba9b-18750b0e5132",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "7483a2cc-896f-4d40-a796-eaca3498f5a2"
        },
        "item": {
          "id": "be5e6b8c-6732-47ff-bd78-178d7ae47664",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4544ff87-011d-47d4-b373-32151378a643",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5e6b8c-6732-47ff-bd78-178d7ae47664",
        "cursor": {
          "ref": "e5c1b7b2-8529-420b-ba9b-18750b0e5132",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "7483a2cc-896f-4d40-a796-eaca3498f5a2"
        },
        "item": {
          "id": "be5e6b8c-6732-47ff-bd78-178d7ae47664",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4544ff87-011d-47d4-b373-32151378a643",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a775347-4151-48d1-bbb9-0cd1636d2d87",
        "cursor": {
          "ref": "5a6b06d4-0ab7-47b2-a3f1-3e291f88d8fd",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "6fe19456-0744-4b81-b448-6d0a1f31aec0"
        },
        "item": {
          "id": "3a775347-4151-48d1-bbb9-0cd1636d2d87",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "09745c8e-e739-42f5-8cf1-da0ea50411ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2930937f-89b6-4ade-9a8c-94115d861cf3",
        "cursor": {
          "ref": "0d9a4c43-10a9-46ce-baba-6099f50942da",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "9255b6ae-b56c-489c-a18c-e948a1ae46a2"
        },
        "item": {
          "id": "2930937f-89b6-4ade-9a8c-94115d861cf3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "892db59c-4107-42c3-b9db-e396f952bbd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}