{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0639386e-4d9c-4454-9ba4-18cce2f20969",
        "name": "Clear Cache",
        "item": [
          {
            "id": "28a2bb8f-44a3-422e-88ad-a9a609998a20",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fcdb9516-666f-47b0-9758-62cfb4f485ab",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "db2469da-a953-49e2-87ac-230e0acf81e6"
                }
              }
            ]
          },
          {
            "id": "46aa4268-0508-4824-93ed-4cd9274ca3ed",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "711481b6-7898-45f6-b0f6-abbc4218503b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "30fd03f2-30a4-4807-8b6b-50224ed0d3a5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2142342a-77a6-488f-aa4b-3ee8e6f3622a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "79cdbc81-e4de-4c09-8b98-057a67b89f15",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a87b2042-b678-49dc-bb0b-fede7f9189f5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4fd9611-8817-496f-9590-e41fc5459517",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "faa15ebb-4dca-4ee9-b88a-77a65855b3fb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cf7a37f1-9c70-4a7b-8f09-c10a4285b2d7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9a5918d7-8e5d-4489-8f6f-0a7be2d3e22f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d5055283-18f0-4ca6-826e-daf146642b3d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8df114e2-92aa-4f99-84e6-4eb3249916b2"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70932b03-fb26-4667-940a-c3b019128bf7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "fb2dd647-6d8c-4614-a58a-d7ab2ec296f4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "25f7369d-8123-4e61-8192-a3123948097e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ea86c69-5e72-4088-8d42-4121f320e262"
            }
          }
        ]
      },
      {
        "id": "8a052cdc-cdc1-427c-97d2-9faaa71ae061",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d9284abb-d070-455d-b064-b5ccf6eda356",
            "name": "Negative Testing",
            "item": [
              {
                "id": "330146d3-4f99-4cae-93b5-8e1128497c86",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "abb8ff7c-ea4a-4580-905f-90966b3b4f5b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e47f65-bb97-4609-ab54-63adb22ec620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99214448-40ec-4970-8e1d-28cca4918da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c20a97fb-46d6-48e1-91fe-47bc0b51c631",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58ec5b8-03e5-4e4d-92d1-e9a27404885e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a43d3ec-3469-4907-8c4c-4b597f4d0f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ffb18e-db82-4f2b-946b-57526de52259",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d9d6a8-5d1d-4de7-b3dc-25cb24b96045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "daa3ae84-74c2-426f-a1e9-c3fcad8960c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "479e66f8-7413-412f-8767-2d9732ab24f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f5e29967-c9e8-430d-b16f-fc0fffb3998f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7483dbed-0bdc-42a7-b226-ed1e50552880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87730dcf-1ef3-40cb-93e4-6d7cf99d1850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9f6d41-7aa2-427d-b6c0-f73f2a4eaf84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1ef59e1-8c06-4787-99d0-69fb4e3c4d4a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "95d4c2a7-ad06-4f88-8132-dad11a2f56d1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1fb809fb-4ec4-4f3d-86d0-4e4218ef5f5f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "32ce2b00-41f8-46cb-baec-071e7830dbf8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ebba0a94-eafd-4371-bf47-1c4ffe5ea4a1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "73b714ca-21cc-41da-917f-4d10b5b53f46",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "96c21f87-e2b3-4b14-a09e-5ca35184113a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8da8dd92-84e7-48ec-aa35-0e17e5c77c48",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c743bf5-bff9-4b1b-8a89-0f8bad43f00a"
            }
          }
        ]
      },
      {
        "id": "cce1339e-5e2e-42b1-af81-b2bd951f438b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "67d4182c-ad1e-43f8-8911-65feb62a07cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eeb440f2-0f31-48e6-bfd7-19a988d50786",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e2c0637b-0637-4f50-9854-23b1b2c74820",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33cf9814-4927-4a53-b0b2-304973175615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a474541-149f-4aab-b41d-631863732b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b471bb-48e2-4026-a817-d84a7b1f6bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52f4436d-ea4f-41b3-8659-65f51de834b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85cd3f1c-b10c-46de-8a02-61ee2ef8d3e7",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a97f7c8-ceaa-40c7-b01b-5c9008d0015c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6368f56-8004-4358-955d-5bffbe8c1ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3817be-a6bf-4c48-a668-feb9e3f36069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15fbd3a0-f159-42a2-8674-90e47f2e5518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4848e7c2-a046-450f-8e46-e9ef7067ccb4",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83af40c-30a9-4bfc-8f98-44c08317278d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8e4f4c-d2d7-4bb9-b855-d8506f3399d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c69d453-3e24-48fe-9ce2-42d073bf9881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b28f277d-4b63-47f0-9702-41ba0c6a3599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7679ed-8629-4f38-85ae-16060ef5caef",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "affe4d6f-ca48-4a18-a7bf-40143bb3582c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44685b94-8791-4493-a1cf-963e15ee9bc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524de6b1-3861-4a52-82c1-c18a75b8a183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1581b15b-750b-4cb6-995c-6773ca164fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8796e82d-b8f9-45ed-ad0a-e225e0b9e8bd",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5dacbfb-f0bc-44a3-b76a-ea6e9fddf954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb00b2df-8c9e-482b-a16f-fa2b04ab4847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68557a0c-d4d0-40c1-9f4e-7149657f1687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8c325ae-5f39-4880-ae13-b1daa753e7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2304861f-ce46-44f6-8382-9123c735c5cf",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3455e2bd-88fa-4bf3-a6c8-9fdc350724f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5bd9106-1222-4405-9930-e2a70c2301f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55fbf55b-567a-45b7-872a-4e6e81b9ad43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80349dd9-f48b-4746-b665-b3a480287425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "250da8f8-fdd5-45d5-aad9-6d32ac3e8b17",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f089a47b-f7c4-4a88-8d69-50930544d686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c917052d-c8a7-4c49-9dad-b4149335fda0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3df50e-b24d-4e09-908a-df6eba2b347c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4f6f0d3-b592-4122-9dba-80d8a6e7bc63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5457aa2-e4c3-4574-a2cc-74a925a85bd1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84412976-623c-4c6a-b07f-35fada444123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c379578f-9328-4e78-b896-1f4086df01ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feeaeb18-4f22-44da-bc48-d0de5d786455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "969d208d-a157-48dd-bba5-865dcfe23ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3cea0d-2ade-4a59-9f92-42797419c8ad",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf0f3cf-9ccd-4a58-b325-0fd6d8194c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b8a08a0-b797-4b74-9b96-e1896c8ea8e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae38f22-a8d6-43d6-85f9-09f9cb013e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99bcce28-726d-45d7-9f52-cd5229a24c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c0c1d3-5018-4088-9b1c-a98ee43db96d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8bac0c-e971-4163-bd0c-ee6da7d4532a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ab4400-e561-4c59-9566-52012bf6c83a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a792dc00-8024-4d38-8164-d5923b1d8177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "191bbbb4-22b8-43bf-8601-a02a64564ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06e8bbc-31f5-4268-a7a4-a850d7e72c4b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "637a91a0-3fcf-4fc9-9602-52dedabfaecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec02405d-647e-47df-815a-e85587c70800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb58d30-5270-4ef3-9660-fc16ed7cdeab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af2947ec-49e4-489b-be03-56738e8ec807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca838e6-3b86-4533-8f12-0258b36e9584",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81dd4274-e0fe-4f1c-827c-1bacf57825e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55e9d34b-56f3-4f51-8de6-bbdb35511128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb097ad-9cc3-45c3-9fd7-a71885a17b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d26907dc-ec2a-4b80-9fc7-fa112ac5d18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d19bcc-9f78-4df4-8551-21693f9ab201",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20819916-0096-4396-bad1-7cc4c9dd51bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b61a0bf7-ab76-4e5d-a75f-edb35c8e851a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41660822-b217-4a15-8bde-eaf5724f4cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef19e211-a903-4051-828b-e5b50a9a1a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43920baa-47bd-464b-aba6-1959362f3843",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e451701-08ef-40a9-aefd-8c0ddb33d8d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39190617-5f70-41da-8d74-e777003affd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb193591-782c-4346-bd24-9700b08d359c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0db7643c-8168-4c8a-8c48-14c0176057af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df524990-4602-4e37-ad4f-4e79a33d3254",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ce3784-97e8-4dc0-91b9-9a54ce450219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff96a21-58fe-47af-b75c-33d5fd1f8397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4594263-54d4-4de5-b1ca-466974b7802c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "035976a6-1f98-4573-ae9a-94e60abfaa8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b935a04-34c5-4d3a-ab71-a5ce05a66556",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b5c3f1c-710e-4792-a0ba-bb4ca7548e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ede90ab-d4cc-406d-ba80-b3a26ddaab3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f678c2fd-5277-4bba-aacc-15ac7ebdacd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d4c34a8-8e86-44eb-8bd4-723034931469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfbbeb1b-d046-4e16-88aa-1507cfdc5e0b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da0291d-d711-49f7-a8b1-0d6a93c87509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dffd7e3-ee1a-4d97-abe7-8ecb6b39e50d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5662eb1-903f-411a-8420-2c4e83248f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44630da0-572c-4cbc-b9d4-7453dc6b4619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb6de2fd-25b2-4dc3-908c-6ce3a821b1e2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7c22a6-27e6-4fbc-8bdc-969a2234e396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baea9e2d-ddc7-4b2c-8b10-954ffd9956c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53259220-6457-4b2b-b0db-51554d5e7142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7990719e-b48d-4c97-8c94-f90dc16dc818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7715b6-ff58-4890-9f3c-5a09c05c3450",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9209736e-0f41-4d99-8353-f94991253b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d79b41-f889-487a-8d27-88f56a5055ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ff6c4b-5162-4c34-923c-e8f072ff253d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c01b69de-e937-441e-9e21-a80d903a4ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1626016d-3f12-44a4-8250-6985fe36d3c1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0415ac57-7b5c-4673-9b59-89885a2f9437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "babeb6b5-575f-4c62-a0e0-0b486233c085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2dec52-798f-446d-9733-66d55b0d4ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf4a57e7-931a-471d-94d4-36b318ca0d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27322cfb-a31a-4e92-9725-ec6482b9b869",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "accd4288-6ff9-4c54-9f2b-db0fa1b22de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0858bda1-0124-4b9e-b12e-b8b199594a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62701884-cc8b-4734-b77c-6ffe1d9b324e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6fa05d2-7a70-4867-b61f-9376985e654f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8da86c87-d41f-4711-bb6b-61d486b2a153",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17221673-452d-44f8-b164-117c85287e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa9e4b3-0cf8-4a68-aae0-404526fd3198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a46df8-b61b-467f-b448-da337e414759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f81050c-058b-445e-8555-1cc78e539c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62effecd-face-4bf3-bcec-469c83f807fb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d58ce342-526c-40a0-af1b-0644a0447b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4cd7747-9d59-497d-b737-9c61b8380af2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a080c8-a90e-44fd-aa56-d68fee4df8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "37d55692-32d6-4671-9eb4-0bf4ad39b359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93f1b37-6b9d-4e94-8baf-9023b35a5710",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0a7ad0-a0a5-465d-9ca4-1242eb63db59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38b5c8a0-cef8-445b-99d4-a9ca08bb74cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67eabb0a-54a5-4545-a693-5f60bbd03774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "805e16b2-e1d4-4949-907e-342cec54b402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b553d6-5bd3-4f1a-93d9-4b0d4d5c6e92",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f7f559-8ad3-444f-9583-70c52bfc8c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f291344-304f-4d06-8a5e-6ccb233bf968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47a492e-4afa-4f69-aa76-48b5c0eb6456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d0dc8c-745f-44a7-b9a9-4faa8150f937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17dd86b7-de48-4c9d-853b-6958beae88be",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d975664a-1f68-42db-bccc-4fb017800494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df0279d4-b7bd-4f7e-b78f-2eb8195048dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c00856-7b4c-45e3-9a67-a5dd486015ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "85e8dfdd-c15e-426f-8501-f7dbd1da85f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4a6efb-635a-4dff-bd60-7e11d5bb7e3f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e49ad4e-ab5b-4451-bedc-bbb4567fbdeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a388569-0da3-4c92-ba50-92cbf78f2505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dfd6302-bb9c-448b-be01-9691dbd83b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee7f758b-e28d-4030-bc82-40c3a50bb454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73134313-2280-4099-84b3-c74385ad8da7",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf9295e-7f1f-4443-ad48-cf41db550946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d0f695-7823-4c3f-aa22-ce745768d009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67918bd7-1b0d-4633-be22-8d818c059efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c94927d3-1dea-4aa3-bd8b-a880605996b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ca9ba2-f8dc-4fa1-8ff3-3490e8f4b9f2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd26d26-9a55-43a8-ba09-aab5ae7f5098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d099d2b-6609-4af6-b376-7a0952e02372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1a553b-f812-457a-8639-1a6dca8c796c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf6bda1f-6920-4221-a425-8d00ce0062ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1e50a9-021a-4e2e-ae59-477a44c467d8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee88d00d-b63b-435c-b49d-70ba80b5d180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f15a7223-cf28-4687-a491-9714fe4c7ea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cea971a-c7b3-450e-83b7-d0094f1d1553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "559856a9-df7d-4426-ae8b-0c17271a6574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4e7033-0158-4d19-ba66-0b47661923dc",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d37f38-5dce-4c57-94c7-be23caa538e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e13e0c6-fa88-4316-b2d9-2d0816609a94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f02373-2859-43c9-833a-788fda3505fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed014a2a-c017-4558-abbc-9348dcb3f159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6141a210-9576-4a58-b8fd-879bddf3510b",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19034c33-5bb5-4e84-bf99-69632ca39bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bdad446-60b8-4f83-8af2-dd6a855cd80b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc8e264-d8fa-45c5-8410-c2db76111469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac36480f-ad15-4a4f-813c-f00342cf08f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3b543e-1e79-4e86-aa85-6bae80ce2cdf",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6176e2-8268-4a26-8097-05d7b65b806d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c357b816-c9c0-4e1c-9ff4-3c378704e841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba8f907-b14d-469a-9666-e61290ddd123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61a48d76-79f1-4534-95ab-0bb4a251d561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f334ee8-8a62-4460-be74-0ddcfb82a5a9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6502ee28-8267-4365-93f2-aa6f9e6d6061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bcb51a4-6420-4e95-9d31-c97cc1106698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d28056d-2cf5-4cd4-ac3d-d1fefa780fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50889d02-0833-45f1-8ebf-c99b30a3d48e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7faa71a4-f94d-4d5a-b7d2-69bbe426b762",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fccf828-7174-44c0-b863-d541ef8b5c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d9c4817-7b6b-453e-b0bb-1085cd4ad16b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67db78ee-3e67-4cb8-a06a-7e5876bfb691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f450685e-aee7-4df7-9044-2b8e4f1f3383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e941a598-ef28-43db-9aff-19d63e8389ae",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd26d3fd-0a5b-4993-90cb-e823df7d0875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b0c1764-5f4b-4c29-83ee-ddb38fb46460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7ea112-ea19-4ee2-a803-6418f9c1d9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3d68a284-3daf-4233-b709-f6010b06ea02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea82031-a05c-4c56-9496-0d2734bbbc38",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b94fe37e-6bf8-431b-aa7b-0f31be8bfb2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a39b1293-114d-4d0b-aa23-0aad3d111456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222088aa-f31e-4e42-99b9-d00d224f62cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed2a2307-f2f0-411d-9c42-41113133edeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879e2ce1-8936-4b7e-afc7-6cb4d7329d76",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6dae7a5-f8f4-4e7e-b03e-4bb714635578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "708c7ede-3c87-4f59-b2c4-e7adb420020a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e69921-784c-45f6-a5ae-97fd0ba5204b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f320a377-642b-4f61-8f2c-3a37550ac75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30fe1c91-7445-4bc1-8d72-c9c99da1c981",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f495a6b-39d4-437b-a955-87739da45d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ad92f1-68c6-4fb8-968f-4cdb5d5dd8a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e1c2e0-d2a7-4ca9-b7df-4a24ce07303f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "932e97e8-c4f9-415c-b354-2dac0067528c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb2fadc-bf62-42b0-bb5e-519eb66aee87",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e316f03-c7ae-4934-ac03-30d5a3acbfde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "659568b0-67b5-4d60-80d7-8b2eabb94426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f32ce1-06f5-4b02-af83-730e73b33cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "37af9372-8ea7-4580-8d26-939ee27c4d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88821582-1266-4b38-8e27-e8f9dc58cea3",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ccd4eaa-4d14-4e1f-a78e-a2d5b1fad632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "521aaff9-462d-4720-8b79-47bddf3daa42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d83eb3-932a-4c17-a0a9-715f6890618c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b07bb4-cac9-4874-9eda-50b8d5133b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5816b4-317d-4ded-a3f7-2d03fbea1b2f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a21b83-70d3-45d2-a2a4-af236076f9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd0eacb0-2791-41f2-98d7-55e13d8d53ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c95fc12-6442-40f9-a169-a938bb99cb95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "214d27ca-2ae5-4e2e-86ff-d54fd275e7df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a913cba-53ab-451a-bbbc-51bff334f5e2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "786eca87-3fe0-425c-b442-d028552f147b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f39b63b-b12d-46ab-9e29-043b446dd325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c67b9df-bf3e-442e-82d6-52ef46879041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd012ba9-d233-4c1a-9d10-1192aa046fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70da8a60-2527-4b6b-9485-da9b1d8c94e2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff73f42-85e2-41de-9b4d-5b9c3ff65cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cf38beb-809e-44e4-b13b-333b75dbb288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da71ad7-45c3-47dd-8f26-34b9464b8fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d24f3366-bc21-4f9f-9d17-ef22e5383b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c0eeec-43be-4550-bb5a-2da5c0b920c8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4b54eb-01a1-4309-90ad-caf819658a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59b19887-1628-4688-9139-52a65adb0d32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2c5916-48e4-4d34-afdb-aaa4b8832759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "866dc10e-a27b-4f83-a680-c930b7d41c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1cab79-a787-4eb3-9ba9-40283a14fa14",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11087cec-18ba-4625-999f-4401f9580f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d543210a-578b-4fee-834a-6e61bc2e8aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd1f910-940f-4444-bf1a-a3ef8e11ee33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19eb86e2-a5a5-425d-a6d2-eaed2062bf3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d232fbb6-52e9-469c-a342-95b3b1abfa4f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "130df161-9c5d-4367-982b-b5a5b905a606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e0be23c-892d-4698-8599-bd1962a0f599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366c82ff-40e3-4ed8-94e0-ea2c66691041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "944122f6-d4c5-45b3-8c5c-755600529b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a7a79a-9dd6-493c-90f8-a196cfd7c336",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcee08ff-ad5a-4593-a94b-a512e68f95f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c40403-800d-42a7-82c3-5595b3ab47e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233d2c0d-17e1-437f-bf44-ec499f1aa7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c77cf84-70b0-46a1-bdd3-c6136e46fb4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab313d3-f396-4932-ab70-f78b2ed985c9",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7df8c1d-74b9-4baf-82ef-c69232af2f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb30cfa5-1cd8-46da-9338-6ade0c5ae5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f07e21-c986-47d1-9708-2eb651aa16a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c21b2733-c145-42a8-a134-1251a8702a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88fbdef6-0132-4b5a-95a9-70fe50ea77d4",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a9f78a5-1bb2-4be1-a8ee-6ce1b7b1901e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e36f80b9-4406-43b2-ad03-b55a082175ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7f839b-8313-49c5-b153-cf5c2392fed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c1df5f67-02c9-4a7c-a4ff-f081e9efe546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae258242-12df-4d4c-83d1-020b6eeee9b5",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e025314-2804-4dcf-9895-b864d4892852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e87108b-b04e-4231-9924-70696d747e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c480be35-4c8f-4526-acc9-59cfaeb1be0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4507d83-2173-4628-9fed-9fd8eed9abc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f05fb7d-0635-45d3-aa50-52030e5dacb8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ae45ff-725b-4987-ac36-3fae04576668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "779f2232-f066-4769-98e8-6953dc5a6553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232531b6-40ff-4b8b-ae52-f188a27caa80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e03bc0fc-8f29-45cb-8406-38b9e7c69c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b9d035-ce33-41ff-aade-28264299e510",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac110d34-090a-40fc-94ca-abdc817eb09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65b1bc68-aba1-4977-b80e-5e3fe52c2880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c52ea6-8403-4b94-9409-a3ea629cba57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67f8693d-9958-478b-81cb-f1c6318d7815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfff9580-24ef-4ef6-b3fa-14bd150708e6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd70be50-ec5e-4f1c-9df3-da433d79c06a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2296c9c0-b814-4b40-819f-8c7f46777ae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27fb913f-48ec-42a6-b2f5-c7ad2226d0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "caf36ff9-956f-4c1e-9a94-20e2855f10cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9ed4d0-cef6-417c-9bdb-19336c49fa88",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5922011-a911-4602-9fef-ca7e099520c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1ca138b-1d7e-4bac-9f4c-8f2d3d71faa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23da72dc-d74c-443f-9745-8ef4c7888160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cec07463-702d-4c14-be0a-de7e9dd965e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b64e2fb8-40f6-4a8a-8e17-9a333a2f2100",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd08a70-1999-462d-a5c3-11cc5e0f3555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "802af3a3-dbb7-421a-9d21-b7367815ad42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348d903e-31d9-4417-956f-ef1d34921889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "bb2ab26a-31ac-40c9-9658-a3cf5fcbf680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5e77ed-74f3-4441-86d7-6b8d74286cd9",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf5cc41-29a4-4b77-afc9-2390d68fb6bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52685acd-92cc-4a78-a367-1c945f694b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca170ec6-5010-417a-a2c3-5c1a0bd136d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9c69959-5fd4-4aa0-a9ab-c66182a4abc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3215b9-d600-45f6-9414-ca7042a0f60d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cec952e-3933-4a07-a3a9-02321092b069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd58fd16-59d3-441c-a47d-7eff164ef59b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb31b87-ab2f-4a66-844d-865ca6647265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6606346f-8af4-4f70-b756-9bbcd0909b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44d313e-b932-41d5-a936-79e593ce6886",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22603e41-d885-4f9d-9d21-b48e23e3dc2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d34630c-c966-440d-b517-752928437ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f135da7-2ba2-4112-9945-9c323f91488c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "20073762-afe6-48a6-8a3b-ba1f4ed24579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720b5fe0-10ac-4b35-a1bc-107ae87a1151",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96f5c3a-a424-4ab1-85f8-0f84645fd528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b1523b-f5f7-4e7c-9894-131ec995dfda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671af592-9bec-48db-b5ae-dd042159e366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9438e84f-89bf-4590-b135-0124ae237590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc18682-af6c-4b85-af1b-384274e2cb2d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53bb2f6b-97c1-49ac-be52-47b299f01dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e9e012-3305-46b1-abd5-9aff9914c033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f5079d-431c-4ef3-a183-b55def5de098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "94cc9184-9438-4bb3-9e55-b7e328b8edc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b02971-f16f-4c1c-a84e-07072f825c24",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb71dd2-d511-42b8-b695-8482e3480513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dee85d7-385b-446e-9c3f-57eedb4ec7e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c4e181-1d29-44ae-9b02-babeb871734d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "00f54289-ae62-42fc-9347-c0109b094ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77d013d-b086-44f6-9315-9c9c8e6cc7f9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6bd8818-1cff-4bf7-8788-1c7d0727e384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c246a470-12dd-4865-8ef6-17c156ee6502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd0071a-ef2c-4cf4-8e5d-93ad7513fdc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "abda4cbc-38a0-49a4-9e80-3dda38e78522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3cc18b6-cefa-4b7f-87b1-2d563e839706",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "869b3581-6d1e-49e6-9e6e-73acf963559b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "430a17ce-597c-4515-be94-5a41c936ba12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d2b731-945f-41ab-b53f-43ca5879ac98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb8f15a0-6816-43d1-b603-6b1247da518a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2458254-1003-4df2-b667-5c8679e974a7",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5a5fd0-0e2a-49ff-923e-258510a4374c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "888a1739-a487-4a68-8ae0-a9a7b33f258c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ebb725-18a6-44da-ab11-85a98bb09db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bd33e2b-7bf9-4c2b-96b5-36e099142031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1a8e61-e35f-416a-876e-df6172a0e7b6",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc11e7a-a502-4e52-809e-fade257324e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9015c19-da16-4f2b-880f-0261e014e6cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aefb798-7ebc-4ef3-80d0-8859e8a4bce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "438d8ed9-5379-4afc-9024-8450a2b8e5f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32cc4bd3-5ce9-4473-9eb5-f0d8c4bb2113",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e29fa81-1422-4a53-b804-85eaa8c82404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec7aedb5-81e6-4f28-a444-ef2705714f05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65aea8a-3c4a-4c89-a2e7-5f8fb13189ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "abe94da9-c0da-4284-b11c-69c1a62e17cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f839b0-a211-4edf-8314-d4ba726440e6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2802c92-684a-465b-97ae-3caa2f9b9e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18c74f12-93c7-468d-9a42-2e405cc213d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f1f91b-0247-4487-8017-54afc9ce4c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7291bd58-fec8-4af2-a985-031e6c3c5f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34da6cb1-e117-4f77-972d-f4e2b2efe872",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8993b7a2-b61b-4db9-9eed-998b2d755cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a9e044-1090-45a8-be6b-f8cf5c0c0802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c43711b0-3809-46f8-9f19-6ff60c8eab22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1971faf4-dba6-4906-a771-0d45a91fd326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f93d8e-d20a-4e46-8490-28e8e9a6dd58",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e70d61-263e-4870-8828-4a5086f4851c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0019ac-134c-4992-b605-49e9e8eeca12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd0a835-f0b5-4b09-bb57-d603308c50ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9cb7121-1ed3-4623-9272-8b155d824d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279fcb06-4885-43fa-b422-89e3234989b6",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9b323b-d626-4949-bd9a-c2917a22f894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddfc20ad-d24c-42d5-948e-3adfcf3c6727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a94af27-8ead-4060-b3e4-5a7c3dbc3107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8786a20-6f8c-4b66-a8d8-b39b18f7f1d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9be5570-037e-4824-8e32-79af398c6d5d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33bb163-6dc4-495c-80c3-8467b354d31c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4948ffe8-edd8-43d2-a249-65bd9d1339f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "314a6859-6c04-4eb8-80b9-b5e1f4934447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3c7a38b-c863-4e88-a39a-b051c3cf5dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155d9fec-e410-441f-91a6-c0115ce6f9da",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff24f6de-e98b-4a57-a37b-d80b7c4606e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65b973d2-af1e-403a-b4aa-6241641e1191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e8c1fa-b929-4523-9665-ad14224b4a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "489fba24-3815-4f7d-8f59-750c377fc887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d48ff2-c6af-408c-a187-1de863991ca3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b068bc-6f55-43a0-b50c-d34351befe05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf9fcfb-be76-4bf5-a21b-41dc771a9682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7c71e0-bdb1-44c2-ab27-20c116148181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "76beb155-fb87-4bd5-931a-e335b4e63822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45465d31-b371-4a9c-ae64-7c2ec4d003e5",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c129997e-37b4-47d9-a7ad-548d57b80e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49c177b5-b700-4eeb-9d86-31553afbf536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ee01e7-96bc-41ba-8400-bdfdec55df85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "024e5421-006e-47fb-883a-f077a592757e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88cf5dc8-db01-4033-b516-ea1be00c4bf6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f221ce-940e-4be5-8129-8c456b9a4c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a808d48-5f08-495d-b026-0ddeeba46c41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc2f236-01ae-477b-b67c-a3ac3061e360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce55565c-388c-453f-a697-ec6390d666ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9edde186-94dc-4f64-9900-9a6a595f28cc",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "941979be-472b-442e-b35b-6b8bc4127078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6926af9-b907-4f8b-8dae-2f6a9bae588b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44cef49-338a-4b9d-bd23-46039b648943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "44774381-6865-4ccf-bcb6-9ec784b864cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e3e39d-d774-4df0-80e1-1ed62637d515",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e72462e-07cd-4c56-becb-04dd2a667cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abd1dc96-ab39-46b3-807c-ab154cb6ec5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25e2c5f-8859-41dd-9f78-0148998d0510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dacd4044-3e70-4a9a-af1f-3333f0a02dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5027262-ce31-4232-aa8a-8519f309c38d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "971db8f3-c882-4618-822a-ea4236b996b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b328bfe-81f6-4582-a3c6-6142f3d0a437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495ba8ce-e4a4-4bd5-9b13-ee52dc40181d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e04c95bc-555d-4019-8624-e9c5069f963c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18dbb2f2-827b-48af-998f-774739a78e84",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb8d965c-39b9-4a68-94aa-0196f9693df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a9aeaed-c761-4b93-9e0b-6854489caf0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3ff0ca-f4b5-4999-943e-8a83ff485c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0e05e025-07f3-4aee-917f-f9123c218e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "addd79b0-8194-4366-be5d-f1963b61d781",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af13720c-d6f1-49da-8100-fc9d3b3a1b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8202e1fa-8f39-4c6a-be69-be1326997e68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0163851d-40b3-456f-8c87-fa291ffe59e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b046407-518d-4c0a-a116-f91aa734cc05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ddadde6-aa22-4afc-b706-219c1ff8057e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ebd0de-f9fb-43bc-bc99-bd66b98db086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e554da40-1eb2-465d-92cb-2e6829795fed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf6bc64a-a7c1-47c3-917a-659dc57c50c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64bb6d80-52ea-45b4-af81-0555105c23b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f367472-84fa-4c28-9fe0-3150e57ea5c5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d26292-57b7-488c-a025-10dd03808d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "540edb70-ddbc-47ef-87ab-c0d8d763b031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe06a7d0-60b1-49eb-9919-0b99c176dc0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "effd0c63-8364-4920-90eb-d606d187c950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d74c40-06b8-4ce5-89ce-359f3d65dbac",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b6fc6b-5cf6-4d43-ad74-acbf1926692c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10a3e932-417a-4858-a226-b896c39dbbef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5167fa-8e8d-45ae-9f7f-f6f1e8611f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5860bdf-09e4-4f71-8170-5cbdf500357b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965950c4-b2cd-4037-a40c-37b77b32ec2f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7128c305-4b31-4afd-bdef-2cef1a3d7782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea0b0b1a-40ee-4f87-b56a-79654e3683e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbac4f6-6d0e-47ce-87e6-646e4a529035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "89ecb8b4-1891-4b77-b29b-86e08c4cdc4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a6c1ee-2352-455e-9228-d15762dbfcb4",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab9aa34a-7a2d-457d-906d-f9f9e849f250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c37b5b56-65d1-4d70-8ee4-5ae3b4cff207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9735cf0c-8b87-451c-ab15-c60a90cb5848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c0aafc8-b2b9-4138-9c14-8a5d0a083058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf3a90f-3f4b-4aae-9b96-34f02a8b592c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4053e1aa-d688-41c0-9e18-f1ff127ac1aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f3360ff-f3d2-4ffd-b68e-ada01f44bf32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d3f93b-6683-4fe4-8996-9095dcfbfa08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e1862da-ecaf-497e-a20e-8a49068ee8df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4160331-fb8a-42c9-858e-d250915cb855",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d1da38-42b9-4944-af62-b05b9bb5f255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f7d10a-dc6a-4bcb-925f-a0eb2669197b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66e6d88-a505-4dfc-8e6f-493910926577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7558ba20-5fd7-41a0-888e-75a2bd874595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d836f63-6041-4262-bab6-91a1ae40468f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffcef87f-8a4a-4c88-affc-5f1de3056204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "404c3a72-6f2e-42eb-81df-e3dc2714fa2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac07d0dd-9107-497f-bf8f-603b82207dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "64dea3c3-a3b4-40c5-a478-860b42fe8884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae04102-acaa-4d64-96d8-00ff6cd39500",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad5dedb-b877-4952-a614-4674969835bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31a634d9-0828-48ab-b49b-a32d01f781a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a04e3d-211b-475d-ba44-4c4e97337256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "04ecb5c3-b0bf-47c4-9cdd-7305007cc681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131e40be-f8a5-4358-a3eb-54810506890b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c744f4-04f0-453b-b1c9-d3cb34d39f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c56f28ab-b882-447b-a164-81e57c99992f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e33346b-8f1d-42d4-906c-9149700af94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0536cf27-1f3a-4509-9afc-f83df5ce767b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90f74d4-8c48-4ba7-a2f9-37fa334907f4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a173546-7ab7-4c55-a2bf-7fc41af48598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "96d59aad-1e1c-411a-960f-d033d60de9d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe75dc54-e95f-4b1b-bce8-0a7368a9461e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "97248ac9-024e-4ed7-bfaa-bbb0b0c5cf2a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9a7b6922-fcd6-45da-a518-fb384607d6b8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6affb8ea-5e51-413b-9790-3aa275bdb6cb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f15a66-6522-49d8-a31c-1a9b8861746d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ddf6174c-d59a-4d8f-8767-2c7ee7da5d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff7dd58-75e7-4d85-8e2e-fcba9b14c7d6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28bde93a-1e5c-445f-8456-b16e0e4d7def"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f83d29a-97b1-41fe-8b2c-e082a5b8cdfd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "354c8778-0d0c-429f-b011-7fb893e16e25"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6564fea6-1b75-4d1f-af6a-f3b3d6fb1f37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "992d5f11-1b8b-4603-ac80-fc5040f49d96"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "003ca9a7-ac8a-4590-881f-f15e96ae3f3f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d69b3faf-e880-43ca-ba70-27e9d3637495"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bb7b66bb-a5c9-480b-9aeb-0cf0a0094d77",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "21c92346-d1c4-4d08-93e4-4dcdcaef7076"
                }
              }
            ]
          },
          {
            "id": "c2015f6d-286d-4f35-81b0-94cf791d5675",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7b13790c-4cef-4a4c-834f-39a110da14a7",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "55bcecf5-b6ce-4760-acd3-ec744e184200",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd6ddcd-4c48-46a5-ac73-b8c9b97e4660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1f02d335-5ff0-48de-a831-3b9eae7acdb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1389c10-45aa-45ae-b697-0037c2c1d8de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f9b0ac1-32e8-4381-bfd5-8c8e504a5b8e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "909010dd-afe9-46d2-b267-9db93f4d6ddf",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83fe938b-e4ca-4317-b679-4a8dfe0e30a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b42d98a-ebcf-45de-98c2-e94602bff9d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "170c35ef-c197-4505-b549-596d08dd5483",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d6d1b681-6b1d-4ebd-9635-6ebd94f257dc"
                    }
                  }
                ]
              },
              {
                "id": "2aa549b3-9999-4fdf-905b-85d7e01b1a98",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "05123dc4-ee3d-4154-a04e-411a59e94aa1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "993b74b9-6541-4680-af10-3bb89597e3e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03921535-d959-451c-8cbf-69efc82436c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b4d9d15f-c045-417f-bad5-5bdd4b648d29"
                    }
                  }
                ]
              },
              {
                "id": "33eaf34b-991e-4ec1-a208-3fb2b64e8f3d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8e76e14-217a-4a57-a5a4-ece50fd70466",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c5051a0c-9566-4717-b961-83d1b77f5dd6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40da9e25-630c-47ae-8d10-a1c6793de454",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b8c236d3-8cfd-43b2-84b6-3e064aa4661d"
                    }
                  }
                ]
              },
              {
                "id": "3c63cd1f-8d65-4a37-8ba9-1f46d9dfdeb1",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1901bb73-c425-43cf-b38c-bb8a531d16c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6bae7a73-0c9b-4f42-8b7b-e18e0548a601"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c68b058d-2c17-4238-a91d-e318b1b893ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "dd544ae6-3dd2-4adf-8020-95b44028cfce"
                    }
                  }
                ]
              },
              {
                "id": "876ccf2a-a2ba-4bca-bfd1-ecb7f7cfdd50",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a89611d2-a9e6-4f1c-9740-b23daadb93e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bad09210-a7a7-4270-95a4-3fe6cf034658"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e4c0b92-d825-452f-b1a9-e2ce9588da93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2c256a9b-0748-4be7-b6f5-b0ea3d0c374d"
                    }
                  }
                ]
              },
              {
                "id": "17b9d0ef-e38d-4620-8d83-044d20605156",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6acf05a-d0af-47a5-b6b9-2e4a4244d9c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8e592ff5-fbc5-4e2d-b4ad-136f15c69a66"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6cd7dba-1511-4e7c-8bd8-6f84fda09edb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d9b311ed-e226-47b4-9603-fe88e3f60514"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a3f6b6ee-88f9-41ce-860d-76a257b7fa6f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d789269a-3095-498c-a629-fcceba7d7043"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "33d3b041-404e-47a6-a032-056d2f3e2482",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1c73a68d-3587-427e-8a4b-9a6d2c6af756"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ab37bff-aa2c-4d73-981f-4ea1f1995591",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "329f4d5a-232d-44be-aad6-7f1dd020651f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ed220cb-3172-4029-89bb-9155d4796eb9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "51b3bb49-6dde-4529-a496-58559503d7c5"
            }
          }
        ]
      },
      {
        "id": "c9a26251-560e-41ae-b1f1-f65f5810c87c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "9d5ec2e4-6666-4a95-a902-6bfdb6cea1d1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6c17ad92-6a59-4e07-9502-e8a17c8fceb4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1350c2e2-ee35-4cc3-b2df-03bfcc7698e2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffca4543-10a3-46e5-8a8b-2dbbf698ed97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d2e951c-ab5e-4db9-9aa2-7536154f561c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4567514-c1be-4cc4-bc25-107a0dd9616b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7728cb2-52fa-45cd-9123-c41ff73d4f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba0c448-e412-445a-977a-bbb2c8abfaf9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "888f5dad-e062-438d-aa7f-1f0c9c21e34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d02836a-26a1-429a-a7de-0f6535ca2050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65f8102-acc7-4f22-adde-07dd13253fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "07771115-c842-4025-8ee1-fd0ef1b468b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85e13a7-9298-4810-8b26-a57350764402",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30de2a45-c625-4001-8ab1-831e836eaafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d760b36-8b56-4eb0-ba75-86ee58477ef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7091f42d-3d89-407a-9655-3433c2865608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0135279d-60f9-408e-b3fb-031f7d3cfb41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3cba145-5cab-499e-88e7-d7fd877d03ca",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d3584ea-ad23-4861-878b-1a589a15580f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a55ff46-e322-412b-9316-91b62c23e6e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "143d3b4d-126e-4d13-a093-a0f715b4f31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e92362bb-6527-496c-af87-87dda2546608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f20c28-efc0-4681-9678-79959cd099a2",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f128aa16-7d70-431d-8d5b-bb2baa8223dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ab8f4d4-2251-49c4-bce7-0a3ed164c7c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493404c9-0837-401a-a617-1bce9b530d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ceb1f75-04d7-48d4-88ae-9853bd3aacd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10cd0245-ee41-4aa5-8709-d5951b8d56d7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83370a7-4271-4107-b649-258913a8d9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfd794da-be90-4a87-91ce-be99864a67af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d118a06-b0ce-4319-9aa7-b75df6664390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c25483f8-55bb-491d-a46d-09ca37740fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871e73d4-9df6-4188-b34b-a90fa2ae18ed",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9117fbb-7ec4-4a40-bed0-6d89d18130a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2b2029e-80be-474f-84a6-9167fc0bd7ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f65e36-f9bd-4a2b-b39a-972178aa429b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d184c6d4-2726-4244-be0b-a95bb1abee17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2379c57-f227-4db3-bd9b-89e80518caa3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b56c69-e6a7-4e27-85ac-d0344eb23cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e055f5ff-7a6a-4d39-9ee8-f4b0674cc37c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf22fdc-3d32-4d61-98fb-3a7f02ff13ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c835fff1-917e-42d9-a6e8-8d57dee24455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d786d04-c89b-486e-ad44-072c1f4384a6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93661a4e-61a2-426a-a83c-2bdd7fb6fb2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84019be4-0360-4845-85e3-d563703dbc26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9484ed97-1d03-4221-af11-2e7786b3318e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "59f2ff03-b65e-43a6-82f8-60567338e39b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08b9429-e737-4ea5-a76d-33bf0ce458ee",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a098a9bb-4d0d-4485-ac86-a3487a622fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbfba76f-8c92-4f4f-aba7-8d912d991a0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698dc7c2-d81c-4fd0-8f41-582d52b1a220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02fc34ab-a0f4-4557-a497-c00901d25589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349ae025-e79a-490e-b259-39dc5d8ce1ed",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1edd82-a26a-4320-85f9-34b04cbe093f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfd9254c-1676-43cd-b46c-b42c72845a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "549462c3-e8e1-4044-894c-8e4c1ab90bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "85c6d17b-adcd-4faa-8141-1e0dc1489c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca0b2cd-83e9-4861-9031-9d92de1cea41",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa9df59-2962-481f-bd81-928d023423e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd6e54d-9f6a-4ad9-8d8a-b259fdc49f5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc993da3-cb2b-4ab7-8f17-37ed2db9bad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9cf5f8bc-a3fd-441d-bc00-dc964faea85e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1b9274-da26-4c1c-ad7e-23c89ccd789e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea5fc77-678d-4afb-8fb5-b36531ea7191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffaf99b3-0da3-4799-833d-e667ede98abd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b73ce3-19f8-4039-b4f6-b570a93fe8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1ddc0a2-9704-4352-8757-c0403254b27f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6389292-e46d-4a22-b7f2-4d64112137f8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0689783-948e-4365-8156-44507af24d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19ed883b-a9ff-406b-af76-babe510bcea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "991cd7e2-174c-4dfb-822a-98421c9edcf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a074aacd-9af1-4e36-a85b-9eb33e7070a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4662b0-8ba4-4a30-bfb4-f8ee3d1e6988",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7ad205-39f3-4437-8027-76b6df826503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ca789d-c848-4bf5-bc56-b60c92624cf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4f4158-ed64-4668-add7-1a946926ba90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "049766fc-5bee-4b0c-9b8a-4f86fd614eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfbb2479-a5c5-4e0f-a470-5aeba65481ca",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "835e1453-961d-47b2-bdd3-e5b0eca08e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88c7f12f-2273-453e-a2c7-661e5552dd61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c18f8c4-7cb5-45fb-a226-e82a03c5db71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "393bc7d3-a41e-4a10-9254-602f8b387183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a4a1b9-5e17-4339-bde8-887e3af67712",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa57f668-2a63-491c-9b05-f8c4c5498544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae381fe-8ffe-4477-bd42-d3ab4ce553eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489e7498-50e4-4097-aac1-722a7804181c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ddccc21-d63f-44b3-9bb6-e5c4006a6ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7494bbe8-f779-4f99-896e-f89190cce43e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2450be26-d86e-4b4e-8e59-e9332a1e2c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8fba9de-9406-4da8-b83e-272c1924e149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5acd45c1-c7ab-4c2e-b4ac-e4e9405135ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "13899d03-ed9a-4aaf-9627-d461fc0e4d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2459e4fe-20a2-4ee4-b865-ac0adc7c5f5a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e27fcf-54ec-4230-8354-8b97150ac419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff314b41-3f3b-4b36-9c04-4951842b2091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d00f8a5-c0b9-4fd6-9b5a-041932e0289c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0007deb1-f57f-4443-a9c2-91bf06e2d982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43619e32-f4da-4000-981d-5b94141f3b42",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7db078-85c9-446b-a7f5-a28fc3f2b84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "583cac4e-6d1a-407d-939d-d0185fe86a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d88a82-e2b7-445a-b6ab-454a8a4ddd99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fccac663-cedd-47d9-bb09-d5d86fe51155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe70366-a056-4efd-ae1f-8000a2569f8f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7653a0-ba02-4324-93d9-4ed9f1a4aebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c03058-7f55-40c2-86b4-bc84acf64318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a8ce38-9b8f-4ab2-b814-196703b84645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c1b0593-705b-4be2-9600-ffb075004c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4cf936-15df-4448-b35c-414c612eb15c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8546464-aa7f-47c1-b47e-81c0483665bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "207a811f-3816-4d1a-8196-05f2bb87d2ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d25275-69b0-4106-bd59-0e0bee5a901a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8d96f8d-c904-4dbe-84cc-0d71578294c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bda1d6e-71a2-4fbc-a008-00412ded2d72",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a8a8f4-9168-423e-b4d4-fd13013e6bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa798d5-aed5-4cae-96b7-87a8b44cfa63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a163d06b-1690-4461-acbd-4f81ab76abe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3918882b-91af-43b7-b64c-af3bfa2fdafc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad11c90-d6a7-4708-b937-445af6a49847",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c617da4-c141-4ef2-a38a-2335db6f3aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b4da22e-948b-4d5e-971d-1e9026820676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab5ef02-fe1e-408c-882c-1174eedc0511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9dcd809-19ae-4d2f-9f5c-8faed0f133bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa93da0-6e9a-4b34-9e6e-f935f65da8d4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f6c4f9-e3e7-44c6-a1d1-5743f01e7ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef5612dd-ef37-4160-bfe6-a022d2be7d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363c379c-e9a3-41c1-b869-dc24756096d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e3aa9bc-654b-443b-9740-09f33decb3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a085c0-9172-4e4b-80a4-c0650ab06df3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4934ba80-4777-49e5-8d9c-23df78a4d4be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce5ff7a8-d5ee-4693-9176-08ae075f85b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02946e17-b2bc-4423-a417-f2bf6e7b7a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33596492-8b10-45f2-b465-b8a9ae3a7d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61028d1-4338-4884-9c58-80d51b078d9d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a68e5fc-0ea4-44d6-8676-18f633665a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a79776e2-29ae-4df2-b389-e3f73ada8020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fbbf56-2f85-414d-bd32-3334757badf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69593c24-45b3-497a-b6ce-8801044874d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37befb3c-ab16-4a82-9db6-42780813c68d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ee1fab-9b02-4dd3-8db9-eb4f51473ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd10d6d-426c-4163-b307-36be415beef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0625a7ac-e1e1-462d-9710-adac90bb45ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d5cb1b6-d4e3-4055-8501-13955348c588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc48cbf-3532-42c3-9a04-3048d0f6e89f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9ded6f-c506-47b4-9faf-46a9eb5baf19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d39bb119-d7e9-4214-ac78-1f50dfde9586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3175f44c-7a05-4d43-ac18-379b04d75f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64b7a63c-6009-44b6-8e93-edbaf683c0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb87184-9b87-440d-919a-efb2d679d441",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d11537f-f7ee-406d-9296-2ca9339c7731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a05227e-96ef-4a15-97c3-78bbd78c0651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf659e7-b8ed-430a-8d0c-544991e3271a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3af66abb-606f-482a-a037-2d01dbaebba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c729901a-1602-4b83-8b34-4b69a4e37938",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f423b3c-4156-4280-89d6-2beb5b6a48fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be2bb4f8-d949-4b59-b5b0-fcacc86677fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2179e969-ad5c-4086-a052-18a9568dcf31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe1c8554-d286-4af0-b636-0b27a4f9df83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce326af-78c2-418e-b3d6-a4ca3072c1b8",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec3a148-a3cd-485a-99a2-71c2b11882d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c91a71ff-a8b5-4cfe-9e86-a8fa4eedecc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eedf5ca1-5fd7-4351-ae18-a786989828f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1feeaf73-3c4a-4377-81d8-40d5fe69e64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "418cacd6-be7a-4b02-950a-1a13f5c66b11",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18f9867-aa84-4429-b2f7-a28a157a9944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2678e3a-0416-4da8-a085-d31723c7f301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc48bc1-e57c-46a6-ae8a-7c717b9641eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc5a4043-5c90-4f7e-ad34-dc09f1b5b50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c68bc14-8bd6-43b8-8756-2d1408fab7e7",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9717dec-07a8-4e13-9e36-03d8416064ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6010de7b-2275-4425-9a0e-b9a071d2a50e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e063549-6b5b-493b-9bfb-59d0ff7e14cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b940f42a-f039-4218-9936-e9ab8f5b83db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7d0a0d-b76c-42c0-83a3-c87068d9f066",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd83f534-97f2-4192-a205-535cdd79c375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4749053a-c33e-4120-9edd-81e59b3ed6f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6267a23-44ba-4f6c-8c6d-c9d6d56a8e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98318749-dc18-478a-8ffb-a930bd3ca4a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c825f4-b4b9-43a4-98ee-e90cc1bdba3b",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a4dd2e-b117-45b0-bf2d-9a70bbf03a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e53254f4-ecb8-4cdb-a8c3-9a85989dccbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d0b1b9-a53d-4191-a82e-c6616ec1986c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c8c69ea-d8f4-4f0d-b383-82a37a8bc57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c065236-809d-4643-9dad-06cb812f2341",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b571a9d4-ac33-41a9-a8ba-f5b44ee5dfc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea04f71-62a1-4e19-ae15-06f715f675e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfa27cd-2004-4054-88e4-45d05449177d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22d82308-7608-42f2-8dfa-71ff597c9d23"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "33296609-6031-4edb-a69e-cb11330b17f9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e89a3a19-c8ef-47c8-82a1-b85d4af83d61",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fcf7e0-7d87-4b75-85c5-778175d48d3d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7d870155-24b9-4426-a42a-1c83362ca5f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c2efc7-6175-4a59-9998-b4b265d630bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c38d91ef-56e9-4066-a985-ca3023d4a32f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3aea7050-f425-4e4e-b98c-2c71ba16b6b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00f282b6-3326-42f2-854a-847ffc48a70c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f811863c-9c3c-4cbe-9097-dc0963679fac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53a3e5f2-8afd-4adf-b3c6-b76e84566ca0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab5678b8-261f-4d6d-9a8c-87b389cbdb53",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "efa8717d-5d41-4db7-9456-489b33ae0029"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b1d175f-b03f-44f3-8a46-171caf80b042",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "26d28ffd-78b2-4515-ab82-1e45c5ca7d7c"
            }
          }
        ]
      },
      {
        "id": "c2bf9567-1040-463b-9dfb-66300eaec466",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cabeb92e-0e6f-441c-ade3-24b4f5811841",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7e7ae8fb-ec5c-4d34-9e56-cdcd4a17bf58",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1cc7f075-d497-4f12-a0a1-7e9374b6be88",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da4b8e0-81de-439c-9ebf-cb77c51bb826",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10670fd3-fa9f-4b07-abb9-100abcc4db75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500c49a1-1807-46e5-89c3-b0601bf1667f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4aa6ea8-c4ac-496e-852a-5bccae3bd593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9f994df-3321-403c-add9-8117ed374be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a50dc7-8d39-484f-8475-6de721089bf5",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "951f8e40-e06a-4c56-87ba-26023cc63d1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b9c3475-7df4-40f3-8368-d6098677d97a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae688bb-f0f8-4f27-afbd-ad67d464b3fc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc42824-99e5-489c-84fc-6b07d9a3b16a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1aa1fa7-ddcc-4fc1-9896-8bcce9cd48fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83dca0f6-6d28-41ca-b9a2-ba728b7e1be3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba1b4e9-787d-481a-9b1b-22893ff6163e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b6cf65d-5d51-4852-8390-1203e8cd45d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b13578dd-23b6-4ab2-abc0-3697c91733ac",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e1d3dc-2f0a-491e-9b1f-89a17ccdb9d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eb4e7ee-81b4-441e-839f-d8b8f9ac1199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df45938-1371-46f6-b46c-73758e9829a8",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d258db2-4991-4421-a013-6cd7a12b30aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a224b67-83eb-492e-b46e-6f6adeb29f4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9238a9b-b39a-4bf1-8347-064e88387a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d579692-43ca-4394-9e1d-f2821019a694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141f0bd9-f0ee-4e77-adf7-069c1a44b02d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89ad6b7-309e-4e5d-92bd-84a54cc4b23a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2ab3c0d-137b-47fd-b157-b91c23cd8edd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c96f275-3698-4fda-8828-21922ecfc38d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e79d91e-563c-4b5e-94f3-f869eccbf76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f6f3ea-ad21-4187-ba76-7f45f9dc0218",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bec1770-bc4b-45a3-a5c5-22a2228af141",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "650391b1-aa47-4fd7-8f21-cfe95cc9ae2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cccedbe6-bd5b-4f09-8eae-3be2ef7bfb94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d641eba2-d2fa-4c7f-9b8d-28176778ebc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092071bd-7cdb-4dab-8ae2-c17ca284c2c8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e97bec58-2261-45bd-ace6-1a9eb321d608",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d39f26b-884c-4356-84ac-26b2ceb2d2b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddbac287-4aa7-4eed-96bf-bd1ddcdffb68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2318d51-9ce4-42b6-b95f-388ca09b6c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1317e968-57e4-49d6-be22-be243e028967",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5891fe9-eed1-47af-a545-1736554d3e3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7054aac9-a71c-499c-bba8-23c77ddcc5cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81249430-3721-4c85-ad87-5456758a2386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6506f9d4-6d55-48b7-9490-de419a5a4c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a311ab77-1501-4493-9d28-1898f557f7f5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387574fe-e9cd-43f2-bb95-02caeaf09321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c929fca0-8957-4b2f-a74a-21cae1274f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e5bf86-2f35-4ad1-9b77-d96ba1bf9eb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db105a51-148f-4755-ab0a-f7dfb522c053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0ad3ce8-b333-48c3-8107-c09fc0f77fb5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ae839c-b58c-45d8-993c-b2e132813f25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4a4aedd-3d99-495f-9e01-aad725966303"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7233a574-370c-4902-ab0f-b57e55b6a87d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ce3895-1616-43b1-9871-8b8b89363264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be255b6-f7b8-4907-90a0-7f9c1212b30a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6879168-5e33-4dbd-9f6a-ff49e120cf13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1a5cfcb-b73e-49cc-a560-4f3705fb3eb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61919e2a-2462-4200-a934-dd63ff14b5d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "555cdeb4-85ec-406d-a86f-3cd966b73f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55cc6eaf-cfd3-456c-a68c-7976462c1f9b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb26ed7-e905-460c-a64b-9015306f0d26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fa921a3-563c-4827-96e9-7a8359f0876e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e732bd3-5618-44c9-8679-dc4d23b3f995",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e78b27e9-171c-4852-bcd0-19c1dec89919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39af2a03-7805-4d9a-ad69-854fbb15f73c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d90818a7-52fa-4ce2-b350-11e00e808dde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "890df8da-e52e-4529-8259-56a602e26117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "413531c2-7769-4431-a7fe-297e3fbdfaab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "578106fe-1091-42b1-a095-6100d80e8a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c09225cd-4655-40fd-87c4-122347f73af9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a022aa3-f801-4556-9805-eb701bcca605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f99b387-880f-4201-857d-16ed714d8a70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edcc2726-8d8f-4596-af3e-2d10c60eb588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f8621d5-1ddc-47be-9672-5e424172d5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719ec992-c49b-4ffd-877d-6e30d681e9ea",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd8704b-67f5-40fe-8fcb-42b51cb96d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1178e8b7-0a81-493b-bbf3-a92c4f51c935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4fbd7f4-be6b-420f-bd1d-24b6841953a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23b15398-2c08-4275-84b2-06b1734c420a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb87720-a02e-4e42-96c8-17481d3d6f04",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c456d05-0330-4548-9b0f-485e585d22ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7023463-e890-46a0-a4a2-7eaf1e2c63d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1ad263-2848-43e5-b149-e79b4bddd036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fabc30fc-1fcb-4e0d-9164-41c6d8f64886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94d9fb8-9900-4069-afbc-bf5a52180b0e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e2cb87-6d19-48b6-b69c-a9aa9aa9f67d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a83d04c1-a9d8-41b4-b8f3-8df4c6ad0507"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a421bb1e-1396-4453-a348-b3608ea01795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922ccf29-5d17-4c97-951f-57e146a86451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02b3bd4-97c7-44ec-9883-af8ac9b41964",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1608555-90ee-496e-b001-ab2b84d14505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cca7cbb2-1f3f-4b55-a9d0-18db76b99fac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "749e18b7-62d9-4c1b-9f4d-d7c852c897d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae2780e2-0e06-4130-b08f-b42a2d8e704f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa66f91-58b8-47a2-87e7-58fc076f630c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6a8466-9606-4acd-bac5-b7c7ce7b7bf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ab4a2f5-45c1-4a7c-87e3-fc677764015a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c727da57-76c2-474f-bf16-614aa21b86c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc0e3ed9-e440-417b-ae9f-50d016ed197e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8df44d-3cbc-42b4-8c98-2e427d728b52",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e036700e-1694-46d8-8d7e-60b0e3a5985a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d711efc-6848-4200-b394-e38b744d9bc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace48486-dd5c-461f-aca8-c2419cac8b01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b1dffda-aea2-4ec9-b718-b40da83473cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1acb397a-039c-4153-9866-7a57cb4f74a3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f172fd-6e06-40ac-bb6f-5ab58dc7d9a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c27eb4c7-8f13-45ff-a86d-320be3cf0670"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "327a6513-52fa-481c-8139-bba3f494619c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "709a27d8-8cbb-4298-96be-3d2050b448c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d2f2a1-e83a-4d6a-9c1f-8fd78da424b3",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c425df-bc16-45cd-89f4-ef8b3b966c33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c76b3cba-7c6e-488a-ab9b-108753a04662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd56793b-9fe8-45fe-b091-493428e9f21a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8809e70d-e66c-4f05-971b-ca0e12d137de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36df340-50ea-4909-873a-5fdf74354e8c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d27383-b1fd-4574-b241-1aacf3b64c87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6fb1fcc-7e39-49b0-a7d5-476ab8687608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4973ea-bd23-43e3-af84-eeccda3eb6a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "336006ba-5c93-4f8e-9495-c98dc5927e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3475b2-33ad-431a-9ca4-c268305910e0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb16887-e1c6-41ad-ac39-5f352f5eaf63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b39f5c7e-2c72-477b-893b-cb44f2635b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3895d15e-1c78-46a5-b824-eb67d6c57ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89a3e69-163b-406b-ac6f-8f59644a99d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a9806e-8570-4921-82c2-98786d0f025d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c189402-a8f9-4d48-bc4f-abfe9596234f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5b9ebeb-7f05-47ba-b032-e75ab8f85d28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24080cc-a67c-4232-948f-b60cf610c470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "150baa52-d910-4ba4-b86c-b1fc34c12452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a209128-83bc-4828-878f-cb379b59106b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e4f766-16fb-476f-b3e0-6392dde76f69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbc22b89-4376-4da6-a152-867b9025be2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0cec251-bb85-4701-88e4-93df5ae02b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b26c23d-0a16-4128-b954-d2dd0420d5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "905c95cd-8d6c-420d-9c51-56fd3856c4ed",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db006a75-646b-4d17-8669-cd5dc6ce07fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea751b85-61d4-423f-9133-b339776f568f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0021ca7b-c64d-495c-ac03-8e6bcedb0b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9a35b71-57b9-4ce3-8d43-a3b4218dc9ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e59e0e-9af5-461c-92ad-8224b3a424f2",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42252919-795e-4704-bd66-890197fec1dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd18af82-d041-44aa-83f4-99d6a9026c6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa5fcff-5bce-4943-886d-282527c6df38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9799ef-5fd2-49fe-bdec-533a8f8eff45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f15c7d-e14b-4c64-a94f-3669cfd41e90",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2518c941-5b4d-4962-962f-a4658acca10b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8402e6d0-ee45-4700-9294-6b59aada2f0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feea31ca-98f4-4208-9589-b6ad6006fe6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5002a4a5-a92a-4c1b-982a-5f97185e72e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440338e9-cd52-45a1-9361-a601c9fc6abf",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73a0d4d-285d-4fe6-a3cc-dd626fc2c23b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5250f44e-0013-492b-a56e-9a4266bd4942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47dfd4d9-e295-41f5-8f8a-de22e108bcf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0595783a-d46d-42c8-94b6-812d222b9db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08aa776f-da68-4b2f-8b01-d6eca331ab79",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f657cfd-5ca3-451f-ace4-f0ee0aec4c7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35697b7b-b3f5-4182-8a6d-358d42cf35d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e84f64-8416-4e24-8fab-e6514c7a0bc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c57093d0-49e2-4110-8401-eb0922ce54b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56bf4e2e-001b-4930-a160-66cabf324f4c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cc7041-9d0e-4887-8b1a-ed4459c17650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f524c37-d58b-4d45-9aa9-1c773416b4f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de74164d-51c6-4625-b713-6cecf59d6e59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e3c0ca6-04d0-45c0-96d7-ad1d3f26580b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee1b275-8b1a-49be-975c-3f7df3da8cb0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e117ed-6333-4a87-951c-5f8b1902cad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a42fa2e5-4fe0-4d65-99e5-3fc25a148bbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c80b5f-f94a-41cb-a3c5-cfb671bb438a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b4f0949-0edd-44ba-a089-378fc18f8f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f33ca8-261a-402f-a2be-fad4d1e315aa",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d507399-2fad-43c9-a77a-ea8695d7f5b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d507c261-fee9-4b20-9715-ac8bdbfffe5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "087bf616-0b7e-4bbb-9fc1-9ee72f6112aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c12ca74-b76e-4440-b6be-4e9f8063e237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0864f3-4d8f-4edd-a545-ecea6c871911",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b53948d-1496-4614-a978-4c827e733541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6dfd7f-17f9-4e35-b68b-f2aa51602bd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b39ccbc-dcf1-4e41-8f96-7e2e5daed866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "105d968c-1453-430b-aa02-700dcf30daa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df5ba4e-a6ef-46bf-9929-7291681adcfd",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4f90211-cbc3-4053-8bbf-9d708d4ed2c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bdea9d9-9a19-43ad-a408-4cd0a1341026"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "888948d1-9c0e-438a-8e6f-672d8811ab13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71860478-2ae5-4975-9de3-c5d6950bf174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e196c54a-c8b1-4bfe-9c38-d750d879df2b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6166d7e3-db2a-484e-8062-164c50eb327d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ae2e701-eb9c-416d-8cf1-b910a06d7718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61e62bc-d401-42a4-bb2b-bd0647cd1318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d1d96d0-f7e7-41ff-9ecb-61cacc982b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d1ca54-3f3b-4c8e-b42d-6ea3947377b5",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d3a29f-e857-4951-bc10-27d37fef4c5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf69dc5c-57b4-4784-bbca-6b6ac367e114"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c02c294-247e-40bc-a77d-dfac3c89e445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03e8fe84-1dae-4311-b38c-9dc08110d985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5726b2bd-9197-4246-bd5e-ee7a4adda125",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1368898-d39f-4a21-a2ac-934533182e89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be57eb5-a61d-4189-bdd6-a70d800002f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3e0ebe-2336-4f0e-86a1-0d0e6301da46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20e46eb2-20e6-474f-b99d-917151c993fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14a7356-18b7-4675-b652-a951b78770e7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988cf615-fc9c-4c2a-bacd-ddfdbe117df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a220eaea-6db0-4c8a-aaf6-aaf7609e7250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ea5f1a-6953-4aad-acb3-44bc86d148a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0259d42-564c-41a2-b498-cde1ac88fb01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d2857d6-b086-4476-82f5-46f29babe318",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ed983f-455c-431f-9286-7e64cbd6e314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae1337c-19ce-46e9-b459-126a1048ccf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5617a035-1a8f-429b-a349-34cbc9e04c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120465f5-a701-4344-bdd3-6f6302212c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94d645b-4d1e-4e92-a466-e7ae68a286a4",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf454d7-509e-4efe-88db-f44442c3b86a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de8a7c0f-25e8-4d67-ba50-3281580d0dd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a68238-6cda-4e15-8bbe-ea01a8a531a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68e096f7-8b29-41a2-84c8-394bd91fd476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f05ef9-7bf3-4233-b2c9-002b948e72a6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45bb7f0-f8c0-417c-ae15-e62b769091e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be75c63-039b-4842-859b-1a8412524bd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "784f4854-dc9c-40e2-ba4f-3c85c61a5b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "748fa202-90f8-4c2d-aa74-e87c594aaafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8460488d-3130-4d2a-88a2-7c2d5f50af49",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d0afd7-6d2d-4007-8fe7-7c26cb35e5e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef1b989-ca3b-40c8-af31-7d63dcc98cf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fe9e8f-5a9b-41cc-80d2-d1c3f075c2b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d011550f-7e91-476b-a19e-aec9a3173972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e00054-3a28-449e-806c-935651bea772",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18bed53b-a9ee-4d65-ba81-289ef34eaa21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "868dd179-03f5-49bb-abf4-326f5d382288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3805fb28-5812-4f38-9f82-1e866b542c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e881130-a5dd-4cfd-a945-285403857353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ecb1f88-f4eb-4fb3-b72b-5d5b933d1bcb",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2decd61c-03e5-437f-bd91-8ea36b78ad1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b01dd10-8a1d-4015-8b41-8f9c00c54f99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2dc9cb8-56fa-4b07-ac1f-4f9ba698dae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01cfb298-070b-441e-8765-60c95c1d13d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3bcb1b0-7854-447c-8098-42daacd3126f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d918cd-bce5-40b9-b688-2fa1fb9ea2ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde2208c-0c7d-4eda-a7b2-e7c07792b442"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e8e0ce-a6ef-4e02-add6-827d63bc3570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e00ca35-1f00-41c1-83a6-eba724bf5358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7378f32e-70e5-43bb-b0f0-ecb864d24f7b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba71c712-4156-4ffc-9a97-1eba6c8940cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b2d9835-76ab-4771-9c16-6b2e3661883d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea86ab5a-f9f5-407b-845f-d05fed8389cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cdb1c84-8004-477b-ac28-f9c447e93c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "954f6983-7e8f-4b18-8227-5ed6115b2bd7",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060a2ba9-0418-438a-bbe0-dc67de6b4407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb17b09-1fde-47ea-bc18-09af383c7594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f94c6c1-741e-441a-9d9d-694652a70fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44112ee0-e1a2-48ed-abf6-ced3fbfd0264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "155de1f1-0f44-46c1-a8eb-2970966276cf",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7980c7-82e7-42b4-962d-9f40cfd40a47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65319cc7-603d-4800-b87d-a502387d47af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "183da211-3b6e-4dbf-991e-9500e581ccf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c9a807-f520-41ae-83db-f67d8b5920fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94857923-8257-46a5-a9ac-ef7fe7686f96",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a4e6cf-580f-44ec-b806-64f76122c2ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "470463d3-e581-478e-abe4-c823b4aade23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "169b46b4-b1e2-4c0f-8d79-c33e0fa771a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ef7b69-cfb7-4a7c-a98d-fe5e2dd309b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d782b90c-3b65-411b-975b-8cfb6a52fb74",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2c53cf-75f9-47eb-b906-cbbfc944cdbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42d0d2f8-f3dd-425e-a10b-7387649d63f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be03108-c992-40a7-9355-3699a7cf0f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3956003e-196c-4b0e-aacc-2ee00ddfa0c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "325490fa-60f9-4e2d-a7f9-56425e523037",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f52944-ea0a-46ab-9446-ec9763f68843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "800170ae-13f5-4fad-ad8d-4455e1e7d15b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5b5cd5-d7b1-4391-aeb9-ecd9f017c413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e268921-70df-4645-9737-d36075c76ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e30c8def-ae4f-4031-9cba-ddd03482ce04",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce24788-bd6b-4526-b3f0-f85e5462b173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd02d60-6d3e-4706-960e-0dccc911d62e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "242dd096-c59e-46e1-9314-2b15c96119c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8381fd7a-e01a-4100-b68f-6d423a0885f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a81e11e-c037-4641-b5ec-348d511cee34",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ddc37c9-3f11-4f54-b1e9-bf7d05eca105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e54b5a-d314-45fa-bb74-b57649f09443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a476775-8821-44d7-945a-057f69f25153",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c87f9afb-5ebe-4d72-af7d-ef8b521d48c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa53b688-3335-4d32-92c3-1480700ce346",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da4a8369-11b9-499f-8c3b-c4021acd297e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc538c73-6924-46fd-9b8e-551208d69216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02df4bb3-98c2-45e4-8ea2-3cc6104e0189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c050d599-67ca-4464-bf9d-5ca58ed47bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b206fda-4912-4cbc-8c03-29c28f75c094",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bcb1361-dac3-4430-92bd-52f3ce2571b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e9254d-427d-4f9d-a4b8-423737d653ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "795b727e-f00d-4fca-be52-982dc7f794ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a96e5d0-3f9a-4cbc-a9f1-e987fe0869c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce33d248-9099-4214-8c82-bb7d326f6912",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee391ad6-c19e-43fe-9a0d-f8c8a83096cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1071516d-2938-428b-8303-7ef6ce267f95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4ad168-3335-4450-bfa9-9ceee04d3408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "012093f7-6a5e-4a66-bfeb-3e07ddbd0a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ca2b82-0122-41d6-90e3-e9d4c04972c5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650d13f4-bd91-4130-9408-27008bdf5a48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d88d57eb-4d98-4a86-b3c0-49ead9d6e369"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a45db9-03cf-4ad1-9799-12bb82b8ad04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142f759d-f44e-4f14-b636-1347216febe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "318029d2-83d3-4d56-98e0-cad4386bf15c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1854b87-68c1-41bd-a524-3a1bed721f85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "716b8143-9dbf-41f4-8267-5c5a39e3b419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc4a70f-3fad-4385-9d14-5431869c7845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da34cefe-4d79-4535-9ba5-915e0095e76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9466994c-6d0f-4747-aabc-01c015812d2e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5b7f7a-3f85-4388-864e-28a419f7f536",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92ea2de9-c22b-4941-83cb-31e4b70b7851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfff8234-61a0-423e-9f8c-d4dc32b6b100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e3eaf1f-f92c-4d6d-9d4f-396580a17d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1bf355-45ec-4476-a916-8cde8916a0f5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c49f979-9f79-4fde-bf8b-eacd330ba417",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87cce5f0-88ca-4775-b46a-7b5f4701792b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d7cc3d-4a8c-4955-9723-ab9ea07ee28a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae3f926-3883-4cb2-bab8-943a4d129bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba09330-f3d7-46d7-97d6-d0af0b14e174",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55dfb9a-7942-4787-944c-25e7c2cf670e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08fb4d43-afcc-4f4c-9155-522958dccbe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "369eb252-233f-4d27-885e-45297ca28cf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8085684-ee30-45e2-ada4-45d846a572df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d5bd318-6c35-4379-a0a4-5ef5d9ab7efe",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418ef2db-6538-4078-b8aa-42a7f2005fda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f67be49-ebf4-4380-bd3d-7808eed66d99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad9b648-3dec-409f-9be1-bb5360baed36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7236945-706f-4150-a632-73d3372ff9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac641d7-e2c5-487f-8378-3c629ea63638",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a37ddf-ec5e-4dda-a830-ee8df3977698",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7a826c5-a088-4144-9ec0-b4fd4c06f4ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d50646-dca9-4010-ab9f-1c0b0a9b4641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27f21a69-0871-426f-8b71-3fe34b8d00ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8ea7a9-7b67-427e-bbbe-ee3f98888902",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d885e3-fce5-4c49-a568-3e6a54b99715",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "627959de-abd2-4c6e-8dac-679e10cebc01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c198dfc-e71a-4c16-9a96-7495de1acce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eea23ab-e723-471d-b560-e5ce4497d9a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24298b93-1789-4471-8a46-ed0162228267",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ef5e14-9739-4c61-bcdf-b41562e63051",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dddf6ff-559e-4db3-a84d-cc086582a01e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6a6994-31ac-451a-97ce-4a05a86fa888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d0db7e4-7007-40d6-9657-1ff04ed70ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc77502-78d7-46d6-96b6-33e0b3b8676b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc004e1-5c5d-4d5e-a4cd-05f93ac77ac5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d71484db-2212-4164-b476-cc9f3d31d728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "671f32f5-6798-4ee0-a8cd-38cf5fc1ebb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d99c95de-3ad0-4a84-8f6d-ad5f11c32271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f597140-7d77-43bb-98a6-84e45dbf77ab",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0013356-1234-4bb6-ae14-65d4399bfa5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "221634d1-192b-4c68-a685-d9744d07f20e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f36cb0-32ad-4896-b2c0-46017b13eed0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19f867b5-a65f-430f-8290-0ee9012a63c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0d9f22-c0dc-44cb-a8c1-a787f8a98e61",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ed04ac-825a-4669-9c1a-0e943c04da77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1779dc7-024b-497a-acd9-edb3ec7bf46d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c67b5e-4cfa-4e95-ac45-1332d8a1c10f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e8d9916-01e8-4f85-ae18-f5acd8df93ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb3538d-e93e-44bd-92b8-d35312684124",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a15d92b-a314-4c09-a96f-7f4780ea899d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51b0e66d-6a34-4ab1-80d3-a9a644d33a81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0aeabd1-2643-4959-9ef6-132fc349ab1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a974f069-2e60-4cd5-96e2-fa5f643917ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d685cff3-6160-4982-8253-330711efc916",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4c1c9e-9366-4bd9-9b59-ed6f3035ed08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26b1cae8-925a-431a-880f-c34eceed1836"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c603f72-6f1b-4213-bcb0-0a6ebdbb2bd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba3e139-eafa-466d-b803-53b362dcf77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126db941-5ab7-46d2-959a-c43db92c8c80",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d61f470-d1c4-44a9-afa5-f0fb956fa411",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76e78534-ad8c-40ea-ab0a-efefdd93e6e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0576948-f243-491f-960a-358efb426d4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3085e914-d09f-4275-b602-c530f7b949af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e26b02b-d675-48f7-aad0-2d94f1b5b16c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b8b060-e4cb-40ff-8627-01cdb2d27233",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72690797-6fa2-4890-a5da-ea6e721c2e0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "236701d2-8730-4a68-bdd2-88f9246978c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebdb55c4-8351-49bb-9481-d4900e4f5722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb792bd-8415-4c80-8c64-c9c41b232ab7",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01156e9b-bf92-4428-95df-a77436f40ed7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0a87e0c-c368-4859-adf9-522a10ca2405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "738886c4-ef46-4954-8fc9-10b89f2c01b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c5505c-9eee-4c02-b227-1ecf226ca5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ad4e11-7890-40a9-bdb4-df0a43bba196",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c048c9-91a0-438f-bff6-08cec0bee060",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6103366-ad12-4fbe-b751-fa919b3e6e9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97a8122-2186-4e56-b8dd-5b1e834fb01c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9babaa8-542e-4f61-92aa-3a3b494ea455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88e75e49-12ac-4916-8242-e7f3bc236d66",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c4535f-6d55-4428-9bd8-9fd50430cabd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aebb1213-4d35-458b-8ddc-92a25bbbfc58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc8c530-7f76-4150-8849-d69b4647c908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d9691c9-169b-4908-894e-1acf669f8365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868ee024-5d90-440a-990f-3bf9313a8bb2",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d727393-1b47-4dea-a546-33eab4ed3322",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db55e343-1c20-4323-85d7-64ec15941cab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74be33c9-7b1a-4cbc-b0f8-bd7591f65162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3a4020d-444f-44de-bdc7-74bfefaffdab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7dccba9-849a-4f2e-9d00-7bd04934d40f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0672293e-6260-4027-809a-291515ec5ab0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d34b41ef-806e-4c14-9d1f-29d2a5160aff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c33b6a5-e9ef-4bfd-886d-7b5168a3b8d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0548a935-7c30-4760-be59-2e85a8506a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708c4d31-8aa2-4138-b250-704aaabeba59",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b8c90a-dbd1-43fc-9a32-195bb6538079",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81e7c309-9772-40ef-997b-5a5fdbe6e5e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abfa055-d63d-47e5-9ada-bfeb2e218786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cecd674d-4a19-4e3b-bccc-7f3f7faeedad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d983866-7547-4e24-822e-3b4ecb802271",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db035f7-3206-4ebe-9c4c-3eedf1c1048a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b299776-a08d-4d8c-a178-4168461a14c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "787ad2dd-4547-4ad2-9d3c-63e6082553a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9a174e5-3d68-4fa7-b9af-988159416c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b4fee2-df13-4beb-94ae-0c3d5fe8c5d3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0595853-65d7-413b-967f-78f14c7360e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d35fabe-8e10-4542-855b-ab8a68135200"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "926fa859-6ffe-44cd-89a3-9ce34992a572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63f98042-631c-402d-9de2-5fbe51aeeb0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91b2e7c-c18f-46dc-9949-97b7a2505759",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d89dae-e5db-496e-989d-5b8333713f19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6c9ecc0-eb8d-4d1b-8b69-d0527304ed0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c906238-8ff2-4e48-8eef-89bccc0be643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6acacd4-60e1-4f07-894c-5b427ea3e11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6321f8ff-6ab1-41d0-b52f-9771bfe41934",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b6c082-2e7b-46a8-8c0d-40e301979a8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14110953-3aa9-4e14-b7f7-2235a2ca3bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93e127b-be3f-4092-9ad3-3644b359b1f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91dbfe72-9898-487f-b140-884e9d850d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9387f1d3-5382-4c69-808d-579f6d5d9202",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3bd99b-c5b1-4673-ba92-f91eee592b19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "686a781a-664a-4823-b134-2153053fd6e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08da5a9c-9537-422d-8bae-92af852a723a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47766804-d571-4f87-af39-1b5831f2043e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46733bc1-b287-46af-8df9-353661d8995b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d31f21-842b-46f4-80a7-8d8f359be833",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b6a5eaa-05b8-432f-a25f-feef2c469236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "958afa27-6543-4267-bada-aebcb8ca40fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08348a66-c967-48ed-b10d-66cb8e398709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b08e3a-fc14-4647-9ebe-9bf9cdff8499",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8e58d6-1466-436b-bd8a-a42635a74881",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fd5c0fc-7ddf-446b-8d27-0ca13d065f8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d635ab41-0557-4ab6-b0e3-c44ccaaed100",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f915ef9-34a0-468c-a2a0-a8c6bb72c44f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f0886d-7e80-4229-8a8f-2690168987c3",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0fad61-7026-4da9-9fe9-1f0428bc1ad3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27d936a9-59ec-4e93-9b1c-662fa18e91eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "718d5435-3081-45ea-9b65-3f0514b71626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb214856-d2ff-42d5-9fc2-a7e8db3df29c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254ef9b9-c12c-41e1-8e71-65a89d2fe64a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ce15a5-89c8-447e-8855-e05decf81927",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf004c75-fb09-4299-9eea-2b3b3928e3c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2511476-d54f-457b-9db3-5d46a88a4ca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc0b8f01-3701-4064-8c3a-d7637db2351f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d3a785-c9a7-4e71-a18c-13d0b03678bf",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f212e124-6761-4c18-8e45-a5931e5fa402",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a644939c-84f7-450b-a346-aa4033a06119"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7bea13-24cb-49c6-a288-fcd5ff95ea5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d3baa0-c698-486f-9110-a8aacde42e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310af1fb-9e72-49fe-8bf3-6449348d5e54",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95290986-3a7f-4839-9705-a0acc61af68d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ef358f0-680e-49c0-914a-bd7c5d1c2e5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b31d1ae6-4322-48c0-aa12-90f8b61528a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d50abea7-b6c2-4e11-866e-6740ea70bf39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a68530-8e83-4dd3-a461-29a2c3aac315",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfaa646-c4ae-45c7-9129-74bea528120b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "546d90c0-85bf-45c0-89ec-1ac4191b1642"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ccba68e-1ac1-4eeb-bbfd-ac566968f7e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b3fe8ad-ccf2-45bc-919e-eb5b3a697f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1065666-e215-4383-8d11-4d1702969335",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3aae8d7-91ac-4cfd-9abd-cba57977deda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "789aa876-2f0a-4a29-98c2-6b900d9891e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94cb04a3-c8b3-4d9c-9127-d664b7323c69",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5713203-26e1-49fe-b250-0a41e72e9674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1784e71a-71e4-4519-b433-f3f9574bbb7a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6a9e54-f0bb-48fa-bd14-2b763374fc3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "448d9072-209e-4c08-a7fd-bf328e229887"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "053af3e1-fd08-471a-9d9b-9d4ba532e819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f36fb525-8b90-415e-af10-e2680f5171e1"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29052cc8-043c-459b-8173-ec865e148aa5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b6bd73f-4d4d-4ae6-9714-5138c9585462"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "96657aab-a484-4fd4-bc8b-7d1287d9dc01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6a07adea-6121-4767-8929-29430829588c"
                    }
                  }
                ]
              },
              {
                "id": "c7a553a9-d0d4-4bbd-ac37-30b0c24be30f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a3a77e84-6b39-4cf9-b8d7-54bbcdc3a3c4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae27c4f-8a9f-421f-9732-3a2048b56a30",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e4b2405b-0d9f-440f-9643-651577dba578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "087280dd-37f4-42b4-8026-d0f90841d939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d760904-1ce9-41be-a706-afac206a37eb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0da78823-8009-4afb-8e9b-7c3ab7539cce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a48afe4c-3e1b-4101-ac14-ae8e8b90dc02"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a178b331-3728-4695-8299-e17fc2e8e4f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce4e07f5-51d1-4cdf-b209-d9965e43ce4f"
                    }
                  }
                ]
              },
              {
                "id": "9df61da9-e7cd-4efd-ba63-750c15d4cbe1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f3664516-9fcb-4ff0-8efa-78e06c358f3c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58da7ca0-b0ac-4b2f-8b73-82868b1e93b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8095ceb9-b8e5-41db-b8dc-62a6775a424b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f57340-f956-40c3-9021-f8801cb9dd07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "968180bf-50a4-4eb6-a260-7a37bc4b442e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "07d4fa40-07ef-439b-b64b-0853e522215b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b2f5a305-ef34-456a-90f9-7d4d792fe8b2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e83acf01-c9ee-4b3c-af46-fd7c981779e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f3f0c035-1a26-44c3-aafe-c9109bce2e0a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0de9b8ea-5030-41b2-8f31-1df1ad6599c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0fffe2d7-e657-4851-9ab1-c5f5dc81dbb7"
                    }
                  }
                ]
              },
              {
                "id": "5f689a95-fa9c-4a53-a2f5-05daeb4b1b58",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf66b3bb-51dc-4136-9056-2a423d2b365d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2b13774c-2ab4-4fcc-9f4a-75dc276853cb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a46d0f3-721d-46b2-a646-e0ac682ae819",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76225c50-6b3e-473a-a98b-e92a9f84d420"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab5b28f6-3256-4965-b23a-3084e2f35021",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "03f9dfc8-2cab-453e-9085-93335530bad9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e37d5fa-1ac5-4709-bb83-851ebd6896c8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6e448c01-c449-49c0-a771-b03f56486e0f"
            }
          }
        ]
      },
      {
        "id": "d9c38567-ec2f-4f2b-852a-8d83bd5aad27",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "295cc4a6-b0fe-4b20-8182-5fdfa6ef2a78",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7c67dacb-1b56-476e-86bd-ab964eb6f8c7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e08db85f-078a-4ace-9675-373585dbbcf8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8136e8e-51c7-4c2d-bfb8-2ad1ad083c22",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1b504efc-efd5-4c6c-a73f-9c27fcb54f38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9743cb67-bced-4838-a81a-986ee20546ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "615b7e0c-46ce-4dbc-bd90-b9792e0a765c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13c2b9b9-1416-484c-a3f4-301980061977",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f4dceda-dcbe-4645-a372-158d1c9d63aa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d8196eb-58f4-418c-9b2f-576f037cdf9c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69f5ad32-7952-4f5a-ada2-0a040312042f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22758307-0067-4a16-9903-99f4908cf945",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "db6b506a-da08-4abb-80e1-0ce58f619448"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "356da2ef-200b-4d54-8881-a5d4d1fddb27",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e45240b6-5481-423d-8fec-151d92de724a"
            }
          }
        ]
      },
      {
        "id": "a42fb1f8-7d06-4bd7-abbc-8c29c0d2cbd0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3b841036-aa7d-46a3-914e-33f14769e1d1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "937ac7eb-2889-4ea9-9a1e-4dbf34485dda",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0bb12b47-7394-4957-abf3-0bf3d5a9a607",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed34da0b-01c5-4de8-bd58-1f00ff264cf5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c92a9f9-aac5-4902-b935-ba324e507d48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35728f99-c820-4957-a93e-121f1234328e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15a2f175-9e47-44b2-b2c4-53dc6d4da0ed"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7cd06e8d-ac19-4723-be8d-9f5b0051bdae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16db22ae-de46-4947-bef5-27570a5e4f3f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a5d5dee-61ac-41b1-8a36-b02e8f9223b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a20872b2-c3af-44e2-a274-9497e0e7b4a4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3e2a3fa5-5123-43a0-93fe-9c238aa04139",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "027234f5-6263-45db-ae6d-8fb33a7cdab4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ab75786-dd0e-442c-a1c0-716ef6215760",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e76ddea7-80a0-4ea5-8aa0-e064d9cc984e"
            }
          }
        ]
      },
      {
        "id": "e703df96-a8bc-48ba-9c59-ac664b61e477",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "df139851-c2b2-4b22-b76f-f241dd92a1a7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3b50c2bc-8037-46c2-96f8-58aafb7f20aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "126f8ca5-ad8e-436b-89f2-673cffecc53b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d95d8bc-e693-4a89-ba16-c8a5047cabd9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e58f7b4e-a6d4-4c5e-9593-49372929b3f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67bc252d-9eb6-4015-b776-3840450a93b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "648cb800-1398-48a2-8455-d7de966847fb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "460211f3-78ce-4b6f-aa21-53552809ef10",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89f276bd-4a36-4438-b029-804744299a0c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "de505af5-ff9a-4a2e-893a-fac13c70c4f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16d6890d-a83d-403f-bf00-bd46e9f4101e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1200a1bd-3edf-449f-913e-fb5c46e07cb7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "53386dae-7391-4eae-b412-065788096bcd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f13299cc-925f-4c7e-993e-26b058d0e4bd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eb8ef2ba-8686-46d3-bac4-bb0f3c3e51b4"
            }
          }
        ]
      },
      {
        "id": "727d4647-c823-4dfd-989f-8649bffbf52b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "048f234b-4fbe-44bf-b266-18cf46a58bdc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3de310c5-6d55-4c6b-847e-46fd0cb084fd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9621d6c8-5b07-4731-9588-9b2826dadf07",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd2e7663-356a-422b-bcd3-e67d288efa54",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55835f52-fcff-492b-b31d-17a244f99a80",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 81.59920634920636,
      "responseMin": 7,
      "responseMax": 906,
      "responseSd": 90.54816572869079,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1712882134221,
      "completed": 1712882163579
    },
    "executions": [
      {
        "id": "28a2bb8f-44a3-422e-88ad-a9a609998a20",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "006bda0b-83df-4bd2-8886-a9d0db86be72",
          "httpRequestId": "5afcb0fd-6ae6-417f-9aae-918b7e2ef4f2"
        },
        "item": {
          "id": "28a2bb8f-44a3-422e-88ad-a9a609998a20",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a724584d-a572-4eed-9241-fed6e2ef4fdc",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 0
        }
      },
      {
        "id": "46aa4268-0508-4824-93ed-4cd9274ca3ed",
        "cursor": {
          "ref": "cabae8ed-a397-4f26-a3e4-d1c279f4387a",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f7a22874-4d26-48a0-a2a2-45c91ceb0ced"
        },
        "item": {
          "id": "46aa4268-0508-4824-93ed-4cd9274ca3ed",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2f52efc2-bb06-4fcc-8c6d-c33e02ea6e8a",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "a87b2042-b678-49dc-bb0b-fede7f9189f5",
        "cursor": {
          "ref": "dfb3f1f0-ca36-415c-9c2d-16c0b48ae9d9",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6f62da8f-1690-47ff-8e50-15008764e3d9"
        },
        "item": {
          "id": "a87b2042-b678-49dc-bb0b-fede7f9189f5",
          "name": "did_json"
        },
        "response": {
          "id": "b9d6a3fa-4318-4496-9e36-91ff83c83904",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb8ff7c-ea4a-4580-905f-90966b3b4f5b",
        "cursor": {
          "ref": "e99ac8ae-10bf-4b61-b79a-3e998b6be933",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6be09a27-513c-41fb-87f7-fbe66f0b08b0"
        },
        "item": {
          "id": "abb8ff7c-ea4a-4580-905f-90966b3b4f5b",
          "name": "did:invalid"
        },
        "response": {
          "id": "ff9a8cdb-67cf-4465-af70-35447478197c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb8ff7c-ea4a-4580-905f-90966b3b4f5b",
        "cursor": {
          "ref": "e99ac8ae-10bf-4b61-b79a-3e998b6be933",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6be09a27-513c-41fb-87f7-fbe66f0b08b0"
        },
        "item": {
          "id": "abb8ff7c-ea4a-4580-905f-90966b3b4f5b",
          "name": "did:invalid"
        },
        "response": {
          "id": "ff9a8cdb-67cf-4465-af70-35447478197c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c20a97fb-46d6-48e1-91fe-47bc0b51c631",
        "cursor": {
          "ref": "97f0c8c5-c969-46f1-9add-9199a0220ab6",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8093fe6c-984e-4771-8c84-c65bccaec025"
        },
        "item": {
          "id": "c20a97fb-46d6-48e1-91fe-47bc0b51c631",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "473cbe58-f40a-42d6-bc90-111294634465",
          "status": "Not Found",
          "code": 404,
          "responseTime": 337,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ffb18e-db82-4f2b-946b-57526de52259",
        "cursor": {
          "ref": "14b0e295-9317-4b9e-bc83-bce768ba19dd",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b3100a43-d899-46ba-abe4-6300324b0671"
        },
        "item": {
          "id": "37ffb18e-db82-4f2b-946b-57526de52259",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1155ad94-256a-4b84-9665-70cbc3fb8f48",
          "status": "Not Found",
          "code": 404,
          "responseTime": 55,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e29967-c9e8-430d-b16f-fc0fffb3998f",
        "cursor": {
          "ref": "306fc4da-fe56-4651-a087-ace9199ae7cb",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4eb0bb84-c87a-47a2-aae7-bac09b6e2ea3"
        },
        "item": {
          "id": "f5e29967-c9e8-430d-b16f-fc0fffb3998f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0b169a3b-f7a1-414c-8bca-84a7e3cc3997",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb809fb-4ec4-4f3d-86d0-4e4218ef5f5f",
        "cursor": {
          "ref": "1eebeda1-60a7-40c9-b1b9-d7a0987daf89",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c043419f-0948-46e8-b8ae-352ab5e62356"
        },
        "item": {
          "id": "1fb809fb-4ec4-4f3d-86d0-4e4218ef5f5f",
          "name": "identifiers"
        },
        "response": {
          "id": "d0c37c98-3621-4d05-ae03-41a11ad0406b",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c0637b-0637-4f50-9854-23b1b2c74820",
        "cursor": {
          "ref": "a9dd6f1a-a159-42ed-8770-001ccba78013",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a0e08342-3b36-439a-ac79-5edb8509fe89"
        },
        "item": {
          "id": "e2c0637b-0637-4f50-9854-23b1b2c74820",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "071e28d8-507b-42f1-8947-4866065813fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85cd3f1c-b10c-46de-8a02-61ee2ef8d3e7",
        "cursor": {
          "ref": "4ff9de85-b8c7-4302-b2c6-22b6ea08dd12",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7cd8a4cb-e62d-45ed-abb4-0de4ccfd046c"
        },
        "item": {
          "id": "85cd3f1c-b10c-46de-8a02-61ee2ef8d3e7",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dfa8d2bd-5c56-4697-b394-9058996a3a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4848e7c2-a046-450f-8e46-e9ef7067ccb4",
        "cursor": {
          "ref": "0290ba35-1afb-47d0-bb45-3c1c4ba7ab9f",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b750f050-17f9-46d6-83d7-0fadbe50a5f3"
        },
        "item": {
          "id": "4848e7c2-a046-450f-8e46-e9ef7067ccb4",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0e82db78-ed4e-4dce-8e99-ee659b4d4eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7679ed-8629-4f38-85ae-16060ef5caef",
        "cursor": {
          "ref": "6f5585ca-d22d-4801-b816-b288e526828e",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4030b148-d8aa-463b-ac98-32aee0aa5ffc"
        },
        "item": {
          "id": "ec7679ed-8629-4f38-85ae-16060ef5caef",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0968307c-9ba9-460f-b053-de0488e5ef67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8796e82d-b8f9-45ed-ad0a-e225e0b9e8bd",
        "cursor": {
          "ref": "2c0be976-d38d-4396-a659-cbe8413e1c83",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7df52284-503c-45e1-8e7e-4c3748d989b6"
        },
        "item": {
          "id": "8796e82d-b8f9-45ed-ad0a-e225e0b9e8bd",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c3bfcaec-ab59-4417-ae12-a32b0e329eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2304861f-ce46-44f6-8382-9123c735c5cf",
        "cursor": {
          "ref": "06098b4b-7edf-4b7f-8b5d-c1b1e1705369",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6f14e5c4-d2f1-4147-98be-d8d7ca89feb6"
        },
        "item": {
          "id": "2304861f-ce46-44f6-8382-9123c735c5cf",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "027c5426-4a64-46d8-9ac2-caafa8ae8c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250da8f8-fdd5-45d5-aad9-6d32ac3e8b17",
        "cursor": {
          "ref": "6845753b-3704-4e87-ae98-d6056cdce067",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9efb4de4-06d6-4adf-9c62-1ffb48a29807"
        },
        "item": {
          "id": "250da8f8-fdd5-45d5-aad9-6d32ac3e8b17",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ef9e352d-78a7-4ccc-8207-3a0c143b63f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5457aa2-e4c3-4574-a2cc-74a925a85bd1",
        "cursor": {
          "ref": "1b95be4d-2e34-4ae7-b2ad-04d4cce61efe",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f4fcb42f-58dc-4cf0-98cf-62d1f99106b5"
        },
        "item": {
          "id": "f5457aa2-e4c3-4574-a2cc-74a925a85bd1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c3bda708-568a-4a10-8478-fa5743b1ae5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3cea0d-2ade-4a59-9f92-42797419c8ad",
        "cursor": {
          "ref": "78598559-550d-46f7-8a06-edecfabee396",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "fdcd2556-7706-42de-b53a-303a4ebb6464"
        },
        "item": {
          "id": "2d3cea0d-2ade-4a59-9f92-42797419c8ad",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "481871fd-2c3f-458d-8862-1c5cf3f85faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c0c1d3-5018-4088-9b1c-a98ee43db96d",
        "cursor": {
          "ref": "9ce4d08a-57f4-4cf0-9507-8942f321724d",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "17e1c795-5dfa-4dcd-88f2-6719f368b99d"
        },
        "item": {
          "id": "49c0c1d3-5018-4088-9b1c-a98ee43db96d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7f48fbbb-1f08-4514-96f4-d4543fcd0819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06e8bbc-31f5-4268-a7a4-a850d7e72c4b",
        "cursor": {
          "ref": "f0f31b02-fc0f-4b8f-aa0c-b54bb64d2b91",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "59f34d66-148f-40bb-bdf1-8690af4ab1a9"
        },
        "item": {
          "id": "b06e8bbc-31f5-4268-a7a4-a850d7e72c4b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "530dbebe-9186-4b9a-82e7-94cd9a2903c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca838e6-3b86-4533-8f12-0258b36e9584",
        "cursor": {
          "ref": "bf33af5c-b65a-4402-88e5-677699cc4f12",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b7aec2c7-6719-4a17-a1f6-73eb3d04b19b"
        },
        "item": {
          "id": "cca838e6-3b86-4533-8f12-0258b36e9584",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0cf8c62e-acc3-4f48-a1e9-8d72f7e8f051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d19bcc-9f78-4df4-8551-21693f9ab201",
        "cursor": {
          "ref": "40a6da7f-8302-4e27-967e-85b8638cbf90",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4fb16f29-5a67-4e2a-9c33-f9ae1bfb7558"
        },
        "item": {
          "id": "83d19bcc-9f78-4df4-8551-21693f9ab201",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "12c298a2-5fbb-4ad8-bc53-bdc72d2221cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43920baa-47bd-464b-aba6-1959362f3843",
        "cursor": {
          "ref": "5462c10a-f8c4-43b7-85e9-2d57e7624941",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c7004c57-08e1-4462-8a03-8c0d9737e667"
        },
        "item": {
          "id": "43920baa-47bd-464b-aba6-1959362f3843",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b89a1908-f190-40f3-aed0-3ba271ee35a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df524990-4602-4e37-ad4f-4e79a33d3254",
        "cursor": {
          "ref": "c03fdccb-1f84-4b63-bc7e-3b5c11a11839",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "75bab440-ce4f-40f3-805c-a8a164b350f0"
        },
        "item": {
          "id": "df524990-4602-4e37-ad4f-4e79a33d3254",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0b3db357-6150-481b-8cfe-7e8f380d7c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b935a04-34c5-4d3a-ab71-a5ce05a66556",
        "cursor": {
          "ref": "59873d50-8186-4935-8386-8532ae02a95e",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5d0807f9-d8b6-4b53-86d5-a62466207351"
        },
        "item": {
          "id": "6b935a04-34c5-4d3a-ab71-a5ce05a66556",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "dc9ab22e-3643-4ec3-a2e8-46bc429cd30d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfbbeb1b-d046-4e16-88aa-1507cfdc5e0b",
        "cursor": {
          "ref": "5817f38c-749e-41e2-9117-3b171fce4f93",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "018bc299-7948-450c-ba2b-2fbfac91ff75"
        },
        "item": {
          "id": "bfbbeb1b-d046-4e16-88aa-1507cfdc5e0b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "cdc05a2e-783e-472b-8d3f-427a4c32b7eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb6de2fd-25b2-4dc3-908c-6ce3a821b1e2",
        "cursor": {
          "ref": "00a1f752-ecad-47e5-abaa-ff7d6ed3f271",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c381dca3-bbf5-4e88-b39b-ba6aecc694a0"
        },
        "item": {
          "id": "bb6de2fd-25b2-4dc3-908c-6ce3a821b1e2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c944584c-022a-467b-824c-187c43c48d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7715b6-ff58-4890-9f3c-5a09c05c3450",
        "cursor": {
          "ref": "441c708b-256d-4e0e-b191-921d9d5e5901",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3ecec45e-1b6d-4486-9cc1-ac6443d87947"
        },
        "item": {
          "id": "5d7715b6-ff58-4890-9f3c-5a09c05c3450",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "03c77c6e-086a-406a-b15f-19516e117c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1626016d-3f12-44a4-8250-6985fe36d3c1",
        "cursor": {
          "ref": "9f08209c-2f02-42e6-b6dd-704495a557aa",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "70262c79-a312-4abc-a985-8a0d15cd989f"
        },
        "item": {
          "id": "1626016d-3f12-44a4-8250-6985fe36d3c1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6bd3492d-77f2-4adf-80f4-91d7577d1b33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27322cfb-a31a-4e92-9725-ec6482b9b869",
        "cursor": {
          "ref": "9b5b6ced-b689-491c-aadc-f2f59bafb5d3",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "beac8f0b-d751-4c3d-9d43-b818d26dfc4e"
        },
        "item": {
          "id": "27322cfb-a31a-4e92-9725-ec6482b9b869",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5880c75b-abb0-4642-9327-1dc91d32137e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8da86c87-d41f-4711-bb6b-61d486b2a153",
        "cursor": {
          "ref": "4f1e8acd-8898-4ae7-8b8c-ac973a0dddfa",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7efd81ad-7d5b-4902-beb7-ef55e851db17"
        },
        "item": {
          "id": "8da86c87-d41f-4711-bb6b-61d486b2a153",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b4f31aa0-475e-48c7-9f38-44cb674b0d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62effecd-face-4bf3-bcec-469c83f807fb",
        "cursor": {
          "ref": "cc916e8b-d81c-4133-a894-ea37e594f0aa",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f22580fe-866f-417a-94f4-033abb8fdfcc"
        },
        "item": {
          "id": "62effecd-face-4bf3-bcec-469c83f807fb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0bec01aa-3274-4de5-9b91-b5228fd10a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f93f1b37-6b9d-4e94-8baf-9023b35a5710",
        "cursor": {
          "ref": "beb4853e-2650-4cff-a4a9-343bcc543651",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ac356b32-86f2-4c4f-af31-d0e7b102d6f2"
        },
        "item": {
          "id": "f93f1b37-6b9d-4e94-8baf-9023b35a5710",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c293d821-3eaf-4656-ba35-78a6c99f5f53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b553d6-5bd3-4f1a-93d9-4b0d4d5c6e92",
        "cursor": {
          "ref": "38882ea9-70d9-45fa-9739-b4795208500b",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c2544876-c20c-4385-87fb-25aeae2b9968"
        },
        "item": {
          "id": "96b553d6-5bd3-4f1a-93d9-4b0d4d5c6e92",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "df4d8a22-852b-4283-98ba-4b36fa03222b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17dd86b7-de48-4c9d-853b-6958beae88be",
        "cursor": {
          "ref": "8c8ff97e-dd4f-41dd-b5b6-e959adde9fa1",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "dbe294ed-eb34-4ba8-a253-e9282532ddaf"
        },
        "item": {
          "id": "17dd86b7-de48-4c9d-853b-6958beae88be",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "33e6cfa6-374a-4b1b-9285-c463df759218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4a6efb-635a-4dff-bd60-7e11d5bb7e3f",
        "cursor": {
          "ref": "711b407e-c9b6-479e-8ab2-0f11ca9f07bb",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d4a2cd87-91a3-4941-bd82-42a160e27efb"
        },
        "item": {
          "id": "8a4a6efb-635a-4dff-bd60-7e11d5bb7e3f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "885e5c24-719a-4fb8-a915-325c20db2123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73134313-2280-4099-84b3-c74385ad8da7",
        "cursor": {
          "ref": "751253b5-0195-4de6-8bef-2d8c51a738be",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "44cc2248-289e-4f55-b150-a2df230d8500"
        },
        "item": {
          "id": "73134313-2280-4099-84b3-c74385ad8da7",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d189a244-0831-4229-8d1b-18b9d30e4314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ca9ba2-f8dc-4fa1-8ff3-3490e8f4b9f2",
        "cursor": {
          "ref": "d729ec8e-e999-4b2b-a150-2017d94d75d9",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "09028ebd-b8aa-474e-8090-9124965004a3"
        },
        "item": {
          "id": "28ca9ba2-f8dc-4fa1-8ff3-3490e8f4b9f2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "18534206-4479-4fd9-927e-d9b2146bc35a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1e50a9-021a-4e2e-ae59-477a44c467d8",
        "cursor": {
          "ref": "52568e60-66d1-47d2-8f85-4484488a8d34",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8c87853b-d81a-4a33-9411-2a6979f51865"
        },
        "item": {
          "id": "ce1e50a9-021a-4e2e-ae59-477a44c467d8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "13ff4a71-8d04-4add-a087-9be6ef1d7b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4e7033-0158-4d19-ba66-0b47661923dc",
        "cursor": {
          "ref": "442822b4-ec6c-4935-b192-e3f9c6a4d45b",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6f4a67e7-af48-4e38-9330-12e2e6cb7d1e"
        },
        "item": {
          "id": "9f4e7033-0158-4d19-ba66-0b47661923dc",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "28194b27-3729-4166-b9a6-0c40d0dccdae",
          "status": "Created",
          "code": 201,
          "responseTime": 906,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6141a210-9576-4a58-b8fd-879bddf3510b",
        "cursor": {
          "ref": "5a4630d9-62c5-4bb4-b8b8-7934444b8e1c",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5779f97d-4742-4d3e-99ad-1842343cd0e5"
        },
        "item": {
          "id": "6141a210-9576-4a58-b8fd-879bddf3510b",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "20baaff1-7b33-4eed-8aae-5f444668faee",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "5c3b543e-1e79-4e86-aa85-6bae80ce2cdf",
        "cursor": {
          "ref": "02c5a09e-83a0-4563-9a02-997f608a487d",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "88310266-0446-43ef-905e-06f2e5973fcc"
        },
        "item": {
          "id": "5c3b543e-1e79-4e86-aa85-6bae80ce2cdf",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "dd2e60c7-91b6-451b-8e28-9b867c609368",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0f334ee8-8a62-4460-be74-0ddcfb82a5a9",
        "cursor": {
          "ref": "c61bc318-5e09-4aa8-8f00-ef61c35342fc",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "06596cec-4d66-4d9e-8382-fda17e641af3"
        },
        "item": {
          "id": "0f334ee8-8a62-4460-be74-0ddcfb82a5a9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "28df4cc3-8b6b-4369-8e1e-8d8e66435354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7faa71a4-f94d-4d5a-b7d2-69bbe426b762",
        "cursor": {
          "ref": "a9dcbd53-06e1-415b-9424-0d2ef85ff674",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5c141d0f-53cb-4c24-bc35-a56cf412457a"
        },
        "item": {
          "id": "7faa71a4-f94d-4d5a-b7d2-69bbe426b762",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f41fd776-aa88-4481-a559-a1576dc60519",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e941a598-ef28-43db-9aff-19d63e8389ae",
        "cursor": {
          "ref": "5a8c22d9-6458-4582-84f8-db1cd1de1829",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "869f1deb-cd05-481d-9672-639350d51ee5"
        },
        "item": {
          "id": "e941a598-ef28-43db-9aff-19d63e8389ae",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "04599c50-7b5b-4f8c-a654-11cf2b38ecd9",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "1ea82031-a05c-4c56-9496-0d2734bbbc38",
        "cursor": {
          "ref": "6e67f4d5-5c97-491a-8b09-8d3b1cce380f",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f2187218-9dfa-470f-a50a-b56e24d88b92"
        },
        "item": {
          "id": "1ea82031-a05c-4c56-9496-0d2734bbbc38",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a1f982cd-72ee-4046-a7cb-5815025804dd",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "879e2ce1-8936-4b7e-afc7-6cb4d7329d76",
        "cursor": {
          "ref": "42fe54c5-b4c1-452c-8ebc-0bda4c90bb38",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1a1e601a-0693-4524-b8c7-ea5c54970950"
        },
        "item": {
          "id": "879e2ce1-8936-4b7e-afc7-6cb4d7329d76",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0debe99f-cca3-448f-9e68-b3e2ffa484bf",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "30fe1c91-7445-4bc1-8d72-c9c99da1c981",
        "cursor": {
          "ref": "4569277a-22ce-4e02-9583-0193616dbbc2",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d8e7a7b6-8ac6-4bae-91c1-5d91a05b59bd"
        },
        "item": {
          "id": "30fe1c91-7445-4bc1-8d72-c9c99da1c981",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0123e603-da85-4235-a876-f2fe2eac3e50",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7eb2fadc-bf62-42b0-bb5e-519eb66aee87",
        "cursor": {
          "ref": "66e8f44a-834e-4796-a9a1-6d3091249801",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "729d66a5-2cee-48c6-938b-2055c0253cd5"
        },
        "item": {
          "id": "7eb2fadc-bf62-42b0-bb5e-519eb66aee87",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "480055b6-a90e-4bb7-852b-825f6555ad5a",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "88821582-1266-4b38-8e27-e8f9dc58cea3",
        "cursor": {
          "ref": "08b09fa6-0256-4e4b-95fb-179c3f1c07ba",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1808eaeb-10aa-42c2-b9d9-492c4d3b458e"
        },
        "item": {
          "id": "88821582-1266-4b38-8e27-e8f9dc58cea3",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "8285f4cc-b9d6-4153-b3c3-27301142b94d",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "fe5816b4-317d-4ded-a3f7-2d03fbea1b2f",
        "cursor": {
          "ref": "de16ec11-40ac-4880-904f-d1e4ff43efbe",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e196c69d-8a39-4e82-9f9c-85f141671a2d"
        },
        "item": {
          "id": "fe5816b4-317d-4ded-a3f7-2d03fbea1b2f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7494caa7-159b-44a8-8a5b-ef6fb5b9c65e",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "3a913cba-53ab-451a-bbbc-51bff334f5e2",
        "cursor": {
          "ref": "c9cb8eda-8975-467d-990c-0e79aa2f3470",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "efd420bc-42ff-4490-b464-d411145819dc"
        },
        "item": {
          "id": "3a913cba-53ab-451a-bbbc-51bff334f5e2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bc5cfe57-6892-4726-b2f9-b483a79c78c7",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "70da8a60-2527-4b6b-9485-da9b1d8c94e2",
        "cursor": {
          "ref": "4e46ae74-0122-4a49-8081-50305575d68e",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "cc523b3c-de57-4093-bd59-c41da571e9c4"
        },
        "item": {
          "id": "70da8a60-2527-4b6b-9485-da9b1d8c94e2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3fca5198-ff69-4500-bec2-0fc86c57949d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c0eeec-43be-4550-bb5a-2da5c0b920c8",
        "cursor": {
          "ref": "c131c0de-d54d-4b32-a980-173209f0e8de",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f8435140-2b69-466f-837c-beefa0d6e36c"
        },
        "item": {
          "id": "f1c0eeec-43be-4550-bb5a-2da5c0b920c8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ec02ed42-6cb7-4c44-94c9-532949c27a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1cab79-a787-4eb3-9ba9-40283a14fa14",
        "cursor": {
          "ref": "a0659c93-8ad4-49b4-9408-661fd20f355c",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3f07e490-b78a-4a4c-9e85-41cbc2248cbc"
        },
        "item": {
          "id": "2a1cab79-a787-4eb3-9ba9-40283a14fa14",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "63b84364-60ca-43f6-8e12-7173a4af5243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d232fbb6-52e9-469c-a342-95b3b1abfa4f",
        "cursor": {
          "ref": "73cb596e-b64f-4444-b5cf-0a57c57c1ff7",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9abfac00-025e-4005-9c0b-34f131f909cc"
        },
        "item": {
          "id": "d232fbb6-52e9-469c-a342-95b3b1abfa4f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9677dbee-3069-48e8-9419-875a99004551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a7a79a-9dd6-493c-90f8-a196cfd7c336",
        "cursor": {
          "ref": "1e5261f5-b62b-4e05-ad2b-fec7ff8b8c3f",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "cd2e8ba9-295d-48a3-8ee1-b4973bf723c9"
        },
        "item": {
          "id": "a1a7a79a-9dd6-493c-90f8-a196cfd7c336",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "988001d1-9b22-4b10-9774-254204242a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab313d3-f396-4932-ab70-f78b2ed985c9",
        "cursor": {
          "ref": "209a584e-d671-4bb4-a75b-8d58a74d68ca",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7174391f-8127-47da-912c-a07f85a40392"
        },
        "item": {
          "id": "1ab313d3-f396-4932-ab70-f78b2ed985c9",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a4e54d2e-275a-4c9c-80be-2d93d82868f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88fbdef6-0132-4b5a-95a9-70fe50ea77d4",
        "cursor": {
          "ref": "69c23ac1-45d4-44df-ad65-34a331706bc5",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e02291cf-4d13-4264-a942-d1a4a70e6ce8"
        },
        "item": {
          "id": "88fbdef6-0132-4b5a-95a9-70fe50ea77d4",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "50a0d4f5-4111-40c1-8939-a0615809d2f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae258242-12df-4d4c-83d1-020b6eeee9b5",
        "cursor": {
          "ref": "883993c6-8f55-4480-8fa8-545b3844775b",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6de06556-ab9b-48f9-97c6-29f4977e5e98"
        },
        "item": {
          "id": "ae258242-12df-4d4c-83d1-020b6eeee9b5",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5fb4c67d-f058-499c-be17-d75965bf0cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f05fb7d-0635-45d3-aa50-52030e5dacb8",
        "cursor": {
          "ref": "4b074375-608b-4eff-b3df-7ae9b7b2acdf",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5c711c35-113f-43f9-a74a-f94796e38d4f"
        },
        "item": {
          "id": "7f05fb7d-0635-45d3-aa50-52030e5dacb8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a3e0b278-c230-4832-b346-317b57d059fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b9d035-ce33-41ff-aade-28264299e510",
        "cursor": {
          "ref": "e6a6bd5a-67c5-47c7-a178-0821b4663a42",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "531304d1-c2bf-4d86-9ef8-7094bccf6456"
        },
        "item": {
          "id": "47b9d035-ce33-41ff-aade-28264299e510",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f446fd93-73d7-471d-be78-949c40a34435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfff9580-24ef-4ef6-b3fa-14bd150708e6",
        "cursor": {
          "ref": "3e978805-50b9-4368-8515-e1102768122f",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d0b1587f-5c8d-48e4-96cb-09210bb002a1"
        },
        "item": {
          "id": "dfff9580-24ef-4ef6-b3fa-14bd150708e6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "bf966245-02df-42ae-9fc1-ea319bb883de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9ed4d0-cef6-417c-9bdb-19336c49fa88",
        "cursor": {
          "ref": "776913dd-f786-4d2e-be93-775d7bd97d67",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9a20595a-d9cd-45dc-b68f-845739b58b41"
        },
        "item": {
          "id": "ba9ed4d0-cef6-417c-9bdb-19336c49fa88",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "aca7d8fa-a189-4961-9ed1-be524ff7853a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b64e2fb8-40f6-4a8a-8e17-9a333a2f2100",
        "cursor": {
          "ref": "58295f0a-1e03-4a4d-8062-d33d42437002",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "58edf95f-8077-4067-a8f6-82404b7611ad"
        },
        "item": {
          "id": "b64e2fb8-40f6-4a8a-8e17-9a333a2f2100",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e8cf2970-5c73-4fca-aba7-3f52e1bcc392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5e77ed-74f3-4441-86d7-6b8d74286cd9",
        "cursor": {
          "ref": "c68bff71-fe14-4e51-95b2-a976e50c81e7",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4011ad10-9c26-4047-9e8f-e3c4a6487e4f"
        },
        "item": {
          "id": "ff5e77ed-74f3-4441-86d7-6b8d74286cd9",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c5c1e4bf-8214-4583-9aea-6deb90f27a1b",
          "status": "Created",
          "code": 201,
          "responseTime": 394,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "4c3215b9-d600-45f6-9414-ca7042a0f60d",
        "cursor": {
          "ref": "88fb3c32-efbd-4a45-86a3-df495acceafb",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a09e1738-5610-44b7-b871-c274db29abf2"
        },
        "item": {
          "id": "4c3215b9-d600-45f6-9414-ca7042a0f60d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f058bd9b-b4c1-4513-9a92-3877f0dd31f5",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "f44d313e-b932-41d5-a936-79e593ce6886",
        "cursor": {
          "ref": "8fd538c9-a875-4f74-9d5c-86ef55c5b189",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "76a839e4-2ba3-4959-8817-4f836c2ff31b"
        },
        "item": {
          "id": "f44d313e-b932-41d5-a936-79e593ce6886",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fc74d819-6133-4ce3-99bd-20185259dd37",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "720b5fe0-10ac-4b35-a1bc-107ae87a1151",
        "cursor": {
          "ref": "e99fe646-6d7d-41e0-a05c-de6296e2299f",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "69dbf806-ab21-4878-b893-cfb14bdf7ed3"
        },
        "item": {
          "id": "720b5fe0-10ac-4b35-a1bc-107ae87a1151",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c744abd2-d4e5-4fb8-aea8-2c1ff4d62cbc",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "4bc18682-af6c-4b85-af1b-384274e2cb2d",
        "cursor": {
          "ref": "c6aca820-4561-4f90-94ab-9e6bd04d4fdf",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f493cd16-f3ca-4e46-834c-a8aa2fbb99fc"
        },
        "item": {
          "id": "4bc18682-af6c-4b85-af1b-384274e2cb2d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "eca670fa-7202-4eb3-9d23-da27f327762b",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b9b02971-f16f-4c1c-a84e-07072f825c24",
        "cursor": {
          "ref": "a3ac3b75-83e1-480c-95e1-00c373e2aef1",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "226fd8a2-2567-46c5-8d1e-6a6e6df0914c"
        },
        "item": {
          "id": "b9b02971-f16f-4c1c-a84e-07072f825c24",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "21e95da5-2137-4a6b-802c-4a51a84d4e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77d013d-b086-44f6-9315-9c9c8e6cc7f9",
        "cursor": {
          "ref": "7be3c84c-cf8c-4565-a45e-ef2e55b39172",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "679053b5-356d-4b93-9ca4-30eafbd63533"
        },
        "item": {
          "id": "a77d013d-b086-44f6-9315-9c9c8e6cc7f9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a9a82653-684d-4d63-90fc-314858466d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3cc18b6-cefa-4b7f-87b1-2d563e839706",
        "cursor": {
          "ref": "37a5b3df-5d88-41d0-b04d-55fadd5e8515",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "06e32f87-ecfe-4b63-aad5-ed402645fe1a"
        },
        "item": {
          "id": "a3cc18b6-cefa-4b7f-87b1-2d563e839706",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "15c76e14-7751-47d4-bfd0-69d4d01ba51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2458254-1003-4df2-b667-5c8679e974a7",
        "cursor": {
          "ref": "674310eb-93f9-43f5-8047-85d0b18c246f",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8fddb221-711c-448c-9cd0-295989b1887a"
        },
        "item": {
          "id": "d2458254-1003-4df2-b667-5c8679e974a7",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f62761b0-496f-459e-93ab-bf7de0215165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1a8e61-e35f-416a-876e-df6172a0e7b6",
        "cursor": {
          "ref": "aa59ad7f-4592-47c9-9c48-1f06095df80f",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "17de85bb-77e3-491d-b4fa-de9efb1b7708"
        },
        "item": {
          "id": "7a1a8e61-e35f-416a-876e-df6172a0e7b6",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ec96ca1f-0120-4ad6-b21e-ba298fa7fd4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32cc4bd3-5ce9-4473-9eb5-f0d8c4bb2113",
        "cursor": {
          "ref": "a54de8bf-5d80-45c2-ad76-829f15856df5",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6bbe3f91-386e-4d29-a445-c97c40577258"
        },
        "item": {
          "id": "32cc4bd3-5ce9-4473-9eb5-f0d8c4bb2113",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "65a2e8cc-a60b-405f-bb97-b39b9cee19f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f839b0-a211-4edf-8314-d4ba726440e6",
        "cursor": {
          "ref": "ec240f1f-f1a3-481e-9e04-2e61da4c1925",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b4ad9670-a98d-4f83-95f1-02aef5c7af3c"
        },
        "item": {
          "id": "c9f839b0-a211-4edf-8314-d4ba726440e6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "42be5143-4aa4-40f5-9808-c3f029c774e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34da6cb1-e117-4f77-972d-f4e2b2efe872",
        "cursor": {
          "ref": "ec14c0e7-93c3-4634-b37b-1e7720b4ddc6",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1c674ce2-c852-4629-b23d-eb865b046054"
        },
        "item": {
          "id": "34da6cb1-e117-4f77-972d-f4e2b2efe872",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "aefbcdc0-ee6f-429b-81ce-cdc9d68674d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f93d8e-d20a-4e46-8490-28e8e9a6dd58",
        "cursor": {
          "ref": "2b83aaac-8b2f-4d97-9872-51e872d1be0c",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "95c65331-0107-40bb-86f7-833f9c659897"
        },
        "item": {
          "id": "b5f93d8e-d20a-4e46-8490-28e8e9a6dd58",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c3a17759-79a7-40ef-bcdb-cdc160c390ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279fcb06-4885-43fa-b422-89e3234989b6",
        "cursor": {
          "ref": "fcd7b0b3-be70-4aae-a019-7e100ce0f6b9",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a07ee6d4-69c0-476d-9c31-c141ecc9e462"
        },
        "item": {
          "id": "279fcb06-4885-43fa-b422-89e3234989b6",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "85c3bd32-9d4b-4c53-87fa-9dd8353a8e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9be5570-037e-4824-8e32-79af398c6d5d",
        "cursor": {
          "ref": "6cd8ded0-0a87-493c-b8dd-c96ec4b2586d",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5250771e-a447-4885-a7f4-5aa75693c8ce"
        },
        "item": {
          "id": "e9be5570-037e-4824-8e32-79af398c6d5d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "921713bd-a37f-4efe-8055-ce496b6bc292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155d9fec-e410-441f-91a6-c0115ce6f9da",
        "cursor": {
          "ref": "5be0bf63-d253-43d1-85ad-a1258c25117b",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ebf09e2b-07b4-4cc4-8902-aa9410072d12"
        },
        "item": {
          "id": "155d9fec-e410-441f-91a6-c0115ce6f9da",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4e8b10c4-8c4c-4e86-8f92-f8ece046cfd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d48ff2-c6af-408c-a187-1de863991ca3",
        "cursor": {
          "ref": "defd0228-f55b-48b8-82c5-513f3f48067c",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f9b9e62b-bd3e-4379-aaca-389f6f6526d4"
        },
        "item": {
          "id": "43d48ff2-c6af-408c-a187-1de863991ca3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3d355720-c715-4003-b719-2b790d10dbb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45465d31-b371-4a9c-ae64-7c2ec4d003e5",
        "cursor": {
          "ref": "7da28039-118c-4466-94c2-0d13caaf8fb6",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "777c5aa2-3fb2-4b4c-b727-646a094a0c8d"
        },
        "item": {
          "id": "45465d31-b371-4a9c-ae64-7c2ec4d003e5",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "daed2587-7bcf-4319-bcd1-0fa6771f7448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88cf5dc8-db01-4033-b516-ea1be00c4bf6",
        "cursor": {
          "ref": "05157da6-b6e9-423f-b0b3-e8c5de283a74",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a81261bb-5601-443a-8366-25525fff0a8d"
        },
        "item": {
          "id": "88cf5dc8-db01-4033-b516-ea1be00c4bf6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "95726bec-c291-446e-8bce-be39d47c14d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9edde186-94dc-4f64-9900-9a6a595f28cc",
        "cursor": {
          "ref": "ff8649cb-871c-4538-9b70-e03030f8111b",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "32ddd1d9-5f66-4060-a03c-9f190f3d4e54"
        },
        "item": {
          "id": "9edde186-94dc-4f64-9900-9a6a595f28cc",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "590d7221-bb75-44c1-b243-39293424ac9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79e3e39d-d774-4df0-80e1-1ed62637d515",
        "cursor": {
          "ref": "3ac14ca9-0916-41d8-8599-bff0f1d07d9e",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "dc6b55c1-916e-4f45-a081-06d327cb1990"
        },
        "item": {
          "id": "79e3e39d-d774-4df0-80e1-1ed62637d515",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "53531f87-6a66-484e-9bc1-1382e7eeee3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5027262-ce31-4232-aa8a-8519f309c38d",
        "cursor": {
          "ref": "527d4857-d28d-4aa3-bca6-687abd767875",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e946dacf-ac60-4982-a6c8-94310c7c9b9a"
        },
        "item": {
          "id": "f5027262-ce31-4232-aa8a-8519f309c38d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c093504e-180c-415b-813d-14c06ee6ecb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18dbb2f2-827b-48af-998f-774739a78e84",
        "cursor": {
          "ref": "1d1173ff-2447-4332-8239-766b9deae67e",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9c4aaef5-8627-4196-9924-dc5d01575f90"
        },
        "item": {
          "id": "18dbb2f2-827b-48af-998f-774739a78e84",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ba33c67b-ffda-44b3-8fd3-b60a8f8daa02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "addd79b0-8194-4366-be5d-f1963b61d781",
        "cursor": {
          "ref": "7ddb50b7-cc47-4493-8575-479dc2702234",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3c3e9acc-bc36-43da-9f27-fdd299b2174f"
        },
        "item": {
          "id": "addd79b0-8194-4366-be5d-f1963b61d781",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "036f072d-5d53-4615-af38-721a921d17b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ddadde6-aa22-4afc-b706-219c1ff8057e",
        "cursor": {
          "ref": "112c0ad0-79c4-46b4-b049-9d172b08ea0d",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "20524f77-845e-4ffa-b3fd-ee2e96529606"
        },
        "item": {
          "id": "5ddadde6-aa22-4afc-b706-219c1ff8057e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "640a06ec-1f73-4d33-b4e1-c6a6121a9246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f367472-84fa-4c28-9fe0-3150e57ea5c5",
        "cursor": {
          "ref": "03f36e6b-754b-45d2-90eb-61293fc68db7",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9e8a126d-6a02-446e-9ae3-01db2b642720"
        },
        "item": {
          "id": "8f367472-84fa-4c28-9fe0-3150e57ea5c5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f040ad96-68d0-4260-8b1b-86606f72e88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d74c40-06b8-4ce5-89ce-359f3d65dbac",
        "cursor": {
          "ref": "319dd842-f7b9-486c-b158-30319dc917ae",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "bb2156c4-2884-48ec-b00d-78e3135fabe4"
        },
        "item": {
          "id": "12d74c40-06b8-4ce5-89ce-359f3d65dbac",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f2328c6f-62d0-42b7-84c7-714b0852b3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965950c4-b2cd-4037-a40c-37b77b32ec2f",
        "cursor": {
          "ref": "55cfb0b7-76ee-48e8-88d6-8c3d3b19552e",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f7a42784-84d3-4c1a-96e0-2331587f77ab"
        },
        "item": {
          "id": "965950c4-b2cd-4037-a40c-37b77b32ec2f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d696f468-423f-4378-b871-f8902fa6ac65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a6c1ee-2352-455e-9228-d15762dbfcb4",
        "cursor": {
          "ref": "b4dcae2a-7294-40f9-ab47-1c0cfdedb583",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0f4351b9-dbd5-45bb-a99b-eb1b38a941c4"
        },
        "item": {
          "id": "53a6c1ee-2352-455e-9228-d15762dbfcb4",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9570da71-6e15-4a07-9f5f-95d5e84e5ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf3a90f-3f4b-4aae-9b96-34f02a8b592c",
        "cursor": {
          "ref": "5c32098b-3399-46e0-9a7d-086fc985d05f",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5bba77a0-9559-4142-9877-a53f44fdbac5"
        },
        "item": {
          "id": "baf3a90f-3f4b-4aae-9b96-34f02a8b592c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c2af24af-7d63-42ee-995d-c6ee6f1189e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4160331-fb8a-42c9-858e-d250915cb855",
        "cursor": {
          "ref": "d0e44317-03a4-4df2-a86b-7aaea7ccd5ed",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4172b170-e015-4f92-a64d-de796f3beffa"
        },
        "item": {
          "id": "a4160331-fb8a-42c9-858e-d250915cb855",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c1410881-73d4-473f-90d4-6b05d6a981b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d836f63-6041-4262-bab6-91a1ae40468f",
        "cursor": {
          "ref": "f3c9df1f-2971-4ff1-b6a8-a4a57e1262c6",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a2e55376-4e7c-43d3-b777-f0e08a54e92b"
        },
        "item": {
          "id": "6d836f63-6041-4262-bab6-91a1ae40468f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "97172168-1cee-48ec-ab4c-8b119ffbd969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae04102-acaa-4d64-96d8-00ff6cd39500",
        "cursor": {
          "ref": "d708f2ce-3e0e-45f5-a93b-d5b3da4ab01d",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "66117dde-456f-44e3-89fc-23a9fbd53e48"
        },
        "item": {
          "id": "eae04102-acaa-4d64-96d8-00ff6cd39500",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "b20014d6-6cb9-4d8a-a3b2-a4b3a9db8d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131e40be-f8a5-4358-a3eb-54810506890b",
        "cursor": {
          "ref": "d2491e4d-8da6-421a-acc6-b499990c4abb",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9cb90e19-fc2a-4fbc-9c42-af1c418881b7"
        },
        "item": {
          "id": "131e40be-f8a5-4358-a3eb-54810506890b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6ac52f5a-8c23-4fc9-a60e-6c892c644e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90f74d4-8c48-4ba7-a2f9-37fa334907f4",
        "cursor": {
          "ref": "71fe2ce1-4ecb-493b-857d-d90f4d1053eb",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f09ccf76-2381-4274-9c12-353762555661"
        },
        "item": {
          "id": "a90f74d4-8c48-4ba7-a2f9-37fa334907f4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "58a55970-e1fb-4e46-8c64-f4615596786a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6affb8ea-5e51-413b-9790-3aa275bdb6cb",
        "cursor": {
          "ref": "f7542754-9bb2-440b-9331-920976a0aa05",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5e0b9be0-878e-424a-a0fd-7c950e19ba92"
        },
        "item": {
          "id": "6affb8ea-5e51-413b-9790-3aa275bdb6cb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "50d99066-d7c2-4441-b597-789c34f1f7c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55bcecf5-b6ce-4760-acd3-ec744e184200",
        "cursor": {
          "ref": "b379e882-bfcf-41f1-8a84-380877eb48ca",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "786874ab-16ed-4eb8-b4c6-9e9448b1429d"
        },
        "item": {
          "id": "55bcecf5-b6ce-4760-acd3-ec744e184200",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "599cbc26-b821-4926-8e18-9b3dcd35b64e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "909010dd-afe9-46d2-b267-9db93f4d6ddf",
        "cursor": {
          "ref": "045ef866-bf68-48b9-93db-f0d2def1fcf3",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e0b8de5b-1713-427e-a06b-5e00221404a9"
        },
        "item": {
          "id": "909010dd-afe9-46d2-b267-9db93f4d6ddf",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b7121cd2-e861-4253-9a02-043a66278cf9",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa549b3-9999-4fdf-905b-85d7e01b1a98",
        "cursor": {
          "ref": "b17cea2c-e092-4dca-8bbc-96da6a547f93",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9bc1714d-7101-427c-bfe9-1ac95749216b"
        },
        "item": {
          "id": "2aa549b3-9999-4fdf-905b-85d7e01b1a98",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8ec4d3e5-dc91-4eb2-93c1-1009b3440143",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "33eaf34b-991e-4ec1-a208-3fb2b64e8f3d",
        "cursor": {
          "ref": "919717bf-2a16-46b5-9ffa-6461048bdbf1",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ee8ee604-1a25-4382-a09a-1354bbb6f170"
        },
        "item": {
          "id": "33eaf34b-991e-4ec1-a208-3fb2b64e8f3d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "86554508-fa0b-43cf-acb1-5327b19a226e",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c63cd1f-8d65-4a37-8ba9-1f46d9dfdeb1",
        "cursor": {
          "ref": "9b233ce6-bc7c-4765-8f00-796fa2af2307",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "56c0f643-c004-4f25-9952-b5911eecfe36"
        },
        "item": {
          "id": "3c63cd1f-8d65-4a37-8ba9-1f46d9dfdeb1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b7e03f94-01b3-4499-93eb-d8ee2a712e5b",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "876ccf2a-a2ba-4bca-bfd1-ecb7f7cfdd50",
        "cursor": {
          "ref": "a9326676-2491-4a58-a75d-d5ed3c181de0",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "fb5f86d2-2877-4516-a669-5a1395583dc7"
        },
        "item": {
          "id": "876ccf2a-a2ba-4bca-bfd1-ecb7f7cfdd50",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "788e06c8-630c-454e-a4af-84d4c6117e63",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-12T00:35:50.389Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-12T00:35:50.389Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "17b9d0ef-e38d-4620-8d83-044d20605156",
        "cursor": {
          "ref": "e80807f6-9b42-4005-ae74-2145d4333df5",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a83625ad-8de2-4de3-bb62-886c2e1cf6d0"
        },
        "item": {
          "id": "17b9d0ef-e38d-4620-8d83-044d20605156",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "29d5cc4b-bc24-4246-b054-e805ac8a4a93",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1350c2e2-ee35-4cc3-b2df-03bfcc7698e2",
        "cursor": {
          "ref": "8defbdb7-77d3-4033-937a-eefa0487cd13",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7015bb10-4f9f-4ab8-b2b0-bcb419435340"
        },
        "item": {
          "id": "1350c2e2-ee35-4cc3-b2df-03bfcc7698e2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "07f9b098-d905-46f5-bb75-9467d408ca04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba0c448-e412-445a-977a-bbb2c8abfaf9",
        "cursor": {
          "ref": "a86f1983-c384-4a8f-8ceb-411d834cb68a",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "da254565-8d0e-471a-9fa4-a34794f13091"
        },
        "item": {
          "id": "0ba0c448-e412-445a-977a-bbb2c8abfaf9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e3b81780-9d50-4726-9385-34f74ea49a90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85e13a7-9298-4810-8b26-a57350764402",
        "cursor": {
          "ref": "0e3b477e-0ec6-469b-97af-b217a576cab9",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "148bab05-0992-44e0-b459-3e71135b17f9"
        },
        "item": {
          "id": "f85e13a7-9298-4810-8b26-a57350764402",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "36e1da32-373b-4a62-b075-e8e9685f4297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3cba145-5cab-499e-88e7-d7fd877d03ca",
        "cursor": {
          "ref": "17f67f3b-af9a-4ef2-ada0-23a2876ab2f5",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "25d062e9-9faa-4725-a7f7-63ec59d9bacc"
        },
        "item": {
          "id": "c3cba145-5cab-499e-88e7-d7fd877d03ca",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4cc741d2-8cad-4390-9b2a-97889c119510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f20c28-efc0-4681-9678-79959cd099a2",
        "cursor": {
          "ref": "f07cb2f9-8320-418e-b58d-2c80acb76f81",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3f24a4f2-7e34-4c91-8e69-c287782eacaa"
        },
        "item": {
          "id": "a3f20c28-efc0-4681-9678-79959cd099a2",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "46a5aac3-0eee-4e9c-88d4-98c0fefd7855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10cd0245-ee41-4aa5-8709-d5951b8d56d7",
        "cursor": {
          "ref": "4a711a81-6b3b-4ee1-8d83-8e0d49c4d8b5",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ba65424c-1d15-42cc-93a7-aa24d35ba575"
        },
        "item": {
          "id": "10cd0245-ee41-4aa5-8709-d5951b8d56d7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e338b2a0-b199-40d4-8e74-85928ea582c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871e73d4-9df6-4188-b34b-a90fa2ae18ed",
        "cursor": {
          "ref": "fd528f06-396f-40f9-892f-96d90e02d64d",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "844ffe11-4d92-4e55-947c-8f703346fafb"
        },
        "item": {
          "id": "871e73d4-9df6-4188-b34b-a90fa2ae18ed",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6ecff732-1b36-49b1-b5f9-1be9dae33ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2379c57-f227-4db3-bd9b-89e80518caa3",
        "cursor": {
          "ref": "5fff1c7c-59fd-4809-881e-f90a6ee263a2",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4f5c11d1-d0b6-45d4-8368-29f099dc5539"
        },
        "item": {
          "id": "e2379c57-f227-4db3-bd9b-89e80518caa3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4a3cdd10-f18b-4592-9432-8f798c6be393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d786d04-c89b-486e-ad44-072c1f4384a6",
        "cursor": {
          "ref": "ebe3a587-5f83-421b-9c8c-760815c7ed3d",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8e813ba7-ba6e-4b53-9a95-7543e92159ed"
        },
        "item": {
          "id": "8d786d04-c89b-486e-ad44-072c1f4384a6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ea47b733-938a-4420-a269-605d5003177b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08b9429-e737-4ea5-a76d-33bf0ce458ee",
        "cursor": {
          "ref": "936c89a5-6bc8-4c01-8c69-d619cf085ab3",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "68d43661-ff06-4aef-9bd2-a0d6484cf332"
        },
        "item": {
          "id": "b08b9429-e737-4ea5-a76d-33bf0ce458ee",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fa088fec-adb7-432d-ae6b-43ca0feea0e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "349ae025-e79a-490e-b259-39dc5d8ce1ed",
        "cursor": {
          "ref": "a20ce9e7-a2e0-4c48-a8ed-1d5edabf4ddc",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "896e065d-1335-4dda-8810-376df5084de5"
        },
        "item": {
          "id": "349ae025-e79a-490e-b259-39dc5d8ce1ed",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0dd05444-66cc-42a8-ae93-a37b949af8d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca0b2cd-83e9-4861-9031-9d92de1cea41",
        "cursor": {
          "ref": "6d1c07da-775e-4cea-87a1-d814b2d7493e",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2d961161-9012-4447-a39a-7da2b683f340"
        },
        "item": {
          "id": "6ca0b2cd-83e9-4861-9031-9d92de1cea41",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c43bf121-b5c8-42c2-8346-a5e879ad4b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f1b9274-da26-4c1c-ad7e-23c89ccd789e",
        "cursor": {
          "ref": "a50126f6-af48-43f0-a0c5-59ae2dbc6fdc",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "eec159e9-867d-4b77-8363-8c10c6f58b01"
        },
        "item": {
          "id": "3f1b9274-da26-4c1c-ad7e-23c89ccd789e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1a723120-5e12-40ab-846a-d52547ba8d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6389292-e46d-4a22-b7f2-4d64112137f8",
        "cursor": {
          "ref": "c8afc08e-4265-41c0-81ab-115b56b927e2",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9ae73487-625d-4456-b6fe-427aba491f92"
        },
        "item": {
          "id": "e6389292-e46d-4a22-b7f2-4d64112137f8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b8add644-bb2a-4aa1-9fc5-b88e99aaf6d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "6a4662b0-8ba4-4a30-bfb4-f8ee3d1e6988",
        "cursor": {
          "ref": "969b89c3-6051-4815-a89c-b727bda63b13",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "707571b4-f564-47ef-af63-aa4886af9132"
        },
        "item": {
          "id": "6a4662b0-8ba4-4a30-bfb4-f8ee3d1e6988",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3b9e2ccc-25e4-4348-ac75-ea27b87e9f2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfbb2479-a5c5-4e0f-a470-5aeba65481ca",
        "cursor": {
          "ref": "07e9fe1c-5f23-4969-8957-e9aa4583be96",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "83d2b304-eae6-48d5-b6a6-3802234e5516"
        },
        "item": {
          "id": "dfbb2479-a5c5-4e0f-a470-5aeba65481ca",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6abf6952-393d-4e87-9efc-b2e7df065a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a4a1b9-5e17-4339-bde8-887e3af67712",
        "cursor": {
          "ref": "ce2fdfef-b37d-4079-bad7-6a9246fca15d",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2c5ef3b5-9763-4c03-a3ee-007223c1c041"
        },
        "item": {
          "id": "42a4a1b9-5e17-4339-bde8-887e3af67712",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "419d6079-e23d-42f7-8bf1-b9dcd0dd77a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7494bbe8-f779-4f99-896e-f89190cce43e",
        "cursor": {
          "ref": "3d2dc089-d5be-48b7-82f5-39cbdb152e57",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0de9d541-9cc9-4408-afe0-198cd05c83b3"
        },
        "item": {
          "id": "7494bbe8-f779-4f99-896e-f89190cce43e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4d11666e-67d3-450d-bc06-18cf0a0bf137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2459e4fe-20a2-4ee4-b865-ac0adc7c5f5a",
        "cursor": {
          "ref": "870ab627-271b-4afc-939c-5b8e458641ca",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7a457880-36d9-400f-9ec6-2d7308c2bff8"
        },
        "item": {
          "id": "2459e4fe-20a2-4ee4-b865-ac0adc7c5f5a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3030e7b8-8025-457b-99ad-69098a35aafe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43619e32-f4da-4000-981d-5b94141f3b42",
        "cursor": {
          "ref": "7119c364-7de2-489d-81c2-74bb8957f3aa",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "cfc15d2f-4438-4d47-a9ac-88d40cb714b4"
        },
        "item": {
          "id": "43619e32-f4da-4000-981d-5b94141f3b42",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e59b22bb-d7c7-4af5-9c29-c5de1f802f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe70366-a056-4efd-ae1f-8000a2569f8f",
        "cursor": {
          "ref": "628500db-9b2c-490c-b042-3740900cbdeb",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2c4948bb-b4ff-4e4c-8d29-277af6c8fba2"
        },
        "item": {
          "id": "afe70366-a056-4efd-ae1f-8000a2569f8f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0bafb135-803d-41a1-a126-86fbd0290d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4cf936-15df-4448-b35c-414c612eb15c",
        "cursor": {
          "ref": "779e735c-fbf4-4548-8f52-2847d4833b33",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d504909b-9e94-4ea1-ba80-260011b1a53a"
        },
        "item": {
          "id": "fc4cf936-15df-4448-b35c-414c612eb15c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d2fbeea2-3abe-4168-ac4a-b686117ea513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bda1d6e-71a2-4fbc-a008-00412ded2d72",
        "cursor": {
          "ref": "fb0f7e7d-d210-4391-966c-b30b427d4dbf",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "42e001d7-729e-4109-8711-b648c621dadc"
        },
        "item": {
          "id": "6bda1d6e-71a2-4fbc-a008-00412ded2d72",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "936fbe80-9fe7-427d-a8ca-1a70f2ca797b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad11c90-d6a7-4708-b937-445af6a49847",
        "cursor": {
          "ref": "2722be83-989a-4b47-b21f-34b5c7dcad64",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "fa8b7e40-9932-4376-a390-48e0415973b9"
        },
        "item": {
          "id": "aad11c90-d6a7-4708-b937-445af6a49847",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a8ce7719-cb57-44ca-96f7-1e32cb42a408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa93da0-6e9a-4b34-9e6e-f935f65da8d4",
        "cursor": {
          "ref": "7a84f42e-0a69-45ef-95fb-8969d323b699",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "08270294-28cf-4c99-8950-f22183e7b300"
        },
        "item": {
          "id": "3aa93da0-6e9a-4b34-9e6e-f935f65da8d4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "19dee84a-a8ea-4200-8130-6c94a0a4ea33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a085c0-9172-4e4b-80a4-c0650ab06df3",
        "cursor": {
          "ref": "7c8dcf86-49ee-4661-ac33-5819f91295f4",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "94ac8433-9d37-46ba-ae56-bbb1069007b8"
        },
        "item": {
          "id": "a1a085c0-9172-4e4b-80a4-c0650ab06df3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "47e97a02-8f8e-43e2-a2fc-419f0665612f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e61028d1-4338-4884-9c58-80d51b078d9d",
        "cursor": {
          "ref": "983387d2-d52d-4a2c-9f18-3194d0854f80",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5795d76c-3112-48d9-a796-b662ba470f52"
        },
        "item": {
          "id": "e61028d1-4338-4884-9c58-80d51b078d9d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0e6e1b4a-5181-453f-9059-ed9d8ab5ef1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37befb3c-ab16-4a82-9db6-42780813c68d",
        "cursor": {
          "ref": "c83ad55c-d5e2-483b-a54d-79fe6a31cffb",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "91cfa30c-c58b-42e7-b9cc-39a80849c49a"
        },
        "item": {
          "id": "37befb3c-ab16-4a82-9db6-42780813c68d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "035573fd-a443-469c-b209-edf18f924d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc48cbf-3532-42c3-9a04-3048d0f6e89f",
        "cursor": {
          "ref": "be538d5a-a585-4749-b1f4-1c47b184276b",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "33b90f59-ddde-4288-8436-930ec19fc1b5"
        },
        "item": {
          "id": "6bc48cbf-3532-42c3-9a04-3048d0f6e89f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a1462cc9-1d85-4cb9-9fe7-20627030d6c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb87184-9b87-440d-919a-efb2d679d441",
        "cursor": {
          "ref": "5011837f-cfcc-4fa3-92dc-d672fd243323",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "17364ea8-c814-4f11-a616-84de31e975cd"
        },
        "item": {
          "id": "beb87184-9b87-440d-919a-efb2d679d441",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1d15fbdc-8585-49d2-bd5b-7a8ef2866c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c729901a-1602-4b83-8b34-4b69a4e37938",
        "cursor": {
          "ref": "855e0b9e-fb7b-45c2-8d71-3430ce9ec434",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e8e21dea-e81d-42ec-9f68-b4dc56a7c672"
        },
        "item": {
          "id": "c729901a-1602-4b83-8b34-4b69a4e37938",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "07c143a6-810d-46ff-b6b7-9f5149cb7ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ce326af-78c2-418e-b3d6-a4ca3072c1b8",
        "cursor": {
          "ref": "0ebb8b55-4c85-4343-973f-6c25c3f9bb05",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3594c6a0-7a71-46be-a62f-4580a0ebe206"
        },
        "item": {
          "id": "0ce326af-78c2-418e-b3d6-a4ca3072c1b8",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "d6db6c3c-4351-4f21-aa74-60ab75a17501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "418cacd6-be7a-4b02-950a-1a13f5c66b11",
        "cursor": {
          "ref": "eb31137a-9949-43ae-bdda-5447e8ea4a43",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3699c673-588a-486c-9b72-ae2f58e547f4"
        },
        "item": {
          "id": "418cacd6-be7a-4b02-950a-1a13f5c66b11",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "ea07fda2-6d05-4388-9093-ab8a0a852b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c68bc14-8bd6-43b8-8756-2d1408fab7e7",
        "cursor": {
          "ref": "f12e2d1a-8575-4c4b-aa25-5bdefed516b9",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e439a2cd-2bb3-4e18-a3fd-0b62ac5c832c"
        },
        "item": {
          "id": "7c68bc14-8bd6-43b8-8756-2d1408fab7e7",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "9557e226-4abb-4672-989b-cd5692a053d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7d0a0d-b76c-42c0-83a3-c87068d9f066",
        "cursor": {
          "ref": "2d654462-db15-45dc-8e26-c411bde85ed7",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "96eb25db-fa62-4fa0-8f3f-55814008879c"
        },
        "item": {
          "id": "6e7d0a0d-b76c-42c0-83a3-c87068d9f066",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "6263416f-3bcd-4056-892d-e094eb2cecaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c825f4-b4b9-43a4-98ee-e90cc1bdba3b",
        "cursor": {
          "ref": "11766063-20e1-4c6f-b966-1c0f12728f28",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ddcefee0-f7dc-4c47-9cfa-240178331694"
        },
        "item": {
          "id": "25c825f4-b4b9-43a4-98ee-e90cc1bdba3b",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "a609426b-0f0a-40d9-8cc4-98ba56de0e97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c065236-809d-4643-9dad-06cb812f2341",
        "cursor": {
          "ref": "da63e1fc-d609-48c1-9002-a1ad048af654",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "14c18ead-1a83-4b5e-a4b2-4cbc4e3ad192"
        },
        "item": {
          "id": "2c065236-809d-4643-9dad-06cb812f2341",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "360c4d76-e704-4502-b45e-35522fec3d8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89a3a19-c8ef-47c8-82a1-b85d4af83d61",
        "cursor": {
          "ref": "ac64fd52-9232-4d84-9681-dc3468a7f618",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b770d0e4-f4e3-4b03-8b1f-7c880b2bee8a"
        },
        "item": {
          "id": "e89a3a19-c8ef-47c8-82a1-b85d4af83d61",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "92969728-08c8-4581-b394-a4092e247b80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc7f075-d497-4f12-a0a1-7e9374b6be88",
        "cursor": {
          "ref": "4bc8a511-d834-4a43-a0b1-bd77ebbe0fa9",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "da831ea0-3316-4907-9a6e-1e6229ba253c"
        },
        "item": {
          "id": "1cc7f075-d497-4f12-a0a1-7e9374b6be88",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ec9033f0-94a0-4679-8082-0ee681a6b1b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500c49a1-1807-46e5-89c3-b0601bf1667f",
        "cursor": {
          "ref": "406d244d-2319-44f8-95db-5297831400a0",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "29cf08dc-8f32-4283-8f83-d60f69724b28"
        },
        "item": {
          "id": "500c49a1-1807-46e5-89c3-b0601bf1667f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f2df846c-242d-41d4-bbcc-0cd44dcd1b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a50dc7-8d39-484f-8475-6de721089bf5",
        "cursor": {
          "ref": "713c3a4e-18d5-4297-9fea-fdecd4eef905",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "24163b59-fda5-4e61-a40d-9d0a386100d5"
        },
        "item": {
          "id": "08a50dc7-8d39-484f-8475-6de721089bf5",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6705495d-f12b-492d-b9fc-1318fd1eba60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae688bb-f0f8-4f27-afbd-ad67d464b3fc",
        "cursor": {
          "ref": "9d4290bb-eeaf-45ae-8f8f-b895f6994a3c",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "032e8c5d-3385-4b8a-91fc-751d1e82ebe8"
        },
        "item": {
          "id": "cae688bb-f0f8-4f27-afbd-ad67d464b3fc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1bd98892-c129-4cad-804a-7be983c8db85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83dca0f6-6d28-41ca-b9a2-ba728b7e1be3",
        "cursor": {
          "ref": "4b1871ae-cd83-4da2-a3de-11e19acc1288",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f14b324a-d355-47f0-ad88-bb8146beb07c"
        },
        "item": {
          "id": "83dca0f6-6d28-41ca-b9a2-ba728b7e1be3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b00642a9-a1b1-4572-925b-5a357e7690f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b13578dd-23b6-4ab2-abc0-3697c91733ac",
        "cursor": {
          "ref": "bc51b567-916f-4cd6-af0e-59c757540c60",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4511b2aa-080f-4be3-9b86-50454fdd1b1e"
        },
        "item": {
          "id": "b13578dd-23b6-4ab2-abc0-3697c91733ac",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "dab6ee57-bd3d-42df-a3ed-a1c5b1ccd099",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "8df45938-1371-46f6-b46c-73758e9829a8",
        "cursor": {
          "ref": "c19d0df9-adaa-4940-a1bd-14254f851a02",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a24ac150-5a39-4770-b324-064b3ddad967"
        },
        "item": {
          "id": "8df45938-1371-46f6-b46c-73758e9829a8",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b093f1a0-2bfd-4bbd-a5be-fc6e9041759c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "141f0bd9-f0ee-4e77-adf7-069c1a44b02d",
        "cursor": {
          "ref": "a117e8d0-b181-41e0-8bcb-e390137b4b7a",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ae6e7b71-7027-436f-809a-6fee79bbdf48"
        },
        "item": {
          "id": "141f0bd9-f0ee-4e77-adf7-069c1a44b02d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7db5ab9f-92a9-4277-9cff-e8e6ce04e3f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f6f3ea-ad21-4187-ba76-7f45f9dc0218",
        "cursor": {
          "ref": "5a68f0cc-af18-41d2-b21b-52eec291fbec",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "afacccaa-9f47-4dd2-b680-60f488c197ac"
        },
        "item": {
          "id": "c5f6f3ea-ad21-4187-ba76-7f45f9dc0218",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "18ef3c10-9271-408c-a205-ec3f2a3c80c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092071bd-7cdb-4dab-8ae2-c17ca284c2c8",
        "cursor": {
          "ref": "96d64509-8d86-4f18-8f44-d4b0b1d0d945",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2f3c665c-bd28-405b-b8da-865bc18aad5f"
        },
        "item": {
          "id": "092071bd-7cdb-4dab-8ae2-c17ca284c2c8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a6347fed-8ff6-4336-94ff-9b241f287b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1317e968-57e4-49d6-be22-be243e028967",
        "cursor": {
          "ref": "7b562df2-84db-4154-9a0b-18336fafad0a",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b5b707cb-3a95-44e4-9934-38bf0c38e2cc"
        },
        "item": {
          "id": "1317e968-57e4-49d6-be22-be243e028967",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d4656feb-5ab6-44a4-b4e8-2942f0dc221c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a311ab77-1501-4493-9d28-1898f557f7f5",
        "cursor": {
          "ref": "46893773-166b-4db8-86ab-30189489c884",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "eadae0c8-15cb-45cd-8230-9769444a2182"
        },
        "item": {
          "id": "a311ab77-1501-4493-9d28-1898f557f7f5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b88f695a-5592-4d4a-b2e4-e3162bb73364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ad3ce8-b333-48c3-8107-c09fc0f77fb5",
        "cursor": {
          "ref": "e590dddf-7f98-4355-a954-47c23e0dc61a",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1da147ec-87fe-42f4-bdf7-c23660a6e781"
        },
        "item": {
          "id": "d0ad3ce8-b333-48c3-8107-c09fc0f77fb5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7853320e-ceac-4906-ae8f-140017ae372c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be255b6-f7b8-4907-90a0-7f9c1212b30a",
        "cursor": {
          "ref": "bb1d6dd1-2eb8-4dd6-bc78-91251cf5202d",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "37d62774-25b7-401e-9511-40480e32ec21"
        },
        "item": {
          "id": "3be255b6-f7b8-4907-90a0-7f9c1212b30a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "246c96cf-ced2-4209-8553-0f1ea3660f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55cc6eaf-cfd3-456c-a68c-7976462c1f9b",
        "cursor": {
          "ref": "6bff1e3d-3b7d-453d-8468-2cc0ef3865c7",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "00f0d1ae-8da3-443c-99d4-802c8410f09a"
        },
        "item": {
          "id": "55cc6eaf-cfd3-456c-a68c-7976462c1f9b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "cc7ab3f1-9104-4941-a9bf-44ff875cc24e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39af2a03-7805-4d9a-ad69-854fbb15f73c",
        "cursor": {
          "ref": "3ea56a9f-9214-428d-9583-5dfa1750ce56",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7b60ae27-17a6-4764-9ad9-c1da0333b8a6"
        },
        "item": {
          "id": "39af2a03-7805-4d9a-ad69-854fbb15f73c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "00b537d8-72fe-4049-9bb4-e7cb7efb771a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09225cd-4655-40fd-87c4-122347f73af9",
        "cursor": {
          "ref": "a16475cf-6867-49a2-b3c4-7f9636a2f049",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4898c3de-e4b6-436a-8b79-8c6e35f2583c"
        },
        "item": {
          "id": "c09225cd-4655-40fd-87c4-122347f73af9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "dcef7947-c4d8-4310-93a4-ef190ad162fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719ec992-c49b-4ffd-877d-6e30d681e9ea",
        "cursor": {
          "ref": "da9d5b68-c15a-496e-9966-93db8532971a",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ad8b3637-9c7c-4537-9d46-4c453bca3574"
        },
        "item": {
          "id": "719ec992-c49b-4ffd-877d-6e30d681e9ea",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0833823e-0f27-4242-ac63-7c85e757e5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb87720-a02e-4e42-96c8-17481d3d6f04",
        "cursor": {
          "ref": "e5649d01-e73a-4502-81b2-f9192895cac2",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "61c93f98-75a7-47f5-9b3e-0b11a7b4b6b5"
        },
        "item": {
          "id": "6fb87720-a02e-4e42-96c8-17481d3d6f04",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d9f782df-2afd-4643-8a87-c8fedbb8a867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94d9fb8-9900-4069-afbc-bf5a52180b0e",
        "cursor": {
          "ref": "fd821ee6-da5a-4831-b9f4-979dfa27e7c9",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "19ec52f3-f247-42d5-9d80-b2d6e9a87ae7"
        },
        "item": {
          "id": "e94d9fb8-9900-4069-afbc-bf5a52180b0e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5c6c7ff8-8de3-46ee-b7ae-5e7a68a1b692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02b3bd4-97c7-44ec-9883-af8ac9b41964",
        "cursor": {
          "ref": "f65d4235-eb4c-491a-91f8-55da38391953",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7f759433-1ce6-46ad-8594-782bfd54d603"
        },
        "item": {
          "id": "b02b3bd4-97c7-44ec-9883-af8ac9b41964",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "86707762-05a6-4e8f-ab79-985164cd2029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa66f91-58b8-47a2-87e7-58fc076f630c",
        "cursor": {
          "ref": "0cf08df4-9ef2-4797-825e-e9a107b2edf1",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "682b45cc-6fcc-4ca6-95cb-5c1b3df11c7e"
        },
        "item": {
          "id": "efa66f91-58b8-47a2-87e7-58fc076f630c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "05907cd2-b8b8-409b-a3d9-4947e37ec095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8df44d-3cbc-42b4-8c98-2e427d728b52",
        "cursor": {
          "ref": "c21ae93c-65a7-424a-97e2-4b500426deed",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f12262ff-cc63-4f78-906c-53b5d3361c53"
        },
        "item": {
          "id": "ec8df44d-3cbc-42b4-8c98-2e427d728b52",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "308df35f-ebb2-4718-8632-2d77a1379dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1acb397a-039c-4153-9866-7a57cb4f74a3",
        "cursor": {
          "ref": "c3eb3717-aa66-446e-9410-9e80b45d31b9",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3c948588-57ce-41e8-8b24-6bbe59f259ef"
        },
        "item": {
          "id": "1acb397a-039c-4153-9866-7a57cb4f74a3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9f71ec0c-6757-474a-b346-e3232cbd0ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d2f2a1-e83a-4d6a-9c1f-8fd78da424b3",
        "cursor": {
          "ref": "d91970ce-d5cd-47b8-b532-d249478b10bc",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a09e9d08-9f6a-45f0-93cd-7c6a5949d920"
        },
        "item": {
          "id": "b5d2f2a1-e83a-4d6a-9c1f-8fd78da424b3",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "12c8f5be-1a41-4f84-9586-f88bdd8fa7fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b36df340-50ea-4909-873a-5fdf74354e8c",
        "cursor": {
          "ref": "b9027600-561c-41fe-b28f-ca3ade98f5b7",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "250fc75a-c8cf-4be9-b3ed-39f633d5d7dc"
        },
        "item": {
          "id": "b36df340-50ea-4909-873a-5fdf74354e8c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "419510bb-2ddc-4d63-a3bd-45723969c491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3475b2-33ad-431a-9ca4-c268305910e0",
        "cursor": {
          "ref": "8e4a413f-af13-4f59-8c04-1fe16453e2ee",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "14a65180-9596-4a4d-80a5-3d8a8efe61ee"
        },
        "item": {
          "id": "9c3475b2-33ad-431a-9ca4-c268305910e0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "78c1a767-5a9a-4864-81a0-ed9be23a86d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a9806e-8570-4921-82c2-98786d0f025d",
        "cursor": {
          "ref": "7269131a-a4de-40fc-be77-92ced320149f",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "56e8047b-9fdf-42ec-818d-126339c265d0"
        },
        "item": {
          "id": "e8a9806e-8570-4921-82c2-98786d0f025d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5fa3c1a9-7306-4d3b-ae7e-98be048aa69d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a209128-83bc-4828-878f-cb379b59106b",
        "cursor": {
          "ref": "62288b13-5dbf-4264-a8cc-d08ac28b62d7",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d7d92695-98ab-4624-ab05-f9e1f21584cf"
        },
        "item": {
          "id": "8a209128-83bc-4828-878f-cb379b59106b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ba8a6144-1a8e-4833-83b3-3e037633d671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "905c95cd-8d6c-420d-9c51-56fd3856c4ed",
        "cursor": {
          "ref": "04af5110-a4b9-4486-9edc-578ab32b8e30",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "fe683147-1f79-47d5-8bc5-cb091bc9c7bc"
        },
        "item": {
          "id": "905c95cd-8d6c-420d-9c51-56fd3856c4ed",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "bddb5682-7c73-4306-b0f8-cd7c62b7bc85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e59e0e-9af5-461c-92ad-8224b3a424f2",
        "cursor": {
          "ref": "403a1cb0-be99-4705-bee9-d11258c277c8",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0ed792a8-32b4-43fa-b345-d2ede12a8b6c"
        },
        "item": {
          "id": "72e59e0e-9af5-461c-92ad-8224b3a424f2",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a45b3116-5775-496a-a871-09974a207a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f15c7d-e14b-4c64-a94f-3669cfd41e90",
        "cursor": {
          "ref": "ed208bec-2a08-4c88-8a07-6243dda368e6",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4385af83-50cd-44f2-9352-190e0be68e7b"
        },
        "item": {
          "id": "19f15c7d-e14b-4c64-a94f-3669cfd41e90",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "513bfb86-01d5-4941-abe1-d26884654115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440338e9-cd52-45a1-9361-a601c9fc6abf",
        "cursor": {
          "ref": "2a933167-6acd-4e75-ab08-2be5630c0029",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "104486c1-81b6-4d71-95d5-47cc5bce6240"
        },
        "item": {
          "id": "440338e9-cd52-45a1-9361-a601c9fc6abf",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "69674d2f-150e-4fe1-9c22-28805ba0eb56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08aa776f-da68-4b2f-8b01-d6eca331ab79",
        "cursor": {
          "ref": "7e68d7de-6e35-454e-ae22-3c77e4ad9592",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c5fc38af-d126-4226-a7e4-49e2225ef313"
        },
        "item": {
          "id": "08aa776f-da68-4b2f-8b01-d6eca331ab79",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f7590333-ffd1-4dd0-94e1-73a1fbf03344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56bf4e2e-001b-4930-a160-66cabf324f4c",
        "cursor": {
          "ref": "04018179-c1fe-478b-bfc9-9c7342acfc30",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b09b8215-0a65-4c85-93b0-a6a3cc5aa40d"
        },
        "item": {
          "id": "56bf4e2e-001b-4930-a160-66cabf324f4c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1176c05e-8b65-461c-9482-ab951e542998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee1b275-8b1a-49be-975c-3f7df3da8cb0",
        "cursor": {
          "ref": "cf4aab13-441d-4e09-96e9-2326e880d22e",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9ec94fce-b874-4468-abbb-3944c256e47c"
        },
        "item": {
          "id": "9ee1b275-8b1a-49be-975c-3f7df3da8cb0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ab6fc8ec-794f-4bf1-8bb1-8bc8d82d7575",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "64f33ca8-261a-402f-a2be-fad4d1e315aa",
        "cursor": {
          "ref": "3b9e79dd-a8e3-494a-a592-c8d3604707d0",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0807ae9e-832d-4dba-a028-992d40c65db5"
        },
        "item": {
          "id": "64f33ca8-261a-402f-a2be-fad4d1e315aa",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "520d23f1-9209-45b8-8c3d-32aaa41f9cfa",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "8d0864f3-4d8f-4edd-a545-ecea6c871911",
        "cursor": {
          "ref": "dc33508e-c38b-4fb9-af5d-03c89584bcab",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d5d4030d-e6e9-44fb-a5b8-d91df012bd58"
        },
        "item": {
          "id": "8d0864f3-4d8f-4edd-a545-ecea6c871911",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0599c889-f66c-45c2-bbc5-18e0728d8001",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "2df5ba4e-a6ef-46bf-9929-7291681adcfd",
        "cursor": {
          "ref": "baa16cc7-12b2-4c30-839a-498837e15bbd",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "bd4f8a17-143d-4568-8f34-dc23f9003b75"
        },
        "item": {
          "id": "2df5ba4e-a6ef-46bf-9929-7291681adcfd",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "21a5a822-5ea6-4cc5-b027-317fb06abdb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e196c54a-c8b1-4bfe-9c38-d750d879df2b",
        "cursor": {
          "ref": "94e8be6e-bffb-4a5e-b2ea-754ee85d2dd9",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "61a163f4-7bb3-4fc3-bfce-cfe60d01d2e8"
        },
        "item": {
          "id": "e196c54a-c8b1-4bfe-9c38-d750d879df2b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "31cb4fc3-ca80-43ae-a255-3212c5241cfd",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "54d1ca54-3f3b-4c8e-b42d-6ea3947377b5",
        "cursor": {
          "ref": "2a41031f-dfb6-4e75-882d-3c98b21966d9",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "69e2b7d8-b163-47cb-b7e2-3775d619f9bb"
        },
        "item": {
          "id": "54d1ca54-3f3b-4c8e-b42d-6ea3947377b5",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a558ed08-c934-431e-aaa7-dc9b6e4b51d8",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "5726b2bd-9197-4246-bd5e-ee7a4adda125",
        "cursor": {
          "ref": "29ca5391-d331-4dba-b1e3-13affee3a6cb",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c7bad9c3-c4cb-458d-bf7f-fc076aa6209e"
        },
        "item": {
          "id": "5726b2bd-9197-4246-bd5e-ee7a4adda125",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8ceeef9f-b0a5-473e-a929-75068f45edb4",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "c14a7356-18b7-4675-b652-a951b78770e7",
        "cursor": {
          "ref": "cdc70f2c-246b-47b0-bc6c-225aa9bec6e4",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c87b7be5-8a9b-423a-adf7-cca359fa792d"
        },
        "item": {
          "id": "c14a7356-18b7-4675-b652-a951b78770e7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ec766f2f-9d24-4a4b-8be3-c53845aa297b",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "5d2857d6-b086-4476-82f5-46f29babe318",
        "cursor": {
          "ref": "665f7294-02bb-4605-a368-b53a2f5d81c7",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "59d71126-430c-461d-8189-382869bbaa4c"
        },
        "item": {
          "id": "5d2857d6-b086-4476-82f5-46f29babe318",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6c1cbcd9-cf50-42ea-8531-dc88ee514041",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "f94d645b-4d1e-4e92-a466-e7ae68a286a4",
        "cursor": {
          "ref": "6eb531b2-bcac-4698-a7b1-56d15714c611",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "76f0e6e1-d011-498d-beef-d13813e9cd05"
        },
        "item": {
          "id": "f94d645b-4d1e-4e92-a466-e7ae68a286a4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4924fe98-b197-43e1-acac-ed453b520b8b",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "57f05ef9-7bf3-4233-b2c9-002b948e72a6",
        "cursor": {
          "ref": "b5cf71f6-a5a5-421d-91a6-ffd570dd628e",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c6566ce2-fd7b-48da-baa3-8123ddc150fb"
        },
        "item": {
          "id": "57f05ef9-7bf3-4233-b2c9-002b948e72a6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a1d93123-bb7a-49de-b5ec-4ff5abfcfe66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8460488d-3130-4d2a-88a2-7c2d5f50af49",
        "cursor": {
          "ref": "d6a09a39-4fe4-406e-8e4d-7b01f154bd34",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1aad1243-90a1-44d0-8f25-2bbde3f4bdf3"
        },
        "item": {
          "id": "8460488d-3130-4d2a-88a2-7c2d5f50af49",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c5529b6a-40e4-4b48-9e4c-2c4b7d236f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e00054-3a28-449e-806c-935651bea772",
        "cursor": {
          "ref": "dfd3d143-25a0-4664-8ea9-eaa304853706",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "dce48639-a6c9-4365-a0b0-f667eb0f9c02"
        },
        "item": {
          "id": "87e00054-3a28-449e-806c-935651bea772",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1fc60ac1-3b07-4f59-bda2-430057b7e4be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ecb1f88-f4eb-4fb3-b72b-5d5b933d1bcb",
        "cursor": {
          "ref": "762d45c9-a2ae-429b-ab48-a2b0b05609e6",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a6ec5671-53a4-4caf-920a-cf916d5262d9"
        },
        "item": {
          "id": "7ecb1f88-f4eb-4fb3-b72b-5d5b933d1bcb",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4d419edc-edb7-4bf4-90de-27df0979c0e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3bcb1b0-7854-447c-8098-42daacd3126f",
        "cursor": {
          "ref": "82d4db61-1dd0-478c-bfd7-aff64335a8b9",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3d21e867-83aa-48ab-ba17-fa92d7ba2c87"
        },
        "item": {
          "id": "f3bcb1b0-7854-447c-8098-42daacd3126f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "82e5401b-2115-4585-8114-0e2d84f7940d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7378f32e-70e5-43bb-b0f0-ecb864d24f7b",
        "cursor": {
          "ref": "9bc14fed-1bb2-42d0-83df-51587f5b043e",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a9d440cc-d733-4c60-8b27-38842572c1ff"
        },
        "item": {
          "id": "7378f32e-70e5-43bb-b0f0-ecb864d24f7b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "8973d852-e1de-429b-8658-25270e6fb554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "954f6983-7e8f-4b18-8227-5ed6115b2bd7",
        "cursor": {
          "ref": "d5f4bfab-4f92-4e82-b527-a38b1d2538fc",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "28bdcea8-db1e-46e3-bb69-3f6d4575b7f4"
        },
        "item": {
          "id": "954f6983-7e8f-4b18-8227-5ed6115b2bd7",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "92e3feff-84d3-4eda-a67a-d9579173586e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "155de1f1-0f44-46c1-a8eb-2970966276cf",
        "cursor": {
          "ref": "b5ca9b76-1563-40e5-a770-e2d1ef3c522e",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6e36e2ff-f6b1-460b-9d1f-fc882ed0eb69"
        },
        "item": {
          "id": "155de1f1-0f44-46c1-a8eb-2970966276cf",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "973d2a89-ceaf-4e7b-80af-c293dcd9decc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94857923-8257-46a5-a9ac-ef7fe7686f96",
        "cursor": {
          "ref": "4a8df55a-bf20-4da2-b9e7-867707ec78aa",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "53bd9bbc-2381-499a-8354-d4610be039a1"
        },
        "item": {
          "id": "94857923-8257-46a5-a9ac-ef7fe7686f96",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "13ae7e47-5435-40b0-b32a-be448483049a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d782b90c-3b65-411b-975b-8cfb6a52fb74",
        "cursor": {
          "ref": "fa714927-8133-437e-b2f8-4d0cdfef5a0d",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "465abdbb-cbc7-4a06-9d24-9ccc2f154427"
        },
        "item": {
          "id": "d782b90c-3b65-411b-975b-8cfb6a52fb74",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "18917121-c54e-4997-bfc0-63449f6167fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "325490fa-60f9-4e2d-a7f9-56425e523037",
        "cursor": {
          "ref": "d672f70d-48b6-4fed-827b-b042770140b1",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0c51777d-774f-4ff7-9a71-052417dc4771"
        },
        "item": {
          "id": "325490fa-60f9-4e2d-a7f9-56425e523037",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1abe02d8-20bc-4341-8538-da55787e5890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e30c8def-ae4f-4031-9cba-ddd03482ce04",
        "cursor": {
          "ref": "f39c35ad-b6c3-4490-b175-7b7c04865986",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "565eb461-5668-492e-8b90-fa969d6bb5ea"
        },
        "item": {
          "id": "e30c8def-ae4f-4031-9cba-ddd03482ce04",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "dac73fa8-d9a0-491c-8c4c-2835db884e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a81e11e-c037-4641-b5ec-348d511cee34",
        "cursor": {
          "ref": "12f04c87-d18f-4fd0-a4ea-969230987c36",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a48d7718-7f8b-4f44-b351-2adbef609010"
        },
        "item": {
          "id": "0a81e11e-c037-4641-b5ec-348d511cee34",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4080a400-8e04-4576-b9ec-8c598aca56ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa53b688-3335-4d32-92c3-1480700ce346",
        "cursor": {
          "ref": "ba659efb-daad-4ea3-8cba-14040124d4b6",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a4188427-315c-4c2f-892e-afd363858cf4"
        },
        "item": {
          "id": "aa53b688-3335-4d32-92c3-1480700ce346",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9ded33e7-e9c8-4a2c-b1a9-ba640037e2cc",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "5b206fda-4912-4cbc-8c03-29c28f75c094",
        "cursor": {
          "ref": "71583cd2-0415-4bf0-b62d-771289c884fd",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "391f17f4-6f2e-4e52-9d54-0a770963f3bd"
        },
        "item": {
          "id": "5b206fda-4912-4cbc-8c03-29c28f75c094",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d086fa21-99c2-4160-823c-1cc947c628da",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "ce33d248-9099-4214-8c82-bb7d326f6912",
        "cursor": {
          "ref": "4245ed96-50c4-4271-b3c8-6993976c27c7",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a94c9a39-bd9f-4f96-9315-a5dde89a0c0b"
        },
        "item": {
          "id": "ce33d248-9099-4214-8c82-bb7d326f6912",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b5ade139-2468-4956-92e8-7ebe07d5e304",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "47ca2b82-0122-41d6-90e3-e9d4c04972c5",
        "cursor": {
          "ref": "d35f9ea3-cfdd-4f9c-8acb-e42a0ad710cc",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9fbc2220-754b-464b-9c17-f6c4a7ec236c"
        },
        "item": {
          "id": "47ca2b82-0122-41d6-90e3-e9d4c04972c5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4539bd48-cca4-465f-a474-0337e100fe10",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "318029d2-83d3-4d56-98e0-cad4386bf15c",
        "cursor": {
          "ref": "1b2e9c68-e0f9-4954-a87b-db2210a45030",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "95add3ef-02d8-4015-b10e-eddb0993d43f"
        },
        "item": {
          "id": "318029d2-83d3-4d56-98e0-cad4386bf15c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "36b5bdeb-aff9-4615-96c9-7c04baf1382c",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "9466994c-6d0f-4747-aabc-01c015812d2e",
        "cursor": {
          "ref": "1d8acfc2-5577-4335-9732-7b692dbd152d",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a88f21e3-2661-4874-a7a8-abc0891fe701"
        },
        "item": {
          "id": "9466994c-6d0f-4747-aabc-01c015812d2e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2af52977-0941-44a6-8cc7-61e47381fa65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1bf355-45ec-4476-a916-8cde8916a0f5",
        "cursor": {
          "ref": "3e177374-2d18-4918-a6ec-bdc28cc377aa",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "58721359-faab-47c0-b716-b5e552667f1b"
        },
        "item": {
          "id": "7f1bf355-45ec-4476-a916-8cde8916a0f5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "12acf028-f716-4406-9f8e-ceed0847810d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba09330-f3d7-46d7-97d6-d0af0b14e174",
        "cursor": {
          "ref": "10f11747-dcd1-4ff2-9c3a-a5d70e66fe8a",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "94064f59-ee7b-499c-8d0a-151813065bb5"
        },
        "item": {
          "id": "2ba09330-f3d7-46d7-97d6-d0af0b14e174",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e756c88f-ba05-431e-b5c2-f43c501d9c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d5bd318-6c35-4379-a0a4-5ef5d9ab7efe",
        "cursor": {
          "ref": "86ce4c00-0460-4ab1-bb60-eb48244ae8da",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "82bbec65-ffba-4d52-9417-b923545479fc"
        },
        "item": {
          "id": "1d5bd318-6c35-4379-a0a4-5ef5d9ab7efe",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "01ee240b-bb03-4bd0-a654-f7f4245a2a37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac641d7-e2c5-487f-8378-3c629ea63638",
        "cursor": {
          "ref": "6c3bc136-dfdc-499c-bdca-ceba47bc0376",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a2292833-d95c-4548-b544-9a228694f4b8"
        },
        "item": {
          "id": "bac641d7-e2c5-487f-8378-3c629ea63638",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f5488fdb-0505-4637-a18d-43b57eec3718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8ea7a9-7b67-427e-bbbe-ee3f98888902",
        "cursor": {
          "ref": "bb58affe-fa69-406e-84a9-cced5cfce34d",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b033717b-fd84-4b8b-b38c-dbd5cfd0962e"
        },
        "item": {
          "id": "fa8ea7a9-7b67-427e-bbbe-ee3f98888902",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cff48be8-a40b-42ba-8d6a-1825f55ee80c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24298b93-1789-4471-8a46-ed0162228267",
        "cursor": {
          "ref": "db2064a7-8e23-452c-a24f-a2483e039ae9",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "724b7164-c23e-4df4-9375-486acf18efca"
        },
        "item": {
          "id": "24298b93-1789-4471-8a46-ed0162228267",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "02b4730a-6456-4296-a1a5-1bc829061da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc77502-78d7-46d6-96b6-33e0b3b8676b",
        "cursor": {
          "ref": "edbfd657-c3d9-4bfb-b2f3-cb5914e9c9cd",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4fa51835-d508-4673-9575-79c4a2139c4b"
        },
        "item": {
          "id": "1cc77502-78d7-46d6-96b6-33e0b3b8676b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c3b2b3a0-ef3d-4bbe-80d9-fe55f76a868e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f597140-7d77-43bb-98a6-84e45dbf77ab",
        "cursor": {
          "ref": "579f8a4d-1d31-4125-a8b6-196843bcd810",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f865e323-e184-4823-b87d-1bfcb09f7c85"
        },
        "item": {
          "id": "2f597140-7d77-43bb-98a6-84e45dbf77ab",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "665db8d5-ace7-4989-a8a4-70c435866c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0d9f22-c0dc-44cb-a8c1-a787f8a98e61",
        "cursor": {
          "ref": "a68be29d-812c-437b-a5b1-5150f662bd65",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5508ed5b-f8da-47b4-9a21-aad8c0394144"
        },
        "item": {
          "id": "4e0d9f22-c0dc-44cb-a8c1-a787f8a98e61",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "43b6f362-7b1a-43ef-b260-749838deca40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb3538d-e93e-44bd-92b8-d35312684124",
        "cursor": {
          "ref": "6017511a-c2bb-4484-bd70-aef24158b541",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a1ff706c-7e75-400c-aade-820f89069751"
        },
        "item": {
          "id": "2bb3538d-e93e-44bd-92b8-d35312684124",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "707f7296-9118-4752-83cb-a9ca3bce169d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d685cff3-6160-4982-8253-330711efc916",
        "cursor": {
          "ref": "b950df28-b2e3-4b81-81ab-471a121fc63d",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "776a8d6f-5882-4033-b114-3ec607420c01"
        },
        "item": {
          "id": "d685cff3-6160-4982-8253-330711efc916",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4b289dbb-e91b-464a-9860-4d2fea1162ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126db941-5ab7-46d2-959a-c43db92c8c80",
        "cursor": {
          "ref": "f8730a15-b49e-45e0-93f9-ffc12b6c46b4",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "fecbd2a3-522b-4e5b-a547-20d624a9c2df"
        },
        "item": {
          "id": "126db941-5ab7-46d2-959a-c43db92c8c80",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e2ac286e-7f94-4b19-8b82-b1abff5dafcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e26b02b-d675-48f7-aad0-2d94f1b5b16c",
        "cursor": {
          "ref": "576b45d1-2fd6-45d8-b80f-e58cef7cbd11",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b9fb6db0-520a-4151-8ad8-ac28da8651d5"
        },
        "item": {
          "id": "5e26b02b-d675-48f7-aad0-2d94f1b5b16c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b397fb03-351a-49d2-a225-aa013c487435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb792bd-8415-4c80-8c64-c9c41b232ab7",
        "cursor": {
          "ref": "1ee89633-02c4-484b-ac4b-c09bee8d7b77",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "db6bca31-d5b2-414b-9778-be6169f994de"
        },
        "item": {
          "id": "dbb792bd-8415-4c80-8c64-c9c41b232ab7",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c69aa18d-7490-4d11-87c4-f850688ada8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ad4e11-7890-40a9-bdb4-df0a43bba196",
        "cursor": {
          "ref": "23153f68-aad8-4c60-8b18-a43d66923d54",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "49f29d54-ceea-4359-993c-f06607ec6f82"
        },
        "item": {
          "id": "02ad4e11-7890-40a9-bdb4-df0a43bba196",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f60f205a-93c9-4e0d-956a-e7631eca6b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88e75e49-12ac-4916-8242-e7f3bc236d66",
        "cursor": {
          "ref": "4751f14e-839c-437c-b2bd-d3343ab41cb9",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3225d486-2079-49cb-a78c-255a863b1ba6"
        },
        "item": {
          "id": "88e75e49-12ac-4916-8242-e7f3bc236d66",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a82cb936-aafa-4815-b544-21fe7e32c099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868ee024-5d90-440a-990f-3bf9313a8bb2",
        "cursor": {
          "ref": "f79225a0-c5c9-4ae5-904d-57b586b08463",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "65a6176c-5ace-42d9-9700-4d8eb0ec4975"
        },
        "item": {
          "id": "868ee024-5d90-440a-990f-3bf9313a8bb2",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "cfd69870-2072-410f-a4ca-678cf26ebcf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7dccba9-849a-4f2e-9d00-7bd04934d40f",
        "cursor": {
          "ref": "715d9d36-423e-460f-b732-09474b46ec2b",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4c46fb45-4da9-42ee-8e89-e0197c42c0a1"
        },
        "item": {
          "id": "b7dccba9-849a-4f2e-9d00-7bd04934d40f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "12ebc57c-0bff-4dfe-8f3c-3e4c4e176d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708c4d31-8aa2-4138-b250-704aaabeba59",
        "cursor": {
          "ref": "a4de8ddf-07c6-411d-b438-55cafb28e276",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ab4ef808-1335-43eb-9dee-60d2e0275617"
        },
        "item": {
          "id": "708c4d31-8aa2-4138-b250-704aaabeba59",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4cfd5ebc-dd18-40c4-b122-a0f9039036af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d983866-7547-4e24-822e-3b4ecb802271",
        "cursor": {
          "ref": "dbef6e2e-3aed-41ba-850e-e2d8c6ade190",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f18c57f7-980a-49e4-be1b-54103162017d"
        },
        "item": {
          "id": "3d983866-7547-4e24-822e-3b4ecb802271",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "583f4877-d89c-4123-86e5-9412da7d963c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b4fee2-df13-4beb-94ae-0c3d5fe8c5d3",
        "cursor": {
          "ref": "83e45e46-92fc-4210-80d9-c4ed47d08163",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7e568c16-caea-4433-a9e8-9a84723e3b28"
        },
        "item": {
          "id": "25b4fee2-df13-4beb-94ae-0c3d5fe8c5d3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "24b7aae8-5109-4bd9-821f-1d67c87031d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91b2e7c-c18f-46dc-9949-97b7a2505759",
        "cursor": {
          "ref": "5b3b8619-3dbb-4fdc-9333-95b39302e8ac",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "558ce4e3-1821-4dfa-a110-a4ac65a1c7d4"
        },
        "item": {
          "id": "e91b2e7c-c18f-46dc-9949-97b7a2505759",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fdba4334-e4b1-4f80-ba1b-4de34ff882ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6321f8ff-6ab1-41d0-b52f-9771bfe41934",
        "cursor": {
          "ref": "94981e5d-9725-4602-b55a-67f8b8a31579",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5e627a58-0263-4eb2-9367-959e0473bff9"
        },
        "item": {
          "id": "6321f8ff-6ab1-41d0-b52f-9771bfe41934",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b8691517-c03b-4e9f-8fd9-384ac216908d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9387f1d3-5382-4c69-808d-579f6d5d9202",
        "cursor": {
          "ref": "e6b8ca52-6769-44e9-b7bf-a8f803150f59",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8946bdcd-6189-4eb5-ac92-e34098657943"
        },
        "item": {
          "id": "9387f1d3-5382-4c69-808d-579f6d5d9202",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8fb4b9fe-3410-4f46-8bc9-f5b88a6f8895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46733bc1-b287-46af-8df9-353661d8995b",
        "cursor": {
          "ref": "524f7899-47c0-492e-8e7e-d43e6d6a94bb",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9508418f-c344-4393-9735-255182003939"
        },
        "item": {
          "id": "46733bc1-b287-46af-8df9-353661d8995b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7f6c25bb-7381-404f-a93d-23e621949e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b08e3a-fc14-4647-9ebe-9bf9cdff8499",
        "cursor": {
          "ref": "a51b32f8-d203-458a-bf67-f7a7d2f84315",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "8c691606-3804-4482-8425-17bb14ba2af9"
        },
        "item": {
          "id": "e2b08e3a-fc14-4647-9ebe-9bf9cdff8499",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9d9c409c-f1f8-4221-982a-ec625e30a8db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f0886d-7e80-4229-8a8f-2690168987c3",
        "cursor": {
          "ref": "b35a4868-c9d9-4712-ba9e-b98a6e7f7daa",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5241ba69-785d-48c3-995b-cff54b367789"
        },
        "item": {
          "id": "e5f0886d-7e80-4229-8a8f-2690168987c3",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0f213d97-2679-43ef-bf38-530681bef0fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254ef9b9-c12c-41e1-8e71-65a89d2fe64a",
        "cursor": {
          "ref": "ad6e81be-37ae-41e1-ba87-1149e89b1242",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e8e7e269-1b8c-4bf4-9c89-c1a89d04b0d2"
        },
        "item": {
          "id": "254ef9b9-c12c-41e1-8e71-65a89d2fe64a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1eda571b-bf97-400f-b565-02baae2aea8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d3a785-c9a7-4e71-a18c-13d0b03678bf",
        "cursor": {
          "ref": "e980a86b-3bd6-48f8-945c-824969550ada",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b706e48e-d272-45bb-9c88-0777c10631cb"
        },
        "item": {
          "id": "a8d3a785-c9a7-4e71-a18c-13d0b03678bf",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c640ec66-1e04-4ed9-9940-ecaab6f908fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "310af1fb-9e72-49fe-8bf3-6449348d5e54",
        "cursor": {
          "ref": "6c182e71-4abf-4461-a8f9-43b3a17c0e84",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "60d78839-e7bf-4489-838c-9945d5a8b90d"
        },
        "item": {
          "id": "310af1fb-9e72-49fe-8bf3-6449348d5e54",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "470b7134-2f83-419d-aff9-3788a68fcac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a68530-8e83-4dd3-a461-29a2c3aac315",
        "cursor": {
          "ref": "8935d909-1b2a-4b9e-96f3-b8f7d0c2cbae",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9b0f2493-b4f0-4ecb-bedb-5c7375c500e0"
        },
        "item": {
          "id": "50a68530-8e83-4dd3-a461-29a2c3aac315",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "138643b8-8b12-4751-8eed-5c9e678de7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1065666-e215-4383-8d11-4d1702969335",
        "cursor": {
          "ref": "819a58b8-0e88-4c09-999e-3e6bed781480",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ab7ad03a-b0df-45e8-a740-74676c8638f6"
        },
        "item": {
          "id": "a1065666-e215-4383-8d11-4d1702969335",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "24929d39-4032-46ef-be19-d686a23e146c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1784e71a-71e4-4519-b433-f3f9574bbb7a",
        "cursor": {
          "ref": "70c78ba4-887c-4d14-89b4-b9592685289d",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "147421ea-8a88-4a72-98a0-26cedf2bb81f"
        },
        "item": {
          "id": "1784e71a-71e4-4519-b433-f3f9574bbb7a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "61d37de7-9cb7-4835-a04d-88370ff9ae1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a77e84-6b39-4cf9-b8d7-54bbcdc3a3c4",
        "cursor": {
          "ref": "a1677636-ed7d-4b22-aaf9-50b650f8c806",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "fcb803ff-e7d1-4f2c-af89-b4e01d08246c"
        },
        "item": {
          "id": "a3a77e84-6b39-4cf9-b8d7-54bbcdc3a3c4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8f8af7de-97d8-47ce-a05d-9be8bbf53747",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3664516-9fcb-4ff0-8efa-78e06c358f3c",
        "cursor": {
          "ref": "e3f38c23-f974-450b-b69b-b445b882d8fd",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6bcd2910-8893-4488-8067-53e66ea178e4"
        },
        "item": {
          "id": "f3664516-9fcb-4ff0-8efa-78e06c358f3c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "469e1963-774c-4459-9d9f-9afe03c37528",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "b2f5a305-ef34-456a-90f9-7d4d792fe8b2",
        "cursor": {
          "ref": "0008bc49-482d-4e30-adaf-bf1ba827ad04",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d22f0e07-b1ee-44de-baba-ca0393f07a8e"
        },
        "item": {
          "id": "b2f5a305-ef34-456a-90f9-7d4d792fe8b2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a0de908c-e366-420c-adec-6b21a2a7b43e",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f689a95-fa9c-4a53-a2f5-05daeb4b1b58",
        "cursor": {
          "ref": "3770e7ef-b7a8-4ced-bd33-ab1c31126ba0",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "608efed7-548a-4fb3-ab98-0287405831fb"
        },
        "item": {
          "id": "5f689a95-fa9c-4a53-a2f5-05daeb4b1b58",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "614f1fd6-734c-4eaf-8120-592fd684e181",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08db85f-078a-4ace-9675-373585dbbcf8",
        "cursor": {
          "ref": "d64676f1-666f-4120-a750-f7ade33d49ef",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1f835ced-f6bb-4bbf-806f-d24d63a0c38d"
        },
        "item": {
          "id": "e08db85f-078a-4ace-9675-373585dbbcf8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b92292b5-945f-4d9b-a7c1-b106f2f05873",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08db85f-078a-4ace-9675-373585dbbcf8",
        "cursor": {
          "ref": "d64676f1-666f-4120-a750-f7ade33d49ef",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1f835ced-f6bb-4bbf-806f-d24d63a0c38d"
        },
        "item": {
          "id": "e08db85f-078a-4ace-9675-373585dbbcf8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b92292b5-945f-4d9b-a7c1-b106f2f05873",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb12b47-7394-4957-abf3-0bf3d5a9a607",
        "cursor": {
          "ref": "ec4a7a67-8d36-4100-a9ee-e3f61076aee8",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "597ff300-b1f9-4732-9934-e8fced728c15"
        },
        "item": {
          "id": "0bb12b47-7394-4957-abf3-0bf3d5a9a607",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ed389ca3-c517-45b2-9941-d812b46fa714",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126f8ca5-ad8e-436b-89f2-673cffecc53b",
        "cursor": {
          "ref": "325d36e2-7849-4928-bdcd-7bdfb4fa4694",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "024671ac-94a3-4bae-bec9-72ff14875d74"
        },
        "item": {
          "id": "126f8ca5-ad8e-436b-89f2-673cffecc53b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "82b4f2ce-55d6-4ddc-85ab-840f64ffbbee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}