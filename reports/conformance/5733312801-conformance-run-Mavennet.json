{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ee0afec9-c365-4044-9808-11b2cd78934b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fa32a5fa-6915-43e1-b784-229fe0a19a30",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "444ab461-ba40-4d79-b973-ff6e6b115d8a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "55253fe2-2a90-4ea1-989f-a7ac2a51e6d1"
                }
              }
            ]
          },
          {
            "id": "9890b9cb-19fe-45e1-9b0a-ac1fdf62125d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2b036a85-91ca-415c-b612-5f22139571c4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6402cc41-8e8b-4cfc-9be0-8596a09599d3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ef7f98b4-871f-4820-a414-63d4d45fd38f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f16c4c56-0313-426f-9820-81d002a3d67a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3037c9fc-b98e-4089-b996-3bf34c91a9d3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2129ee9-97b6-4cbf-bcbe-38c87cb7ebb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8c4a8a19-6bd6-4272-9455-a8c95a052d2c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a643c489-4571-424d-9f8e-7e739175e719",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "27756b51-c33a-4f19-94e1-edc18a815297"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "31579535-ea3e-41c1-a181-e0d305b68c16",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "98acf6b9-aafe-42fc-b62d-de2f9c897101"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c7dc2c2-e3c2-4c83-bf09-2faa2d9f76c0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7dbd4eb8-16e2-49d6-b196-a238d8b9a9bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1febe8a2-9ec9-4c1c-ae1a-73a274cf1c25",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ad3d914e-a51e-487f-9b67-2ac777eb98f9"
            }
          }
        ]
      },
      {
        "id": "9f05b35f-1641-4641-9a6e-914be7767d17",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "21d872c0-f1d4-4f4a-bd59-c5ef3d707689",
            "name": "Negative Testing",
            "item": [
              {
                "id": "874af284-26ca-4a06-8d60-e3ea97376036",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7ecd8f74-708e-4cc1-8da4-018c4dc73ec2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1fb96c-c374-483c-bd30-8a3e9f2aea9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1848cf9e-a27f-4098-b235-d91145ccbf50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312414b2-61e5-494c-afb3-57d2acec8f4c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abec4506-9d2e-4650-863c-9d898647e042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a618fca-eeed-40e9-a665-665a7e835f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a81adff-cdda-4967-8710-635132164e76",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84289d66-abdd-4334-a301-e326f90f9a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ff52963-b08d-49f6-bccf-4554c17ae5fc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bb478d02-1fad-449f-869f-2bd9bc8983b0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c13da6ab-2eaf-43bf-8f99-5bd96e1b94c3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67e4c6a-45b3-48bc-960b-c0dace8051f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c129bb3-f8f1-4d25-86ab-c83c3d89fd7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c146530f-cc03-4be4-a9b4-5366d81b6da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f8ccaa-a663-4efb-9cbf-3c4a5372d5e2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bcd06a6a-26c8-4590-bced-0b3a72622720",
            "name": "Positive Testing",
            "item": [
              {
                "id": "847af095-6c20-41da-800d-a6d47b3bcc2e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7196c944-999c-4b2b-8831-74705aeedeab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1215f7c9-1be7-46a5-a90a-6a93ac4e0fbd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "faac3742-dcc9-45b3-b598-071c44f859a9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "8db17456-986a-4430-bcd6-e00fef8188f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5629bc5c-1d9b-4b38-9d2b-30d1dc9332e9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "03b52a59-2368-43ba-be71-1ad70f0f5429"
            }
          }
        ]
      },
      {
        "id": "3958cf39-7ff5-403d-b103-654be0390027",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6e114cf2-2318-4f44-b850-0c78e22d7199",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9cee5983-26c4-4f0d-86d5-753e395f7e87",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "fd2fa58a-b6af-49ec-bfe4-e62a571d6081",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a2e7c8-d140-4a5c-9132-3e39812eb183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "012136b6-d0f2-42e9-b0d1-681be66e2c62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef65bdcd-79f1-4c1d-b951-280e16607e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "039c315b-0e56-4f06-9d4f-a200e3a610f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e1b88b-5df4-4358-be7b-c593ef02e69d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adad6f49-174d-4d0e-a29f-53aa4977d3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b66a96-70c7-456b-b412-a606f6ccc6ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f5b65b-a873-44d2-b63b-17df0b136d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa4c2710-f0b7-4475-8196-be39d5d0dde0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e372b3-826d-4062-9e94-fb0e7185eba7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c467fa-ba20-4a22-8a3e-0beec7168374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "049d50c6-3d5a-405a-8ed2-464abdb46644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d47ed69-ccf0-4e2d-b55f-464463fdf853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0cd38338-d99b-4284-9301-d89a4c4b3089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e083b328-b674-4e47-8c9f-8d6842d51d06",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836d4d93-ebe0-47c0-9c38-a81c256be04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1131e1-99e0-44d6-a51c-cdfdb820336d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8755be80-fe10-458b-a852-d0039bf08e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2dff90af-f581-46f2-bb6e-edf58ce2085a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f312a2a3-652b-4ee7-a344-a28f7ce01425",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3913633c-8a74-403b-9226-59769f601013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d553f199-0b40-427c-b578-7fdd361dbd00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d08d6b2-b74e-4454-bd9d-9844a491f9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00cb4288-3325-427a-82fb-2c0c5c2bb943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924a3606-605d-4949-a7e2-8a288422514d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "854049a8-1579-49c6-a612-e8058347d07e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b05993-f996-4b37-8143-a426c3b55f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20d98ef-5398-4e9d-a4e8-75ff51a71197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa8d87c5-765b-4b71-9ca5-44e8e5c35287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b8a659c-d21e-4f2d-8b7b-0ae9a180ad1e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9d5f92-87ae-4b37-9b44-b5eb393186e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc2f9e66-776f-4653-8288-24715aa2488b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80e0d28-345c-4cba-a602-2a1cbd630e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8539ad3-6ce1-49e6-9b35-37eed6a807bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b76195cd-37ee-4b26-9ae7-e56427cf9749",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe96110-dc30-4f02-9449-98d11a69e806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d36bf4f6-3fd5-4ca9-ae4e-f37a6a803ad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a88283e-c28f-4cbf-a676-71b50644a18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20700b18-5f10-48c1-9951-3c41680aa2b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90390d8c-ed3a-4cb8-91e1-c6b5241c92ba",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae6bd76-10f0-47e6-a647-2aea31caa233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf3e3e9-e537-4981-bfc2-28e1facb15a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "102791fd-1985-470f-8b44-88ac06a46689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d522effe-1441-4b7f-a483-878273088fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1e6c17b-58ee-46a0-b9a0-681c56009fca",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4632d275-17b8-4acc-b4b9-b0e68d7ae37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77c1c8f2-e62c-4c5c-b22b-aa621dd618e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac7047fe-7d9c-45bd-a57a-63ddea0b1d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c84bec7-5554-4b5a-977e-a39bdcdddc81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde7adef-51e8-49bb-8446-400b1d288047",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19876ea9-c65e-4d46-9d99-82c330d1bbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e4edcbd-563b-45ec-b76c-5fbf00c12360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54510a9-f8a0-4fcd-8fbd-c79b3d5457b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d2bd884-d6bd-4817-9350-736d54cf4e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170ddbf4-60d7-4337-8799-2a7e9b237baa",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "417fef69-ae5f-4c13-abd8-f5cb73c9d0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "206dd852-31a9-4464-a4d5-308d2d2f63c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50fb5851-cd29-4c68-8fbe-10d1dfa94088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fcf2a61a-eaad-4713-b012-1a2fceff334f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8f6e34-aec3-42e6-a5ce-7f8f698a6d89",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d288e79-6d0f-425e-b35b-4ff268363a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2649ef06-db7a-41b7-8ae7-c8dc1d6d0db6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13297064-b2dd-4dc0-94cd-ec99fff02d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "930d7feb-a079-48d4-a2e7-3340496acd5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76705be9-6f43-44fd-b006-c984883dd755",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae315aa7-7a25-45e9-a2a7-8644d6331eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc0ac289-6d00-4c37-9b58-371aa850a5ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d31cb7-0185-4264-94b8-156281716c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d42218a6-7024-4bfd-8d4e-d8da0949eeaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "addc71ef-3eff-44a9-bb36-463bb0cbb66d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9752816c-ce3c-4a0c-b7d3-38d761708af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d36e761c-06c8-44aa-bcf2-752370a4955e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5109205c-f76d-45c9-814b-76b4128b98cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be640675-48d4-41a4-8563-e243b3395bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c833296-2326-470d-8c72-26c998111595",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5718d2c3-6ffa-4b52-b482-02c9d37c22ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6350e944-be29-4196-9b85-67a9d1d65628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8a4510-ee5a-4915-a022-96d0135d4b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9da0288b-3f7b-4784-aa75-5c8d6c576106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c130c8-1ce0-47cf-8ccf-636d5a4025ac",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a13459f-002d-45e9-bb21-771cd93f8a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7b76b7-d338-4798-b94d-b5fecf0a6299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f7a4fd5-ca4f-4a70-a6cb-dc8b93733e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dac7c659-38d3-4589-91e8-738574051bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "671dca1a-8fda-4394-b91d-64fba244f1e2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc018a22-9f00-46dd-9ee8-b7b22773294f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57a732ef-58c0-4c34-aba4-dac3b899f0d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b60c773-c23a-4c7b-a97d-143373fccacf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2821b8ed-459d-467a-979d-1425518f5dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d5baf9-019e-4e9b-ad78-ddaf5eded84a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7d1f18-e30d-4660-adbc-15ded47a7d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "276c276f-eef1-40d9-bf3b-6cf4ef17e914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41bfec89-ef77-45ba-9fa1-3b8f2295a990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b1e57f-93d9-4373-97ba-fdce5d93debc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993502d8-d112-41e3-b971-bccc074c81dd",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "384c6ad4-4015-492b-b661-4b75b24c2f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be768c9-44db-4c00-bc20-24676bacfe96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215580d4-c8cb-48d2-875b-148806ad51e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7aba446d-72ed-4caf-a358-593d67b7de53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "954c35c8-c1e5-41ef-8fbc-83563ac214d4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a5d4a0-8e41-4e5d-b284-3081f6db188e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2edc8642-b7ce-4d9b-a379-8e015b6b5f09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d99ac9-fb67-47ac-ae94-7160f5b48062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "029dc6a6-acb4-4ae6-b8a6-a0120bbb7e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c25895f-cc17-4f2e-b60d-f6cf458bb63d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab5a8e3-7830-4e4c-a6df-3f1a46078e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe34f93-cf09-4221-898e-a2c805467426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b70aa38-40ba-4b1f-aa91-597fda05fdee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc3c0a5e-35ab-4906-a409-01fbd4aa638a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7db144-0981-4a78-9196-48bcf624e8a2",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "432f789b-c97b-4f90-860a-7e093a880f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "770cfa04-d633-4127-b904-18fb15135fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cdbf358-cbdc-43a4-854d-189c190d4b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "432fd4af-2b3c-4bbf-b1ab-def33577b7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b7e7e03-be8a-476a-8f0e-c90b8e17656f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f81b035-aa96-49fe-bbb8-a18e246bc2e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8512e0b2-d587-4545-817b-582d968cc199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9514988c-4f4e-4081-8310-922c7f283f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c87a6166-11cf-4781-b619-69ed7995a8dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef5de8d-b569-4c5c-b063-6a6db844654b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7715d086-f133-450f-b50e-cad7ed3ba2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48640847-e36b-459b-ba28-0d3d60c64644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d1af34-a0be-4093-8e5c-272118a367dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "60548f6d-8daa-4af1-bb26-572bcccd5525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b3e7cb-be1f-4bfc-874c-facf0e3865fa",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "213c0e79-a2ce-4115-8af5-e00f0a837202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf51628f-009d-4c2b-9008-040c05673dd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632bcff6-fad6-4e06-90a5-ae457978d132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "518bbf72-3044-4b01-83f1-0fe3198fd568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2888f7f0-38f4-40b4-b175-870dc7a7f061",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd4342b-6845-4031-bb6b-d7e0466a3acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e86f865b-5346-4a2b-84fb-02e8a6db723f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3d56e1-8a16-4fbd-a648-aff6f0122db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "31a84329-4e6c-490f-8572-0f675da7ee4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7dc33da-9c3b-4369-b70c-0d46a93bb9f8",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb3f62c-67ee-4da4-9f82-b27a660707cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1858d9a9-a7ba-4bdf-a651-f7492681ea72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38d2d5c-1b09-45b3-96f1-f1a687e0b6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d056f83-99bb-4184-90e3-d84737cbb8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75ee9a5-b455-4b72-abbb-4b279f5929f9",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878b6e00-1cb8-41e4-8fb1-51603ad2ac01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cc8fdf5-5854-4973-be80-123cbc4b5832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24434ebe-339e-44a6-8735-29f043ea4c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "76f90b07-3c6e-4cf1-be55-5916297a6288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb8ab48-22b7-44ed-93cd-312027aa8760",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "006f22e4-252c-4552-86af-bd2be4e8c601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc4548f-611d-4cbc-aeb3-ceffc60dbcfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff73dd7-add7-4e03-8099-db292f87fb9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "31be41eb-947a-4642-b00b-36e846c48e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b8ec01-819e-40b2-a4d8-7562eff8c050",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0534ae12-3431-4823-895b-469a916048f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae9035b-6cf9-494a-bd7f-ff12599bb40e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0df0e16-433b-4b1d-9661-c80c374d8985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d28854f0-c253-4b7b-a34c-8690ff9a16ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d72b26b-4a12-48f6-8e04-3e54eac5d488",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2aee35-e133-4377-849c-19d57d14a8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b131ff2-8db0-4a2d-ac93-7897276790ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae39ff8-cec9-4587-974d-4e158ee1fafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b936d21a-f799-4dd3-8a3e-a042b359bc5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa93a4b-d242-46bf-b38e-2dcc34418f37",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b91a782-b1c5-4e84-9210-4befe7aa4ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb792746-5c00-4e4c-a7c1-e018eb67e94d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4481174e-32cf-4508-aedc-2e1f89c4b2cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f23297c4-37c2-4813-ab04-57f95e23d73b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c2d57c-624f-4cd5-9f56-92e9d25ed112",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bcb2290-2fc4-4347-8316-36aeac9c4206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4bcc701-e6e0-4a17-a88b-fe757606f159"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48b4f66-efe3-4238-bd00-ced11d98a9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d42016f-b29c-450a-98ed-e74ef056e8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91601974-5393-450e-8f71-2edb6666ea00",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72e1d6a-20be-4fb8-9cda-b225b6b998a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3952256-68ec-4d62-9fb9-8aadcd4492c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af388ff0-645b-4726-800a-ea24aa954a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2976303e-660b-49c3-9ffc-d4510b34fc45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4e040f-5bec-40b1-9987-c2b53998a077",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f7a0cb-f62e-4149-ac6f-caa430c54c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e98ec9f-ea85-4550-8e45-4afa7be12b0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe3687c-56b0-480c-bcbd-992b2bae7c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aab27ee2-54ac-4571-8a67-692c8c2fd051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88254317-7fc8-4fc0-a805-d892d2667892",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89790b8-fe44-4687-b979-653eab8eec44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23bd42b0-35e3-4958-a715-bd686ed1e40f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1589cdd-41d2-4e82-8fcc-6ad8b3b876a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f22b92b-b294-48fc-8d41-446c75f9ebd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5710500f-f40f-42bd-b1f2-c25b03e13a2d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1916d053-b6e8-45b4-bd6d-f4063415c536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b43087b-adea-4d9e-b41a-724c3964dced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a6db7a-6a03-4966-b8cc-caa51cc16cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed799681-5813-4e38-bdc7-696b7b661a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972a248e-b31b-4c2a-8e95-c4d6ee6b39b7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5b5380-f217-4976-a2ae-5963ac9902a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63d03cdb-afa1-482f-a121-0f2b5daa2cd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415c1328-bd78-4d2f-babc-fac89dc78d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9377d308-a9bf-48a5-8ff8-eb5fbe2643f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022f19c8-bcd0-45ae-b445-74a9e22bf05a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "862e524a-8b46-4147-bf14-8f39d7eb3474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce16bb1-014f-4bc8-b556-6d4db5a4256e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3137e946-4d57-43f2-a453-951fffd9cda2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "313a497b-62eb-4377-a095-cc007cc23c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1575c6c9-5091-40b9-aed7-92fcf15536aa",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e99fc4-0324-4d23-8f93-b2405b0ed8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ee2adae-52e1-4fca-840f-dcdeda3ce556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a51ea61-7c59-4cf3-85cb-f08df7bb9a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f93ac709-190f-423a-8adc-5c1e42a89138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6f5db9-14b1-41ce-ba39-2191b5776970",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e352c52-1d27-4496-a1c1-1691ff534af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "500d02ea-3598-4448-9d5f-48d5754d6276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc766334-5ba6-406c-ac57-6fe2d57bca83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "03a739e6-7fab-4569-93cf-a55d588df946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20740a30-a646-4d5e-afc5-73d866ac7294",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0eb8c3-c1ef-45ff-9e95-f0464c3216d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e65f619e-52fa-4d98-830a-037cd382d61e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636d0694-16b4-49cc-be58-5d0370c93025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e9df9f1-b9a7-4d7a-b1ae-f9dca8003ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b421d2-3f23-43bb-8d52-ed238ba03dc0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b902dd93-da2d-4709-985a-5b22b834d9d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df8e0828-65a4-4424-b7e8-b9ef4224b6dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc9d2803-f3cb-425c-a5d4-118e6185b9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "afc38199-824e-4902-8b25-ff1fb9e8c948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef3605f-d459-4394-b895-977180948cce",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a389c4e0-bf77-47c9-ad41-e8cf14b228fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b89dde8-7037-439d-b3b9-21adb4d22148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd1cf43-b520-4efc-adb4-fece9675c713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0831810-078e-47f4-9714-e2b221582ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14a1761-09a6-4415-870a-1d3b63a3b1e1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf3bcff-8164-4637-9f55-ec1eda555f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02126d18-3780-430b-93e5-51595b50a2ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0779718-f189-4848-b4e0-75eae8928244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d91c688-1435-4b34-a445-3e9c7fea9b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c33e03-3120-4a35-a821-b40122017a3a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a479f72a-2f74-4ad1-b687-0be7f39957a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a67020-7640-4907-98a6-d412c7428e85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbcb8fc9-e1c1-49d3-8ac5-d1d724199f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2ee3287-9561-4ad1-93ca-69fedbbd002e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "982b38f3-2ae9-4a74-a1da-f8731e39f6af",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6bce074-9475-4fae-9324-6cfc54b627cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49ea3244-8a15-40de-b845-ea5b954ed820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dccfa15-d585-473c-893a-f0cec71a217a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f2e6862-b186-4aeb-bc47-7cd8bbf7cb45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baea4ccd-9d8e-446a-b3b4-afb70cf3a16e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ba8c12-17ed-4e2d-938e-9e6d3066f29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ec47d4-c9a7-42e1-92ad-16276124def3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b07d71-d11a-4801-81b0-753164377fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c38fca-e318-4851-93b6-d1b620750600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66738cd0-1142-4509-87ec-463a9bf6985b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82fa188-1dbf-4a5d-a447-ff3e78070ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d12f6df-a331-4981-9367-43f4932d8f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14befdb4-b578-4804-bdea-4cf07d1783b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fc19c075-0d68-4f20-ace3-adb1c6537c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e429ea-7cb7-4972-a41e-d943c894c27f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "811c3db2-ebfa-472f-bf29-8dd6735fd410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0869d55f-8005-4817-877a-02e36e032e5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75922289-62bb-4e04-b493-69e7d10a603c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "63787b33-5d58-4e3d-8e38-226dc33ba94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e9355f-e175-4973-8953-19189ab87645",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1169a8d9-4e76-4df2-9e06-31ea20c55f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "556f7fba-2ca9-407b-85b8-6edc9b19357d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc0e1ee-efff-436e-bed1-d4518b9964aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "07bf4d4e-3f05-4909-aed0-5cf506b478fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38e17fd-fa00-4036-8295-5d7ea2f017c7",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9585b6e-d167-4346-9fa3-5c817eecbf12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bddea61-5589-4b6b-a127-83f87c63d590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468327c7-569a-4c06-bed6-6830d96802b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9914f51-e887-43ae-b078-00b74f9a29ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deef5032-0d2b-4c62-9497-d7d741ebd05e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac6d29f-da13-44b8-bd9d-f639d6dca3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3fd2e12-f1eb-4ef3-a024-d90ba55737af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ea2102-9003-4e49-871d-6628dfa642e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dcd53c1-3e26-4740-bdac-6932d4f05d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b225646f-6be5-469d-9d7f-d930ed4f7c82",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c2291b-9889-400c-939f-3572b7d5ca26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fefc3e11-ba2c-4bb2-bd47-c48585fd2847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022b3dbc-d03e-48c5-974a-6414ba33cbed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c453c4b-e0b7-4cbe-8333-6092fc5f14a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b6ab84-48a9-4445-bf52-b97e4bfd4e68",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37148895-a1c5-471c-81cb-c28af98879cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe9269d5-814b-4830-80c4-47ee4e296e2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977e2516-9cd2-4008-bb55-2d182d38ad8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "83db6946-9409-45db-b55c-205b617750ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8804a505-9035-42c4-83c5-37d0bd36ea01",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e13073-35ff-4a05-a410-215f4761515d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c4b653-673f-44f2-815b-c5a460774928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554a4637-4cd2-49c6-aa95-e5652896d3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5da042de-1be8-4798-8eff-09f2c9ee9d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702dcc9b-51f7-4e0b-a5ee-f960500d91ac",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7117940-a0d7-4fbd-8ae5-16c1aebdf480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bd2c1b7-b7cd-468c-9440-b3f915599685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2313cdc4-babc-4065-ace4-381b319ec6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "db7ffb72-9ff7-4951-8e75-b78cc2bbe12a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8dfabf3-db93-4c5a-aaa9-77556e093c94",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ff1d73-bf8a-421a-b8ad-b7f8c67fd050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73b8214c-eae4-4843-a01d-4c61e40cf9e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25ebc4f-43d7-4a99-8a87-a5a1af3cfabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9100f0f-612f-4f33-be5f-343c68b9cf5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f2887bc-7749-4ce3-8ee0-f433b54c47a3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7117176-3f0d-4f94-8f2d-4874edfd8f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba00fe36-f88d-4463-a918-b1845fd03b6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df77ae28-397d-4d9b-9c91-19b87a23983e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b94574b7-f04a-4b45-ae1f-18a5f733ec5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb5ebab-5161-4aba-b830-a9eed1734dff",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c831268-bca0-4481-bb4d-344f51b69e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b415c44-e3db-4b2d-891f-865082359b91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8848ca62-665d-4457-9a34-0dc625b0b56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6906186d-c15f-46bc-a681-761c01d9b641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8da2ec-a487-4784-97c9-7c5b6d916e70",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3602c5-75bb-4b5a-9b5f-8ebe022cea9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1158983-f66f-4924-badf-02d8eeab1ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3187db5b-074a-4776-b433-5d9bae3fc1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "67b8ff8f-f586-48f2-ace0-06f359376b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "844fa5e0-103e-4039-a0eb-7b92175e5a92",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03715bd9-93e5-4949-a0b3-247f944698dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98d2ee21-f201-41e5-b6fb-d4f3a1290611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "027cb36a-0ff4-429c-851c-82a50cea26da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "47f740b6-889c-43c6-8fc4-5ed963b386f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9eaa6cf-e6bb-4067-a1f2-aa5f1d4984d9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46184bb-ccb5-48ab-854e-68f6423483bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26900b0a-6ac5-4bea-a11c-041b9be9fd2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387d9c41-6fcb-455c-979c-c0cacba88a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d94ab3df-0c8a-4f77-9d57-f9ee0618bb43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "852a903d-0d98-434b-88a0-85b4fcd465ec",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5394dcd-bdbc-4cf5-bbed-8f7df3d00c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "883aaa28-98ae-4bcf-867f-6ec02b1f0dfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a562b3f-db6e-41d1-8953-453e50d1a63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "404acdd3-68f0-4d6a-bc83-9b9328e19624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8679083-45cc-4b13-94b2-a4d75e3f53bd",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "473c7ed8-6ee7-4043-b085-fb46f46d85cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a42c610f-8253-4c19-9c83-e97be1aea32f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf7917d-1d6e-4f26-95cb-942f98761b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e411ba50-bad0-4ba8-90cb-31d34793e1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0321f27b-a8f0-4d84-bc2e-3c7b59493dcb",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d0a98c-ac23-4b81-8a09-405bd59a8da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "371de64f-5a67-4bbf-96a1-83232940eb5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac65910-1635-4803-88c5-85dad4b4e6b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "95be48ce-b7e4-4eb8-8de5-5fb9a7b28ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d963693-7746-437b-bc58-2c1413389d3f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5597d0-4cd3-428d-ace5-da18af168be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9815dc4f-e61b-43cd-be70-ff430ab29e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f68dbd9-8fe7-445a-9596-a173fc2f0afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a195235d-21d5-464e-99ed-abfbf3054d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb0ebfa-6ee8-4c7e-8584-dcfaed136906",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "257d94a3-8e59-4baa-be14-5c7faa3b349e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a66538d0-a3ac-46eb-a637-0ed20ecf5128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158b2811-ae79-480f-aa4f-67f57887e2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a5b7366-9f6c-423b-bba1-88f39c24e471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e9d807-3a95-4c08-9282-ee3e4e4b8cf6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6280b734-e023-463e-9012-c23939182fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0b643c7-e25a-482c-9de5-bb4de2a9beba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89424d69-1169-43ef-b2f3-c6d4a053de62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0a0e421-9872-4fa4-8349-3866d3782760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97e821a-13c3-4625-b1dc-edcc7a2919ba",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "276d28cd-9093-485d-9825-4522f345c23c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a01be36b-8b45-4d1b-bc91-6b37b4255e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d61333-5c88-4308-84a1-4ccebdc81620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d02eb469-2580-487e-b98a-0c4bd35cb181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab44d0f-8347-4345-86bb-9bf1e9f0bdaf",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccee53d8-0163-4afd-9004-86f89f716a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eeca863-6f3b-4a22-91ce-122a35df5975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80b341b-8f6a-481f-8cda-ab39bfb548e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26715a23-9893-4049-998d-a72987a44246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf290b69-2f6a-47ae-93fe-b779e4d1db3c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8079ecc-764a-413b-a604-de0719dcfa93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "978124e5-ecd4-4eae-9092-11ce667042ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1078c5f2-cb48-44b2-a975-b1d079d76fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c89c9bc5-2bb5-473e-8c3b-9e6ba57346f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "381cc60c-e393-4cd0-adb4-70ff81ad1ad6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40261d4c-60ec-4df7-b7dd-20fda29ff491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eaf651a-a6b3-446e-a799-71a3339da86d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d8cc24-f155-4381-9492-0532489ebff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa4a113-0f6a-458c-ab08-24a6bfc8b08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daed38e0-c381-4ab5-80c6-bf4494896ba3",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5b95f3-887f-491e-85ad-31327320203e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916c06d3-0e7a-421f-b5b7-17e79ab5e43b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80df8f0-6f8b-41a8-99ad-0c2410bd06b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf7326a6-5013-48c5-b706-3c464a71d6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aedd5e89-7e06-41ce-9dec-967b300ca053",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19dfe45e-9c4c-4071-8f98-3a8fe934b33d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30737b6e-9cc9-45ff-a133-716425a65fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea191784-c536-4ffc-8377-171c876223d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3035c0b-9780-4a3b-925b-53911ba11176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f45bcf-9fd1-4118-aaf2-0016deb95e50",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b17a0b-50f7-448b-9c90-c93c5d39b56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6f054c5-d17f-4a60-a858-398e740e1e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f5d43a-a270-4271-847c-46b9201500a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89e2385a-15ca-46c0-a5ca-bbe69de3eff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7db986-f761-489a-b6bc-5cc99336d171",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5268579-efbe-4dc4-8a58-661eaeaf0c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07dca714-b0f4-4981-bd03-296d74ac8b8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab6d7e8-910b-451b-ba82-e12745201690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f8eca22-938b-44fc-bc4c-fc10e1fb2e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7372c440-0aeb-4fd3-b564-79a5392916d3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0e4d85-afe5-41ef-85af-cf25356c968d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b0ee0d-6ca6-41a3-80f0-69f28174f194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca4fc41-5bee-4665-bc42-9dfb31e85d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b74d52a-1bc9-43fb-ae1c-9f46588d67ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5792dfdb-5ad6-467c-883a-57d8fbb78eb9",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "413bac8a-e05c-490b-96f2-6647b419e168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09199e12-137f-4a5e-b15f-905fccfeab29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c9c162-3f0e-4476-a239-e9582f83cba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7db7187c-8710-45d1-a515-92c554856202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49531a5-0492-48b4-9939-e1d0fc5ce096",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "746d0087-2dbe-4648-bc89-17fd5c1a361f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f0b50f-4df4-40ce-924a-64c24f17c67a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d82c6e7-d58f-4102-bae4-72ccac64ad18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d98610c-45e6-4f34-92d9-e9b057312db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b64fca-6dc4-4f25-9d2d-f4a8b68de2c3",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772039fc-9a63-4f0c-aa33-3b7b8413dae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c698cb1-66b3-4a2a-a3c4-78ba5468ff85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22381a0-8706-4e39-a73f-1be79eb5e92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2002fd0-d84b-49af-ac35-fa38f0542f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ffc0fa-7801-4bee-a6b5-33997cca6ef0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d4f3d0-bc03-4f71-9b9f-e65f28b05797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "203c999a-a84e-46cd-a819-53f4b7102fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f170bb-871c-4c95-8d26-50bd655fbf3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52bbfadf-8aa2-441c-8543-67e560e956cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f61f764-6545-4d47-b8ce-f363236037bd",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "911e329c-a790-4632-9c41-d9e1c26e1989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f183736f-1599-4085-9a0b-9f333b3703ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f49ec327-f8df-4e74-ab36-ca529f482936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "93201c1a-38c6-4487-b036-5f4abdbef271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9493d53-6c6c-46b1-8473-3d48eb505f54",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d905a2-ec8f-421c-9606-0fc7644350de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0512c512-6511-4036-8fd1-f96d6c31441f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f49252e6-f538-4443-b626-78cde172a9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "046a2193-b0e6-40b0-b4d3-32d2abf4223a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040a4e78-7d4c-4645-ac7a-d69857dc9bb7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad07eb2-dee2-48ed-bcb8-20a0efc6ceb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "252d804f-43cd-487e-b1d1-b21330e319a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0668830d-6ca1-490d-a750-ed71d453328f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "17c34b76-82da-4bda-9c99-bad9d048c29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a97927-5cb7-4515-b966-4afb3318a47d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cff7161-c716-4df7-9db2-0c41cf9ed222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d2a4713-7904-44bc-9f9c-1bd479a0e3d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979a59af-fbc5-41d5-8570-aeebc455c11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "879fea88-dc95-4be4-a281-1d677a56468e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba37d55-9b37-446c-b70d-0e49746ee9f2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd64d35c-74d4-465a-aaf8-a5cc0a9ad840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b65648c6-d2b1-4183-8060-cab5b5dadf8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161f3dbd-ff7f-4ae0-b01c-cb189e2a54a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "51429d5f-8db0-4e8c-bcec-be33c5308ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7571fff3-ca87-4750-b0fc-1abd04ffab20",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e96bf53-5fa5-4ea6-95cd-00f3696238c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54a60b63-d6a9-4a2a-89bc-0721285e26d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282d711d-5a63-4516-add2-19b97bc05e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f27e9ec-e668-412f-a78c-bae02af44564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe5867c-5d5e-4c8f-aa5e-08f97cf32c10",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e5ebf9-6e08-4554-9628-d9614240d6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "409e446d-823e-4e9d-a3c3-f2e912ed4a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc5861f-b52a-420c-a818-3530c9d09417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef053c4-a1c7-4af6-ba02-785acb935bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d2e561-bb2b-4ad1-96d8-daaf3756d756",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faec53e0-ce87-49c1-9795-d11d6ffe779d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5a146c6-3fd8-46c1-9b3d-4b318be885bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797422a4-5013-4658-b67e-967d3ad5f93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "49fb9af6-893d-42d9-8865-07d635efa0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe344207-d6c4-4f3e-9a9f-6f77802e2600",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd932ba6-56b3-4086-85de-f4bab453f8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b393df02-c30a-4475-b055-2c072020925d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef40413-ef20-430c-8147-45bff5689da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9bce02c3-5b7e-4025-ba9d-daddba792dba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e77f4786-952c-4a23-857a-7817132bbaf0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3c531631-acfb-4db9-a683-a266834d000e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d78222e-4c6a-44b5-b495-f7a26bb5e073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f45350f5-414e-4afa-b980-73341e2cd2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "babbc14f-d0f4-4b24-b585-d57d61c0aaf9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f58187e1-f07a-4315-a1ee-77f58396bcd3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c88d1f61-62e4-4be0-ae58-1ad76ccc0b5f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7f79136-effb-4cee-84c3-ccd47a9a9c32"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b05fd387-c1ed-41e7-9fd9-362a6de469df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a139526-70f0-4347-903d-83e1962e10fd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "29bf5c32-960b-4300-b6f5-26b32cdf5e5b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "16ef7d4b-3e9d-44c4-9533-3ad7b5308903"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2822aae0-f619-4190-9dc4-e3e4f9d12ce5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5b250b53-419a-43e8-8e64-72347e48bce4"
                }
              }
            ]
          },
          {
            "id": "06a6e434-e5ea-479a-8de3-953f79f4e998",
            "name": "Positive Testing",
            "item": [
              {
                "id": "592b1543-a361-4626-95ca-8ef5d3052f85",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c032b95-ea29-42d3-93b6-4c9182763290",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf70f4bc-ff1a-4db1-98d0-004543842e99"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c9a0a6f-18e2-493f-a9dc-b4fc5294fb30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d7d61e18-72b2-46a2-9bb5-3c3bb757f354"
                    }
                  }
                ]
              },
              {
                "id": "b84af834-03e1-4340-9bdf-e14145854991",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c657db8a-684c-49a0-96df-2a4b45c5ddc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b4970a9-d1d0-4b02-a0d8-e6261aa48b29"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85e208a1-ea90-466c-a95e-11ecad34cad5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d3980012-1eb1-414c-9c0d-a9b627be249a"
                    }
                  }
                ]
              },
              {
                "id": "7f56381c-a7e5-4789-a35b-c40b8cb2d68b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5036c42-73ec-4052-9365-5cc67759afdd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f68e2161-d9fc-42b4-9ea4-9a584c794eb3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70f4886d-78d6-4170-a9ab-471135bbaebc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "36d313fc-75e0-4a29-85bd-9d61b18fecbf"
                    }
                  }
                ]
              },
              {
                "id": "0a053641-6ae6-4cca-9982-40ca456851ea",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2427f1f-9db2-457a-ba39-e97d0382d517",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bcad0fbc-9737-4f96-a714-eb5768180b46"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc83a827-dd6d-43b9-9a16-6f708f297848",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4f76de96-24c1-4afb-b93f-5c0ca3eab169"
                    }
                  }
                ]
              },
              {
                "id": "85feb639-a15e-4588-9208-25cdec2867ca",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c038174-2187-47f9-a10d-69fbfe941527",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "943f2d59-4a03-4bba-a821-ef69572eff98"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eacf9d73-1507-497c-8041-e34a518303c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "577e93f4-ef98-4664-b8c2-9708409a1996"
                    }
                  }
                ]
              },
              {
                "id": "ebeabb1d-3541-4655-9923-69b74c76e80b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "062dcc4b-fc77-4a90-bf48-0f4d6d9af180",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c3c3999e-d4bd-4107-b85c-b7aa2c3d6b2a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f8d59be-f7f2-4e78-b38b-e692906bcd96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "36cd80cf-3bab-4839-be2a-2e7f321cb903"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f027a384-fa31-4882-b40a-0e11855eb5bf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "654ceeb0-0183-4a62-a8d6-1052178064f8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "16ab836f-e04e-4658-85cb-a038c2943cdf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ac986742-8aad-4d08-a8c0-f6f32c025dba"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d158bc4d-faf1-42ca-95e6-ae5311e6dd6e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4ae270e4-5ddc-4a07-9e38-6cf372386307"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7645c576-8555-44fd-938f-a61c0289eecd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10965a63-2faa-45f1-8bce-53e550efa3c4"
            }
          }
        ]
      },
      {
        "id": "a62d5200-642e-4133-ba6f-81eecb580249",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "96775049-35ba-4e15-9b75-34b192fa8054",
            "name": "Negative Testing",
            "item": [
              {
                "id": "791f384e-2b7c-41c9-8432-2436345ed458",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "524fcc11-c7be-49de-9354-571eb8e8d619",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe06fc3-2ca7-4601-a8ea-87094940f3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7e8b7b9-35bf-46a3-aef9-b6cd8681497f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59edf582-5f94-4c59-b4c3-277420aa020a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "de881b0d-123e-4286-8ef5-7d4972ee6c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a566832-6467-406a-88c1-783394e09c2f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58563f6-27a8-43ea-bbe3-2c59897d42ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd793ba5-73a0-48c3-8295-fba1c255be21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b924ee30-cfea-437d-ad5d-e937939e7334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a4d2427-c50e-41b8-b4aa-56db362e451f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3b91bd-cea8-4671-a762-637927a83fc1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c04907c-895f-4b09-bb1c-378e9b8232fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56a86989-b254-4b3c-a8f6-67942c9c2137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e382043e-40c7-4d3b-99a0-050bfd1cbe44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef5f7f00-9218-489d-b656-57aff6801729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f550d51-36bd-4356-a131-98f88ff4e93f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a70722e-69b8-47dc-b6b0-452ddf63a9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f258d9e-79d1-448c-9e1b-101323347963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a4ef68-07b8-4c8b-a0e5-dea1fedde8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c06b5c6-8167-4c12-859a-09fb09e905ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698b0aa7-7784-41cd-8ccb-652a3c4b895a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ee224f-74f2-4eb4-83bc-a59f470b3ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9fbfa8a-42c6-44ed-9800-ad835a984be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b216c81a-d0ea-4360-aeb3-59e997a5ecf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddc04f3b-fb19-4af9-ac61-3fcb2379c454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eca2495-f4e2-44ca-999c-44919cc7c84f",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d98047-a854-4c43-ad99-a2dfeba760ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45b0b20c-0afa-4b15-be6f-b382be41a31d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d91203-af96-4545-854d-c0d0bf4a5629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2ffeefa-4361-4b0f-8215-15d763534fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19990cc-2ac8-4014-8907-a8baaee8d1a7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c06518-aad4-4fd9-9928-0277e20f29a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebdc21f1-1461-4802-9322-b96b652c2129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd5b912-8161-469d-9581-b55861491bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b5a04d7-1d4f-4acf-97ae-aa06d4451d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95320bed-47e2-4ead-af46-0d9942117640",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aad6216-7c2d-4503-9ee3-214a46576ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44510fd2-ac62-4382-aa29-52db742e7d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46647da-a7dd-4e54-8bcf-37234e63f3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e88f467a-4f6e-425c-be67-2f176dbc0f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c02396-3027-471a-a8a6-1e076b4225c0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35add2a-83b6-40b8-8308-5c16d03d0a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "144f38b6-6630-478a-8653-765711080c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b4f431-5a26-4884-9da6-bb6f77460991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49163490-b528-4102-9579-df838f4f4d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea436af-12a1-4869-8c1e-ecd19bd1d812",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30fdecc-2a42-41a3-8469-471bb41acc84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff885bb3-ce67-43d9-9dc6-aadfaee36802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c0e651-de66-4eff-92da-02fa7fa859b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dbb4a8d-e0f9-4cf4-846b-de9a2315e24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c462e02-b30f-4b26-8dba-4d6dd413c309",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7f14cc-1478-4140-9b86-1418de974a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e179a80b-218a-44d8-93b6-3560f9c1c130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1514a1af-7085-4a7b-91a8-7aea09b4b341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "84ece60a-6d54-4c3d-8bea-fca255300c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f6d03d-2a6f-4c79-b1b3-d5ffca349d23",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47dc0d4a-ed71-424a-86eb-0f8df817bda9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7524039-d1c1-42f2-973b-15a1601b9821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e29312-6d22-4107-a8bc-76afaf7666be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "271d2057-ab0b-40c1-913b-5b4f1b309e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "032b0a94-6263-464f-8f08-1fd4f6b97c19",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7558534-28b4-47ee-ba87-2d1d8304d76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c65835-5aa9-44d4-9837-d026c0cb30fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a927200b-54d3-4e25-8055-2eceeab162e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "31476d07-b306-44e9-bf7c-a84ac15230b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e2bd164-1391-443c-bff9-70023866d294",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "643e2219-61e7-4b52-85d7-982741876380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4372ff21-612b-414d-a3da-70cf211f4883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbbb86da-d7d3-4b44-aeab-97745ec77b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ba67cf7-86b3-452a-a655-bfe9fdcb54bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8901bf4-1d49-4d7c-b032-1fc8eb1a42e5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec38cf5-6531-4e45-8bd0-f2d7f0effdb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687ff0e0-46b5-4ce1-96e1-6ce8d212b199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94887549-0a3b-4b4e-8dfb-b7aa5f6b0a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "72f65bc0-2b4d-4ff1-92ab-4ed77e246931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c184630-b27d-42de-a6b2-20e87512ba18",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a73ad5d7-b3ac-4457-ac83-f5458dbbf2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "391038bb-a05c-42d4-bb10-dcb1db6ab062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea2354b-7627-44c1-a4b6-548ae100e459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "624ad286-2654-4fc4-9c8e-1e37bdaf2c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e630163-2566-48ac-83f1-cff6afc604c6",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9360b17f-c10c-4a40-a34b-7dc8dfdd4304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94315806-a97d-47cc-ab8b-cd86ef444ad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee92a25-ecf6-4d08-92b6-63e4668a748c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "121339b7-2d46-4002-abb1-e0a2aa7b9dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b49baf0-a86f-4cb2-975f-72f4ddad3fe3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00fb4494-13f9-40a7-8930-04e1de5de08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11c3f95e-c19c-4a80-abd8-884731dba8f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46bf94fe-2cad-448a-afed-f561435c3f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c263bea4-c1e7-4550-8446-fcfd43dc58ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "defed593-9e24-4982-b064-c708e397e770",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f954a38-eac2-4ded-837e-f60533a680bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "710c48a0-8c06-409b-b29e-07f6c8d372d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282811f1-a9f7-42d5-87ac-5ba7cc527854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "836d05d3-794f-41da-bd10-f282a90ffa0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997b2197-42b6-43c1-882f-4ca569ec898d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "038f92fa-127e-48d8-88b6-c8e4bc5506a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2e9dedf-e142-4b98-aa98-1b6878814ea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713f9916-572d-4212-84f8-ff95867d4187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91d8d9b2-12ab-47ff-8d12-3dd42c13a161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf29939-6b7e-4ab2-8add-0fac7cb15247",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af15bef-9250-42de-a58a-1f17d7d42270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d503afe-f552-4dc2-94b7-e8313c8944de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25cce8e2-8049-456b-b17c-812ef548be47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc2280bb-a6d9-4a80-92ba-f8d5789932d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff0efff-66d1-47ca-91de-f6016d92d61f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f81904-c3fe-421a-b030-25d033ddc044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8ef9619-0b29-44b2-bab9-e0fa3a844c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee8942b-769c-4929-b9fa-e4fd7f633902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e7125df-22d3-4e22-bbde-e8d95c14a8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526defae-1931-4f52-a72f-10acfd068515",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae9012f-53b0-48a0-bee4-73ba5b5a1241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b07e3bd4-8c89-4563-90d0-c5f38eaa18a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3c793d-5abd-49d9-86f3-84391fbaf4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "770855af-e1c0-497f-b3f7-63f62df153b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1971fdf7-8129-4ea9-ac7a-8130d23425c4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6d55f1-698b-4825-9412-553ada4708d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b694e41-de5d-41c7-a0d3-98e642a24342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7614197-fd49-4cf3-831b-dab3ee811f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdaa3491-8111-4511-9679-4d081a60fb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c094aadf-de37-485d-9da5-bbe7d95b737a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6302f944-ea99-4f03-8aa8-baf46f6d03b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "378993cd-16a6-47b0-a3d9-2f4f4c4875b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e41c29-7cf4-46ba-8251-57f1679ab69e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06e24a17-b032-4b51-922c-99ced21f7c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaaa90b6-7781-4664-af75-8fc7ba6a8234",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1adb0c16-e913-4c4c-82ae-f144979466fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9034f0f1-c284-47b5-b105-acbcb3725170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36a5c37-e643-42f0-a7b7-ec03fecb6f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3463e23-143b-4c3f-ad6b-36ef17be9e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21c4d91f-1599-4cf2-ad35-a707f402c24d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c46afeb-27a3-4edf-8cbc-134c791cc55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d313e7a9-f94c-44bb-ab4a-37d1b9b191aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6881a895-9c07-4a11-aa4b-e0ef077ff557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83b8c5c5-f1c8-4725-81fa-c81dd4cb4f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23932f83-8959-40ac-83e2-36cb6855e15d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a746c7-d73d-411f-a483-a154c95e7128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea3e699-87bb-400f-a0b3-1bc64faaa346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33938300-6dfb-49ef-9263-26db280143c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "386e1323-1872-4767-a306-fb5fa0bb4ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ddbfc5-7a8d-4404-af2e-3d9e13855821",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82bcb1db-c431-4d6f-bf36-9c8d62b1dcfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef3a8a75-c30c-4888-af42-76895df1ba13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0d6860-3ce2-4b65-a3e6-8730b69ace2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e0e1f15-e292-4890-9152-0c3e38a7cba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ecc2fd1-bb81-42c8-a144-a625dd5440f4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e5202d-641a-4923-bdcb-8691bff666c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16231a81-bf7d-45b9-b0bb-26ce21294021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a406b69-9ee6-45e8-ab2f-e6fb5af07171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c535cafe-d0cf-4432-af52-d82adb843718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c58e46-56a9-47e5-8ae9-24063711931c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ada2bc-95a7-4021-8728-d46a4d1028cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "472b5bd0-2fe3-4cfd-bfce-e4a52134fc33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffbac2a-6c1c-49cb-bbfc-a06624521bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c488d52b-a840-4faf-b507-90eb62ec0d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a486fc-632b-4a07-ae89-7c7e82370d78",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f7e3ea-510d-4418-b096-89c62de0b89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d65d6605-fb61-4309-9845-45e9beaf10ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d85a13a-21d3-49da-b3bd-a212ae302a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95f29788-20ae-448b-8e30-c5b883d69f63"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c4b793bc-eb4e-47f7-94d6-f32ddd2f5037",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "894dd9da-bc8c-46b2-92bb-444d9bfc69f1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d93c92-b8b7-4123-9f0b-e857bd7e63f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3b796f08-329b-43cf-bb85-9eb840cfe91c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da8d510c-6b49-4228-9f1e-c057e0c1fe5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "06d1442e-7092-46b9-9824-cac5b5124e37"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34547670-278f-4a3b-8203-479bfd70cb25",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "183f5376-2acb-4699-b30a-d10695515717"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d289f3b8-78b3-4f99-9892-f9d90f19f0fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7871f3f3-7829-44fc-bce6-0eac0f0566f3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "411c39de-e714-442e-acca-e0d3d8167c21",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "95ae1131-a8e0-4fdc-9739-309f8b4fec77"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b11ab6b-51a7-42d3-a487-7bc7fad51a45",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7d56292-3ac7-4f54-92d0-fbe590427f4b"
            }
          }
        ]
      },
      {
        "id": "1bb6d7d1-3ce7-46e1-ad06-48b02c82486e",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "c9cb4cc1-6580-4c02-8259-a8292bc4678f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0177b5c3-e556-4d97-a6c2-8f7941499d74",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9ed7f32e-e145-4ce6-99cd-377d93895eb8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f719680-0cb3-467f-a2ba-8a83f4f959d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c594ec5e-ff2f-45dd-b640-146bcf56cb7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19044b76-ab59-4c37-ba2f-d71fb4fcea84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2a8a86a-35a5-414a-be4d-22f0ca71f1e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35524706-f1ce-48fb-b6f1-f5c990e1a5e9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab5b00f-134e-428a-9912-ac4205bc726f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f42bd74b-5196-4588-b96c-049fb9b1bb25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc4a270-2134-4629-a597-780c74e2707f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7df6e3b3-6693-4a4a-aa47-ff15a41a5157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a2e356-76a9-4c7c-8e12-ecc4000d4de5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509f1957-1b32-4eb4-81aa-a903a1ce4853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07290c95-c08b-440c-a330-aeef22d87ba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca833e8-aded-4a7a-b2f2-02a83779b140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "afcda55b-7e4a-4190-8abc-c2e09cfe05cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b835dd77-651f-411e-8603-045418552102",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79063bbe-1687-49f7-9887-249d740603e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a3160e-4ac3-4a14-b713-dd58c1a6d46c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea788b8-e333-49e3-88d7-995aa570cae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "15359ab4-4e9b-4e1c-aefc-e3b2a4891317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da595186-4cb5-4f66-b336-6391c64a3c87",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b296f92-5ce0-42e7-aa78-0d97b7b3241e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92dee843-f8b2-4754-b8a9-37f2b9a3bfbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b157700-3439-4c81-93e0-1b8d6c480733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10cc6744-83f7-4b06-8bd4-df9b28a9ff3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb226179-2bfc-4fb6-9483-7b121dae445a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1195a603-9bed-4013-8f00-10449a2b94a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c47d88dd-f4fc-4eef-a1e9-55a3285303c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b0d9a4-38d0-42d3-824b-9e9498d455f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a7fcfbc-7536-4c20-a854-0c415eacde5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5666bec-f474-4842-afdc-a5541dc0d926",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "058e861f-bb2d-40c3-b21d-d2ebad8c5616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32ef2b43-dad6-45c9-88c9-4e693d510bdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23d0f5c-0816-4482-b90d-08d584a24814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "36e8bbdc-0ede-4c45-a7eb-6d544f1707fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6e6707-7328-48b8-941d-dfcc04d31744",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1581bd9c-e4e6-49e4-a4a2-3d65972c4ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1ae8382-8e1f-4a27-a834-b20da0d8e47f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532ab6ff-9fe9-4d06-8f60-cd66e4e2e076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e1d36b8-68c6-4054-ae5a-651347b66a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c58f5b-5677-46cf-b7ed-d1639020230c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e674f6-2af1-4d3c-aff3-8c9fd19cce87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "101b7ab3-f624-4de8-839f-fd89b26ab92d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe3c8015-498e-481b-ad23-e83ca7f8e604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2ca1972-2606-478e-825b-51abcc3d0e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97140df-4733-4261-9aac-775b7925dd85",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0969d85-b9a0-44e4-9b1f-f2104eca3114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc48d038-8dc2-481e-91b8-82658eb27df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde29ecd-cc6c-474d-9b58-0fcb60a6d34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fbc1f62-e05e-46eb-bae3-7b56ce188e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbcd8799-d0b5-4b08-b854-556e309f6ffd",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78b091a-1021-4118-a6e1-72c6559dd9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f1a172f-5d09-4ffa-9863-efcd27baa826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a266d4-e69d-4383-a4a5-9a10cc750fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b311b388-443d-48d3-bed7-f5e05d09c3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2663b3e2-fc38-45ed-a35d-be677d984a80",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5372bb-4ac1-4a7d-a229-6d5a02bbb61a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd5df59-9201-4d74-8aa6-04f2e7334a03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3598c94-b1e4-4675-b462-5d190354a457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1a661ff7-18c9-4fcd-aaf4-0401c08caf44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8930483-e01f-47ba-924b-557010636196",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "577df2fc-f0cf-4cbc-86d0-84ed3d064203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f85746a4-fa22-46d1-8b8c-a99050088417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c96db4-628e-4166-8237-3e9f26c528e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4701b8f1-0814-42c4-b43e-dae92957c2e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e57547-893f-421f-b642-af7257794d2a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2164d289-bec0-4d76-b785-86347b40a885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c497f13-7f72-4d6f-893e-cdc776152f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f009012-27cf-4533-bb3e-ba3fcfbb918e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "096a8f71-ad75-40ce-a258-32a54e67b13a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b9e1f0-00d3-464a-bd57-29a7d29c5406",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0430c9e3-02b4-445e-ab5e-1508627ab002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09feaaf4-98f4-4502-b88a-817ad0827173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aac5d33-f291-43f2-af8c-064a1505e176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e336c048-3fa2-4884-8a5e-ae69ef409ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197c7586-a1f1-4f69-9e1e-767ff041ebbe",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64bbd224-d26b-4ef6-bc13-8c0054acdc13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0913bdfd-7936-4790-a612-50765361877a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c9d98b-eba6-4b4a-89ed-f504c32c6972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f21f77-cb02-4fe5-ba6e-575c893160f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7653ef0-e78a-4f58-a4a9-335479cfa673",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b293b6b8-b30e-4d05-a867-9a041e964500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d3bec53-5a84-41e4-b8b1-8cfbbf97069d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3aff867-377b-4e4a-8c7c-cf1330455886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "915dbab7-393c-4ff6-bd6e-e3d1f7ca1579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a58151ca-5bde-4b3b-838c-9c34a569d086",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da5edd0-8053-4151-bc27-6424851318fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c52bef34-4f53-4258-b19f-d773dff38e6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c22667b-0879-4903-9afa-d45eec0da3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1529ff3f-79a0-4975-a677-7e9801c06d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2434cacd-a694-4606-8ed6-7eabea9da633",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52af548f-d3bc-4f0b-a63e-d816e00a0ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bee5b367-9a21-4151-893a-69105cd372b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d7382e-dbad-4e2e-9147-00b2bd3080ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ed5f3c3-0366-4d42-bdd2-6e6fc8aacc9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a5082e-002f-445d-b75f-456d50c5a066",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb026486-9e2e-43eb-b3ce-1c31f6c7f826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4fc44d6-f44e-4cf2-ad26-2517dac8a675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ba671c-dded-49ea-b960-82c85d9f15c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28a18906-3cbc-44a3-a5a1-ac5a1630ded7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51ed4b1-938c-41aa-a447-fa45061f7393",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72fde923-ab55-4a38-b3c6-dcab4b03b572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee61c701-e621-430a-bc4b-434ffd276631"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b454dc-30dd-4ef7-a255-d2e34ca0ac6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03cc7509-ffab-40d7-ab8e-86bba1d567e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc10afa8-f136-4b88-a411-50952abb1b63",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ce44bb-9786-4dd4-b170-e8e1ac3c6693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99739f5d-245a-4e9e-a9c2-101c958e341f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0cceb34-8144-4cbc-9e3c-aa1d5e4b282c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3749e759-ef36-49fe-98df-864eeac7fac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5769ba7-282e-497a-8970-01585a25efc1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7fb7ec-63b6-4ab8-84eb-e38cc2632f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a8e1b9-180c-4417-837e-ded91879629d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3cebc3c-6eac-4a2e-8dea-b12e074b33ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bc4b67e-c87c-40b4-b16b-a525d4d6fa8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c3bea6-ffcc-49c8-bdee-1292ecce9736",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71302c8-8274-4a53-8744-70f7f1ac8d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8150a9f-31ec-41c0-94e7-03617770f408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215c8328-60a9-4c6b-94ec-8a4563b5cd91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76492c2c-d439-4e53-8adf-1b6ba29fd16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1024d0-c4c0-4519-91dc-859ebeda6bd8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "296ca66d-ef16-4a1f-88ed-0b1bf5e14794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1618400f-8815-4ce8-8a43-498a8da84e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2056bdc-9c58-41d0-b93a-cc88bd5d1b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf8e72d-d33c-4e9a-8541-5b5bb087dd11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0174d6-a919-423e-af90-2bc986cc2a21",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f85ff9-4d4d-45c4-87bf-f7f79cd020e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5998a3c0-dc67-4cae-953f-afd7052c4474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03731fa-6f47-4ace-91f1-665144b3d57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd230f07-d6e3-45e8-838c-61ea4bd225d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be626b81-f82d-467f-8204-c8c3c40643d4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ceb550a-7767-4f06-8d6f-18ec288582d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d7f38c9-ab4c-40fb-b3c6-c41e9a91c31b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a736df-0840-4582-9d4d-ad75542d7d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "361a6cee-1c84-4606-97ec-2d14baea164e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d4e402-4d89-43da-abc4-cb7947eb178f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5664b291-832c-477a-bf08-0735597c9165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74446444-d459-4c8a-976d-0b191f1a378b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c0d5a5-7f04-4c4f-8cbe-6f71cbabc842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40473b91-05b8-453d-a967-b1648b911fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64fe5da1-7717-481a-a478-395a5f7db3d1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31bcb029-f6d7-4c21-bde1-2b18cf5368aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa0206d1-1219-451a-8c3c-76cea7c30d39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740e980d-38d7-4fd9-a6d8-4aa7a4f70e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64f75a28-f91d-4097-9d88-229fd43569de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a409d059-e3d6-43c5-8896-ce45f83fc2bb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a767c082-7d16-49cd-b8e4-88a857f8bf69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22f94fd4-de21-43ff-a539-bcce2069d798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9bd66a-0396-444a-a0a5-2b4faa3d280d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d550bfe3-709b-4e25-9fdd-660b351a3fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fad2508-8d7b-476a-b3c2-9720988d744e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f454be8-9a75-4013-a721-3c436a4d84a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce77588c-8598-4512-ac2f-9f98e7555c4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422d2be3-fbb2-461a-bac3-6293c0d70d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df9eb7e8-8089-446f-8320-13829a894be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f2efbb-2e52-4ddd-92bd-06cc9dfb1d78",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1662947-62af-4214-9e85-00d2fc3f7273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b15f5f7c-2c1e-4f6a-bc41-29b41337d32d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b29d05-3439-4cf6-ae31-31c3d0100561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9260e56-756b-49ce-92ab-2a2793bc28e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664e728b-b180-4d8f-b4ec-711720153ae1",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "238c854c-d965-4e7e-a534-e11fad790b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9fbb602-2253-473d-b7c1-56a4f5e92f34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f42d7b2d-5cc7-4fbb-bed9-494c90ea9190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c186849f-31b2-4a0f-a63b-3d67817723b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97040c74-bbd2-474c-b75d-3e82df778063",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f078c96a-f94e-472c-a50c-9b5237968d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18931112-49a2-4f4c-a113-a5cab64a61a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1591c5a7-c296-4826-959f-90fb52e1a3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05a7174c-4d57-472a-8e81-e976108b184d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183ff073-cba4-4473-b62c-24ba1f2e9b7c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0014d018-8111-4332-81e5-2f8d8f3d053c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a761b82c-54fb-46e8-9155-0c0a1d8a7f12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f486f8db-c5e9-43b0-a02d-922391f6c30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14941784-0c90-4c70-80fe-4f7e1430e979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c37ece-9dc2-4862-ac65-13f792f58ccf",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce458f7-3a84-461b-bd51-05d7bfd040ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44403d39-b53f-462c-b59b-78cff9f03678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ada7611-8369-47be-b589-5d9aeeaf76a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9efd01f-23fa-4b8d-9053-e902a79f0598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31df1cfc-3829-4175-b409-4d9f75e8efbe",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6711e3ee-82ed-454e-a04a-154388d37ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa9a64d-586f-4228-89bc-ff8121e634fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643b65b0-3c2f-43cd-b625-eab0edb24688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8148a72-3434-4d95-9bc8-e39ddb702ec3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a2b384e8-e13c-4870-b65f-42bc2b813740",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e0beb69c-f7ad-4fbd-b4bc-f188433ea042",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa8b7a1-e071-40bb-9e64-96e75fa14421",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "828028d7-0fbf-40b7-ac3b-d7880e3961a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ca570d-f932-454f-9770-ec96eb4dc0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3f0852f-b22c-40af-a98d-a89657a6dc88"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e42cf8df-4191-41d0-8692-3c704ac1ec11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9efa13c6-99d1-44eb-a114-0333ac9f7b39"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "217c7404-7955-429d-a6a8-41b1242e91f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a487aecf-96b7-42cf-8d95-a5d29bc04171"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6df1640-c2f5-441f-9cd8-f86b038a9650",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6c3b914b-ece2-4835-9e02-8bfe3309a096"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c42478a-a05e-4ab4-a9a7-445e7a8b7ba5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9d4938e8-fb98-4723-ab07-6e2134b36b62"
            }
          }
        ]
      },
      {
        "id": "d693607a-59ba-4761-b0f3-0c90e5bb35cf",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5655ff96-fd06-4ce4-a1ef-c12137f810c6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df0151e3-c12b-4dba-be12-6d6100a99bec",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f84aa85a-79c1-465b-a444-b3b1c5ad153f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "574df0e5-9682-46db-9e40-849c50e62c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae74136c-db16-4939-a3d4-f70136171b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add2678d-9b24-44fb-9973-c994dc73d76b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb26fa9-00ed-4348-b182-a888a300a637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55628053-0bb6-4689-89c7-aefac9b59866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b750e836-1bec-4be4-b50f-e101cbb389f7",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4742993e-9f8e-4839-bb2f-64e8ec44f127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5278108f-b554-4107-bc68-7c77aef54487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02afa9d9-8387-4cf1-a0a4-e9794a9bcb14",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6064d2b-0e5e-48e4-a66c-a884c1b977e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce7d551f-9b39-43d2-b489-85232695da92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dabaff16-b91d-4819-8571-baa9e2eee965",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df196a0-a3cb-41fc-a173-1cea49cf8e7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dcdc8fb-48e5-4b6e-8b61-3f8290825f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d73465-de3c-408c-982f-cfd4b7846770",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797da5ec-7848-4eb4-9d14-b03c50087a27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e59000e-e8fc-4e3f-91a2-6ef4d44c87b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f82fdb-7131-441d-9a22-f29e2201a7ed",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3392e1db-f440-4ec5-a68d-159f27b61a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2812a0f2-3c19-4972-a418-781b2540db57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec285c7-7d7b-46f3-8ff4-6ef47feae4e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "128391a4-bfb6-4ffe-9092-0b4de29d1507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17dbc73-9811-456e-b893-e07322087ff3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc53542-2659-48f0-83fc-a45e5362aac3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9ef14d1-51db-4ee2-9966-3a43c49dd177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e02c629-5027-48d2-83fe-9514b914c268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "395d13eb-1517-44f8-a207-0272f1a35303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c37f08-4295-48db-87da-87b9927d2b07",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6501bd6d-b193-41b5-9be4-c5513939711e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73e85896-ca9f-4c60-b195-1e5e2c88a2d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b89c95-c3b8-4975-85ea-bf8006c31f62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66d56660-f200-4dd2-9725-284c7c3cce33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71986471-45f8-4fe4-807e-060ea0857525",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3492b5de-4005-4600-9c8a-00c23fdb6094",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aaba754-f461-483b-8ae9-7ca7aa698e9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c00c7ed1-facd-45fe-9d58-6118e131824a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39c73f07-6535-40f6-88f1-41f3c46826de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a97dd72-ce98-425e-9134-da227f0838ca",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954675f3-e7c5-422a-9ccb-d5507e8091de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d0b1b9a-0415-452c-b192-f6244cc8b54e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade396e7-26cf-43cf-a55d-23c19d94fc3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccacd9aa-3ae1-4a2a-bee6-82699bc14431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82881c83-1ab6-4190-96f1-3451b8d07a7c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b93581-4237-4504-a38f-0d53944c5338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec83db9c-9393-41ae-bcc1-ea2a03a679a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17780a94-837e-42cf-912a-64eb8e96d550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dd4aa34-e799-46f7-b836-3422a406dbd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "276f214e-4a80-48ad-b6f2-21e3da2566f1",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48055cfd-417c-4a1b-bdd1-2eafdcd0694d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb5d199b-5a2c-46d6-b680-c83dfa8bcb46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca24b398-09b7-467f-a7a5-8a223beaf65d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f01535a1-6fda-461e-9470-b5cafb6bf37f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53db7249-3877-421c-95d6-ff0afee67fe1",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc981a54-e89d-4780-a404-2251a4624800",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2127a3dc-3f0a-44c7-a567-47186745675d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8ca9d8-dc35-407f-a667-8b5b96f0a953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d91633c-bc41-4cf2-8ee6-86e6fa36dd06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ba35d1-4dfe-4633-a2ae-dad44a8780f6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f96c7d-aacd-478a-89f9-1702e41d8a3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0b52147-a11a-4d45-bdd7-8f16032a1eb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eefccd3-fcb5-4b54-8674-0d59ada8dc15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f144331a-fdde-4412-9fc9-4d9a5443c5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e509bdcf-17e6-4add-a62d-9005bfc2af6e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1b99ec-78a4-4c85-9785-1e7bc25bc6d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a5ddcaf-9e02-4b5e-aa12-ba141369bce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85580c38-2f83-404a-abc2-b052e67f6f2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c751952b-266d-46ee-94d4-3ace2f6df27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2db1c74-e184-430b-b53e-2a6409f2b634",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb9f414-a490-44b1-8e12-9e27314ddf65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87f4ee81-56c4-4eca-a902-4f2ff4f21239"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6216398-34ab-485e-ab59-6cca157ae94c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3aeab56-1ef2-474e-bb2d-ea64c476340a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563a9409-231a-4da4-b64e-3067dd4e2e4b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65455df-000e-4fec-89c1-4eee79c88548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b70cafa3-6dc5-403f-84f5-27981ec36db2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa9b5629-2b00-450b-b5ab-7f3a0e516d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f5bba6-77dd-4725-9719-bdd827d0b377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4fadbe-ee1c-443b-9152-ca00719195b9",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a12786-3459-468b-b396-724b6f72ec76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5035b4cd-ad06-4584-971d-0818fafbacdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "670d6fd2-e75f-4ad6-9b5f-37a8a68a7192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3529760b-b562-46c5-b058-43ef1cf699c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da85304b-2b87-48d2-819d-ce3112649ba0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a05df91-5fa3-49b1-8d99-b7282be88146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d92018e-d643-485c-ace7-279a4ef17b42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a4458d-ae28-4a2e-a845-dcd7e0b6ddd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71459974-582e-4ab9-ae66-39ee7c69f2fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0523f61-7356-4568-84b7-3a2f91cb6f4d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a25eb626-0d7b-4114-a8ac-54bef431a580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca666859-b610-4bb0-9dd8-5edc45cd96ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d173d39-341b-43de-a3fb-0c5e89d15338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb4823e-ce39-4c87-a4ae-cb3ae846cb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42739fad-74b6-4f03-b22f-b7eb2f4d6d0d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3b96f9-3423-4714-9054-e304b9481bf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f362162-8b40-42ad-9e24-42c7bb09bfcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1fd07c5-1f43-48d3-9525-e6febddc84d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "926aaa64-329c-4017-9297-12b93da72ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65cd11ff-edbd-42bb-acd9-71c603b30057",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70367a88-f13a-45a4-917e-eeacc61bc5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dea0988d-9510-4108-8d3a-428ec67e2b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69ed798-bbc1-4e1d-9d19-a000ee611c31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fca2a59-5fe5-4845-a309-dd4fb6e5f700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded4b571-f2cf-4acc-8c2b-3d9a1f667c83",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d58fd50-081d-4b0d-b27b-2482186f3aeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee25429f-19f1-4a3d-ae97-bcc1144f617d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e682e5-b996-4ba1-bbe6-c39de1fbff02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a887a10-c535-4730-bbd2-fbc2aee4a8c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2982ffa3-0152-4515-9354-2d4284f77c8d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e2d0fe-8fbc-4f1f-bd50-72448617f89a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4d6a757-5662-4103-afcf-0187323a66a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16243071-b8e4-4218-8da3-31e89b127bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd020c8-df34-4e5b-ba6c-51524b46f407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480a6dcb-5269-4a5a-83c6-cc316eea26d8",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca665e75-f184-44a2-ad4e-dd208a958730",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae493e82-749c-4742-84ea-af4291eba8c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f38e48-ba1d-4678-9102-02f94621bde6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62bf008c-6abd-4a2c-8814-f8518c9dce25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2b53bc-607c-445e-965d-72129d9b7ecf",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0041383-c072-4276-9fe3-d29a358e69c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e81593c9-47a5-40c1-928a-96fb9b0fc71d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "950bf441-cd87-4f4a-b595-5e271a1b7a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5efc483d-839d-46bd-96ba-6280a0708bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120be323-ab0b-47c4-b62d-1877abae4c63",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ccdfb2-b43e-44be-94f8-c753e8cd0161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9964520-cdcc-4e03-baca-c9354082bb8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc77131d-43e5-4b3c-af69-3094cccde04f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6323b34-6b08-4d47-8b41-e01eaf2f6b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8719ec-099a-4692-bf7f-b3ee94607b6e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0bd3db-6361-4ed1-b5c7-bf995412a820",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08b6d0db-d185-419e-ac6f-cac1546fcd4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "071cd16c-f387-4683-8aa3-99f4aea7ab7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdfd2549-3c65-445d-bf6d-5619a3be588e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c891de68-3aba-4e12-bd18-887711aeed51",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e3402f6-e56a-4b36-b51b-39f82c0a4fe1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1e3b2d5-3c22-4a25-8996-afb8fe2ecd45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "116e5ef4-11ec-4918-83ee-366299ae8569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07018433-109e-4d63-bccb-04627aec19e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31919d2-00ef-40de-8462-b575d9500f98",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bebcc258-dc4c-485c-836f-0157610a0c66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62b45e15-05fa-4f28-9daa-a72789c108be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e56cb24-4c06-4d0c-9ed3-50eefc74079e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db0919a5-22d5-43cd-9113-fea7ceea9ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62479b61-c743-4e99-aa5d-6fbd3367634b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e59bf4a-5371-4c52-b413-6c18704913e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e228148a-df50-400a-8fb5-65ebc0e41fad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8b3004-b3f9-42df-a35b-d29e35d85086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f1c418-1303-489b-acf4-7e16b98853a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c36d50-c4d2-42dc-aeda-39da61fcb418",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c45860-aedf-41bc-94a5-f8b5026b799b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bde4ff19-0a07-4813-ad86-d13ddf73aef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb323f2d-2f0f-41e3-a7a8-92c88fb3b358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f955067d-2ccd-4126-a347-675d34f26230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cfae739-2e91-45c0-94e5-d2f70c421c1f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39218c70-5bbd-4427-9ad5-b1d56b5effdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a02cdb0d-7d11-486a-8663-94cf27182685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7913255-f896-4ae4-ae04-a731455d17d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65e1272-eca2-44d0-a2bf-3f5360df1988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8de45a7-0b1b-46b6-ae4d-bb728ad72bb5",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0953a8-0923-4cf3-aa45-06b9a31811ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "618cb3ec-4141-4828-90ce-5e7f683961c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "229cfe65-c784-4aa5-b2f0-a94a09de1ea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef2bc6fb-e988-4735-b33b-8f8e17450e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23925da-1d49-4f29-97d8-3083d22a4c4f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c10510-86c0-48c4-9b41-fdaa1d2b37de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9561a469-31b6-4df8-b977-60912916f55a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a8a8b3-cd1f-41c0-a93b-191d4be7df67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a2bd175-caf1-4d9b-8afd-aca68dfb718f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62ba885-a5c7-43a1-9f07-7ef634762568",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb85904-ef5a-4ff4-a297-56416907a548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70266474-ef2e-4b37-9ecd-1735aa3e2dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0872035-e53f-402d-9176-ab82d33596f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e727ef39-b3b0-4900-9125-420042fa186d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc49edc-e063-4ff7-a942-a879670a36de",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef8289e-badb-4255-ab6d-0161d4ed6071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66919015-60dd-4b80-92ed-f45cb289fda9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be3f3ff-b917-4a99-9b82-9a45d37ebac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63948ab0-ee54-4174-9e5a-e92b810ed84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ea2522-4fec-4d55-b7c8-80377277e8fe",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11424603-7d5a-4678-a979-6f88e6b7014d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee7f176-db0c-4585-9729-1867ab53c10a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff87f8e-f4c6-4471-b1d2-a2181adb55a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d96dce95-894a-4826-9e77-cf2909cc3a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9721b1e5-4176-48a4-855c-1547a0c64531",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a2b6a1-8ed3-4a97-a102-c2a79f30f030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83648141-96f6-48af-b254-736df83af249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2674a5-31c4-4c69-85ba-d2da6f97ecfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "418752c2-0fb2-4688-8041-6980815abd7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f7c421-e45b-4731-a2d9-e4bf07c69195",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d58941b-0cb1-4a98-860b-c752a9d16377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e5aa382-317e-48d6-90ff-1a2e63c93f78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "761ac2ef-a6f2-47b6-98fa-078d2987751f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f97986a-402e-478d-8d4e-8a2a0fcbfd55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecfe2fa4-aa22-428f-8aa0-26e6ed6eea9b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda868f2-0da5-439c-84b5-b601aaf8e3cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84cc0c89-b482-4e6a-b232-9bd0b97c381f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d0e026-b58a-487f-a74a-635ab5fe61df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d613c87-642d-4546-b6f3-3614550d6223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7254d374-0664-4d41-be2f-a10e5ca90e93",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e873252c-a95e-44c0-816e-6cbf7c7ff6f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5771ead2-78ab-498e-93b7-c4a464766adf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a157d9c6-f325-4d8e-9db8-ac7d9df8b887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "941f36ac-1f24-4b7a-8b92-afe5fd7c2153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c5dc318-7808-445e-a6ee-185f11265d97",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6a7b7b-6c63-4553-beed-eb6bacef04b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c528fc-0bf8-499e-850b-85ae31a809d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "288f456f-29c4-44a3-a06f-04e2d4c8cdc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea301e4-63b3-4cad-ba1b-204bad2fc887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2861b1c7-098f-476c-9854-823f7b4ae811",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd97429-13ff-4065-9c0c-c6bacc1506fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bec70a2-9f1e-4fdc-83d2-283c5a46d93b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf896d45-c3e7-4d17-b4ce-a67bef4f95ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f02789-bd13-41b1-b9a0-6b8b6687f672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35499765-9a11-43ea-bbb5-3c6b3f729a8c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4eb8ff-7ef3-4a5b-951f-863c39a65de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33db5ea4-ecdb-4487-ba96-b05be5c5a72b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c276cc-8b0d-4101-906a-1f00d1d4f52f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e46609-5ff1-4b92-8a2d-d2a8a1d66a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb67a3bb-6054-4914-bf31-7513df79ad42",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e80cd4-2d50-4471-8ef7-385ce019e016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9da088cf-5ac8-4b5a-9b33-94a3676d090d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a41736c-3dcc-49ba-b9b2-5206459b4dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2d56543-be77-48a1-bc2b-6eb5e3e02981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa32e2f-aa0a-4c53-bb44-88448fc725d4",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04bce725-6c4d-4695-a711-aa94782c068c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a51dab2c-a70b-4232-9474-1e25d769d689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f4f95b-04a0-4fe6-ba7a-cb5531b2e453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b6a8930-f338-4b78-a5ce-42c5ddb59593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c01473e-20a9-46ed-8570-05726fcf8056",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18fbd4fb-13c9-4376-87df-90e3a8dc1af6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19773c52-6298-40e2-a69c-ec101a045ef3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa4815e-388b-448b-aa3f-f891a0e3f0f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32887940-f12a-47b6-9efc-f3ed3421bf3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebfc9e4-f539-4b83-a4ed-a605d39331aa",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f1014f-83a2-49d6-b8cc-78db4fedce37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4296a5e4-60eb-48a9-a399-611b0bed17f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f074f8-34be-4e94-8be8-e06a33d52612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea0828d6-7fa0-4388-a35b-24691b33c4f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2575ee49-7471-4efa-a94e-98fa2132a031",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e944ea4c-8380-4ac7-8d04-c74e0e948ad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "995b6272-3a2e-4375-ad09-4b8c3437bd9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67d4634-42ef-4648-a118-eefa01e96383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74317ae9-cdda-4a27-bb82-6950f7741cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d349b7fe-0995-4e47-a6f7-802b8475a97e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de49f7a-861a-4d7d-981e-378b9c139ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd9473e-dcc9-4706-b8c3-cd49fc2984c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca64d5fe-1548-4a0b-ade5-29470c38c5f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a131ef12-09cb-4216-bedb-3454073b708a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9545dc3f-f47c-43fe-99cb-3911e5f23996",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bffc2c3-2a61-47f7-804f-b0bba6fef866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba21acf7-d8bb-4ad7-8737-c8519ce70fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "278d8c6b-d043-42b7-9887-3bcdc8ec5d72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb007854-6ea3-4c90-b1e0-fc72f96c9d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52d701b-0e8e-46cb-b56a-446a9eec8c98",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb3bd29-aaa9-48d1-9463-145a62f43fe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0155e54b-7409-4f2c-bcb4-34370488fc16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9615934-741e-440b-8442-1ea529868b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09c3948e-62ef-4d2b-bc15-8be2ef508df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f4242cd-5abd-4513-a5e0-b5a41ad0c1d6",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51322350-4148-49eb-a3aa-84bdea904d5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6442d9db-47df-4cac-92da-425e4920aaee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a0a5ef-90c4-4f46-ab70-c1a21c804482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e536b8d5-dc27-4fd5-b803-1655b6b7f4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1582cbae-ba91-4434-898d-5a28f3b571eb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0423a04e-fceb-4180-8469-147da1d57ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89d3ee16-5347-4338-8dac-094b9b0a8541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07497164-e843-45d2-8e5e-99885ad9dc46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ddbfd2-cca2-47bd-8230-4519f0072ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc03c64f-4ee9-49ab-9bc4-4ee93594eec8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0618b7-c51c-4542-8ce3-141ae6583ae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee9abc1c-2086-4d86-8700-fa5e195fd986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f02a06c-18a3-4e0a-ba3b-2332efa6ac05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce13159b-10ac-4030-bee6-4e9617391087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa060e5-9c81-427e-a465-463ec7222929",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006c0ecc-29d0-4254-a8fa-dbce09c8274e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "160bcd07-3ef2-4812-8e77-b28820580296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5fbfa3-7336-41a0-b36d-984be0a4823d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f5dd8c2-0b44-478c-be7a-9d8829d88bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e9cc38-88d7-4f30-b9d9-0a1351a75aae",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b8f94d-e9fb-43ea-99d5-0de8b53d5a83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7036bee0-ad1e-46e6-adf9-72918a263a97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e308442-e1a6-4f4b-b128-0379f63e3273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e342faf5-3111-48f0-a53d-be5aa6cb5728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e63bd46-ac79-4a15-880d-e9ca4e1f8592",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47cc2d33-a3af-4973-bf22-371412969518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "155e9f37-45a0-4a0b-9d54-777470229881"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "935036a2-909b-4d11-8b47-1cf9e0e7b6bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "911c4bc3-4e77-4d7d-8715-5353b3cd1c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99918370-a4db-4597-b193-e0bf8afec1fd",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3d21ed-320c-4cbb-a607-70d2de8386f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e70b9b38-bf01-43f0-9c66-4f815cf48b46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "441c6900-685a-4506-9076-615b43ed66ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3899130-abec-47e5-98cd-432cc19cd789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc2f821-13cc-4565-b78e-672eba2615c8",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f7ab37-d8c7-49a5-b7e2-f2ec1581203a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35e3c38a-e587-495f-bd8a-0d7635127c91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6048354d-4bff-4e36-8ccf-a01cbf906739",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c3821b-632c-4b0f-9c17-6c31814c2f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40464d91-bfad-4aca-b704-5e55b814da75",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a68de9-ebb7-442c-8c94-9789f21a6142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e11b986e-2721-41ea-abf4-296adbc7fa3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bed278b-f40a-4916-9897-03a05051315e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f24e0503-8705-4b01-97ab-1b002b07313f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c247a63-0a80-46ee-99a6-ba2e8da02753",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59514184-a5cc-4b6e-ab1f-428dbb340817",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "facba1f2-0863-46a6-a92b-909af1443376"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "694ff81d-7203-42a3-9cd3-a92a57e45487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f753638-94c3-4b37-9ccd-9c26ee839a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07166f01-f1fb-4581-be2d-43a4edec77d0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591b0c32-fbc7-4453-9fb3-abd0be434a39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e49c2821-9cec-491b-8bac-5e8798de7c47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacee930-c41b-4d18-82dd-74903c919eeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "039c2f80-605a-48be-8349-a369493d9447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bda3e9c-0201-4edb-aa63-fe857678e99c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f226048-9d03-49e2-8925-b7faabe3b68a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb0a5d60-d626-4ed9-9fb1-7bcda54d2219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da95285d-164a-40d1-b193-6dcb0d539f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8e2e966-d48b-4e8a-b478-8cb1d72bcb8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ee2daf-35dc-4f76-a321-dcf558ae90e5",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e74d5a-1dc3-4e78-9229-9f05ecbad4a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9662a04c-722f-47eb-8d38-b73160e4228e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df30f49a-4207-4144-9ddf-c03a3711eb83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5ce3083-90c1-47cb-bcfa-f773f0d7d3d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89739dd2-01db-406c-bce8-e8275968d266",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc09c9d-268b-40e4-b669-4d3218ea5da9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc5b3d5e-5caf-414f-8ae3-364adca0b2f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "834a76df-b37f-4ab9-b4bb-3d0e34a25730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e0c261-500e-4a25-87d1-416e52234fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbef1b6f-7f4f-4d4b-a256-1b0934af09f5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3b5e89-8e62-4d44-9047-01fb724261f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1097d42-dc88-4add-8c6d-39e60f87d5a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b639fe0-b024-41db-9cfa-5bc54a663173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbdcefc3-adab-44b0-8bbc-f6f91c4449da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "381e6034-dce2-4407-bb7a-3a1d6c923d97",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e1c9dd-7436-403a-8f36-0cd456305ef3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a9c4a34-590d-411f-97b9-0e7d94a21dc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd65e2eb-0885-4208-9e10-5936545e19e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f708b55-4782-4dc5-aa27-61b3754fc329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36dbc9f0-ce3a-417c-b995-a4c919fdfe7b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6689ddf9-7f0c-4dc5-b3eb-d8bcd6fa7522",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "473ff7d5-766a-46d8-955e-772ec0c99a31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "900341a2-9458-4dac-aae3-c6e6ad153e92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bff4a2b-83fa-44ea-9415-4e8279e3c077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2128d221-79ab-498d-95d0-f828df3fd94a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232db707-140e-44f2-8f49-d4f4bee643a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ec84d52-78cc-460b-ae91-2a23c0c9fc19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6ab3ae-b782-41ba-8b61-fa32d9cc7d11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b8fc415-62e6-47ed-adba-03b3822bd4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db567e17-9700-4dfa-90a7-9f58aa99cadf",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3a828f-88bf-4a03-94ad-416b8a4353e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "585819da-b819-446a-8312-066e9db0f5a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f69b395-3f75-4ed8-b794-c5964de7d946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c2b8dab-15bf-46dc-a5dd-6c8ef18497fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8aed679-ef68-46bf-94ea-ed2483c91c1b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c5883c-97b4-434e-8aab-b86a27b50c99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d7b0afb-14de-4e26-8be6-ce65303d059e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cb2eb46-ceed-4da3-83fd-a948bd1f46e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51c9229c-e8cc-4c55-825a-79260db9c9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52cef357-2714-48ea-9a23-d60ce42fa074",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa691cc-9faa-4d67-a08f-af9b4cd57cb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25d6e092-bd36-409a-aa39-1a2107121119"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9ff009-2577-4bc0-b5dc-e963a6a021dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8da1bfc2-9827-4e43-bf7a-257143963e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a06302-180d-4e79-942e-a5ad404d1c7a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8baf06-d8de-4b70-b23d-a2b3b3d9840d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e18d10f-8353-42e6-a015-31567cbdfb60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ac0e12-7da4-4cef-8f23-4329b0d7de27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f22aec-cf6c-41d2-bbe6-ca3254e54684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2de7f1-3599-4132-9a2d-115fac09bfbe",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf9175f0-3b8d-4149-acda-4da49dba8153",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c84ff36-be3a-4c0c-90b9-bb235c97043d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3caef2ef-6c12-4b45-b29a-1301ed72d067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d193190-345b-47fa-991e-6b544e79b6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3c8dee-e3bc-4ea3-a114-71d024c341f5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1672fce0-73c1-4e1c-9056-57c3252a52c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca930481-1e1b-42c9-b44f-535e8238c09b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5486a7f1-1858-4b64-8c5a-8dc72ff50834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "230624fb-cceb-4bf9-9373-97fd9a576a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52aa2a89-cb0a-4d6f-9f71-0de7b9f0eadb",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339986b4-7132-44f8-9613-4b11161897b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59769a5b-d54d-40df-bd3c-839680bde246"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8303647-06fe-4d9f-8934-6ce01bb7ab21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1e9385f-416d-497c-8c63-c25362994fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c243fecd-0fc8-47c5-90ec-a0269c195c39",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2399938b-81ff-45c9-bbb3-63a6a64879f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "533af3c9-3fe0-452d-8421-2090204c15bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44bdfa29-61b4-4e3f-b2b5-1999d64dec77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6423c82b-f392-4569-97c0-042808d850b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1cf40d-65a0-47de-be66-02c267a90382",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "534e6c38-9a5c-4d9f-81b6-80c8e4054fa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "965b834c-ed6c-40d1-9767-cacdaa75db94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f79f96-53ab-4d1c-bdc4-7d94b9859e42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06b82324-057e-4e9a-b19d-4c2546ff2d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbaf978a-801c-4a72-8c49-5c64ef3a84e1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e450c2-d09f-4673-8b08-70345f24c1cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b68b5ec-61b8-4144-9ada-bfe5c77e1859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a65f607-febf-4f81-a2d1-d8e988e67585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d36e1905-f4ab-467c-88b0-d3119438b973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b8d6ab-9067-4980-b6b4-d8ffb1b48f60",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efcddb78-a63f-4544-8e85-f55493edf9b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0abde518-4561-488d-b974-f15d5b0cf472"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd04dd04-e733-4035-b548-8c167ef46486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1120fa4d-6011-4f59-9c7c-5745663a86af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c57691-cd53-49ff-baf1-1ab71bfb53cf",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb25b77c-a48c-494f-8bb6-8b9760114d58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bfcf7ac-68a3-4627-8e91-21e67ffa6a80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54887b97-41ca-43c5-849d-79fdf49b86f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4caf639b-22a0-4036-bdef-ddd1231b7bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5965166d-074d-412a-b209-0ee109a6d75b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1b3fc5-d8b4-4675-8436-6ef08055fb0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92142fb4-f1e3-46d1-8c2d-8fe3351ec678"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32daf1b0-a036-437f-b895-9622507ea9d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d9f806a-e7ea-4ddf-a46f-91e09a58eb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa9dbe8c-fe2f-46ae-9e6d-6a7f29ee09be",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672d1c02-4a5e-447f-b3a4-0eff5a8fd464",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cd696eb-c591-4f81-b18c-9d6a07d4109e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "887f30b0-a9e7-41c6-bcb1-def1eda4ca21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a84204b2-53cf-437e-bcdc-46ad04deceb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb1c042c-ba0b-4c6f-baf7-dfbf50a64a9c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d26b910-f15b-40d9-8588-c3047001617c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8272870f-42cc-4dc3-aa9b-b36c95998d80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a838f873-9ed2-4e08-80c9-9b1ebfec5a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e790878-b1d9-4c72-a64c-a4746039eabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab7d9e0-0e00-44ed-bd08-5826dc238c2c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6094b27d-0498-48b3-b61d-bdde669e8dba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6797e15-0b50-4aaf-bf3f-497af16624ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a4346b-9ecc-40d4-8ed9-3af5eb5bfd19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b2e36f-bbe6-4281-897b-862e528963f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c40e133-aa1c-4a7d-a822-51d96b88f1c4",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41687fb-2001-48b8-af9b-4ba2f86531f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60d694c0-ba67-45b7-b83e-a16587f195b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "855025ab-f8ec-4cc0-b363-54910835001a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ecf0033-16f1-414f-b08a-2fe894bc4e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516bca1c-5975-4bc5-99b7-d7d67e3bb061",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67894764-4c76-4fe3-821e-a69bbc1d6425",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33e605ba-cf83-4075-9f8f-b5a6f72c7df2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e5c893-2472-4111-b79c-cce0d266d620",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1264b3e-4d4e-4a2c-ae58-bbe6f84d1191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea524f7-f023-479b-b667-481d3f0d7123",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3f3bd9-670e-4e9a-a716-3f3164b4b249",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd935cbf-9d29-4fd5-a74b-920a6fc790f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a6fddf-b047-4f96-8578-7c2c64d32b63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a6cc03-e8a5-4b66-80f5-6e07ba5e74c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0366d7b-3db7-48f8-bf23-5f3162ff5a2d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f735f058-85ee-4d16-9a93-73e414f7c557",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85ce33a2-cdca-4356-b5ed-320961b8a950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c512c55c-2769-4178-8fcf-2bc4ee770393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "179a2282-ad79-468b-95f1-32208cd25f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e23ec2-d389-48cf-80b5-f6d69d3672e1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528d9cba-acfe-4c0b-82c4-c7cdeba84b68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74dcd88e-0eff-4d77-8a95-3ff6bd7495b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b272ca41-5c24-43d9-a4fd-5756c87a1b17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5c95a67-44c7-4ea0-9ecb-0722c325238a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21edd90a-f628-4f6c-b756-1387b3b030d9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7310cb8c-125e-40a7-a951-b7f2f55a996c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30601e40-31ef-4229-b533-521e389a5665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e605077-a49d-49cc-85bc-4b8160adf99d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f3a93f8-f31f-4543-ab84-d07030d05d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b20d50a-424c-4441-989b-6e60db0efba0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46ddf79-f8e2-491a-9e58-151cf02eb610",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "160a81bc-688c-465b-b7de-ac4795c281bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "437eff9c-06bc-40af-9064-f54eb9a9a197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76763ab8-f112-40f8-a5be-71165c6243d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1953b1ad-b67d-4387-ae74-d8e3d43857d5",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87b9bd5-b39c-4f3d-990f-9f2c5cb3ce14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ac93468-fdb5-47df-bfcd-f0eb3f7aa69a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e8611a-ffe0-47fe-a0ca-7a612b480151",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a53a876-bca6-443e-b242-e37410e7817b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86474e10-654c-41ef-ae53-f00d7a7cdd12",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1092e44-d4a4-4eec-a3d4-7a885d491076",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2db5842-6329-42c7-aa61-f3863546942b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb11d39-ef74-4340-a885-c6f899d5fc38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e47a57-6bc6-4252-95fd-c4e50b76813a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7ba67ac-0724-42dc-bb1c-4441d73fe009",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54eb429f-8af8-448a-9203-f789b031679b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "04509ff5-7141-4043-88be-80fb81f7dadb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6742cef2-b3c6-486b-8656-5321360aa8af"
                    }
                  }
                ]
              },
              {
                "id": "d15cea5c-3be6-426c-927f-616008533765",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6f4a69d4-1cb3-42f1-afdc-8b770273e086",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f49ad0-aa55-43e3-bad7-046bac046a7d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "528e5960-f724-4385-bbac-5c8c00d767ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b672e7-184e-4a69-9efd-decf101294fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8c3f774-cfeb-4d9c-bd97-d63bc31f15d1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "678a49c4-2859-4f03-a650-1e0167975e07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a53eaab6-976c-4442-afab-c81b839c0d8c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "34551f17-b6ea-4028-a985-d4e2a2ddff38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "515d56b9-863a-4b84-ba40-37e4dba7f03c"
                    }
                  }
                ]
              },
              {
                "id": "d1aa0c5e-ea71-49d1-8347-58e3be2e5c71",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "cf670c1f-0db8-48f4-942b-bd4551351a28",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fae5a59-8d3a-48b1-9d4a-6794a9ee0b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "42905414-1f32-448b-a4e4-2362b7ef2865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3daefda7-ba82-49af-9486-b3cd6e26e203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e29b450-41dc-4b50-b774-8c5be3e987a6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ef4b25f8-ebd2-465b-8bdf-7554e374d2bc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4488f7a2-33eb-4485-a7d5-5cc6fd428d2a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7b3c42d-ef27-48ba-908d-e14c5a1973b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d912eccd-ed4b-4444-845b-8b5da3b136cc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb93f30b-a34a-47d3-8481-84af3479758c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec647eb4-5eb8-4d08-94ea-9fde203d8db4"
                    }
                  }
                ]
              },
              {
                "id": "ed8e68ca-2642-4739-b40f-eb6c8b73f56b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f401335d-d398-4dc1-bcd3-01b391b6b294",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "14fcfbe0-ddf0-4fab-963b-c2b691a05719"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11e26a66-6704-4745-a77a-2cb91e340b67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d22cd127-e792-457e-9510-87242790e073"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "11fdaaa9-3696-438d-ab1f-775740ebfcd8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f56626ca-ac5e-4d39-aefe-893bb464ab67"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad67f560-ff3a-41ca-9423-13ad8f75c2cb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e981bc3-bf4d-49c6-a054-157b88141ac8"
            }
          }
        ]
      },
      {
        "id": "15186696-a838-4477-8928-f2ac72dae1e3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "601eadce-f9ee-4879-a98d-cbbdb7a5f577",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b5bee430-da4c-4415-aa1f-941c76d30aa3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "29a658d7-9f23-44ff-9c16-fe8c4e9cc34b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea770e40-6cd9-4fb9-9b90-58b59f678e2b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d750aa0e-51c8-494c-b3a7-79894829ed25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22130ec2-9c29-4e92-a144-7040a9391b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04470afe-c177-4fa6-914d-e1f4b6e0d284"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1656516a-4d8e-4857-b372-b11478bc270d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd844d3f-7414-4ac8-84e4-6f7ca6a240c0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "445ad0c5-036a-4441-9832-f2f89754cedf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8a31ff1-7671-4cb1-ad5d-3b92e5bf3a43"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec03c419-4b08-4f68-b102-48bfbde48e5a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "be457ea4-8480-45b5-8222-ca99a59fa384"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69fd2751-070b-4420-983f-0a493d3d58cd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bfb3bfca-614f-4702-a864-812b4bb5d2b3"
            }
          }
        ]
      },
      {
        "id": "f2242f61-3326-42c9-a2b4-2dca525502a5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "27618201-5e19-45f1-8b9c-76a22f972a1f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cadaa2ef-98b2-47ed-a631-3ef566a54e8d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a376ccc2-960d-4a66-8f79-5ec8f32314d8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f96ca88-0fb6-4a12-a36f-97d3ea393935",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7da49f46-6330-4a68-9f7c-b48baebed629"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e389381-a726-455d-bb54-cd10f7555a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18ff6dad-ef12-4918-9311-5244c25cda41"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a48f6b6c-e986-4b12-a736-21c316fec989",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "899d6ec0-a9ae-4427-bcea-8ffe1153aed2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "05e31cf8-2150-4399-a61a-d3aad62d68eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "347908a9-0668-483c-bee1-7bce533df416"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41665b41-bcad-4393-8878-3b13d2d5b1f8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9ec53da1-8d14-4d8b-aa1a-856931d95eb8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ef66255-5d10-42be-b208-215341a506d5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f17fbab3-95f1-46dc-ba34-ff5b670b70a9"
            }
          }
        ]
      },
      {
        "id": "ccefc9b4-99db-499a-b4aa-5f113f695b8a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "81147a4c-b314-4c56-ae5b-31677289ed02",
            "name": "Negative Testing",
            "item": [
              {
                "id": "33c046a1-6dc3-433f-94ac-139b32e17558",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6e83b4a3-6ac5-452b-a5b1-9e179a861b20",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50644202-9627-4a80-9e0b-a2a103426bd5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f50c173e-96cf-4386-ae85-a542f7b637a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9b470f-0110-4a1f-a2d2-e6db66295120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af9fbb13-afd8-4a4e-8786-e3ac3191dc8d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fae0f916-6db3-4dfe-9743-292082959999",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f640b01-333d-447b-8c39-65a2a9e5fbc5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eabb691c-19a6-4632-a823-234c5291d6d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b196cd2-f9c3-4bfa-b3b2-c0f9becd6566"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4fb73cc2-841a-4e0a-a84d-ba8659fe5ad3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7bf529c5-1090-49b0-b986-3f0c89d552bb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "edf000e2-e5d3-45a6-8e91-37319acd1729",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48b16dce-69c2-4bff-a780-5a4db436cb1e"
            }
          }
        ]
      },
      {
        "id": "4eb35c91-b940-4cff-94e7-97f1bc8b639e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c69caa8-4359-4981-87aa-cb2cfff8d76e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af4140ed-38a4-44b2-a4b4-c630bae77660",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6fdfe63f-e07e-462b-a338-39caf0687cf4",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "12cbad9e-6536-4c0f-ba88-fef9714a12dc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e298dc4-d272-4221-b1c3-2a8e8bd7eb95",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 87
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 179.65845070422534,
      "responseMin": 8,
      "responseMax": 1850,
      "responseSd": 265.51298918995576,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1690936776156,
      "completed": 1690936843408
    },
    "executions": [
      {
        "id": "fa32a5fa-6915-43e1-b784-229fe0a19a30",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ce1fa0ec-0d8a-473c-ae7d-31e2f32a5bbf",
          "httpRequestId": "ebda5663-5fca-40a1-a8dd-306e8ad3dee0"
        },
        "item": {
          "id": "fa32a5fa-6915-43e1-b784-229fe0a19a30",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2684a7ed-cf6b-441d-b357-dab2dffd8dfa",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 0
        }
      },
      {
        "id": "9890b9cb-19fe-45e1-9b0a-ac1fdf62125d",
        "cursor": {
          "ref": "88509c86-0a19-492e-8166-3e76d67675f2",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b295a83e-f656-40da-aa1b-d0e70c7ef26a"
        },
        "item": {
          "id": "9890b9cb-19fe-45e1-9b0a-ac1fdf62125d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "416b0960-6e1b-4e47-bc80-141172528221",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "3037c9fc-b98e-4089-b996-3bf34c91a9d3",
        "cursor": {
          "ref": "55b41d8c-f638-44e5-aa1e-e6fe073c1366",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c8313845-b194-4a79-a6c7-057a06f00f35"
        },
        "item": {
          "id": "3037c9fc-b98e-4089-b996-3bf34c91a9d3",
          "name": "did_json"
        },
        "response": {
          "id": "83144de3-74bc-4899-b399-6eeb5b781e73",
          "status": "OK",
          "code": 200,
          "responseTime": 379,
          "responseSize": 1102
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ecd8f74-708e-4cc1-8da4-018c4dc73ec2",
        "cursor": {
          "ref": "348a45ea-ce83-4ae3-83f5-b364a24b63cd",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "553d538f-0ebf-4836-b05c-8770d5ea185c"
        },
        "item": {
          "id": "7ecd8f74-708e-4cc1-8da4-018c4dc73ec2",
          "name": "did:invalid"
        },
        "response": {
          "id": "c5321b9a-d07d-4fb8-97f5-7e45e086f90f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ecd8f74-708e-4cc1-8da4-018c4dc73ec2",
        "cursor": {
          "ref": "348a45ea-ce83-4ae3-83f5-b364a24b63cd",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "553d538f-0ebf-4836-b05c-8770d5ea185c"
        },
        "item": {
          "id": "7ecd8f74-708e-4cc1-8da4-018c4dc73ec2",
          "name": "did:invalid"
        },
        "response": {
          "id": "c5321b9a-d07d-4fb8-97f5-7e45e086f90f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "312414b2-61e5-494c-afb3-57d2acec8f4c",
        "cursor": {
          "ref": "e4bd53f6-ffbc-4292-9f44-50465fd7354e",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "436a050c-9440-4ddc-b0da-ecd9295cbe3c"
        },
        "item": {
          "id": "312414b2-61e5-494c-afb3-57d2acec8f4c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "148e4bfb-51f3-43a5-a09b-5659c3e73f30",
          "status": "Not Found",
          "code": 404,
          "responseTime": 157,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a81adff-cdda-4967-8710-635132164e76",
        "cursor": {
          "ref": "fcec21d9-7c1a-44d0-951b-aca4547f6f16",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "46cf83fd-43e1-4dd7-a540-2f9a8c2531a7"
        },
        "item": {
          "id": "4a81adff-cdda-4967-8710-635132164e76",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2acc2ad9-ac56-4c36-af2a-a6535db34fc3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 111,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c13da6ab-2eaf-43bf-8f99-5bd96e1b94c3",
        "cursor": {
          "ref": "d1f058a9-9884-4d3f-99b0-cb1d499554c5",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c3c4ed51-013b-4748-9731-652ea81ac9d4"
        },
        "item": {
          "id": "c13da6ab-2eaf-43bf-8f99-5bd96e1b94c3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c76dd030-aee9-4454-9a02-1b80de6d3196",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "847af095-6c20-41da-800d-a6d47b3bcc2e",
        "cursor": {
          "ref": "98451b8a-10f2-46db-83f0-ba2f9c359e3c",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9c7d68ca-0944-4ef8-a0af-0fa3786130fd"
        },
        "item": {
          "id": "847af095-6c20-41da-800d-a6d47b3bcc2e",
          "name": "identifiers"
        },
        "response": {
          "id": "bedea1c9-f9ba-4641-b375-62deaecbc5a7",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 1118
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd2fa58a-b6af-49ec-bfe4-e62a571d6081",
        "cursor": {
          "ref": "c48d2908-0aca-4f8c-9124-945695a0d694",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f13ae1ba-1af1-4cc6-b217-3996983c7ec5"
        },
        "item": {
          "id": "fd2fa58a-b6af-49ec-bfe4-e62a571d6081",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bd27c5cd-9114-4ab5-b11f-ecfb004e8b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e1b88b-5df4-4358-be7b-c593ef02e69d",
        "cursor": {
          "ref": "3462b849-abc2-4dca-8e24-d85385f6a6fb",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "265f3194-4345-4b64-8f26-7e4aa445986e"
        },
        "item": {
          "id": "e2e1b88b-5df4-4358-be7b-c593ef02e69d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1603d495-45da-4e52-bfed-4754c23590ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e372b3-826d-4062-9e94-fb0e7185eba7",
        "cursor": {
          "ref": "a8151421-f242-42ab-8697-fe7dab8c4568",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a8c0cb36-35c1-4683-adfe-e551fea62fa6"
        },
        "item": {
          "id": "c2e372b3-826d-4062-9e94-fb0e7185eba7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "134ee75e-0425-4adb-b5b4-d644ac022615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e083b328-b674-4e47-8c9f-8d6842d51d06",
        "cursor": {
          "ref": "e3438c5f-7551-467a-b6a0-ad9febb5853d",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "95865b22-a288-416e-8f07-f23219bba523"
        },
        "item": {
          "id": "e083b328-b674-4e47-8c9f-8d6842d51d06",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ba9b57c6-f993-4b7e-89e2-2bdfca83e9a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f312a2a3-652b-4ee7-a344-a28f7ce01425",
        "cursor": {
          "ref": "ecd4bc0c-6ace-41a5-bfe0-cc3ee69d3e61",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6e6e18c4-41ae-4d5c-8061-e5162f81b121"
        },
        "item": {
          "id": "f312a2a3-652b-4ee7-a344-a28f7ce01425",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ca36d3ba-da24-4576-bd93-98929e5ff409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924a3606-605d-4949-a7e2-8a288422514d",
        "cursor": {
          "ref": "34b234fd-2a26-4e59-b85e-601a92267427",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2c235483-4292-4855-805d-dfe630063024"
        },
        "item": {
          "id": "924a3606-605d-4949-a7e2-8a288422514d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3b2da855-0293-4be3-b7f8-cbaa592dc480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b8a659c-d21e-4f2d-8b7b-0ae9a180ad1e",
        "cursor": {
          "ref": "46896106-484a-4745-91fa-0becf95ea76f",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9f30b019-8e3c-4002-8a53-a60e854ab646"
        },
        "item": {
          "id": "9b8a659c-d21e-4f2d-8b7b-0ae9a180ad1e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "bfea5b04-59c2-4e5d-9252-f803b3ff8e29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b76195cd-37ee-4b26-9ae7-e56427cf9749",
        "cursor": {
          "ref": "8f42618f-e697-4ffe-a29f-989ea92e9acb",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7d6e60eb-b6f7-40c3-8e22-f988b79fdcd7"
        },
        "item": {
          "id": "b76195cd-37ee-4b26-9ae7-e56427cf9749",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7419d6bf-cd28-4ad6-9c88-5611ea75ab2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90390d8c-ed3a-4cb8-91e1-c6b5241c92ba",
        "cursor": {
          "ref": "b8155132-056c-43aa-ba65-fba19493d363",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "dde0bf91-bed0-4928-b0b1-f1f6c662c774"
        },
        "item": {
          "id": "90390d8c-ed3a-4cb8-91e1-c6b5241c92ba",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "01679afa-60d2-4a02-addc-e42747c54dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1e6c17b-58ee-46a0-b9a0-681c56009fca",
        "cursor": {
          "ref": "3e73795b-b038-4ee6-ab99-0b6f75ed3d72",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "86ce9838-ddd6-410e-a752-21ff23b797cc"
        },
        "item": {
          "id": "d1e6c17b-58ee-46a0-b9a0-681c56009fca",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8162fe3a-824d-4675-b2f4-cadc7caa23e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde7adef-51e8-49bb-8446-400b1d288047",
        "cursor": {
          "ref": "731b5549-e9ff-429b-b386-4835515dcfdd",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c4ba2ade-4709-435e-9a44-1c95195d1685"
        },
        "item": {
          "id": "cde7adef-51e8-49bb-8446-400b1d288047",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b26aa692-2f6c-4f0f-857e-c83cadf42647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170ddbf4-60d7-4337-8799-2a7e9b237baa",
        "cursor": {
          "ref": "319e01d4-aded-4440-a39e-dfb7b32d3e54",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4b91e436-e707-48b3-86d7-80075d0b2983"
        },
        "item": {
          "id": "170ddbf4-60d7-4337-8799-2a7e9b237baa",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "beaa8cbb-a774-42ce-bdba-9c0fd2807dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8f6e34-aec3-42e6-a5ce-7f8f698a6d89",
        "cursor": {
          "ref": "7e290ff2-581f-4142-8fde-15df95ce6125",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4b6727c0-e587-4930-a60e-3801620e585f"
        },
        "item": {
          "id": "2f8f6e34-aec3-42e6-a5ce-7f8f698a6d89",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "74749c75-214f-4e5c-aacc-6a5ec63bdb6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76705be9-6f43-44fd-b006-c984883dd755",
        "cursor": {
          "ref": "c89f9179-ff95-4a06-81aa-2c1ddf534c08",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "58447054-cc21-498f-b582-a9226f922ab7"
        },
        "item": {
          "id": "76705be9-6f43-44fd-b006-c984883dd755",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "47540e72-42a2-4af8-8dad-a62ebb007b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "addc71ef-3eff-44a9-bb36-463bb0cbb66d",
        "cursor": {
          "ref": "d1b29834-a024-4ee7-ab84-26218b07d8ff",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f5dfc2fa-ba74-43f8-a33e-c8786d3e2828"
        },
        "item": {
          "id": "addc71ef-3eff-44a9-bb36-463bb0cbb66d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "99c1f659-01ac-462e-8f18-ffc22ac755d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c833296-2326-470d-8c72-26c998111595",
        "cursor": {
          "ref": "77792292-0784-4107-afcd-c609e0a9fa76",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2ffbea8c-61c8-45f0-a451-c4bd6db969a4"
        },
        "item": {
          "id": "6c833296-2326-470d-8c72-26c998111595",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e6167851-bf54-4213-b580-f60c95c06278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c130c8-1ce0-47cf-8ccf-636d5a4025ac",
        "cursor": {
          "ref": "6c7ac8f5-a0b2-43ab-acaa-a30282f49cc3",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "687a01f3-edea-4221-a6a6-24f6c123c3c4"
        },
        "item": {
          "id": "70c130c8-1ce0-47cf-8ccf-636d5a4025ac",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4d1ad430-790d-49c4-814a-0565ed790f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "671dca1a-8fda-4394-b91d-64fba244f1e2",
        "cursor": {
          "ref": "61a597d6-ee67-46d9-b893-5e563c3d331e",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e7998a19-5d36-4071-a718-14df5f818f1b"
        },
        "item": {
          "id": "671dca1a-8fda-4394-b91d-64fba244f1e2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b2f42235-01fa-41ae-a311-0a6497d6e1a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d5baf9-019e-4e9b-ad78-ddaf5eded84a",
        "cursor": {
          "ref": "6fe2533e-531b-4d1d-8811-46e1c865b78f",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "618b8d28-32ce-447f-8847-2b38ff049d8d"
        },
        "item": {
          "id": "57d5baf9-019e-4e9b-ad78-ddaf5eded84a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "1da03d82-f2fb-460e-a8e5-adb27452f8e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993502d8-d112-41e3-b971-bccc074c81dd",
        "cursor": {
          "ref": "a0bdcb5f-028f-4b61-8ed8-3a1e2ad08e1a",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7700f965-6540-47aa-b24c-7739729f2f50"
        },
        "item": {
          "id": "993502d8-d112-41e3-b971-bccc074c81dd",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "41ae3329-3bea-460d-9552-49d2b4da6e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "954c35c8-c1e5-41ef-8fbc-83563ac214d4",
        "cursor": {
          "ref": "bf9207f4-91e3-4f09-87da-7540498f23ac",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "651a70ff-c44b-45d5-b081-44798eca1828"
        },
        "item": {
          "id": "954c35c8-c1e5-41ef-8fbc-83563ac214d4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a996a4c2-e813-442d-95af-780484c51ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c25895f-cc17-4f2e-b60d-f6cf458bb63d",
        "cursor": {
          "ref": "fb8d3ff8-be1f-4a3a-a035-7ae80dbbfd0e",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "177c01b0-1a4e-48c7-b7b1-624f508ebce4"
        },
        "item": {
          "id": "6c25895f-cc17-4f2e-b60d-f6cf458bb63d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0528b18f-2204-4abd-9108-483c677b493f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7db144-0981-4a78-9196-48bcf624e8a2",
        "cursor": {
          "ref": "d34a76e1-337c-47b7-add2-68c554d00b2a",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "137d0294-eb9a-4d49-8c62-09ad37bf901e"
        },
        "item": {
          "id": "8e7db144-0981-4a78-9196-48bcf624e8a2",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "69f8c573-29c9-48ab-9bde-d3f217b628dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b7e7e03-be8a-476a-8f0e-c90b8e17656f",
        "cursor": {
          "ref": "5dc7bc01-7dda-4fe9-acd9-df3ba233e593",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e651be34-7e2f-4184-9d35-904593dd923b"
        },
        "item": {
          "id": "2b7e7e03-be8a-476a-8f0e-c90b8e17656f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e38bae3c-428b-4037-afff-f33fdbf79c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef5de8d-b569-4c5c-b063-6a6db844654b",
        "cursor": {
          "ref": "679790c4-386f-4078-8ed1-ac2b3ccfa03a",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ab13f0ef-899a-4df5-bd21-820402c6b790"
        },
        "item": {
          "id": "aef5de8d-b569-4c5c-b063-6a6db844654b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "8d3673d9-c933-4c52-974a-39fc3880d302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b3e7cb-be1f-4bfc-874c-facf0e3865fa",
        "cursor": {
          "ref": "56b942de-5743-4568-97d4-963709292818",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7891375b-dd0d-4a67-9b7a-d8cb7968839d"
        },
        "item": {
          "id": "04b3e7cb-be1f-4bfc-874c-facf0e3865fa",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1c7f83f2-d2bf-426e-ae12-1d230fc0353d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2888f7f0-38f4-40b4-b175-870dc7a7f061",
        "cursor": {
          "ref": "1eac961e-b7f5-4403-8bbb-9d05d800bbe6",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "87ac8067-579d-4170-b774-b80fa7018568"
        },
        "item": {
          "id": "2888f7f0-38f4-40b4-b175-870dc7a7f061",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "fa0638fe-b620-4f9f-93eb-a735f598416a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7dc33da-9c3b-4369-b70c-0d46a93bb9f8",
        "cursor": {
          "ref": "b9e2791f-e7fa-4d8c-a135-2cc10889d421",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8e6c69d2-0343-49b6-b3a6-bf1087d90593"
        },
        "item": {
          "id": "f7dc33da-9c3b-4369-b70c-0d46a93bb9f8",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "44f0557c-b83b-4a83-af26-4cbd7d7e0fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75ee9a5-b455-4b72-abbb-4b279f5929f9",
        "cursor": {
          "ref": "6ec8086f-b933-402e-86a7-0a7998caafd0",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7068903a-d977-4d34-95b2-4bf2fefeb4aa"
        },
        "item": {
          "id": "b75ee9a5-b455-4b72-abbb-4b279f5929f9",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4fd6c9dc-e350-446d-98e5-59f296e577d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb8ab48-22b7-44ed-93cd-312027aa8760",
        "cursor": {
          "ref": "d3fff82f-1fce-41d0-958e-8dff23c31e43",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ad4c4674-a784-4d61-8e46-c0bdfe2096e9"
        },
        "item": {
          "id": "afb8ab48-22b7-44ed-93cd-312027aa8760",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3b0d6410-5640-4091-b56f-f24dcbc94d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b8ec01-819e-40b2-a4d8-7562eff8c050",
        "cursor": {
          "ref": "85524fb0-bce6-4635-98e7-902323e4358e",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "883c0749-0ffd-49c2-b56c-f5969ee848b9"
        },
        "item": {
          "id": "21b8ec01-819e-40b2-a4d8-7562eff8c050",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "125d7487-384d-4c1b-85e5-dea933fa5c3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 104,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6d72b26b-4a12-48f6-8e04-3e54eac5d488",
        "cursor": {
          "ref": "5c7d9d74-a7fe-42d1-848c-939cccf43bcb",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b338fe04-3007-450f-a9eb-4b9f6a1b2ad9"
        },
        "item": {
          "id": "6d72b26b-4a12-48f6-8e04-3e54eac5d488",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "09040ad1-8a8e-470d-90e4-872b8e1567d7",
          "status": "Created",
          "code": 201,
          "responseTime": 1850,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "9fa93a4b-d242-46bf-b38e-2dcc34418f37",
        "cursor": {
          "ref": "813ea7a6-8f80-4309-af6c-c56c835c9344",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e86505d5-a3cb-4d64-9108-ff5a68859e71"
        },
        "item": {
          "id": "9fa93a4b-d242-46bf-b38e-2dcc34418f37",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c91652cb-678d-4619-bd17-5267ac1024f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 102,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "35c2d57c-624f-4cd5-9f56-92e9d25ed112",
        "cursor": {
          "ref": "3265a3a6-7df9-4afa-b02d-54e0c75ebc10",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "72d8ca9e-de72-4a94-b6c9-384712e346ff"
        },
        "item": {
          "id": "35c2d57c-624f-4cd5-9f56-92e9d25ed112",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ec51a488-57da-4f93-b1b4-d2671037bc38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91601974-5393-450e-8f71-2edb6666ea00",
        "cursor": {
          "ref": "ef5f2e5a-8356-4a87-b299-6ddc40fef89d",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "db4e210e-552a-464b-be02-655e02ae7a8d"
        },
        "item": {
          "id": "91601974-5393-450e-8f71-2edb6666ea00",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b62de048-1161-4ce1-8a04-5ecff44819fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 102,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9c4e040f-5bec-40b1-9987-c2b53998a077",
        "cursor": {
          "ref": "8f0335a2-c021-4fb0-8655-34a8d0076bbf",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c341c2e1-048d-4e0a-9a05-bdca00ca28f9"
        },
        "item": {
          "id": "9c4e040f-5bec-40b1-9987-c2b53998a077",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "10982595-c2a5-4a4e-96c6-d0b284bd7f22",
          "status": "Created",
          "code": 201,
          "responseTime": 1740,
          "responseSize": 752
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "88254317-7fc8-4fc0-a805-d892d2667892",
        "cursor": {
          "ref": "d1a393c2-9efb-417a-82f6-42e633e6eae6",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "52bca9b3-2b5f-4fe6-9513-e5598b1bdf3c"
        },
        "item": {
          "id": "88254317-7fc8-4fc0-a805-d892d2667892",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f924cd23-6c02-449c-a83f-a6fd6958f1f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 105,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5710500f-f40f-42bd-b1f2-c25b03e13a2d",
        "cursor": {
          "ref": "7b639308-9b55-48b1-aa81-b5a9cd31d5cb",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "db2ac099-bcc1-448c-88e5-d83ef05366a9"
        },
        "item": {
          "id": "5710500f-f40f-42bd-b1f2-c25b03e13a2d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "39e0bfd9-c78c-4bbc-9e36-118b3aae49e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 836,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "972a248e-b31b-4c2a-8e95-c4d6ee6b39b7",
        "cursor": {
          "ref": "2a938a6a-fe27-4198-b5ce-6eebb9f79a19",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4bf647a3-790d-4946-ac46-e7637c79abfc"
        },
        "item": {
          "id": "972a248e-b31b-4c2a-8e95-c4d6ee6b39b7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6ddd7ac8-de21-498a-96fa-d87acaef939f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 102,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "022f19c8-bcd0-45ae-b445-74a9e22bf05a",
        "cursor": {
          "ref": "f130bdde-6030-4231-a249-f4969c28318e",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "704770a4-f501-4506-81e9-af80c5cc1686"
        },
        "item": {
          "id": "022f19c8-bcd0-45ae-b445-74a9e22bf05a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8c7e3b80-ca8a-4b8f-83de-39b9f367949e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1575c6c9-5091-40b9-aed7-92fcf15536aa",
        "cursor": {
          "ref": "841dc7f7-0e4c-42b2-a198-599494619289",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "17989575-50b1-40df-a043-73727a56aef9"
        },
        "item": {
          "id": "1575c6c9-5091-40b9-aed7-92fcf15536aa",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "5334b10f-c663-4177-bdac-0fe4627036ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 102,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "7f6f5db9-14b1-41ce-ba39-2191b5776970",
        "cursor": {
          "ref": "2813033a-7d7d-4109-87fc-a55882921e61",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "da3e9f9a-0212-48d0-8d80-95d3d688e19e"
        },
        "item": {
          "id": "7f6f5db9-14b1-41ce-ba39-2191b5776970",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "bc13155b-aad0-43f2-84c0-6f806a761709",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 112,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "20740a30-a646-4d5e-afc5-73d866ac7294",
        "cursor": {
          "ref": "57a64e27-9a00-4602-b240-ad9a9668bbcb",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c088f3e6-80ac-4df3-a797-8891e96d43a9"
        },
        "item": {
          "id": "20740a30-a646-4d5e-afc5-73d866ac7294",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "168ff5b0-1536-4cba-8490-366e3c5579fc",
          "status": "Created",
          "code": 201,
          "responseTime": 960,
          "responseSize": 759
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "b8b421d2-3f23-43bb-8d52-ed238ba03dc0",
        "cursor": {
          "ref": "c464afa4-deab-4d57-9da1-dae1079f605a",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "171d1b22-a84f-4d1d-9578-29456f926fa7"
        },
        "item": {
          "id": "b8b421d2-3f23-43bb-8d52-ed238ba03dc0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "82f582e5-0426-4887-9b57-532570c95c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef3605f-d459-4394-b895-977180948cce",
        "cursor": {
          "ref": "a02585ca-941f-4fbb-89e2-ae08c72a9f67",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "494c503c-3ada-4d06-9c19-042d1a3fb4e5"
        },
        "item": {
          "id": "9ef3605f-d459-4394-b895-977180948cce",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "28591f3a-7f5d-4518-bf24-ea0a50736ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14a1761-09a6-4415-870a-1d3b63a3b1e1",
        "cursor": {
          "ref": "fa446963-1c1b-4012-b239-c0de9ee0171f",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ae8413e4-0e84-4f4b-a420-c868adf43118"
        },
        "item": {
          "id": "a14a1761-09a6-4415-870a-1d3b63a3b1e1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5319bdbe-6f72-468c-a6a9-ff872ce9bd0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c33e03-3120-4a35-a821-b40122017a3a",
        "cursor": {
          "ref": "95bfeccd-23a6-4162-9e48-a7272ff26ebc",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e82fd1b4-493c-4615-bda3-3d7cc2261843"
        },
        "item": {
          "id": "95c33e03-3120-4a35-a821-b40122017a3a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "68d20529-21c6-46e0-afb0-1106e5822f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "982b38f3-2ae9-4a74-a1da-f8731e39f6af",
        "cursor": {
          "ref": "0673b970-5788-4772-bccf-865494fa2d5a",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b4f5f53e-b0ea-48b0-8052-95a1cbcd38c0"
        },
        "item": {
          "id": "982b38f3-2ae9-4a74-a1da-f8731e39f6af",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d5683978-1482-454d-bd33-9ad9f1545fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baea4ccd-9d8e-446a-b3b4-afb70cf3a16e",
        "cursor": {
          "ref": "aa0ce79d-3599-4878-a98f-9267e767ecbe",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "932d1a90-870f-4af1-a42e-647949690726"
        },
        "item": {
          "id": "baea4ccd-9d8e-446a-b3b4-afb70cf3a16e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9153dbfa-ccb5-4f17-9fda-e39af8def40a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66738cd0-1142-4509-87ec-463a9bf6985b",
        "cursor": {
          "ref": "adc5b754-d1f2-4f29-b63c-e6a87670c4d0",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1c6bb1ab-22e7-4207-b38f-2f462fce9bbc"
        },
        "item": {
          "id": "66738cd0-1142-4509-87ec-463a9bf6985b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "74b8fd79-8e9b-48ab-a1a3-7355a4a5754e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e429ea-7cb7-4972-a41e-d943c894c27f",
        "cursor": {
          "ref": "34284f44-e95f-4744-93c3-1f970f3319ad",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d161392d-0a40-4fc5-916f-164203fd54bd"
        },
        "item": {
          "id": "c2e429ea-7cb7-4972-a41e-d943c894c27f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c2d8c78e-c2d8-45e3-b09c-aaf62c89322b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e9355f-e175-4973-8953-19189ab87645",
        "cursor": {
          "ref": "b2fa2ad0-3631-4389-a718-7066a7a25a0f",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "fbb12ad2-a3d9-4508-8fef-fbab7318934d"
        },
        "item": {
          "id": "d7e9355f-e175-4973-8953-19189ab87645",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "326fae57-d79f-4b2a-b062-2e6084a7161b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e38e17fd-fa00-4036-8295-5d7ea2f017c7",
        "cursor": {
          "ref": "6e7b3dd3-5091-4432-9cd2-b5f3d98a3ae6",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "60a314ff-d550-449a-9370-49f6f6c6f733"
        },
        "item": {
          "id": "e38e17fd-fa00-4036-8295-5d7ea2f017c7",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5a510225-c95f-4456-a1c8-4e82f0a9d29d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deef5032-0d2b-4c62-9497-d7d741ebd05e",
        "cursor": {
          "ref": "a5941697-f359-4a9b-9432-12034a92b764",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "92c928c6-356a-4782-b7a6-916223553467"
        },
        "item": {
          "id": "deef5032-0d2b-4c62-9497-d7d741ebd05e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b0e752cc-9b1a-4f86-a203-c2e0295a8572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b225646f-6be5-469d-9d7f-d930ed4f7c82",
        "cursor": {
          "ref": "4b98184d-f335-4025-b498-cd3f075e8c99",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f64c6cc0-1515-444e-90e2-b0dbca3f361a"
        },
        "item": {
          "id": "b225646f-6be5-469d-9d7f-d930ed4f7c82",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "32fba03b-a137-48e8-8700-5bef3b3bf615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b6ab84-48a9-4445-bf52-b97e4bfd4e68",
        "cursor": {
          "ref": "4945af81-2f9b-4315-ba85-c2764c2ae2be",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0413cd02-3701-4877-a0e2-2d470ca031e3"
        },
        "item": {
          "id": "e7b6ab84-48a9-4445-bf52-b97e4bfd4e68",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "074e031c-7678-4165-b46a-de493780b4c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8804a505-9035-42c4-83c5-37d0bd36ea01",
        "cursor": {
          "ref": "f0e01ce3-f21a-4fb2-a375-b164c9348f7f",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "600c8e29-c38a-40f2-ad26-c078d593ad1d"
        },
        "item": {
          "id": "8804a505-9035-42c4-83c5-37d0bd36ea01",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "3f1d26f6-c5a6-48d6-9251-9b4b9d8769b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 759,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "702dcc9b-51f7-4e0b-a5ee-f960500d91ac",
        "cursor": {
          "ref": "5cb58b37-3efc-4328-b4f8-140bdbc94239",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2ecef8fe-8052-4e9c-8ab1-62c25b356de6"
        },
        "item": {
          "id": "702dcc9b-51f7-4e0b-a5ee-f960500d91ac",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "711b38f6-769a-4706-97ac-e46986f50b33",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 770,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c8dfabf3-db93-4c5a-aaa9-77556e093c94",
        "cursor": {
          "ref": "a180e87c-b38b-4580-a13b-808af9401260",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "518098a5-09af-4008-a521-71d4bae86f47"
        },
        "item": {
          "id": "c8dfabf3-db93-4c5a-aaa9-77556e093c94",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "aefc84f7-5194-466a-8ba1-59c63194d522",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "6f2887bc-7749-4ce3-8ee0-f433b54c47a3",
        "cursor": {
          "ref": "0ae6a71c-366d-4225-a3be-59775ccbd388",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "8f3aa6ac-927c-4c54-b8f9-eafb2adf4955"
        },
        "item": {
          "id": "6f2887bc-7749-4ce3-8ee0-f433b54c47a3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "306aabc7-28e9-4bc1-a6dc-f870c09ab7cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 807,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "cfb5ebab-5161-4aba-b830-a9eed1734dff",
        "cursor": {
          "ref": "d627da2f-73d9-4814-9669-4b989d269483",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "cfd27a54-0f61-4b6a-8992-68103146c83b"
        },
        "item": {
          "id": "cfb5ebab-5161-4aba-b830-a9eed1734dff",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e3bd37d5-89fe-4323-8297-4a9296446ba1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ee8da2ec-a487-4784-97c9-7c5b6d916e70",
        "cursor": {
          "ref": "154ec197-9b33-48d1-a2fe-f29f0de322b3",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "093de31d-c1ad-4729-b70a-093f8b56be8c"
        },
        "item": {
          "id": "ee8da2ec-a487-4784-97c9-7c5b6d916e70",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6af77847-4cc2-4687-9162-6cd9447f5dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "844fa5e0-103e-4039-a0eb-7b92175e5a92",
        "cursor": {
          "ref": "d6960273-fcaa-4229-ae0f-862c17f5e967",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "80f1a2ce-10a9-4e77-9030-f2705304d249"
        },
        "item": {
          "id": "844fa5e0-103e-4039-a0eb-7b92175e5a92",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "52ef1eb1-f6c7-486e-a9b8-bed7d1783531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9eaa6cf-e6bb-4067-a1f2-aa5f1d4984d9",
        "cursor": {
          "ref": "be903b33-bf95-4aaf-b426-edcf0f6c8f25",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a912b695-6c18-43eb-aaed-99ed8f14b45c"
        },
        "item": {
          "id": "f9eaa6cf-e6bb-4067-a1f2-aa5f1d4984d9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b5461566-9aea-46b4-acf3-19bc676fadc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "852a903d-0d98-434b-88a0-85b4fcd465ec",
        "cursor": {
          "ref": "9de54032-0e97-4b3e-8582-6f3886ddf998",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "39c808fd-97cc-4038-b165-216bf4cee355"
        },
        "item": {
          "id": "852a903d-0d98-434b-88a0-85b4fcd465ec",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5f1d25ef-2b8c-43e8-a4a0-6e5115c8d671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8679083-45cc-4b13-94b2-a4d75e3f53bd",
        "cursor": {
          "ref": "f4e352b0-df53-4dd1-ad65-9f733a3754b7",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ace0400a-f12b-4dc1-81f8-b7088d810ec6"
        },
        "item": {
          "id": "f8679083-45cc-4b13-94b2-a4d75e3f53bd",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8280dcf8-a5bb-4163-aa13-cb8212a7f8b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0321f27b-a8f0-4d84-bc2e-3c7b59493dcb",
        "cursor": {
          "ref": "c0a7a345-65a3-40b4-879f-342350d6fd5e",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7cbc3369-0253-4891-b950-cc7a7f8bfaf5"
        },
        "item": {
          "id": "0321f27b-a8f0-4d84-bc2e-3c7b59493dcb",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "5433d4ea-afab-4105-9e0b-dba932ed566c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d963693-7746-437b-bc58-2c1413389d3f",
        "cursor": {
          "ref": "d099998d-f8a0-466a-b1c1-db72678d9e1b",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "59cb403e-1efb-407c-9bf6-f5b61dd9bfe9"
        },
        "item": {
          "id": "9d963693-7746-437b-bc58-2c1413389d3f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "cf547786-9a11-477b-a885-f147d566d8a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb0ebfa-6ee8-4c7e-8584-dcfaed136906",
        "cursor": {
          "ref": "67f9ff56-d849-4854-92df-126b0b85c823",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "442499ee-b6d6-4d19-99f3-d1c12fed0d53"
        },
        "item": {
          "id": "7eb0ebfa-6ee8-4c7e-8584-dcfaed136906",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "32976912-8b5a-40b6-b043-84f335ca914b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e9d807-3a95-4c08-9282-ee3e4e4b8cf6",
        "cursor": {
          "ref": "e38aa18d-0402-467b-985e-cfc2c1f381cc",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "bf195526-1a3f-4efd-b7f1-86ba028daf44"
        },
        "item": {
          "id": "f9e9d807-3a95-4c08-9282-ee3e4e4b8cf6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3b781f9c-5a97-4731-8da8-5b88ee59d3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f97e821a-13c3-4625-b1dc-edcc7a2919ba",
        "cursor": {
          "ref": "6b65b84d-a7a2-4903-859a-cbb6e3861958",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "792106ef-8ac9-474a-9e7e-b13a3b4f865c"
        },
        "item": {
          "id": "f97e821a-13c3-4625-b1dc-edcc7a2919ba",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "bcf63ce4-ebcf-41ef-a1d5-869c56cab12b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab44d0f-8347-4345-86bb-9bf1e9f0bdaf",
        "cursor": {
          "ref": "3e422e95-f587-471b-8241-e512eb98b8e4",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "83b348c4-bc92-4d7c-9f2b-7d107873664d"
        },
        "item": {
          "id": "1ab44d0f-8347-4345-86bb-9bf1e9f0bdaf",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4fa53b4f-5caf-42c7-8951-9856085f843d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf290b69-2f6a-47ae-93fe-b779e4d1db3c",
        "cursor": {
          "ref": "8ec88637-f3ce-474b-9675-3323ce4241cf",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1d86bb50-c8f2-4a18-99b2-9383c79a3137"
        },
        "item": {
          "id": "bf290b69-2f6a-47ae-93fe-b779e4d1db3c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b0d5acb2-151b-4e12-a86c-c81e32afe4f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "381cc60c-e393-4cd0-adb4-70ff81ad1ad6",
        "cursor": {
          "ref": "718f9d43-11ae-4123-87a6-249c2562a6f8",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fa728171-8e01-40a4-9b28-ea341fff9986"
        },
        "item": {
          "id": "381cc60c-e393-4cd0-adb4-70ff81ad1ad6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0f6c887b-5829-4def-aec5-f0f5610d56b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daed38e0-c381-4ab5-80c6-bf4494896ba3",
        "cursor": {
          "ref": "3f0aae32-8ce8-4092-8335-939c6570d817",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "654d675f-146f-4ccb-bc7d-bb3ef3c2dba9"
        },
        "item": {
          "id": "daed38e0-c381-4ab5-80c6-bf4494896ba3",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e266b706-f138-40a9-91ec-18870dfe06ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aedd5e89-7e06-41ce-9dec-967b300ca053",
        "cursor": {
          "ref": "39d2abb3-cb4e-439a-9857-81c056c8d12e",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7bd583e4-5278-440b-ba9e-e2394b2f6d6f"
        },
        "item": {
          "id": "aedd5e89-7e06-41ce-9dec-967b300ca053",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "feff92a9-2fb6-4a0a-9e8f-08a0e96ae79c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f45bcf-9fd1-4118-aaf2-0016deb95e50",
        "cursor": {
          "ref": "7973f34d-13f1-4771-a45a-e47760df4938",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e32ae3c9-1685-43d9-8e38-c627d1ab0eca"
        },
        "item": {
          "id": "f7f45bcf-9fd1-4118-aaf2-0016deb95e50",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "099bf7b0-d309-4b41-866d-c8f2d02d0ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7db986-f761-489a-b6bc-5cc99336d171",
        "cursor": {
          "ref": "8272c3ee-6132-4cf8-9ddb-51bf9569e057",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5d5108ca-5175-4a4a-9c47-14deb5feb3e1"
        },
        "item": {
          "id": "dd7db986-f761-489a-b6bc-5cc99336d171",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "57c987a1-9a37-4024-a097-eada5872e906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7372c440-0aeb-4fd3-b564-79a5392916d3",
        "cursor": {
          "ref": "54d6136f-f5b0-4394-852e-5a41e75e1f7a",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b23029c5-70e1-41bd-a3be-afbe9f12504a"
        },
        "item": {
          "id": "7372c440-0aeb-4fd3-b564-79a5392916d3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "234da479-703b-4d29-8959-f91cdb541ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5792dfdb-5ad6-467c-883a-57d8fbb78eb9",
        "cursor": {
          "ref": "82133025-0c29-44af-9478-e4d77029df3d",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "cdd21dc7-0b02-4754-bc8a-2f04ff0bc912"
        },
        "item": {
          "id": "5792dfdb-5ad6-467c-883a-57d8fbb78eb9",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "147e70e9-7143-453d-a361-61af21b63bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49531a5-0492-48b4-9939-e1d0fc5ce096",
        "cursor": {
          "ref": "bb36d862-87af-4dce-9e5e-a26a8edc4d25",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "699e3d7b-b449-4a53-9e4a-0272affa6755"
        },
        "item": {
          "id": "b49531a5-0492-48b4-9939-e1d0fc5ce096",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c294fbde-71c3-4dea-b704-99e4607d4e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b64fca-6dc4-4f25-9d2d-f4a8b68de2c3",
        "cursor": {
          "ref": "da146fd5-aebb-45f3-b040-7c372535cc45",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3ff2bb4f-f62d-40e2-bec5-0444a0d6c4b6"
        },
        "item": {
          "id": "59b64fca-6dc4-4f25-9d2d-f4a8b68de2c3",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "11bb48e5-b923-495e-912a-117a59663b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ffc0fa-7801-4bee-a6b5-33997cca6ef0",
        "cursor": {
          "ref": "891faa54-e4c4-4de9-b482-45b41bb58876",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3bac97c6-ca34-4ccb-badf-1a0d069abd6d"
        },
        "item": {
          "id": "16ffc0fa-7801-4bee-a6b5-33997cca6ef0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "1c46c293-2903-4058-85ca-1117201635e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f61f764-6545-4d47-b8ce-f363236037bd",
        "cursor": {
          "ref": "34797c82-2b4a-4ef4-9fcf-1f0f81442ec1",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1aab3ae1-830e-4486-b651-8fc5640d1574"
        },
        "item": {
          "id": "1f61f764-6545-4d47-b8ce-f363236037bd",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "db2407f9-8118-4f2f-9342-8681eabe6211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9493d53-6c6c-46b1-8473-3d48eb505f54",
        "cursor": {
          "ref": "5fd0b52d-3681-42f0-a908-85eec564c5d9",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c14da533-58ca-4361-96e6-593e1f2f7fda"
        },
        "item": {
          "id": "a9493d53-6c6c-46b1-8473-3d48eb505f54",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "33f4a6c7-cfed-486c-8cce-143ecaf7ab36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040a4e78-7d4c-4645-ac7a-d69857dc9bb7",
        "cursor": {
          "ref": "dd4a40e4-0dcf-40ce-9239-34bb31360cff",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3a61ee77-3f9a-47e0-96c5-b7e74813f30a"
        },
        "item": {
          "id": "040a4e78-7d4c-4645-ac7a-d69857dc9bb7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ab9d5e85-6ef5-4443-8745-49d6881acef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a97927-5cb7-4515-b966-4afb3318a47d",
        "cursor": {
          "ref": "6725a715-3918-4da9-8863-44a86b3de229",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6505886e-4c17-4ff1-9bca-4f21c7c8a462"
        },
        "item": {
          "id": "32a97927-5cb7-4515-b966-4afb3318a47d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4e853af4-ea72-45b7-aea4-7648c5eb7a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba37d55-9b37-446c-b70d-0e49746ee9f2",
        "cursor": {
          "ref": "0806e0f4-9dae-4cb2-baa5-c13a8193dc6c",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4722fce1-1146-4906-af8c-3cad3f00c895"
        },
        "item": {
          "id": "4ba37d55-9b37-446c-b70d-0e49746ee9f2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "25e43b12-c138-4068-bde5-13e0421f7578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7571fff3-ca87-4750-b0fc-1abd04ffab20",
        "cursor": {
          "ref": "694c6362-6b74-42ce-87a2-3f744e50c780",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e0efa33f-3ac7-4c56-8645-9c0a7d9d5e42"
        },
        "item": {
          "id": "7571fff3-ca87-4750-b0fc-1abd04ffab20",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0cabd511-fa69-4bc5-9bd1-a6f0a75d9774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe5867c-5d5e-4c8f-aa5e-08f97cf32c10",
        "cursor": {
          "ref": "3bc38635-d2cf-4a23-b7ac-b8b7d54568d4",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fdf37ca1-c931-4bc5-b4c1-628c6c439aa7"
        },
        "item": {
          "id": "0fe5867c-5d5e-4c8f-aa5e-08f97cf32c10",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3eddfa5c-e070-4d28-83c4-41e93e7d6f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d2e561-bb2b-4ad1-96d8-daaf3756d756",
        "cursor": {
          "ref": "275f9cbc-bb96-440c-98b8-79b689071bde",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "40d19e50-4ec0-4029-8d79-a18546480f08"
        },
        "item": {
          "id": "07d2e561-bb2b-4ad1-96d8-daaf3756d756",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "3ad8c5e5-c00d-48c9-af71-498672542a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe344207-d6c4-4f3e-9a9f-6f77802e2600",
        "cursor": {
          "ref": "416f3488-7ab0-4595-93e5-d74e5701978c",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "485f8bf4-8819-4c01-8444-c3e977c9d38a"
        },
        "item": {
          "id": "fe344207-d6c4-4f3e-9a9f-6f77802e2600",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "252029ef-612c-4b0a-a914-ec489a5d4986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c531631-acfb-4db9-a683-a266834d000e",
        "cursor": {
          "ref": "f54c449a-82e8-48d7-b962-505f02ac1b9e",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d8ef4fe0-819e-4c50-a153-976fb1480e9c"
        },
        "item": {
          "id": "3c531631-acfb-4db9-a683-a266834d000e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "601bf05a-34fb-42bb-a732-2227dc5227da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "592b1543-a361-4626-95ca-8ef5d3052f85",
        "cursor": {
          "ref": "4a60d39c-6205-47d0-a073-0d8a59f6dff8",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3382f646-0633-4b36-8588-27776b5e8cc3"
        },
        "item": {
          "id": "592b1543-a361-4626-95ca-8ef5d3052f85",
          "name": "credentials_issue"
        },
        "response": {
          "id": "66865753-b2b4-42a8-a1ca-c4023d4ce226",
          "status": "Created",
          "code": 201,
          "responseTime": 1093,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "b84af834-03e1-4340-9bdf-e14145854991",
        "cursor": {
          "ref": "ec3659d1-ba4d-4422-b147-65efea5522d2",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "15e6337d-fd4f-4837-9357-42c122c95dda"
        },
        "item": {
          "id": "b84af834-03e1-4340-9bdf-e14145854991",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "3689a0b5-d7d6-4290-af74-98d5d3c29850",
          "status": "Created",
          "code": 201,
          "responseTime": 1471,
          "responseSize": 703
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f56381c-a7e5-4789-a35b-c40b8cb2d68b",
        "cursor": {
          "ref": "e1e0b6f6-d296-4fec-8b8c-4a2b0e99b4d9",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "aaa17f48-7806-4825-90ae-289558a02a2b"
        },
        "item": {
          "id": "7f56381c-a7e5-4789-a35b-c40b8cb2d68b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9843f02b-4926-4dc5-a476-d8b122311f1b",
          "status": "Created",
          "code": 201,
          "responseTime": 924,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a053641-6ae6-4cca-9982-40ca456851ea",
        "cursor": {
          "ref": "84e994c2-0332-4ad4-865f-37e09404ac1f",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ddadc59c-dc13-443b-adb9-db26493e61bf"
        },
        "item": {
          "id": "0a053641-6ae6-4cca-9982-40ca456851ea",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7ca582db-451a-41c6-9df3-d9daed206aea",
          "status": "Created",
          "code": 201,
          "responseTime": 983,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "85feb639-a15e-4588-9208-25cdec2867ca",
        "cursor": {
          "ref": "d3defa20-6517-4745-99a7-4ebfd6704d4f",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e454933f-bd15-4814-8cb4-0836c076e891"
        },
        "item": {
          "id": "85feb639-a15e-4588-9208-25cdec2867ca",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d9b63149-ed67-456e-8729-5b23bc7cacf6",
          "status": "Created",
          "code": 201,
          "responseTime": 933,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebeabb1d-3541-4655-9923-69b74c76e80b",
        "cursor": {
          "ref": "8f159db0-e84a-4376-881a-1c89e5ef5c5a",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "735d9810-4096-4068-a3b5-7104b4d9b985"
        },
        "item": {
          "id": "ebeabb1d-3541-4655-9923-69b74c76e80b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f1b3261c-9f6f-4e17-b609-8c37acd0f57e",
          "status": "Created",
          "code": 201,
          "responseTime": 1112,
          "responseSize": 1082
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "524fcc11-c7be-49de-9354-571eb8e8d619",
        "cursor": {
          "ref": "0add93b3-1775-422f-80b0-07b4713a1deb",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7077f373-ce1b-4084-baad-f1f77d2799fe"
        },
        "item": {
          "id": "524fcc11-c7be-49de-9354-571eb8e8d619",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "176751d3-7b3c-4139-b237-debb961679c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a566832-6467-406a-88c1-783394e09c2f",
        "cursor": {
          "ref": "6a655896-26d8-40bd-9c02-7f304d995364",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "25d65b84-656e-4372-9df5-bd07b2ffe547"
        },
        "item": {
          "id": "2a566832-6467-406a-88c1-783394e09c2f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2a0a811d-4411-40a4-b576-167e51fce7af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca3b91bd-cea8-4671-a762-637927a83fc1",
        "cursor": {
          "ref": "5a28b71a-26e5-4c21-b58b-35736afa03a1",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b234d056-11a3-4e09-bc5a-ada5a406b4ac"
        },
        "item": {
          "id": "ca3b91bd-cea8-4671-a762-637927a83fc1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d1a84b1e-c3b1-421b-a462-7ed4897dd032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f550d51-36bd-4356-a131-98f88ff4e93f",
        "cursor": {
          "ref": "2760b9b1-eeac-4473-800e-4fbf60a59152",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "48e9ba56-3c64-4c19-8bc1-46ba8fcd6acf"
        },
        "item": {
          "id": "0f550d51-36bd-4356-a131-98f88ff4e93f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a5efb7fb-73d4-47f9-bdc7-af37c96322e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698b0aa7-7784-41cd-8ccb-652a3c4b895a",
        "cursor": {
          "ref": "62f8fc74-ed61-4319-ac25-f97d2b6199da",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "93340d31-9fb6-4706-8603-2a4ff6717f20"
        },
        "item": {
          "id": "698b0aa7-7784-41cd-8ccb-652a3c4b895a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5b44b1d3-9e07-4ece-a511-5c7ada247f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eca2495-f4e2-44ca-999c-44919cc7c84f",
        "cursor": {
          "ref": "87b5e5b2-81ba-4c7b-8db4-2498a529191b",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "72f7e51c-cfca-461a-90f9-8c48a4fb8ffe"
        },
        "item": {
          "id": "0eca2495-f4e2-44ca-999c-44919cc7c84f",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f7a4753a-8b78-40e8-8b44-8bc89785d46d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19990cc-2ac8-4014-8907-a8baaee8d1a7",
        "cursor": {
          "ref": "19af537b-a9b2-4737-bc0f-a180c5cbabc9",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "899d8fa0-47ee-4b73-8579-eaf570fe0826"
        },
        "item": {
          "id": "b19990cc-2ac8-4014-8907-a8baaee8d1a7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "47515914-8d17-4e86-b8e6-8f90b9c045af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95320bed-47e2-4ead-af46-0d9942117640",
        "cursor": {
          "ref": "49fdf786-d449-4eb1-ba16-5a1d24ea112f",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7bb1829b-0f17-4b3b-99b9-cb3ce0a2a3c0"
        },
        "item": {
          "id": "95320bed-47e2-4ead-af46-0d9942117640",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7ab6ba87-01ed-4c38-b7f3-62d9b302d858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c02396-3027-471a-a8a6-1e076b4225c0",
        "cursor": {
          "ref": "8605f8cc-46e5-4f19-94d2-9ffc35cac764",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3a29b396-dea8-48ec-a14e-a137dbb0f137"
        },
        "item": {
          "id": "b2c02396-3027-471a-a8a6-1e076b4225c0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7121671e-a49e-4313-b25d-1e87ec2a4254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea436af-12a1-4869-8c1e-ecd19bd1d812",
        "cursor": {
          "ref": "0b797f4c-d975-4fa1-b9d1-0056efe13d4e",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d6dfacf5-7ec9-4571-a360-397c509a3adf"
        },
        "item": {
          "id": "3ea436af-12a1-4869-8c1e-ecd19bd1d812",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "915af951-b6a6-4bd3-8ec5-99808095052a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c462e02-b30f-4b26-8dba-4d6dd413c309",
        "cursor": {
          "ref": "a5b31b5d-1ecb-456f-aa62-352690514a19",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "eb1fa7fb-a57a-418f-b6aa-5cee9f503d29"
        },
        "item": {
          "id": "7c462e02-b30f-4b26-8dba-4d6dd413c309",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3c8797b5-0624-4973-814b-cdf4b4f8496e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f6d03d-2a6f-4c79-b1b3-d5ffca349d23",
        "cursor": {
          "ref": "2bfe68c5-21a1-4577-9b2d-fd16d19cceeb",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a0be0a52-3438-41b7-a54f-43a72d823a1c"
        },
        "item": {
          "id": "36f6d03d-2a6f-4c79-b1b3-d5ffca349d23",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6d6d583f-cd98-4e98-b3fe-b2051aeec0ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032b0a94-6263-464f-8f08-1fd4f6b97c19",
        "cursor": {
          "ref": "e507dec5-4b02-47b3-9cd2-056cb98e93b9",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "938c37b2-b5c8-40a5-937c-90f0b7d4266f"
        },
        "item": {
          "id": "032b0a94-6263-464f-8f08-1fd4f6b97c19",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e3eebc2e-6bbe-45cb-8160-5db0a6fa9fc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e2bd164-1391-443c-bff9-70023866d294",
        "cursor": {
          "ref": "8790fcc5-0750-41ae-bc0f-2f7c580083a9",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5c02d688-d623-4f54-af31-2ac537e96a0b"
        },
        "item": {
          "id": "0e2bd164-1391-443c-bff9-70023866d294",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e230f5be-ca38-45f2-ae4b-32f7ee7c540b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8901bf4-1d49-4d7c-b032-1fc8eb1a42e5",
        "cursor": {
          "ref": "c5c5bf97-8380-4167-8684-f19af2c5ac91",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9ecccee2-c2d8-4c9d-84c0-51012588e74d"
        },
        "item": {
          "id": "b8901bf4-1d49-4d7c-b032-1fc8eb1a42e5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8afbbe12-cfe0-4057-8635-adb60888a24b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c184630-b27d-42de-a6b2-20e87512ba18",
        "cursor": {
          "ref": "b3f75293-9a79-4df6-9781-335b35bcae2d",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8a716468-04c3-432d-8061-0f1dcd9b0481"
        },
        "item": {
          "id": "2c184630-b27d-42de-a6b2-20e87512ba18",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a393fff5-3ed5-4125-9d49-aee735bfe4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e630163-2566-48ac-83f1-cff6afc604c6",
        "cursor": {
          "ref": "707101b0-87c1-4f9c-af93-30942e5328c2",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "79bbe8fe-7b1a-491e-8b6b-0c71a2969940"
        },
        "item": {
          "id": "1e630163-2566-48ac-83f1-cff6afc604c6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2abb5501-14ac-4afa-b49f-c15f16a15561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b49baf0-a86f-4cb2-975f-72f4ddad3fe3",
        "cursor": {
          "ref": "546a8af0-62ef-4407-96d1-536420011bb9",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f3b7cf11-5495-45ec-9774-04abdae70e2f"
        },
        "item": {
          "id": "3b49baf0-a86f-4cb2-975f-72f4ddad3fe3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "722d0801-0eb6-48f9-9b89-367cc7c3d2f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "defed593-9e24-4982-b064-c708e397e770",
        "cursor": {
          "ref": "9b92d52d-c988-4b6c-8688-357b18fa346d",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ef819bc1-181f-4910-9e72-58043f880f2c"
        },
        "item": {
          "id": "defed593-9e24-4982-b064-c708e397e770",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a18429f8-fb51-4306-94a7-489184e7ff22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997b2197-42b6-43c1-882f-4ca569ec898d",
        "cursor": {
          "ref": "3c98fff4-afde-4dbc-8118-319c70bb30bf",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "62ab8226-900c-47c3-b33a-fbbc684542a9"
        },
        "item": {
          "id": "997b2197-42b6-43c1-882f-4ca569ec898d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c9f1c084-4ec1-4431-a2eb-c9f1f4101348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf29939-6b7e-4ab2-8add-0fac7cb15247",
        "cursor": {
          "ref": "58486707-98df-4898-89bb-ad42dbbadf73",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9e2aa8f1-871a-4777-90ce-a478aa676dac"
        },
        "item": {
          "id": "bdf29939-6b7e-4ab2-8add-0fac7cb15247",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "08a22195-26dd-4add-a3ae-04478ef30230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff0efff-66d1-47ca-91de-f6016d92d61f",
        "cursor": {
          "ref": "4995285e-6e8a-4475-a632-5cd3d60946a0",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "96f6460e-9c72-44a8-8b23-332e4036034b"
        },
        "item": {
          "id": "bff0efff-66d1-47ca-91de-f6016d92d61f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2b06e6e5-fedd-4356-bdb1-2e527e8efffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "526defae-1931-4f52-a72f-10acfd068515",
        "cursor": {
          "ref": "7a68d54f-e0c2-45af-a032-d4903a0e822b",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e508e634-d24d-4e64-9f8f-6f324fa7bf7e"
        },
        "item": {
          "id": "526defae-1931-4f52-a72f-10acfd068515",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "da797da0-4e2c-400b-9704-32274b6e27d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1971fdf7-8129-4ea9-ac7a-8130d23425c4",
        "cursor": {
          "ref": "e4634b01-a882-4dce-a054-4b64599464b9",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "38ba65ae-c6fc-4359-b6db-6ae412221348"
        },
        "item": {
          "id": "1971fdf7-8129-4ea9-ac7a-8130d23425c4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "09d1d8d8-813d-490f-86cc-4638bfe1b8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c094aadf-de37-485d-9da5-bbe7d95b737a",
        "cursor": {
          "ref": "f9324088-ddd2-4c37-958e-1b118b412f59",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3e6f7d52-03f3-493c-b977-0e10e73ef739"
        },
        "item": {
          "id": "c094aadf-de37-485d-9da5-bbe7d95b737a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b6971797-cc14-4a2e-89d4-e3a98c91ba69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaaa90b6-7781-4664-af75-8fc7ba6a8234",
        "cursor": {
          "ref": "48ad669d-975e-462b-b056-5f5678ac3cb2",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5c139299-d4f3-4d4b-873e-fce78ac5f32a"
        },
        "item": {
          "id": "aaaa90b6-7781-4664-af75-8fc7ba6a8234",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8d45a299-7210-44a4-b7f2-91f0788721b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21c4d91f-1599-4cf2-ad35-a707f402c24d",
        "cursor": {
          "ref": "721e9105-1104-44f1-ad9d-6e19667b9937",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "963f2eab-472b-4b6e-afcc-48c78634a266"
        },
        "item": {
          "id": "21c4d91f-1599-4cf2-ad35-a707f402c24d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6ec9d711-e2ad-4f2f-813f-7f33474f06f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23932f83-8959-40ac-83e2-36cb6855e15d",
        "cursor": {
          "ref": "fdda36cc-841a-4b7a-8fee-2a6698ba45df",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "64c265c7-9b9a-441c-8fdd-52604fe7cdad"
        },
        "item": {
          "id": "23932f83-8959-40ac-83e2-36cb6855e15d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "50fed943-3d57-45c8-badd-824a74caa0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ddbfc5-7a8d-4404-af2e-3d9e13855821",
        "cursor": {
          "ref": "fd608e9b-3f99-4b5b-9276-529a7670daf0",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "6553172c-b513-4fb8-8ce9-cef63f4ddaa7"
        },
        "item": {
          "id": "50ddbfc5-7a8d-4404-af2e-3d9e13855821",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2207b006-da02-4d9a-8877-cae6efbb549f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ecc2fd1-bb81-42c8-a144-a625dd5440f4",
        "cursor": {
          "ref": "1176bd95-6f35-4050-ba59-4d76391eb7c5",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4de43401-61f8-413c-9f48-05887e9bdb58"
        },
        "item": {
          "id": "2ecc2fd1-bb81-42c8-a144-a625dd5440f4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4bc2103d-7a64-4186-b193-fa1e58abe00c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c58e46-56a9-47e5-8ae9-24063711931c",
        "cursor": {
          "ref": "46953b91-9a10-4ec3-9d1b-bfeac7255011",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "91ee280b-c6c8-47fc-b242-a7072854bbc5"
        },
        "item": {
          "id": "46c58e46-56a9-47e5-8ae9-24063711931c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a3ffdf37-af6b-4bec-8d37-4df9a23a9991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a486fc-632b-4a07-ae89-7c7e82370d78",
        "cursor": {
          "ref": "feda2ebe-05e9-4d91-add2-6411bc4bcf22",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a0a65157-b406-445a-b5f7-22ad97726203"
        },
        "item": {
          "id": "e8a486fc-632b-4a07-ae89-7c7e82370d78",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7d5de48c-d59d-4248-ac15-f25ff252d6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "894dd9da-bc8c-46b2-92bb-444d9bfc69f1",
        "cursor": {
          "ref": "8f705d0c-2e5c-4c00-ad81-ab50c1a97e7a",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f60bc7e9-6891-4506-a8a6-72d7c2a93c59"
        },
        "item": {
          "id": "894dd9da-bc8c-46b2-92bb-444d9bfc69f1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2704b2c8-f9f3-4689-8390-7bdc40a690eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed7f32e-e145-4ce6-99cd-377d93895eb8",
        "cursor": {
          "ref": "5e9fa6af-20b5-47ad-b1ff-4278a22881a7",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "62e93aea-dc3f-4a77-ab82-f6ceaccca237"
        },
        "item": {
          "id": "9ed7f32e-e145-4ce6-99cd-377d93895eb8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b46d0346-4f4b-4420-b2d3-53427e5bde8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35524706-f1ce-48fb-b6f1-f5c990e1a5e9",
        "cursor": {
          "ref": "fadf79d9-3642-4355-91ea-6096b1a05c32",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7fc7dc55-2f90-40a0-9304-b99b4fe177a6"
        },
        "item": {
          "id": "35524706-f1ce-48fb-b6f1-f5c990e1a5e9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8a2cfef5-387f-4cf4-b713-4e3531a95069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a2e356-76a9-4c7c-8e12-ecc4000d4de5",
        "cursor": {
          "ref": "3a852cbb-6c12-4e20-be01-0d3074d784ff",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "29606790-cf63-420b-815f-7642b739621d"
        },
        "item": {
          "id": "41a2e356-76a9-4c7c-8e12-ecc4000d4de5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b76520df-2a02-4fcd-804b-5f67e83eaaa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b835dd77-651f-411e-8603-045418552102",
        "cursor": {
          "ref": "d637481d-2fff-4778-931f-ce5b5c2fc9b3",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ed5ac72d-45b6-46e9-8140-659f1771ec2d"
        },
        "item": {
          "id": "b835dd77-651f-411e-8603-045418552102",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "30abc3d4-c0d4-4c23-8ab5-8bafcabd5195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da595186-4cb5-4f66-b336-6391c64a3c87",
        "cursor": {
          "ref": "6862363c-ea0e-4c34-a26b-52daa26848c1",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "22e3dd13-297e-4c3c-8752-7490e7c68086"
        },
        "item": {
          "id": "da595186-4cb5-4f66-b336-6391c64a3c87",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7b76db49-7efb-442d-b2fa-90e075e04818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb226179-2bfc-4fb6-9483-7b121dae445a",
        "cursor": {
          "ref": "668f43d1-7d31-407f-88c7-9a51f131ef41",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a8d5a561-a331-4e29-92c9-ad2516ff7c73"
        },
        "item": {
          "id": "bb226179-2bfc-4fb6-9483-7b121dae445a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0149a986-dfdc-46b3-8d14-fed8a4eb92d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5666bec-f474-4842-afdc-a5541dc0d926",
        "cursor": {
          "ref": "2af2f18d-adf5-405b-91f1-f1e2e6a454ef",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ceef1ed7-5e10-4fbe-b61a-5efecf657069"
        },
        "item": {
          "id": "c5666bec-f474-4842-afdc-a5541dc0d926",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ec89c8ac-0019-4b99-96d9-be0da336fde3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d6e6707-7328-48b8-941d-dfcc04d31744",
        "cursor": {
          "ref": "6b03b8de-53c0-425d-9da3-ee4515dc6e62",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ef90198f-a561-403e-ae8c-df4bc7c253b1"
        },
        "item": {
          "id": "5d6e6707-7328-48b8-941d-dfcc04d31744",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "26837f3c-a45c-43e6-a99a-20a218269cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c58f5b-5677-46cf-b7ed-d1639020230c",
        "cursor": {
          "ref": "50720902-03df-4e1a-91c1-0ce7af8e23a5",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d078b625-d1eb-4606-97f3-a5d1626ee5a5"
        },
        "item": {
          "id": "b8c58f5b-5677-46cf-b7ed-d1639020230c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "cca37c5e-087d-4ac8-8b8c-29ef92b33f53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97140df-4733-4261-9aac-775b7925dd85",
        "cursor": {
          "ref": "ee4b6f1e-cb7f-4a21-93b2-e874538bfb42",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "350a41ea-3fb7-4c1d-9483-b3cfbbaa2a29"
        },
        "item": {
          "id": "d97140df-4733-4261-9aac-775b7925dd85",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "af4815f8-d042-44ca-8c2e-095378f75b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbcd8799-d0b5-4b08-b854-556e309f6ffd",
        "cursor": {
          "ref": "cf73e61d-8924-4c61-a683-07fcb227f075",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3fd8ccb1-bf21-4e05-a194-045a50e7adb1"
        },
        "item": {
          "id": "bbcd8799-d0b5-4b08-b854-556e309f6ffd",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1fb78d8e-2774-4017-bc99-88f7f1255073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2663b3e2-fc38-45ed-a35d-be677d984a80",
        "cursor": {
          "ref": "9ed69282-3568-446a-b157-2f2a2a15f6c9",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d5df8519-b275-4b49-b70d-5007395cf832"
        },
        "item": {
          "id": "2663b3e2-fc38-45ed-a35d-be677d984a80",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "271896e8-43b8-474b-8ab9-0b8e2d702098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8930483-e01f-47ba-924b-557010636196",
        "cursor": {
          "ref": "378cfdc2-0a5e-42cd-b7ec-6743ed139dc6",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "af392b69-f885-4430-83b8-ee9645fe1eb6"
        },
        "item": {
          "id": "f8930483-e01f-47ba-924b-557010636196",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "833dc0cc-dc8b-46e1-93e2-36d0a3d2b871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e57547-893f-421f-b642-af7257794d2a",
        "cursor": {
          "ref": "9e6fab4e-c6f2-420b-91e1-7b7ed9a22aae",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "59226de9-ef81-4201-9cd2-ac982727f64c"
        },
        "item": {
          "id": "62e57547-893f-421f-b642-af7257794d2a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8abeaa70-4ae9-4e47-85ee-3114d460570c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b9e1f0-00d3-464a-bd57-29a7d29c5406",
        "cursor": {
          "ref": "23046977-3ecf-430f-9b60-d2b02e7c87ae",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1563b323-2f10-48db-a2f1-47457a4583a9"
        },
        "item": {
          "id": "66b9e1f0-00d3-464a-bd57-29a7d29c5406",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "53e55667-66a1-42bb-b7a9-8a667c8f3036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "197c7586-a1f1-4f69-9e1e-767ff041ebbe",
        "cursor": {
          "ref": "e6c8f712-45a2-43ce-bf31-7bbaddab3fed",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "caaad6d2-07fb-4487-ad5b-ca47e3f1282a"
        },
        "item": {
          "id": "197c7586-a1f1-4f69-9e1e-767ff041ebbe",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "89ae9b80-6684-44f8-bafc-3b3e64035397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7653ef0-e78a-4f58-a4a9-335479cfa673",
        "cursor": {
          "ref": "66cb9296-b956-4ad4-a1e6-2063502d2eaf",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "415af039-5fcd-491c-86a3-f76d67bca7f2"
        },
        "item": {
          "id": "f7653ef0-e78a-4f58-a4a9-335479cfa673",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b7d4f52c-1961-48b4-95fa-ecc6c34a70aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a58151ca-5bde-4b3b-838c-9c34a569d086",
        "cursor": {
          "ref": "5dbd8db5-beb3-4d80-885b-9bbfeca9644d",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c6dda834-7241-449c-b016-af536e77ac86"
        },
        "item": {
          "id": "a58151ca-5bde-4b3b-838c-9c34a569d086",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6bd23f85-3047-47a0-8cda-18bccb1c2ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2434cacd-a694-4606-8ed6-7eabea9da633",
        "cursor": {
          "ref": "d2c5adbb-b551-4026-a4e3-3be4ec1402b1",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "174d902e-cd45-41ac-96eb-d4fd6df86f66"
        },
        "item": {
          "id": "2434cacd-a694-4606-8ed6-7eabea9da633",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c1ca7944-0ac7-4c7a-ad61-f3c0195824df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a5082e-002f-445d-b75f-456d50c5a066",
        "cursor": {
          "ref": "93f44bfe-3d01-4d32-aa63-385c95a7f4e0",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f699e11d-33eb-4e3c-bb22-0e1c3285acac"
        },
        "item": {
          "id": "b6a5082e-002f-445d-b75f-456d50c5a066",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "60413405-ed34-4c50-915b-b26dd01800e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51ed4b1-938c-41aa-a447-fa45061f7393",
        "cursor": {
          "ref": "4e8939f0-c4c0-476a-b7e3-d4e11c9e0952",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5ff8e84e-0811-497b-a4a1-273efced2055"
        },
        "item": {
          "id": "c51ed4b1-938c-41aa-a447-fa45061f7393",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "80442690-1996-4822-adbe-9b9b06c1819f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc10afa8-f136-4b88-a411-50952abb1b63",
        "cursor": {
          "ref": "124a8977-8afe-41ed-b791-fd0bed6bc49b",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "af300230-691e-45ce-aa70-568b81a16f51"
        },
        "item": {
          "id": "fc10afa8-f136-4b88-a411-50952abb1b63",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "35b12515-3d7d-4fe5-9026-a9c64b9c6132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5769ba7-282e-497a-8970-01585a25efc1",
        "cursor": {
          "ref": "d44e0f17-1704-4c9e-8976-5d63c48eab0b",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "eea2274b-3e54-4155-a0e6-af116141d9e5"
        },
        "item": {
          "id": "d5769ba7-282e-497a-8970-01585a25efc1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b18d39de-5b9a-4e5e-b0af-554d62d97e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c3bea6-ffcc-49c8-bdee-1292ecce9736",
        "cursor": {
          "ref": "bf083ecb-b536-4cd7-ace6-4517b9d4f117",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "04046e34-cf9d-47b6-8094-f9717c6a8192"
        },
        "item": {
          "id": "79c3bea6-ffcc-49c8-bdee-1292ecce9736",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bff1b364-e82a-482f-90be-465cbf6b93ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1024d0-c4c0-4519-91dc-859ebeda6bd8",
        "cursor": {
          "ref": "4c22a96e-0d6f-4a46-8793-b8e9cef534c9",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "75c7fe06-e488-47c6-a315-5a1cd30374ba"
        },
        "item": {
          "id": "fb1024d0-c4c0-4519-91dc-859ebeda6bd8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "93aa22e8-61d5-44f2-83bf-7a765f4a883e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0174d6-a919-423e-af90-2bc986cc2a21",
        "cursor": {
          "ref": "6280714b-e5ba-4e7b-b3ff-8a6a4dfeeb0a",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "bb103b3a-db89-4fac-8c1e-b9388d0a10f6"
        },
        "item": {
          "id": "0b0174d6-a919-423e-af90-2bc986cc2a21",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d084afe5-470f-4f76-9862-502a6af48e32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be626b81-f82d-467f-8204-c8c3c40643d4",
        "cursor": {
          "ref": "aa36fbc7-3615-4b92-b7fb-30e6154989f0",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "fbd2d6c9-ddd8-434d-90a6-f52c0ac0848f"
        },
        "item": {
          "id": "be626b81-f82d-467f-8204-c8c3c40643d4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a65676fa-6a2d-465b-8898-c62114b98621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d4e402-4d89-43da-abc4-cb7947eb178f",
        "cursor": {
          "ref": "c18d9c68-ba48-4db6-82c8-a1bf0ed97614",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2fb675ae-4906-4d0b-8b0d-5cd2a7387e31"
        },
        "item": {
          "id": "64d4e402-4d89-43da-abc4-cb7947eb178f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "26b04553-04e2-4308-9e8c-0dd06e791522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64fe5da1-7717-481a-a478-395a5f7db3d1",
        "cursor": {
          "ref": "df755a26-8c61-41a7-ab08-d05883f3acd3",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c2cbcea6-08be-4136-8301-d8d3e30c6ba6"
        },
        "item": {
          "id": "64fe5da1-7717-481a-a478-395a5f7db3d1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "94e66f57-472e-4fe0-a70e-46075ab0f84b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a409d059-e3d6-43c5-8896-ce45f83fc2bb",
        "cursor": {
          "ref": "00a7fb78-3aa4-4c4c-ba50-f64f156c9308",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "51433edd-1032-4ebc-b630-c1bb4ddbb542"
        },
        "item": {
          "id": "a409d059-e3d6-43c5-8896-ce45f83fc2bb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d86f7d98-05ed-4bdf-8177-8b2d23b7eda9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fad2508-8d7b-476a-b3c2-9720988d744e",
        "cursor": {
          "ref": "50d84f5d-6aca-4127-82b3-abdc5a837cda",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ff452242-a864-4917-9363-df52add17bb3"
        },
        "item": {
          "id": "8fad2508-8d7b-476a-b3c2-9720988d744e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "219cd4f7-30ef-4278-9db7-e7e49f2b6ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f2efbb-2e52-4ddd-92bd-06cc9dfb1d78",
        "cursor": {
          "ref": "88c79eb6-e8c9-46c2-882e-caa1d2dadae8",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "27c5565b-bf16-4e95-8d09-983b1f345cd7"
        },
        "item": {
          "id": "82f2efbb-2e52-4ddd-92bd-06cc9dfb1d78",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "50dda837-3b48-4e6b-b073-b175298c6fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "664e728b-b180-4d8f-b4ec-711720153ae1",
        "cursor": {
          "ref": "6ac96762-e1ce-4457-a3a5-775efaaafd38",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5929ce8d-460d-4ba2-bba2-e9f4d2dc04cd"
        },
        "item": {
          "id": "664e728b-b180-4d8f-b4ec-711720153ae1",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "9b595daf-0c78-4bce-bc0b-fa84387d0b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97040c74-bbd2-474c-b75d-3e82df778063",
        "cursor": {
          "ref": "ec6b19ee-6308-4186-acd8-f6dfa7258ddb",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ed3d85cd-fd5f-4ad2-ab45-d70eba7ea4f8"
        },
        "item": {
          "id": "97040c74-bbd2-474c-b75d-3e82df778063",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "102d9881-627a-4015-b38b-85a127a2343f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183ff073-cba4-4473-b62c-24ba1f2e9b7c",
        "cursor": {
          "ref": "89c03c50-0a5f-4a7b-9e95-c7535ad9a0a7",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3960db63-069b-4a35-835a-9bd961021187"
        },
        "item": {
          "id": "183ff073-cba4-4473-b62c-24ba1f2e9b7c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "29cd2632-eb7a-4d1c-9a02-620a9667e912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c37ece-9dc2-4862-ac65-13f792f58ccf",
        "cursor": {
          "ref": "947084eb-3796-40a7-94ad-415314996bfe",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "148d6a8e-783a-4a4d-8f86-342d96c378dc"
        },
        "item": {
          "id": "02c37ece-9dc2-4862-ac65-13f792f58ccf",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "c0e1ade2-e5df-44a5-9a9b-4dd0b381c253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31df1cfc-3829-4175-b409-4d9f75e8efbe",
        "cursor": {
          "ref": "f3c3409f-ae38-4074-9c83-f3cb63dcc36e",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "28d8caaf-44c0-4d8d-9f22-7264e067450e"
        },
        "item": {
          "id": "31df1cfc-3829-4175-b409-4d9f75e8efbe",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "eb856f85-64c1-4960-a191-44950f105aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0beb69c-f7ad-4fbd-b4bc-f188433ea042",
        "cursor": {
          "ref": "fc5a7ac0-f5ea-4f66-b349-3c69cad38f09",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "be34c21b-db0c-4c66-8af4-2268be2abec8"
        },
        "item": {
          "id": "e0beb69c-f7ad-4fbd-b4bc-f188433ea042",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f71f9812-4c9a-49be-ae05-148a9e474a4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f84aa85a-79c1-465b-a444-b3b1c5ad153f",
        "cursor": {
          "ref": "26b48414-4811-4c14-9475-9013fdf53e6d",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "91708d30-dffb-4a7a-8c58-1ae0ccd59add"
        },
        "item": {
          "id": "f84aa85a-79c1-465b-a444-b3b1c5ad153f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "65dedf6e-17c6-4766-a168-0d5b4006428c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add2678d-9b24-44fb-9973-c994dc73d76b",
        "cursor": {
          "ref": "71d57a2c-f21a-4fe0-97f2-f98710b06e3a",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "90875e6f-82ab-428d-917a-e41c8c3ce5b0"
        },
        "item": {
          "id": "add2678d-9b24-44fb-9973-c994dc73d76b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5caf1e12-1643-4ff9-8d44-57d08b4f47eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b750e836-1bec-4be4-b50f-e101cbb389f7",
        "cursor": {
          "ref": "60ec4e35-4a13-43ce-bf62-1da56ece097f",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c7239064-15c8-4bb6-a663-7339604e83e8"
        },
        "item": {
          "id": "b750e836-1bec-4be4-b50f-e101cbb389f7",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "964c59b3-a03c-41e2-8648-c96048c6bdd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02afa9d9-8387-4cf1-a0a4-e9794a9bcb14",
        "cursor": {
          "ref": "556036e5-8690-4839-a9e1-ec0b51c6e9b2",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7b6a0be4-ac44-41b6-ba57-5dd4637aab41"
        },
        "item": {
          "id": "02afa9d9-8387-4cf1-a0a4-e9794a9bcb14",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2770a256-3dec-420f-8244-29f6594895bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dabaff16-b91d-4819-8571-baa9e2eee965",
        "cursor": {
          "ref": "e55a30ff-bbca-41d5-aeb2-0e2769df3cbe",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5531fd9c-fb63-454f-9624-90c2a2434194"
        },
        "item": {
          "id": "dabaff16-b91d-4819-8571-baa9e2eee965",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "904871a7-ac65-4758-b28b-41aaf5dabfbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d73465-de3c-408c-982f-cfd4b7846770",
        "cursor": {
          "ref": "6976ddb9-ab3b-4ce9-90ba-3935171513d6",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5e966520-d68c-43a3-bd44-78c396c0eb61"
        },
        "item": {
          "id": "67d73465-de3c-408c-982f-cfd4b7846770",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6443790d-6b8c-49f3-8baa-59f4b3da8fb5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "23f82fdb-7131-441d-9a22-f29e2201a7ed",
        "cursor": {
          "ref": "f43e4643-c22a-465f-983d-dca649f548a0",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0d368f55-dba8-4eca-bee0-97347e803e73"
        },
        "item": {
          "id": "23f82fdb-7131-441d-9a22-f29e2201a7ed",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d4f06225-2819-4627-8efd-f0c21bff4254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17dbc73-9811-456e-b893-e07322087ff3",
        "cursor": {
          "ref": "e576c4f2-30b0-49fd-9826-0cd224438ba4",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "716f138d-54db-4e05-8452-081e2dd4080a"
        },
        "item": {
          "id": "a17dbc73-9811-456e-b893-e07322087ff3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b51433f6-30fa-4a7f-b0ee-be73fe2701e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c37f08-4295-48db-87da-87b9927d2b07",
        "cursor": {
          "ref": "78de7648-58ba-4f28-99dc-a0bac786a55d",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d3992b7c-fe40-4060-b422-ce1c20cb76f6"
        },
        "item": {
          "id": "12c37f08-4295-48db-87da-87b9927d2b07",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "da87bcae-3db3-4261-8b99-89aede48bca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71986471-45f8-4fe4-807e-060ea0857525",
        "cursor": {
          "ref": "e3d5feea-1054-494a-ae79-90458ffe8e97",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "33f64997-3089-4f4e-83c4-3d883bd7be2d"
        },
        "item": {
          "id": "71986471-45f8-4fe4-807e-060ea0857525",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "60207e3a-1c52-47b1-a123-562face13eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a97dd72-ce98-425e-9134-da227f0838ca",
        "cursor": {
          "ref": "4f947e6c-c992-4e57-8df7-e247814f4536",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "29347265-494e-40ae-a41f-c6e0a6516213"
        },
        "item": {
          "id": "8a97dd72-ce98-425e-9134-da227f0838ca",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d03ac9e0-fdd6-48a0-83f7-03a71c080ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82881c83-1ab6-4190-96f1-3451b8d07a7c",
        "cursor": {
          "ref": "6d791b02-1d29-4726-afec-34db91929e48",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5b5b2d40-7660-459a-84f9-69df15695ed8"
        },
        "item": {
          "id": "82881c83-1ab6-4190-96f1-3451b8d07a7c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2dde692c-3567-4f0d-982c-4b82025083b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "276f214e-4a80-48ad-b6f2-21e3da2566f1",
        "cursor": {
          "ref": "3082763c-0b2e-4f3b-934e-1a20dd2450bd",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "16e66a98-41e1-4aea-ac4b-898e7e763b56"
        },
        "item": {
          "id": "276f214e-4a80-48ad-b6f2-21e3da2566f1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "bbabbf9d-1cda-4b00-bdc5-28a3ad3dce9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53db7249-3877-421c-95d6-ff0afee67fe1",
        "cursor": {
          "ref": "dff733f4-7765-4d52-a5b8-5e17faa0a223",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f4bc6b63-2e39-4233-8352-eacb69521f91"
        },
        "item": {
          "id": "53db7249-3877-421c-95d6-ff0afee67fe1",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3459b6dc-9148-4922-8a17-ae46fadf86b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ba35d1-4dfe-4633-a2ae-dad44a8780f6",
        "cursor": {
          "ref": "4907e2b1-2fbd-4041-9d40-107eb5eaaabf",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "882da103-8627-48e9-a49b-f86d8be6a108"
        },
        "item": {
          "id": "40ba35d1-4dfe-4633-a2ae-dad44a8780f6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "704b1dc0-d25b-4732-a25b-b9d3ccfb30de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e509bdcf-17e6-4add-a62d-9005bfc2af6e",
        "cursor": {
          "ref": "091b9af9-0d3b-4804-a7f3-71623faac969",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "cba52d40-11a0-4dc3-ad25-d14fb4ebcbb7"
        },
        "item": {
          "id": "e509bdcf-17e6-4add-a62d-9005bfc2af6e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "09d2ca1e-bcb0-4df1-bc1c-97678ea76211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2db1c74-e184-430b-b53e-2a6409f2b634",
        "cursor": {
          "ref": "735aa357-0ae1-4cfe-8dd8-6f661102c4f9",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f5581fa0-e069-4ea3-a6b2-bbae5117aed7"
        },
        "item": {
          "id": "f2db1c74-e184-430b-b53e-2a6409f2b634",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5a03dd40-ee1f-4074-9031-266f54533ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563a9409-231a-4da4-b64e-3067dd4e2e4b",
        "cursor": {
          "ref": "2f200b89-f506-4ed3-bc51-13b0b465afdf",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3cb50997-31c7-4fe3-90cc-f398a3895ac7"
        },
        "item": {
          "id": "563a9409-231a-4da4-b64e-3067dd4e2e4b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2e794b57-382c-412a-ae59-913060678fb1",
          "status": "OK",
          "code": 200,
          "responseTime": 775,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "ec4fadbe-ee1c-443b-9152-ca00719195b9",
        "cursor": {
          "ref": "ba22a333-512a-4ab5-b8ef-e117e394fdd2",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c1836f67-14f2-4116-855d-c49e6bf55ab3"
        },
        "item": {
          "id": "ec4fadbe-ee1c-443b-9152-ca00719195b9",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "58e4e2b0-38f0-499c-971c-141b9034518b",
          "status": "OK",
          "code": 200,
          "responseTime": 807,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "da85304b-2b87-48d2-819d-ce3112649ba0",
        "cursor": {
          "ref": "335fe3d6-7737-42e5-b9a3-df18653f7ecf",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1b896418-913a-41fa-8d32-3ea3ee125ad7"
        },
        "item": {
          "id": "da85304b-2b87-48d2-819d-ce3112649ba0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "bb867b00-7b9a-4f01-809f-c24fb4c1a69b",
          "status": "OK",
          "code": 200,
          "responseTime": 1200,
          "responseSize": 131
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "d0523f61-7356-4568-84b7-3a2f91cb6f4d",
        "cursor": {
          "ref": "378905a0-0d7b-4f79-ad35-a07dee5e3b51",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a8844152-96f8-4dc3-939c-855e99f12f8e"
        },
        "item": {
          "id": "d0523f61-7356-4568-84b7-3a2f91cb6f4d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2819ad04-b64a-40b3-9949-25b8b2ab01a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42739fad-74b6-4f03-b22f-b7eb2f4d6d0d",
        "cursor": {
          "ref": "d87fd2c0-a302-43ce-9bfe-ce1a225c1dea",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a86ef579-3ec5-4014-8740-27e295f2ebcf"
        },
        "item": {
          "id": "42739fad-74b6-4f03-b22f-b7eb2f4d6d0d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "47f814e5-db20-4cae-a5f6-f300c9f1c7b5",
          "status": "OK",
          "code": 200,
          "responseTime": 768,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "65cd11ff-edbd-42bb-acd9-71c603b30057",
        "cursor": {
          "ref": "ff75cffb-7e3e-47ec-b6f4-fa09e06ddb2b",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "90a74792-4ae6-43c2-aaf9-fc4b0e49f39c"
        },
        "item": {
          "id": "65cd11ff-edbd-42bb-acd9-71c603b30057",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "10258eb4-5408-495a-8888-5fedac8d2570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded4b571-f2cf-4acc-8c2b-3d9a1f667c83",
        "cursor": {
          "ref": "e797b25e-12ed-4e7e-82ea-5083b1da9061",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "83631ccd-6e28-473b-a6f7-02e1003a5339"
        },
        "item": {
          "id": "ded4b571-f2cf-4acc-8c2b-3d9a1f667c83",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "96d45a33-89a7-4d52-84a4-e7ca83896340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2982ffa3-0152-4515-9354-2d4284f77c8d",
        "cursor": {
          "ref": "0431f310-9463-4fad-8338-9691542628e4",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ca2c0c88-f04f-4781-b493-9f86822b6cb2"
        },
        "item": {
          "id": "2982ffa3-0152-4515-9354-2d4284f77c8d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1bbfbc3a-7174-4416-8678-459eb54628ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480a6dcb-5269-4a5a-83c6-cc316eea26d8",
        "cursor": {
          "ref": "9f260cb4-9094-4511-91bc-866b186ca84f",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5d133015-a0fb-471d-950a-822c0bd8d5fe"
        },
        "item": {
          "id": "480a6dcb-5269-4a5a-83c6-cc316eea26d8",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "41fbb73d-9517-40d1-84f0-884f3ef3a0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e2b53bc-607c-445e-965d-72129d9b7ecf",
        "cursor": {
          "ref": "73f61eba-a9b4-4d2d-9aba-9a8e0d20e309",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "903a9e5b-a2bd-4f80-80ec-feba1d0267a7"
        },
        "item": {
          "id": "1e2b53bc-607c-445e-965d-72129d9b7ecf",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "11335991-e541-48bd-9044-61a587e02164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120be323-ab0b-47c4-b62d-1877abae4c63",
        "cursor": {
          "ref": "41f00141-e28c-410b-95de-38a0e93d3d39",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7b21484b-deac-4852-b06f-3c9c2c631cd6"
        },
        "item": {
          "id": "120be323-ab0b-47c4-b62d-1877abae4c63",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3b28d044-7e37-4525-9281-156dbdd4d943",
          "status": "OK",
          "code": 200,
          "responseTime": 806,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "5a8719ec-099a-4692-bf7f-b3ee94607b6e",
        "cursor": {
          "ref": "7e4b0760-8746-40e6-8915-bf66fe6fd5a7",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "64b45bf3-a6a4-44bd-9b72-b78c40a8a7cb"
        },
        "item": {
          "id": "5a8719ec-099a-4692-bf7f-b3ee94607b6e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8970a682-2120-489d-99c2-20a541015f36",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "c891de68-3aba-4e12-bd18-887711aeed51",
        "cursor": {
          "ref": "ffeeb918-fd82-40c6-892f-df9189dd8aa7",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "051e4500-0223-464b-ad82-1abee2fd195d"
        },
        "item": {
          "id": "c891de68-3aba-4e12-bd18-887711aeed51",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a13f1fcc-2766-478b-bd06-ea7c73f12267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31919d2-00ef-40de-8462-b575d9500f98",
        "cursor": {
          "ref": "7eff0fd9-78ce-43dd-bfe3-f6a5d3db0006",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "76e5b20b-59ec-48be-83f0-b8ebb011e84e"
        },
        "item": {
          "id": "d31919d2-00ef-40de-8462-b575d9500f98",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "091ce71d-a700-4362-938f-2daf2d584227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62479b61-c743-4e99-aa5d-6fbd3367634b",
        "cursor": {
          "ref": "ba0d1af4-14f5-47e3-96e4-45d6dc107006",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9e62ba69-13fb-45b2-a18b-552b339f9fb3"
        },
        "item": {
          "id": "62479b61-c743-4e99-aa5d-6fbd3367634b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "dd05e0b7-be40-4034-a0cd-59e6d3cd2cde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c36d50-c4d2-42dc-aeda-39da61fcb418",
        "cursor": {
          "ref": "1fd1c790-fa4a-4962-9520-9c05c1318a9b",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d5f1a93a-d769-4e02-8759-efec8481dbeb"
        },
        "item": {
          "id": "87c36d50-c4d2-42dc-aeda-39da61fcb418",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b1624273-d13d-4e96-8cbd-b32e60ad274c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cfae739-2e91-45c0-94e5-d2f70c421c1f",
        "cursor": {
          "ref": "0d733b9d-4fa0-401e-9d4c-6108f46b4906",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "49f5aefe-ea45-418c-b6d9-7aea997cffbb"
        },
        "item": {
          "id": "3cfae739-2e91-45c0-94e5-d2f70c421c1f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "edb186fb-5e63-404d-a2b1-ad5285514a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8de45a7-0b1b-46b6-ae4d-bb728ad72bb5",
        "cursor": {
          "ref": "d311569a-d86e-4950-8e79-1d2f53777e66",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5ca5c772-05a5-4ff5-a902-1e1d87109066"
        },
        "item": {
          "id": "c8de45a7-0b1b-46b6-ae4d-bb728ad72bb5",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "be85628b-4ab2-47e6-953b-14e01132cfd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23925da-1d49-4f29-97d8-3083d22a4c4f",
        "cursor": {
          "ref": "2590e4db-4883-4687-b7c3-e4b54f2452af",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3742a944-f1c5-4e91-a9f3-1a7477efd373"
        },
        "item": {
          "id": "b23925da-1d49-4f29-97d8-3083d22a4c4f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "45656d67-fbd0-4406-af1c-7fa4c4f1fcb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62ba885-a5c7-43a1-9f07-7ef634762568",
        "cursor": {
          "ref": "05212473-a66f-4e95-b52e-68af7adb5bed",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "46433e0d-f0a0-45b4-84d1-3444139be311"
        },
        "item": {
          "id": "b62ba885-a5c7-43a1-9f07-7ef634762568",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2cb5d8ad-90b6-4745-9fb2-28c985e3a690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc49edc-e063-4ff7-a942-a879670a36de",
        "cursor": {
          "ref": "b0ca6a50-4c00-41df-a0f0-4c3e0f93f42b",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "fc828402-2266-42d8-bd97-fab5666c4ba7"
        },
        "item": {
          "id": "ebc49edc-e063-4ff7-a942-a879670a36de",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fa2aa5b1-1fb6-4f47-acca-72a82ac85176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ea2522-4fec-4d55-b7c8-80377277e8fe",
        "cursor": {
          "ref": "54297555-3b02-44db-9a0f-78f4e12dcd3a",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c2a6727b-7e8b-4e0d-a753-9f8e52a046f7"
        },
        "item": {
          "id": "c4ea2522-4fec-4d55-b7c8-80377277e8fe",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c27c9e93-96a3-40ca-9645-86ac05d4267b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9721b1e5-4176-48a4-855c-1547a0c64531",
        "cursor": {
          "ref": "bfbf4d22-8cef-4f41-86ce-9630f731ec3a",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d2b9bfd7-bc68-49fa-92e0-02c5a65d39ea"
        },
        "item": {
          "id": "9721b1e5-4176-48a4-855c-1547a0c64531",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "93eea7b4-e044-4722-9d70-d80f08cf3746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f7c421-e45b-4731-a2d9-e4bf07c69195",
        "cursor": {
          "ref": "c2cc9402-8edf-411e-a028-37cf8cbd8178",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c849f09c-6863-441e-936a-a380ef276d5f"
        },
        "item": {
          "id": "22f7c421-e45b-4731-a2d9-e4bf07c69195",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d4bada94-e7cf-43ef-9a3b-91da4a89e3e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecfe2fa4-aa22-428f-8aa0-26e6ed6eea9b",
        "cursor": {
          "ref": "2c2bdb95-5de5-456b-b8e4-4cec72ed090e",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ab2f13ae-d5b3-4617-82aa-b79b3c1c16c9"
        },
        "item": {
          "id": "ecfe2fa4-aa22-428f-8aa0-26e6ed6eea9b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f1588421-d202-4cdf-ac14-4771e495dded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7254d374-0664-4d41-be2f-a10e5ca90e93",
        "cursor": {
          "ref": "34367c80-9c6c-49b2-b64f-eaa94aa74c95",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e2421c71-f958-4e11-ab3b-918fd5496612"
        },
        "item": {
          "id": "7254d374-0664-4d41-be2f-a10e5ca90e93",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "32abba1c-b040-45a6-8f68-8c4f030736b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c5dc318-7808-445e-a6ee-185f11265d97",
        "cursor": {
          "ref": "c691732f-e963-4339-93c3-4fa3a02bb878",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "1f34aff3-2d92-4bbb-80f8-a812e007cb52"
        },
        "item": {
          "id": "8c5dc318-7808-445e-a6ee-185f11265d97",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "576a20bc-2329-4cc7-a964-6daca82aeb89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2861b1c7-098f-476c-9854-823f7b4ae811",
        "cursor": {
          "ref": "fe10b4c6-00d0-4b80-93ac-fc44dccb9d89",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e93aeab2-db23-4744-a3dc-16d536951aa3"
        },
        "item": {
          "id": "2861b1c7-098f-476c-9854-823f7b4ae811",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fb9a201d-b96d-4061-8b4d-0ec067a45942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35499765-9a11-43ea-bbb5-3c6b3f729a8c",
        "cursor": {
          "ref": "13e7928b-5d6c-450b-a568-b40979e3e3b6",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "248b3072-8464-44ad-bd80-ff2dd835eef6"
        },
        "item": {
          "id": "35499765-9a11-43ea-bbb5-3c6b3f729a8c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6b146339-5126-466e-9177-98df0309738a",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "cb67a3bb-6054-4914-bf31-7513df79ad42",
        "cursor": {
          "ref": "f8297c97-168f-4e18-a525-00d5f47c1e63",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "1728e014-b818-49a6-999d-1797dad63f64"
        },
        "item": {
          "id": "cb67a3bb-6054-4914-bf31-7513df79ad42",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ffe0b44b-b3e8-4e41-af86-898356953b2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa32e2f-aa0a-4c53-bb44-88448fc725d4",
        "cursor": {
          "ref": "1d582575-1393-45e8-b21a-f4d23ed34d9b",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7cac2b0c-af9c-4689-9853-b2848d509786"
        },
        "item": {
          "id": "4fa32e2f-aa0a-4c53-bb44-88448fc725d4",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ddd35470-bbfa-4e65-9d61-2c4fa8b982cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c01473e-20a9-46ed-8570-05726fcf8056",
        "cursor": {
          "ref": "3e306823-0825-411f-924a-70df3f4455e1",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e5b79083-e6aa-46c4-b6dc-236b6de9f8fa"
        },
        "item": {
          "id": "7c01473e-20a9-46ed-8570-05726fcf8056",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "78d5cb4a-59b6-4768-905e-42910107d4eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebfc9e4-f539-4b83-a4ed-a605d39331aa",
        "cursor": {
          "ref": "d0e4ddcb-d737-4e17-be8a-486f4991bfff",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3f2814bb-e044-4812-8f6e-83be7db21868"
        },
        "item": {
          "id": "bebfc9e4-f539-4b83-a4ed-a605d39331aa",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7b94bab7-960a-41c9-9df0-6f8d5884337f",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "2575ee49-7471-4efa-a94e-98fa2132a031",
        "cursor": {
          "ref": "22a949bf-8c06-4573-82b8-866bb03fbdd7",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2124c482-01f7-4cdc-bc00-c31d46883f4e"
        },
        "item": {
          "id": "2575ee49-7471-4efa-a94e-98fa2132a031",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c16b4199-8cbf-4852-a9fa-9d49bbf2d850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d349b7fe-0995-4e47-a6f7-802b8475a97e",
        "cursor": {
          "ref": "22739ea3-46e3-4822-9f67-7653fa723a0f",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3af7e23d-b34f-441f-b0c7-5731c9fc1f7b"
        },
        "item": {
          "id": "d349b7fe-0995-4e47-a6f7-802b8475a97e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b6d71572-123a-4948-ada1-fc1ae7dd251b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9545dc3f-f47c-43fe-99cb-3911e5f23996",
        "cursor": {
          "ref": "ede2c693-2569-48f8-8044-ac35d54f10b9",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "21584fad-d921-4384-a5b9-f0da780c8391"
        },
        "item": {
          "id": "9545dc3f-f47c-43fe-99cb-3911e5f23996",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1c8ec1e1-8258-4810-9678-2300cda5221a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52d701b-0e8e-46cb-b56a-446a9eec8c98",
        "cursor": {
          "ref": "806802fd-662a-4c1d-83a3-3ed5322008e9",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a47b13a8-9219-4cd7-8f35-8140d52371aa"
        },
        "item": {
          "id": "f52d701b-0e8e-46cb-b56a-446a9eec8c98",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d1fef688-b050-4df8-a6b8-d079a5b47131",
          "status": "OK",
          "code": 200,
          "responseTime": 771,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "2f4242cd-5abd-4513-a5e0-b5a41ad0c1d6",
        "cursor": {
          "ref": "b608488c-910f-4e22-bb03-4417d29f1be1",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9d00c949-5f4f-4af5-882d-19466ed4c7fa"
        },
        "item": {
          "id": "2f4242cd-5abd-4513-a5e0-b5a41ad0c1d6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "db8c6fe5-e200-4c7a-95ae-c178bfad16ae",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "1582cbae-ba91-4434-898d-5a28f3b571eb",
        "cursor": {
          "ref": "f5d435ec-bdbb-46b3-b832-83acdfa11fb1",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1739e747-0cca-4f39-a4c4-2edbdf34c405"
        },
        "item": {
          "id": "1582cbae-ba91-4434-898d-5a28f3b571eb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8f24e9f2-1a72-4cb8-a11e-7b8c68acff2b",
          "status": "OK",
          "code": 200,
          "responseTime": 798,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "cc03c64f-4ee9-49ab-9bc4-4ee93594eec8",
        "cursor": {
          "ref": "195b119d-47f2-4550-9adf-6b32b3126701",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8579604f-f49b-499b-97ac-1c3fd39e3f8c"
        },
        "item": {
          "id": "cc03c64f-4ee9-49ab-9bc4-4ee93594eec8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b637c9c8-cecb-461f-8fcc-d76847e8010e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fa060e5-9c81-427e-a465-463ec7222929",
        "cursor": {
          "ref": "2fea8c44-07b9-4e35-9118-b12ec0bb2882",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0e6e1bb0-3fa0-4a74-b7c8-14d1c289aba5"
        },
        "item": {
          "id": "8fa060e5-9c81-427e-a465-463ec7222929",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f003f110-712a-44c6-8811-c8cd2e619c5b",
          "status": "OK",
          "code": 200,
          "responseTime": 1276,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "33e9cc38-88d7-4f30-b9d9-0a1351a75aae",
        "cursor": {
          "ref": "9183762f-179f-44ce-b65f-6da3d1de7cca",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "529b7dfc-9275-4daf-902a-9d9858edad52"
        },
        "item": {
          "id": "33e9cc38-88d7-4f30-b9d9-0a1351a75aae",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4e8c5390-2ef4-4b67-85aa-77e06abb0d2b",
          "status": "OK",
          "code": 200,
          "responseTime": 749,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "6e63bd46-ac79-4a15-880d-e9ca4e1f8592",
        "cursor": {
          "ref": "1d62486f-4c34-4c66-8c6c-70a4aab82e42",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e6cbc583-d9ed-45b0-b78c-316e2b8ceba2"
        },
        "item": {
          "id": "6e63bd46-ac79-4a15-880d-e9ca4e1f8592",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d9acd656-d76e-4c14-a38d-0b81518b261e",
          "status": "OK",
          "code": 200,
          "responseTime": 790,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "99918370-a4db-4597-b193-e0bf8afec1fd",
        "cursor": {
          "ref": "d8d539a4-0247-4fb2-b60e-10fb42bd2d15",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d89399f2-1089-4fe7-8631-ead02319fcf4"
        },
        "item": {
          "id": "99918370-a4db-4597-b193-e0bf8afec1fd",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "befa5c3f-7156-4f33-a4f5-19be09e6e265",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "9bc2f821-13cc-4565-b78e-672eba2615c8",
        "cursor": {
          "ref": "3cc08978-23dc-4c2e-b5f1-7f8eb5e31104",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "58b8d4ec-1057-4c6a-9e76-e98aa0cf4de7"
        },
        "item": {
          "id": "9bc2f821-13cc-4565-b78e-672eba2615c8",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "39b6e9bc-5add-4547-962d-ddabc461b780",
          "status": "OK",
          "code": 200,
          "responseTime": 773,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "40464d91-bfad-4aca-b704-5e55b814da75",
        "cursor": {
          "ref": "3b701871-b039-4245-b7ca-c0f70ace2202",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "541bfa78-8cd3-4ff5-b9bc-ebc0ff069f0a"
        },
        "item": {
          "id": "40464d91-bfad-4aca-b704-5e55b814da75",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a8480cf3-89b0-4427-85b8-58726e6b02f3",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6c247a63-0a80-46ee-99a6-ba2e8da02753",
        "cursor": {
          "ref": "f9e0e94a-abc0-4b30-b507-768adff1bd59",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2333aed6-fec7-460a-9508-b9c454eac2f5"
        },
        "item": {
          "id": "6c247a63-0a80-46ee-99a6-ba2e8da02753",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "916350b6-5176-4702-a9ea-538ce0814580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07166f01-f1fb-4581-be2d-43a4edec77d0",
        "cursor": {
          "ref": "da86f451-a9ec-4f08-8333-8fd3067fc0d9",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1cf00f41-7a71-4bb8-b47d-822efb397388"
        },
        "item": {
          "id": "07166f01-f1fb-4581-be2d-43a4edec77d0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "bb36dcf9-5e2a-4b7c-9a27-a385e69fff9f",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "3bda3e9c-0201-4edb-aa63-fe857678e99c",
        "cursor": {
          "ref": "fbea159b-f739-4e6e-b762-16719cddcb06",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0d4af5f0-aa20-4dac-8928-d852230ffa82"
        },
        "item": {
          "id": "3bda3e9c-0201-4edb-aa63-fe857678e99c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "cd1bacfb-64a5-4905-a18d-47dce7ce887f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ee2daf-35dc-4f76-a321-dcf558ae90e5",
        "cursor": {
          "ref": "abe009bf-cceb-4812-8d80-6db37c563d58",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "352b85db-87d4-4310-80d3-2cd686bc9e02"
        },
        "item": {
          "id": "04ee2daf-35dc-4f76-a321-dcf558ae90e5",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e0ad71cd-8c52-4d3d-a812-8f47a4535ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89739dd2-01db-406c-bce8-e8275968d266",
        "cursor": {
          "ref": "7fecbd18-06f4-4966-9340-1a61042e0120",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "12267b99-3bcc-4552-9889-3d3e12413e23"
        },
        "item": {
          "id": "89739dd2-01db-406c-bce8-e8275968d266",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3329905f-6abb-4a5f-aab9-a7b2e73bda57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbef1b6f-7f4f-4d4b-a256-1b0934af09f5",
        "cursor": {
          "ref": "482dd24c-6ca8-4f13-a0d3-6415c30a9904",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "62a0c7e2-30b2-49e4-b7d0-ecad685e6bd2"
        },
        "item": {
          "id": "cbef1b6f-7f4f-4d4b-a256-1b0934af09f5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "538ae676-b3bf-47f4-992b-b6f4ed9017fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "381e6034-dce2-4407-bb7a-3a1d6c923d97",
        "cursor": {
          "ref": "805fc6cb-b65c-48b0-88c4-c225276ee110",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "727605e6-f574-41ec-be21-c3cdcfb1ac29"
        },
        "item": {
          "id": "381e6034-dce2-4407-bb7a-3a1d6c923d97",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c3a3f1d4-f3e5-4200-a4d5-26eff717754c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36dbc9f0-ce3a-417c-b995-a4c919fdfe7b",
        "cursor": {
          "ref": "f28831e3-9253-4e5c-94e2-73617e1c492c",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4d6574d3-e566-40d7-a4fb-5216e9d12f16"
        },
        "item": {
          "id": "36dbc9f0-ce3a-417c-b995-a4c919fdfe7b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b804c761-4316-4d33-bbd6-15752feb607d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2128d221-79ab-498d-95d0-f828df3fd94a",
        "cursor": {
          "ref": "dca5ffd3-7821-42b5-846e-aa339740665c",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "16c9c6d1-4b6c-4541-b743-9084099aa6ae"
        },
        "item": {
          "id": "2128d221-79ab-498d-95d0-f828df3fd94a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9f0bcc41-bdc2-4575-9b0d-430af7aef5ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db567e17-9700-4dfa-90a7-9f58aa99cadf",
        "cursor": {
          "ref": "11d07744-064e-4fff-8c54-25230a5401e1",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "05c92a6e-24af-414f-a9d0-6c846e02c921"
        },
        "item": {
          "id": "db567e17-9700-4dfa-90a7-9f58aa99cadf",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0493fc1e-a01d-45ce-8bbf-dc15a4e0ce6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8aed679-ef68-46bf-94ea-ed2483c91c1b",
        "cursor": {
          "ref": "e36d8e97-d1f5-48ac-bbb1-8a9c08199db2",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "fe34fae3-4141-4702-9072-95007127b600"
        },
        "item": {
          "id": "c8aed679-ef68-46bf-94ea-ed2483c91c1b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1b7197c1-41cc-4454-972f-b620671304c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52cef357-2714-48ea-9a23-d60ce42fa074",
        "cursor": {
          "ref": "ee32a93f-e9b7-4402-9c1e-1734f3ae60b0",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a79b02dd-1c4c-4114-9c3e-c9907a65dc85"
        },
        "item": {
          "id": "52cef357-2714-48ea-9a23-d60ce42fa074",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f748a34c-eba0-41d4-862e-fe315f3aa4b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a06302-180d-4e79-942e-a5ad404d1c7a",
        "cursor": {
          "ref": "4592521f-4d13-49ff-aef2-6acd223f1168",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "2f902c50-c778-42f1-a757-f11966b4c887"
        },
        "item": {
          "id": "10a06302-180d-4e79-942e-a5ad404d1c7a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9751828a-bf9f-4f31-96c4-838fa21f1585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2de7f1-3599-4132-9a2d-115fac09bfbe",
        "cursor": {
          "ref": "cd2daae4-ae9f-42b2-a6c7-401363c569f7",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "6f8b1ca6-4af1-48b8-a9f3-08d38b1c924d"
        },
        "item": {
          "id": "7f2de7f1-3599-4132-9a2d-115fac09bfbe",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3f6fe8e1-e365-4358-9d4c-c61bf30da306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3c8dee-e3bc-4ea3-a114-71d024c341f5",
        "cursor": {
          "ref": "5884a814-91a1-42f0-8bd3-01555f2075dc",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "00f14f36-d430-4bf3-9f71-c9b338bbd130"
        },
        "item": {
          "id": "ad3c8dee-e3bc-4ea3-a114-71d024c341f5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "82c06f58-7a77-4206-b31a-ce44bf7cc576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52aa2a89-cb0a-4d6f-9f71-0de7b9f0eadb",
        "cursor": {
          "ref": "272dc3ea-db2d-4e27-a5cb-3a497abb8a6e",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "23b7b500-1354-4e08-a1a6-34137fd0f600"
        },
        "item": {
          "id": "52aa2a89-cb0a-4d6f-9f71-0de7b9f0eadb",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9432fcde-0a89-473d-aab7-229f5b1209b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c243fecd-0fc8-47c5-90ec-a0269c195c39",
        "cursor": {
          "ref": "6f3aee91-2536-49e9-a95a-8a88d18be970",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "68bae81b-e3ee-44d4-9b2d-23315412fbbb"
        },
        "item": {
          "id": "c243fecd-0fc8-47c5-90ec-a0269c195c39",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "97150ffc-4385-44c8-abb9-d7cb9cc4e06d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1cf40d-65a0-47de-be66-02c267a90382",
        "cursor": {
          "ref": "47fe3f36-881e-4abc-8da1-1352dd452803",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "8e15c915-7b58-4b8e-b30e-eb702075ce6f"
        },
        "item": {
          "id": "de1cf40d-65a0-47de-be66-02c267a90382",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0bb0f59b-5675-49bf-9521-ff1c407cbb54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbaf978a-801c-4a72-8c49-5c64ef3a84e1",
        "cursor": {
          "ref": "0b524640-7439-4751-a41e-ae29c3c50f9e",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "1f3f6a85-7098-4552-a2be-9c20f75e6fa6"
        },
        "item": {
          "id": "bbaf978a-801c-4a72-8c49-5c64ef3a84e1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5ba3c774-228e-4fc4-950f-e7181c7cdbc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b8d6ab-9067-4980-b6b4-d8ffb1b48f60",
        "cursor": {
          "ref": "13b171d5-bbc7-423f-9630-b7d59339912b",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "5e419602-53f8-4e7d-9c50-2c484e06c7e6"
        },
        "item": {
          "id": "b8b8d6ab-9067-4980-b6b4-d8ffb1b48f60",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "095121f5-bb23-4ebb-8517-57e7b1f0725f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c57691-cd53-49ff-baf1-1ab71bfb53cf",
        "cursor": {
          "ref": "be27a305-1194-474e-8cd6-9e6ef4c9b52b",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "05aefc9b-dec6-41cf-babc-7f5c636406c2"
        },
        "item": {
          "id": "26c57691-cd53-49ff-baf1-1ab71bfb53cf",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "da54fd59-ffe3-46c0-912d-0a7604ad5dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5965166d-074d-412a-b209-0ee109a6d75b",
        "cursor": {
          "ref": "78ef49ea-12f7-450e-89e7-0ece2e89b7eb",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "49d53376-5ba7-4f14-a6c9-b42c0dc9841e"
        },
        "item": {
          "id": "5965166d-074d-412a-b209-0ee109a6d75b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ef3172dc-c745-4e5d-a76c-a6d670545a4a",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "aa9dbe8c-fe2f-46ae-9e6d-6a7f29ee09be",
        "cursor": {
          "ref": "b4649edd-25b5-49f3-8453-cc5ee2d027a0",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "117002cc-3ab9-49b2-95e8-1a4d8613ed29"
        },
        "item": {
          "id": "aa9dbe8c-fe2f-46ae-9e6d-6a7f29ee09be",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "76086c8e-398b-4a23-8e53-a59300396564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb1c042c-ba0b-4c6f-baf7-dfbf50a64a9c",
        "cursor": {
          "ref": "fec8e637-978e-4f16-bf61-4b77d4732b8c",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "aeaea276-e4a3-49aa-9734-fc7b3b7bb37c"
        },
        "item": {
          "id": "bb1c042c-ba0b-4c6f-baf7-dfbf50a64a9c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "bf4b48b1-f0df-45da-b696-4fc3298b6449",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "6ab7d9e0-0e00-44ed-bd08-5826dc238c2c",
        "cursor": {
          "ref": "7f1ee917-66fe-4586-91c7-b2a67cf69649",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "c9f01300-df3c-4ac2-97df-d67ee6d60267"
        },
        "item": {
          "id": "6ab7d9e0-0e00-44ed-bd08-5826dc238c2c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "afd606eb-7f11-4860-82be-6a6144a12eb7",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "6c40e133-aa1c-4a7d-a822-51d96b88f1c4",
        "cursor": {
          "ref": "d90792f3-1b9f-43b3-a7db-5b668c6aaa64",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "ef468ef9-d2fb-4b3d-b0e1-7f639559ffc9"
        },
        "item": {
          "id": "6c40e133-aa1c-4a7d-a822-51d96b88f1c4",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "658814fa-7f47-42fe-8bbe-a3f52c907204",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "516bca1c-5975-4bc5-99b7-d7d67e3bb061",
        "cursor": {
          "ref": "3e2d1648-12e7-4bfd-a83a-64e2ee6f4186",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "66c5b88b-99d7-406c-8701-a00ba305071d"
        },
        "item": {
          "id": "516bca1c-5975-4bc5-99b7-d7d67e3bb061",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d4ce9da4-7c82-4d97-a72d-f60270cf251a",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "2ea524f7-f023-479b-b667-481d3f0d7123",
        "cursor": {
          "ref": "29ea455e-9615-4663-893c-0eae500da73c",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "b3c391ec-e0a7-4464-a0cc-b548fb403d84"
        },
        "item": {
          "id": "2ea524f7-f023-479b-b667-481d3f0d7123",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a85eeb92-f171-4fa5-9fcc-c4f63644212e",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "f0366d7b-3db7-48f8-bf23-5f3162ff5a2d",
        "cursor": {
          "ref": "0e8c78fd-2d8f-44ea-ad65-a61bf3d757cb",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "30ab30b1-aba8-49eb-8324-1fbf23d8ddd7"
        },
        "item": {
          "id": "f0366d7b-3db7-48f8-bf23-5f3162ff5a2d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e3415f7c-f604-4d9a-9571-559afac3f4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e23ec2-d389-48cf-80b5-f6d69d3672e1",
        "cursor": {
          "ref": "b1296676-46f9-4638-86de-bd577e3e121e",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "fe0e0650-38af-4aba-808b-c619e552250a"
        },
        "item": {
          "id": "a1e23ec2-d389-48cf-80b5-f6d69d3672e1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4bb20626-8138-4fcc-bc46-8a4669ef1007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21edd90a-f628-4f6c-b756-1387b3b030d9",
        "cursor": {
          "ref": "4000d8a3-9d8c-44f9-8072-d1adedcbdd14",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "cf06c43d-1ff1-495a-afc5-b24bf9d3cb2f"
        },
        "item": {
          "id": "21edd90a-f628-4f6c-b756-1387b3b030d9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ca68cfb9-a392-4c32-8ed8-82126f678e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b20d50a-424c-4441-989b-6e60db0efba0",
        "cursor": {
          "ref": "b4526334-212a-46ac-aae4-39a86512d226",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "1d871341-899e-46a7-a1d5-e8a0c4a7af73"
        },
        "item": {
          "id": "4b20d50a-424c-4441-989b-6e60db0efba0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b7ef934a-7c1d-47e5-9c92-a2a137b041ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1953b1ad-b67d-4387-ae74-d8e3d43857d5",
        "cursor": {
          "ref": "35277319-9507-4155-9410-8afb56bedeea",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "253d96db-76e2-4aa8-a649-6780f75f5f1b"
        },
        "item": {
          "id": "1953b1ad-b67d-4387-ae74-d8e3d43857d5",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e492516c-0576-41ec-a04d-e5d7a90c3b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86474e10-654c-41ef-ae53-f00d7a7cdd12",
        "cursor": {
          "ref": "d2babeb7-a57d-4f0e-bbf8-5ff23e18d70e",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "52a69b84-eeb9-4f56-8c84-5a17c2ab99b2"
        },
        "item": {
          "id": "86474e10-654c-41ef-ae53-f00d7a7cdd12",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "800eea72-eb51-4046-99a0-3cb19cc5d55f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f4a69d4-1cb3-42f1-afdc-8b770273e086",
        "cursor": {
          "ref": "38e6739f-6e4a-43f3-aaff-4dc290f6afac",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "8f3b1e2c-9a5b-4366-bb02-143a361797f1"
        },
        "item": {
          "id": "6f4a69d4-1cb3-42f1-afdc-8b770273e086",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b1f5d635-76b6-4263-84b1-16160b9845e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf670c1f-0db8-48f4-942b-bd4551351a28",
        "cursor": {
          "ref": "d168e001-56f0-4d2f-8ceb-f2332bb243e2",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "4ff53e39-22a7-4129-a30a-7e51b82532cc"
        },
        "item": {
          "id": "cf670c1f-0db8-48f4-942b-bd4551351a28",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "af2f6184-a87b-4160-9857-e35d34dc1002",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "4488f7a2-33eb-4485-a7d5-5cc6fd428d2a",
        "cursor": {
          "ref": "424b4d19-c53a-4ad0-a6c9-301481944da9",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "80baa62d-cabb-454e-855d-3716b443b189"
        },
        "item": {
          "id": "4488f7a2-33eb-4485-a7d5-5cc6fd428d2a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2d8da42a-c212-4e8b-ad7b-1e8eba653986",
          "status": "OK",
          "code": 200,
          "responseTime": 775,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8e68ca-2642-4739-b40f-eb6c8b73f56b",
        "cursor": {
          "ref": "70885c8d-15e3-41fb-9139-a3d242eb0990",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "feb7287f-cb24-4693-bf22-1876d467c063"
        },
        "item": {
          "id": "ed8e68ca-2642-4739-b40f-eb6c8b73f56b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2ba6e40d-3617-4f23-a2bb-0bb8eb895122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "29a658d7-9f23-44ff-9c16-fe8c4e9cc34b",
        "cursor": {
          "ref": "ee2d3260-35dd-42b9-b371-fc45d8b62f85",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f69ea6d6-da38-4b59-b894-16982595cc10"
        },
        "item": {
          "id": "29a658d7-9f23-44ff-9c16-fe8c4e9cc34b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ffda0c23-8182-4d3b-b7b1-f2db3612c352",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a658d7-9f23-44ff-9c16-fe8c4e9cc34b",
        "cursor": {
          "ref": "ee2d3260-35dd-42b9-b371-fc45d8b62f85",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f69ea6d6-da38-4b59-b894-16982595cc10"
        },
        "item": {
          "id": "29a658d7-9f23-44ff-9c16-fe8c4e9cc34b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ffda0c23-8182-4d3b-b7b1-f2db3612c352",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a376ccc2-960d-4a66-8f79-5ec8f32314d8",
        "cursor": {
          "ref": "b7a49640-bbf9-4025-87fd-9396659d7dba",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a3419a37-fda4-4a2b-b910-f008f14d26b3"
        },
        "item": {
          "id": "a376ccc2-960d-4a66-8f79-5ec8f32314d8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8a42d3cd-64b7-4b2b-a130-845d34915356",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e83b4a3-6ac5-452b-a5b1-9e179a861b20",
        "cursor": {
          "ref": "829bc943-1831-4b4c-b90c-d6b7359b811d",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "1ec67237-2f8a-4cd7-9a9f-008188bc07ac"
        },
        "item": {
          "id": "6e83b4a3-6ac5-452b-a5b1-9e179a861b20",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f4ace408-88cc-445a-82f2-4ae8183adb4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}