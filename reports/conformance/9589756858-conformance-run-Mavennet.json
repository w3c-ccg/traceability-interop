{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "dbb64c95-0638-4ad2-901f-d73d0e58ebfe",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3d8a755a-50ce-4cbb-9a09-fcd82e872926",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9ba003d6-c018-4e18-93bd-51f1404aa026",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1ee053b7-5ad9-49a5-931d-294a2ee645ce"
                }
              }
            ]
          },
          {
            "id": "ee91f764-e354-4e06-bd77-35b0f217690f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0b2dcc4d-f7ec-493e-8ff0-d58ff0e0ff22",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cfdabe31-faa4-452f-af0f-f8f28a11ed8b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6be77f29-c4d8-43d4-84df-9604ad7ef155",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e4edd176-b164-4772-9954-d37546c6069e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "68441eaa-4fd4-44c8-b51b-070c110edfa7",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed58ebaf-67db-4a1f-b3cf-0affc1cf3685",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "413faab4-5dea-41e5-b0b0-60ba18041cff"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "833e0841-2505-431f-bf13-5be752ad395e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "58dac935-6684-44f1-9dde-f3ee02de11c6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b7c341dd-003a-4675-b817-101c85bf3fdf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "28546b94-a183-43bc-9ef1-3081ebe78421"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "33a1d676-7c0d-447a-8eea-8bb22e16d395",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a34a2ab2-f487-477c-a17c-15e03293aa8c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e54a1c1-f50c-4f94-9fb7-0c8eb4614a87",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a94f5a61-dce3-47da-9dea-59cd274d73af"
            }
          }
        ]
      },
      {
        "id": "4cafec14-efc0-40fd-99ce-23b0f2d2f352",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8d816a80-673a-4f98-abda-bdacd4ab070e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "80b3b13a-0cf7-454c-9a41-0cb370a5a160",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "17625946-d5bd-4a04-8c88-9c1c5849e73a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "365be6d5-a874-4574-b227-a589231555d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3fba2703-24c3-428b-84c0-7ac711936b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35de956-98ed-4fd9-9aae-32ab62918740",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e61b43-ea95-4264-862a-02d494051c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef396bb9-9bdb-42d5-b428-72098e52a5ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a999ca-807e-4288-861e-3158c48839b7",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34bd3dc-c3c5-46ea-bfed-b3a5e413ee98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ab70942-6540-4cf7-9b81-3b1b90604fa0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "739310dd-e632-4485-bec7-f310578d5762",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d574b3e3-5661-4ca8-9978-e0ed031458d7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901358e5-44c2-440e-9ced-66d3547991b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a861c25-d5d2-4f8c-a838-cf34971bbb35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f44c4a-15ba-4199-b9e2-fb29510a75f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aec4c89-56e2-436c-b0e5-2c712253c936"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3336ac1e-2f45-4cbc-9419-9e6d5303fc4c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d23048bf-d4fa-49d4-bfec-b90c9d9dafe6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "531480b6-136d-4b7a-99bf-ad261dc2db62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8a412d00-8b54-4383-b732-89d483b0ce49"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46cfe2c5-1e55-4d15-9837-99c24796ea0d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "c6e4ec00-66e5-49ad-a407-23446d54a7af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ec230e2-8c26-46ab-8438-b6fb01e59ae5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52d1c8c6-1ea8-449d-94fc-d54dd958db90"
            }
          }
        ]
      },
      {
        "id": "84f85619-c23c-4430-b0fa-e73186c26700",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "70f5785a-c74c-4cc1-bcd1-68e109dbb597",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9fe88e4d-3f83-42fa-96da-853deee7e8f5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "af15af3c-e449-440c-9da5-89f4956c3779",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010281ff-c46c-42e7-a7be-0ad762d4c53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6e0a0d2-ecba-481f-ad99-703bec853aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b274e380-35b9-4199-9079-9b87ace85da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2620df2-029b-4b7c-98f7-2471d7194519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d2eab0-a926-409c-bf14-eed1b9656e68",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "639c5724-330f-4553-a86e-8939de2d1a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3f048db-bb26-4506-b2a7-18e78861f2e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579d881a-4310-4e01-ab68-43e8ba978931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "089ecde8-0b88-44c0-bb42-bec3e6d0311c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd12803-d32f-49ab-925b-db88f865fec0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f60cfed-ac68-4bea-977b-813420636616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e846595a-154b-48a7-84c8-e02a4d561aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7caac02e-9b5f-4e7f-aaea-1f4821f8bc50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f648c22-4b88-44e3-bc05-7be9f305f909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e38165d-b624-44a2-86f6-702b046d9983",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c3600e-d51c-4032-83c8-a3604b0cfa42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ddf5dec-82dc-4e86-964b-db7ea54cf3f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c6c41c-2817-4c44-9f81-c16351ff755c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16fff96d-3025-4efe-b87f-88e35f743760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0714eee6-b2fe-4c05-86b8-7750dafb9e97",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad66a1d3-462e-4c75-9d92-23eace34ef38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86cf4d8-2a98-4219-a372-82c98e5da7b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4611428b-60cb-4882-aadc-a93858bc0258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be89e1dd-80d4-4030-9c0b-5c8dbd627686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "150dab64-79d2-4771-b337-6845b8c422cf",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef7d7d8-108a-422e-b01f-efa54eb9f41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c97c376b-1ba7-4afc-82de-b2beb8dfc9b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fd50eb-b359-4b0a-aefe-e18f8c0b3572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ddada74-8a24-4660-b31f-76b1a3a58b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6661b6fb-b88a-4cdc-a1de-c50825d7e2ac",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e4f1a7-51a2-4081-a2b3-c3a9aef299f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e43599cc-30fa-45e5-bffc-230b674a4ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7750ec6e-e290-43ab-91a5-e5b2a7cd2867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c419eb2a-8488-4aaa-bf34-5c92ed75b341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "381108ee-1f92-4209-9531-3c7c7213ccae",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74b18cc-ae46-4c6f-8f6f-e13fc546f228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7e5ca57-34bd-4cb4-a64b-bc7eddcc42ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e163fd39-6cd0-4cde-9307-31a44771993b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f45918f0-b971-4b49-9dee-e16982e1636d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cdfe2b8-f049-4be7-90b3-043677c69373",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88543b63-8c98-4df0-8917-5f23bce24e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4809db9d-50db-433a-b284-5b988e52e2a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b924f0d-2bbf-4d0e-a6a8-61509668fd59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50995732-b1d0-45e2-8dd2-4b4796f840f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70137450-cfb9-4520-bd40-88a112d29759",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef467d7-178c-483d-9084-f76f4026d570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b4c91e-a834-4359-b5ed-e4f4ad9c589e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01560f26-33d1-49fd-b443-0bb8cca2c829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d8a4b70-41f3-4440-9eb8-74f4127642c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56475732-a266-4c48-94c2-70bbd8dda005",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2cc2960-ed9a-46c1-9855-6b24e95b6175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff4a608b-e1d4-45f5-8e07-c43c1c1fd07e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8ca476-2e5d-4ac6-8c3f-d136e7a89b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "761f02f8-ea83-4fc9-8f8c-e02fe806a2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c4c4ff-b6b7-4591-b840-b35951f8e93f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ae7e37-507c-4ccf-9daf-45cf0c1919d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33b3822f-e6d6-4099-a8e8-ed201df7f424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123ed245-405c-46a5-8fc7-6dda1b9dab4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd991b15-7dc5-4b18-a54c-c9b75ad12317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ab1e0c-44e9-4662-b1ad-f5fbb86c056e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12eafc34-2044-4623-a857-f54bb14dead5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f4605de-07f4-40b4-8941-62aeb271801d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750bcb9e-2eae-41ed-a771-11870bd72ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "326e94b7-72bf-4181-b29d-36c20df27a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c246041-6681-4f2c-881b-aa999d0c9d69",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e81dfb-c103-45e6-af62-80afecddb497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24b1a9ec-51b6-432b-8195-a1f099817286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cdac3c3-085a-4907-bc07-9024c80d16b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b7972a9-c236-424b-903b-08ba330db6ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133bc632-098a-415b-a0d9-b305a6a8c322",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d68ec0-8ad9-4f8a-af8e-82476fcd2c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9d17bec-0a8e-4954-ada9-0e01d2d88244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19e1d6f-6d09-403a-b5a8-11710670b287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3192eeaf-ad68-45ea-aaf2-db9ec612132b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df62556f-ff9d-4048-a476-b932d1a0f2e7",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b01733-6a1b-41e6-9246-111a5572fa66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f8a6ad3-35a2-4f3c-90bc-adfce21bc027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1026f58-30f6-4eff-9350-093a2bb536d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2376bd1-df7a-4663-87a2-0e0fe4dae527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5715f83-d5ca-4acd-933d-6f07fd43d40d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5e7cf4-72f9-495a-ad36-3b9781d47977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe5aae4b-2766-4cd1-923b-0c1b73002be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c02c55-b5c9-43a4-8cad-8ef00b1c0998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79801dce-5074-46ad-83d2-b025f7dd6488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69fd97c4-5266-4c36-af5b-f70c3a1b02c4",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6586a3-dbde-4aa1-a384-cf07e654bbdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65cca728-b01c-434a-b697-2e9b3be46dda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f4b108-2b45-43b3-b0b0-5fa6b674cb40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddba60cd-1cdc-4f77-a702-27fbe00961e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fb252f-fb37-4afa-ad01-909bc3cc478a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de0fec5-75b8-469f-8b3f-f546495e9759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a9a43f5-cff4-456e-b113-f1a1d89b5cfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5f21b6-0512-44e1-9a1d-2c4ef84e510a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "77c09592-c3f1-4f13-bf94-33464f03f475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396e146f-9e43-4260-bfd9-9bb51b3a8ee6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f24effd-c3e8-4e07-999a-5b90e9dab80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f5a54ed-c9cf-4eea-8e7b-21acbe205875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeeb2d9d-6882-4df8-8893-49c78c0338ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73713033-2a26-4f61-82f1-d98dd41ac62d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7bc8760-e90d-4813-9e07-895b6c8cd98d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "302177e5-e3e1-4716-b3de-a23b60aecd78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "130ed62d-f5d1-44ff-91c2-2b4268fae7b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aeddd51-740c-4dde-a0fd-4397746ad4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9936f80d-bd97-4447-bf76-40b94c586ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f52acd6-1da9-4aaa-91da-db6604caded7",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1c872e-df38-43d5-89b9-2685d49d7263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f87679-f70b-4e53-ae58-ab78a6ca56c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd29f0c0-6f14-485b-a7ce-6374671ff593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9338049-7517-4774-b9c9-473fc574a463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fbe2a3-0493-4953-ac1c-9183d2450797",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d555768-0a3f-42cd-afe9-6ac73c213e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760a8c37-ce7e-47ea-9ce8-9357e96da795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed9bcf3-2215-4a68-8179-7c52cf47e491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f8d1efbb-34d5-46be-8264-7d8a7bb60bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957e9304-58d2-41c5-8c65-92ddea566095",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b724173-e980-4baa-8890-5fcec8fc5919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b5d7155-717f-43e8-8dd1-908f990bca30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616ede11-d927-4b6e-8f7d-6d01aebc3bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9664d309-4248-444b-8311-4b348d8d64c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d068378a-6391-4f4c-8f78-7333a11e1a62",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd8c767b-5c46-47ed-8b41-123f3df8d261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0f6baef-f4f1-4789-bfcc-01645f2052e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c554373e-ec6a-40ad-a0f6-d5352532a0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9490395b-1ae4-4e19-a204-7e82ffae81fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d7d24a-fcc3-4c75-aaed-8fe3cd08d789",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dccc698-0ca2-433c-aba0-a04ddd64bcd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81f7a579-66e2-4fe0-a397-f12152ff7d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "725aa74e-e48d-4d92-8e8b-27ca790b63f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a926947-664d-4ce8-a486-4cee0068a7f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110bd2ba-56f0-47b7-b9fb-6635f9443228",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9be342b-d8a9-45a6-ac04-304c72758d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fae17ad-20b1-4865-9b91-73a68d3de43b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066598c8-799a-46f5-a459-4abbb4792ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d12acb9-209e-4017-9c7b-72c2d910a035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fadbb78-ee1d-418b-b09d-0679ab99b3bc",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6c8b97-26ab-4278-819e-d3babe772287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba8db09-440d-4d4c-acbe-c010023698b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3b85d7-da95-4aeb-88d8-41c29277dbad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fbe3ffa-438d-4450-a31b-4da6ee4d3b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8194df-436a-425e-9e17-d291f964d6b6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f84d2c5-f65e-4215-a396-02ce0609ecbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9070fd2b-9b33-4e34-9a3e-ae9d10c777d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a14a6b-1e21-4460-9cb4-df0021df06f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bb02f02-bbb4-41d0-a3e0-34179c261888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7c2489-5dde-4563-8d74-5955ac9f8cad",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abeea22d-1d3c-4848-bfc1-c8b5aad0870a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ddf1fc1-e873-408e-9d90-35c13489584d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bfafb40-1078-4996-be7a-88116f0e5116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "55ea2553-999a-4e46-939f-fce2b3383fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d76a003f-c760-496e-8652-3c14f2ba079e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7546ffc3-7b5c-403c-8bd6-3781252f1e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "101ccc1f-5283-4785-96c9-793c575c3376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4ddff1-4644-43f7-901e-40f482959b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "77c8e18f-55bf-4bcf-af17-ed3a8d31f006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50dc8eb5-242a-4f8d-ab4a-d031b78e6e80",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8768fc-b9d6-4570-9cc2-ac2372dd41eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf242e4a-40d4-4c29-8f97-5da80a0455f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c2d629-339e-466d-b435-311df9eac238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "557f019b-2c81-4e37-b818-40f347bf5502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c616df-72c6-4741-bd2c-ae38cf1f7a3c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17cf627e-135b-4d37-a4e7-742ec7e8add6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f61c3008-08af-4db4-bd31-fdbefccd776d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1586c0ae-72a9-42b2-a6b5-c8ed7b57b124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82ba7c2f-1337-4b46-8c04-c548317f3230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf148d9-a710-480c-bd59-166de9c8aff9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e3ea98-16fb-4045-b0a7-4d7741fbba88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7572fbb2-8983-4491-bd6f-79d74213d734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48ce585-5d5d-409d-af56-988fd6d36fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad27f00-b1cd-44d7-ba75-7c2ea2723415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52405bcf-f383-4029-9648-b8ee3d91e002",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d8dcae-708e-49d0-93bd-b846ea40f7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "788f2164-c901-4c6b-b521-db09b7b3b0e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b5b3fa-b335-4401-851f-4b25a6d1bbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b1396ea3-0c09-4304-92f3-9466b261ae7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f5a852-1f07-48f0-a3b4-fd7c2cac35c8",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a926df9a-f613-4947-9c2c-b3cffab2d62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00dfbb3d-4ebe-444c-810a-7ce0620fbc6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7d9ca5-3059-450a-bfb8-78364a0f853a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "34a73f0f-17e3-4836-9ef6-d0bf1db2cf47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe56a719-f3c4-4274-84dc-6efead5fbeb6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c9de4c-0b3a-4a7d-b119-843169f14818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ecb61e2-4ffe-4f91-b607-fac97c41eaac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c2c497-4b0a-4763-ba6f-39b298749dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "36c517e2-a82f-42bd-b4c4-88950c06c12d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac93c79b-fcb4-47e6-9807-568e227fd405",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4a854c-ee46-4e96-a903-e39dd618c06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05b237d1-f1a0-436c-b2e9-1c73b6921115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0c9e96-ae80-41c7-a98c-83047f8f0df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "26abd9a7-4248-4deb-8087-6d8d349b19ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b86e06-0266-4ef8-89e5-ade7eb392d4f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88428fd2-4e0c-44ca-8c92-0b35ad8ac5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9656f9-43ae-4460-8040-ccec35f1cd89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eafb522-feeb-497b-ae94-237e881e3ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d0ea9e-8a75-4b37-a8fa-a5d048811637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca57f58d-8b8e-414e-a81c-e25802d393a5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2fd4de9-5f07-47bf-b761-c78327d316c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de72374a-d094-45dc-bc1b-2e5f2d31aa30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be20f2a1-c715-46fe-b9f9-478ec21b24e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea4dc12b-08c5-445f-9f8a-6be706e1b7ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ecdc34-91eb-40b8-8d09-8da0e6839e00",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59426b0-1943-4f7d-bb6a-c279848b2e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2fd4190-5984-4812-81c1-9829ec3c9bb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6eb4e6-385f-451f-b977-8eed4c18529a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a74303d-9985-4463-a615-407072febc62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b080afd5-5031-4e75-bcc5-6659b5018478",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf253b8-5cd3-4c38-9548-f3a84c05c6e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c8ec42-8157-404a-9082-e86ccc2d5449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "417d79b6-427b-40a7-a8a4-322a80a7eed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "06e836fd-b004-462a-898b-4f3beea620bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f92b774-29d8-4548-8a21-6531371a42ef",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae3e0a7-1818-4319-b1a2-4918a2283109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1a92827-906b-409f-a99c-663fd185f567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c48314-688c-4c9b-ac5c-3b4e09078311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5128a26-9796-4bd9-849e-c52a1166e50c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31255c2-3d5e-4b63-9e1a-2df4d5451c80",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cabe249-0406-4e32-9078-24cb746c4f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8bedf38-10c5-46d8-bb11-502a3a8594b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ab2d5a-ea50-4327-81d0-81527e1219b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "719d56dc-d45c-483c-9487-71d81db3e704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d74a2f-4941-4883-b4ea-c3837cfaf0eb",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faded762-9901-4c66-a1f9-d7ef059453ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f66c9d9c-5741-4614-a247-6725c598a84a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4234273e-c121-43b4-96f7-9c078fcaae8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a61dde51-4dbe-40f7-9be8-529ac78414e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba2c061-ac15-4a37-9cba-d7327e46b633",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4abac90-4d71-4469-8b31-177db3d4ea43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c5d2d4-aa25-45b1-9597-14f29254d289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c5d950-5096-4698-8b4a-a011f43e2501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ff9a136-943d-4087-a31c-50515bbc4139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9711ef61-0807-4ae3-be52-424b4dcba562",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1c54a0-f6c7-4302-b2de-35c9689a156a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73e4c808-cf35-4a3c-9db7-421a1d24eba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1df2c28-ead2-4e35-8a59-6e3eba9de1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbcc3989-f40c-4dcd-9663-6048ba34fc80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ad9d8c-b6e1-4431-8f64-2e4d6ebc37bf",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b7d10b-f47c-46aa-8847-2d1a07cd8e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8033eebd-c61f-44aa-ab6d-b24926e19ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1fb0624-9583-4be1-9678-010018d0d8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69f0f293-5e53-4cf5-92fb-1c55a45b818d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1adc8f11-285d-4ce5-b924-0718d42a2d82",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29752393-62d9-4b21-80d5-da0e2accdbed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab5f71e9-d875-47f4-874c-b5ff7e3de2e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a36ba40-5071-4434-b657-4d529af83e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "81adc792-45ef-4780-ab28-08e4777c089e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acfb500e-98ee-408e-93f3-ab2c67c19ced",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef888258-8d8b-4eb4-9c08-5265cae0321d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e48cfc31-c3ee-4418-a8f8-13116250b812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7107733f-835d-4571-aafc-6de6f4c32404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ebdf12e3-5459-4d19-9703-51f4041fea02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb2aa9a-c63e-446a-bdce-193315385962",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a72ae24-a562-4163-9460-4ef834351162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e8c4d0e-7cd7-490a-957d-6c89035207cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9183fe3a-74ec-4996-8417-6643c580d47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b098f86-6758-4c66-bfab-6b18566ace36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f92b2b-d062-419f-8cf1-5d9be9f67f96",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09af319f-7bbc-4e38-b9a7-e22bfb42ee78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29bbbdf5-2eaf-43f4-9daf-e8fa4f95c408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35054127-c99b-4876-a506-2ad9d41cc7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea7e8ba7-9765-4518-be31-8ac56ac087cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b50d6f-8276-49ee-903b-7909c67626f5",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17382a8a-dfdc-42f5-a33e-41b97687723d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c31efe7-f536-40f0-afc0-04b21b6e67ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee89138-bca4-4d86-a0b1-f132efdcd609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7525da5-e27b-4946-9c10-f6e2cb18b2dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb37d63e-cb2a-4b9e-b095-c8f865666c0b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc84834-9672-4d9e-bd4c-2d2dcb487f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dc9263d-750b-49ec-9a5a-f9fcce094832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e5c9496-1a00-4524-9b45-c33e4f7fdf5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0449010d-a2ea-4733-9443-48ad162617d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a871b5-e395-4322-969a-36a3bd3770ce",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ffb1f1-a628-429e-9484-632f50b95410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eb4e5ab-c87b-478f-aa4e-b191cd9cb055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a000fc6-e52d-4cdc-9ffd-e1a798092912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92cba81b-4b9d-4615-ae1f-c4fdcc5b5c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a40658a-8a96-4eb1-8d74-6ca3dad0167f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc9fc79-7871-4a9c-bd3f-d388e102c29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60ade681-fb55-481f-93d6-7e7b2511bf9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70119164-9232-4437-95d2-b44b15189a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "52190020-45a2-4c9c-a745-ccbd91ea2d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f83af517-868c-4daf-9575-7e7dbf347d74",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01bead81-b833-4000-97a3-2b16bbe4b5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e78e5d8-8fe0-4d61-aa44-e4a67ce78ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438f534a-b48d-43dd-9731-84764eec6b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ae778ed-2195-474f-a7aa-a2fca04c6e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c174ef-2211-4148-ad0a-558953b3edb5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4973fe5e-70a0-447c-9687-9c7c0f9a1e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c543da4-ed0c-4486-9d85-b379be596c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9223a6d7-41c8-4e73-aa80-13c676a29a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa3b253f-1049-41fe-bd22-453649935835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80490d1a-2b62-43bc-b512-b90b2e0c35f0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72635ed5-36bd-46e3-9aa0-0cb120253a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a63a25f2-424d-4f78-b990-71c48a9a68e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622a1999-d9a0-4071-b543-32976e5f4393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a86fbac4-7acc-4275-9593-111d35537bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a323802c-3ca8-409f-8963-2ef049d41de8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f089e5-dd0b-4545-b433-cccf286a8bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8626e685-f25b-41d4-9536-bb7010435247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f1cef0-1302-4223-98b1-ed7110d2f2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "48b48e2c-69b9-44ac-8199-3cd02822d300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc620acb-2994-41fb-b156-252d9bd6ff04",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cccdaf9e-45a4-4539-85e1-d43fa6bcfb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9086e661-502f-4590-8f39-d092b88ed10f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef22b11-134e-4646-baf8-3d1c5e042ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "52bff707-fee7-49bd-b776-c68db1a2e6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a086c8-1ea4-4056-b5a9-3f5e249a9c54",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d3e134-56e7-4743-a2a1-ff3697cc5bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b1d8652-508d-462b-ac47-671feeed07ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1475f2db-31d4-434c-b683-831c58b891d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "94525fe2-9094-4b3c-9971-1aed97a7b176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84266750-a9cd-4f2a-8730-9b09f7b4461f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43cd082e-634c-4480-ba71-e6470660e3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8007ee42-11a6-4ff2-a423-ab48cc9fdc24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be00bd3c-f098-44f0-ad56-652822112bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "933a7a56-d0be-4a75-81e9-fb779c5b2eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4414fda-54b0-44d5-a17b-61e62a8ab210",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b788d1-fe6c-4e3e-b17c-946bc5e94e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6e37015-0539-466f-a89f-2e735676adfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65fbd282-9bb7-4c1c-b6bf-24179d6efefa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca324eef-3280-4cc0-b326-56694ccb4107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d550ced-98e0-46c1-80c1-435f68c834d9",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0082884f-cdf9-4248-ac1c-da01a436ae29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac6e0dc7-88a4-487b-bf87-f1c0e17fc0e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f345de7-7502-4b17-a216-2917836837d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d9ec3e9-303d-4582-b623-bf816a0e4a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e064e37-da79-4aea-bb0e-be99cc3a9356",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b7adbcc-d6bc-4a5d-a1c5-fd6f7a618af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d57796d3-f3d4-4b60-ba52-2e742c946594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48d4d26-2d2a-4ad1-8f46-bb2d0bdcf8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "66f932bc-d713-4b01-b162-2bef16979f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918f38c9-3899-42b3-9503-fb509f435637",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5474b7fb-8fe7-4054-a53e-02e450869cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "716d13c7-e0eb-47ac-b9d4-266381aded8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc7555d1-c7e6-458a-970e-bcbcde90f7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb30be9e-1ee5-4813-a2f6-7b3cd00c1632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04eb3a18-fded-4feb-8025-9320cfbb7529",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac8bdbf8-7851-404f-b29e-9e51424440e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f855276-90b4-4832-8ea7-eb2b5849aca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531964e9-9d4a-46f5-9e9e-e64b24ba1d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "90379d88-04d3-440d-812f-0c2e652cd6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2296172-1831-469c-88ca-01f30b90ca0b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "090881db-bba5-4d70-9e16-f4760ca2d46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5da22c40-342a-4cc6-946c-f205331dc6e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db76d4f5-d4cc-488b-8543-d4b5fe981ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "24448f99-697e-49ef-bfc1-a878bd25d48b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b20955-8bd3-473d-a018-9beac956298a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f9ba75-7eb7-473e-95f1-dec7f0b9d6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b530f08-fdb4-45c0-92e6-bedf2b9f413e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed80b23-9c7b-4896-9795-d39cc64723b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4ca7077-8598-439c-827b-13c046a50939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4815f1-3dd6-4656-b2d6-63f9c1a903fc",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02bed616-b20d-4750-b5e6-85f9454fe4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d8bd10e-a175-421c-b886-b6acc8d195b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a413821-a7cc-46f3-9e4c-2611ffadd03e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7646e248-df34-4e36-b16b-0dfd53d17377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3216f81c-0280-40e1-afa7-63c18527cf72",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40857a07-18a9-4e2d-9c13-4c6a594424cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2752d85e-bd9b-476e-a280-40119702dbb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35096fcb-f3f0-446c-930c-94b5432f5159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97b6feb1-0b40-41b6-bd8b-c3787a4245a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cec8ca3-c8c4-47ff-9fdd-48951bb07e33",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "172f76c5-bb78-46c0-8eec-5a337ac0bb86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3370de09-8612-4534-971b-9a6efabcd83c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85ac017-3fbb-4266-a1c2-dd19c14ceedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "202ed329-e2b3-42fb-a70e-c29d16075b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d025bdf8-4519-4d4a-bc18-fc7ee2557d8c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba81a8c-1a42-450c-9074-62830e81bed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc5d565-cf61-48a4-8479-fe2f11c3429b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96fe6134-718a-4f34-b6d6-e55b9e303a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0f5d8e72-d2c4-4856-9c9e-8e23c946cf9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c384be5a-5e5e-427f-82fc-69ac4cc901cc",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab0f560-7e9b-4fa3-8732-eee9483fdede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41084077-34f5-41b3-b4f0-c2f552744a2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddafb2d1-5542-40e8-9402-de484c1e989c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d90131b9-cccf-4879-bb1b-41742a744eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9759ee3c-27bf-46cc-9f12-6bab1f903f15",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa68f618-785d-46ce-894a-d74694980d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "819dd3fa-ab9c-498e-938b-edc219da4cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f386ec8-0adf-45ed-86f6-8483d7ce4aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d0f1cbc-7182-4f3e-9775-f8333f0c3590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ef2ffe-e6ad-4568-a82e-79e74dba8364",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "768414b2-6a56-4ad8-b068-44120069d996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "331bccde-8b64-4b24-9393-b1f3b88ac152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1965dc-7402-4b84-8867-b501c89e378c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3abff1b-9d3a-4077-8148-9cff102104ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e0b79d-d190-4f66-bdea-7b6c7768b3af",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b67ff3-b5ee-47e0-9e4c-3c56f84a2181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0e869b-c513-4f25-9c01-f031ae0993bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6358e7d-358d-4175-a281-f522d9041b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "47f740dc-900a-44d2-bd25-7536378bf125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff156afa-75a0-49e4-adc1-342ab598af24",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "041650f4-e8bf-472e-b8a2-3f713ac7c942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa47fe2c-4e97-4a27-b937-cc84b9698b19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d991c965-db86-4371-b5be-4ba255cae27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbfe4401-156d-489c-a95e-9db0816fa2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a03eb277-c177-451f-b1fc-a4667af89edc",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9173aa-f80d-4f9c-869a-a657cb2aa964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27ab18e4-5f1f-4b59-9d65-5044ce3dc897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4806ff05-c80c-47b8-8946-b979ccc0cfc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78a56f43-0aae-4e93-9599-d9f7ffe44985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5a011d-21f1-46e9-af5e-8ef23e985d0e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec428403-4273-4679-a545-53b9af371c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc4bd8b4-0f1e-4f5d-8a37-6bfc685f7a4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7501412b-f742-4272-b133-31307f9bdc54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a05efaa5-92fe-4d21-b6ce-f8aa90d0b020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2dc074-795e-499d-8a9a-144e77c2c7f7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af27ae7d-7cc6-4c38-a8fd-7235585fcb81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b3ee41-d044-4929-946c-719c95685b01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c1e590-840b-410e-95f9-89f9b3b214c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e40c526-00d1-4515-b5a3-7e306271a6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c95ae6-45f7-4905-8f8f-4496277e7159",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb9206e-cc0a-41dc-b03e-e851b54be7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04b084a5-6811-4597-80cb-4f20c3c98569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7099a3e-dd10-4483-a816-c91446f2a478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab3b0165-bd2b-4028-a31e-717c03c80e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff09ae07-deb4-473f-83b9-b488e678f476",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a132ff-f9b3-4600-93a9-88f3c4a5a9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7404bde-0e64-4264-ab60-4bf91344623f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2825b69-dcfb-4ff9-afb0-6ac03be7ffd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "96a7017b-0d1d-47a0-bacb-85a39bcc37a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d8a548-88b2-420d-aee0-63ad7a956f1f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69df931-df3b-44ae-adbc-e666acf5522b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a50bf49b-1e59-4672-9fc4-bc246ead99a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174e41a2-e177-46cb-a554-510bc9c617f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d46b206-e946-4dcf-86cd-33936bde1ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750b335c-61a8-47c5-8300-0026f4198d82",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3ec226-4b11-4d65-8717-dc7687322b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f51cc70d-ebd7-468e-a59d-f436bdd8ff0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb68a34-379b-46ce-8fc9-8fa5d32449cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "664d2ab9-24ec-4dd3-bf33-0b2b58206962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f1a1225-54ea-402c-bf0f-0852cbaefe24",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668ae59a-46e9-49a1-bdaf-4c25796424bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dabdcb60-4992-4056-afd7-24026e3b6e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d5caba-4671-4511-9adf-a3f7e946ba6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "283e0e3d-b940-409c-8d35-a87f696b5dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d974469e-ca86-46e6-9512-5525275bacd2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b50c6bc6-9504-44e5-b769-3564a169a87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ea9e08-b2dd-4fe0-8ed1-49f50fa33472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d052858-e007-46f9-a6a5-88860185955d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "45c23410-632c-41b6-8bd6-370d41ecb5e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3237fba-53dc-470a-b540-8e48b4c2aaa9",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ead45e-baaa-487e-97ca-d310840635d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfba45c7-0d98-4cc9-a255-8cbedb683e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fc4df1-376e-4d3d-a32d-947ce3ba071e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "15ed9559-4347-460d-866f-64a007419fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d623a18-aab2-4804-aaa4-8a05f939cbfd",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc2d637-37dd-4fb4-97e5-a88dc828d9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f2a2c8b-3e22-4784-8e76-cee23eff27ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c273b23-3296-4aea-8c5d-ca5775866878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a14afe5-c4b4-4d65-9b4e-d24016697995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa117db-ccc9-4497-8733-2cc6d893bba7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e49c5c1-99df-4185-a0dd-71eca107f24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "594efa7d-0636-42f8-8744-b46b9ce6957a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f451a79-cb2f-4228-b164-30494435a852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c70c122-56b8-4960-b39d-a2ebc419fe5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68da46fa-be7f-464f-8261-b6c1ab298a84",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2210099c-bad1-4009-acbb-06bb93263313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4f614501-3171-4962-acbd-d00e97b62922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8976bd7-08b6-47b0-9cfa-edb8b93d11f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3f04a73-282c-48a1-9201-d9e4127546cc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4e4a2e51-8680-4be1-ac41-70484c24de60",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1fdae7d1-2d36-4c11-85ba-6754a7ec27b6",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed3b6be-c653-4f99-bcd1-938a5bd287c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2fb7d43d-0296-42fa-86ac-8d9a3b4a9762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7243a657-f673-4096-abcf-748589cf5285",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "518b1768-2e74-4f49-a7c5-7b8480c75702"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e236a98e-aa6e-4c1a-826f-e6aec65f1ede",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "190c9308-e67b-49da-a15c-8c9ec3c95fae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "142ba473-9b9d-4de4-aa81-b498a8401617",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c01ade8e-5470-4dcb-9d43-20a0c80b6e80"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "07b38d78-a9eb-4287-be5b-273379eb7c68",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "76d6e2b6-0718-47ae-ac8b-0511d1d61cd9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "155a0b92-a037-487d-9038-cd13638cfaaa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bfd885e3-8c66-4082-b3f9-461b055c31fb"
                }
              }
            ]
          },
          {
            "id": "7782ac1a-b653-4527-9ee2-0598a2d98989",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5f9f3ccf-f570-4df5-9e21-44f625842783",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "fd7517ab-4a86-4de1-be05-5fbe564304e5",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0fe277-324e-4bf5-86a0-e9ed525ecc68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "04eb69ed-e2ee-44e8-a6b8-09869d62f2b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee6ef99-a987-492a-90b1-be87806bd8c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d314af-d27f-4948-ba98-eda02d8c511d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "62aed15c-a1fd-433d-b4bf-233ee1705c99",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bffd1724-b5bc-446e-9852-b451ddb3e129",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f9e1787-7bbd-4359-8697-dceea8b82419"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5abd1157-4471-4a62-9597-623a9530ab35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f309e867-af38-41db-bf3c-b89a406d3eef"
                    }
                  }
                ]
              },
              {
                "id": "e683104e-e13d-4630-ad71-5d8e72e25e10",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd8ee79f-c45c-4823-9a29-27be999ac355",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "593780d8-8785-4c47-a282-0eee976bca0c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33e8b97e-8a9f-4b00-bcc6-069b2c53f600",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b1e885c8-73ee-4d1f-ae02-dd5caf432f1e"
                    }
                  }
                ]
              },
              {
                "id": "911a30ff-def4-4b33-8dc2-957ef22a257b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36f14a0c-e296-4a37-afd6-a6cf221672dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68682dc8-8d0c-4031-bf53-22019c518904"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4edf038-0579-450b-8600-62665cda9a14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "91fd44b8-56fb-4a7c-9c65-35525ce7fdb6"
                    }
                  }
                ]
              },
              {
                "id": "b581a742-d910-4178-badd-adedb309c817",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4024c256-5ce0-41be-8f1f-518b1d97add9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a0aeda81-d2d4-4691-a01c-42acadf2cc5c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f358fb0d-062e-4903-8620-73c64273d98b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6e504c70-37d1-406f-9b67-576d7cbf94b6"
                    }
                  }
                ]
              },
              {
                "id": "1a0c162f-79de-4aa6-b40e-31b7f3ca428e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "03788943-4cc3-45a5-a9a6-9f8609877faf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f3cd4fc9-93af-4aa7-8c86-757e3d67b0e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6be4fd41-a9a8-47cc-9680-f9da6d4a14bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "08732efa-b2d7-4ffd-b62d-c3e6cf36ee84"
                    }
                  }
                ]
              },
              {
                "id": "482e9375-941d-47d3-b8e8-5bfeb9c59be5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a371cdc1-03e6-4298-a80d-914897587347",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a0996c6f-01cb-41ce-9895-49da7d704e68"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0910daf3-8a6d-41ba-a6b4-a1e113a78598",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3ac0eb6f-ff2a-4777-97ea-8ee07cbec74a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4ff1e88f-ced5-481d-aefc-85819d37970b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "05acd1d2-15eb-4813-9ec8-b916353fcf8f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8b6566c2-165f-4d86-844c-41fa7d8c4904",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7d834fd6-8d18-4c12-958f-504121e93048"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c9db43e-f990-4d95-8cdc-29b3fc07faf5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2b6e8e18-07f6-4a12-ac37-370b321b4467"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "150c720b-8987-44c2-9721-60e5c6e2ecb2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f5c21ae8-eb67-4f7a-b7a5-6729d4c92ced"
            }
          }
        ]
      },
      {
        "id": "5c483823-2095-4903-846f-173bc238a783",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2487a72b-5080-4581-bec5-d620caad4a50",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a2f8a218-1246-4c48-b19a-66486a45154b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7fe1b32e-96bd-4ca0-9cde-71b3df8c0463",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d0f5e7-2750-4f4d-8e33-3602ff0b05f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cd62b1e-c817-4165-8cd8-e11d3694922d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c5080a-3e81-48f1-9f2f-270499e528c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d051a75a-50f6-4b14-91b2-4828335f0e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb2d562-823b-4195-8bd8-cde47c2b1138",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc98e3d-7b50-4c73-b4f1-c86c9334be30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9b203f0-7087-4cd0-a41f-c7988ed25c27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0382e2-6074-4270-a4bb-e70a648b4749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff65add7-d16a-42c4-aa6e-603113f71863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f7a759-f2f2-421b-b4cb-e10041902795",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b97271-eba6-495c-9ed3-4587b09423a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3148e9fb-2f6c-4af5-bb8c-325a7527123c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa021db-8764-4b04-b797-dcad1735db71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1390c4d8-e940-47dd-a5f5-995892e9ac40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c10252e-68ba-4e54-a176-22fe04c2ee14",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1762a829-a94f-42f8-9752-850ea16d4b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddbae76b-4f23-4a7a-b645-2fcaf8c77c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "252cd66b-4002-4b27-aebc-a369bc0dc785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be5fee6b-67ef-40cc-b651-2b9561610341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fbc30e-68ad-4f17-99dc-887349b908c0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1727dac5-32fa-47f7-b60d-1b8e561a79a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63dc1a69-06a5-438a-a0e8-a690a5611d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5dffbe-c987-484d-a8b8-be400d4e89ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe1d8612-fe21-46db-aad2-20faa9a09555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8c53bb-85ad-4846-a768-622a0a6e631c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9601168-8a5e-4559-815b-0bee55c41c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04121759-856c-4457-9109-6b5a2c43d4df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753e2fc9-60f1-44d6-a910-37d0d9cf6067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "285777f5-d4d2-4bce-a6d5-f960bfbb8def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990b3d54-7385-4512-81fb-4049f0fe5dc0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "347a987e-0a8a-4ed9-a9cb-b2f0a8d58b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6873d064-8d4c-4272-84a4-515f7a87fc27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c71d85-9d1d-4d5c-9c5d-dbf8b600de1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6427692c-6e22-4d72-b3fc-2b4aac67042b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2603d947-ba81-4f08-8ead-b2e0bfdec420",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86bcf22f-3667-4810-a69d-eef07f7418ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc116d78-b5ca-411b-84a3-b38276d0bb3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac420b7-218e-4a85-8879-10602850646b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b55177c-8afc-466d-a99f-4a115a5d2334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f155718-1e7b-4296-8ffd-c57d57518d8e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46768c29-70d6-47af-8420-2959996111c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dc858ea-3220-4418-80d4-cdec40cd1f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18ce79f-fb23-44a6-a45d-93053e40300d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ba882b-b8a4-49ae-a7f2-76dc817a523e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c3ba49-3b75-4891-b1ad-f9366f4ccaba",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef72dcd7-f48d-4191-8e47-623e98cb934f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bd1446b-c4e4-4d65-86f0-25ea680d3588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcd775a-48fb-4d2c-99f0-606b131ba058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "70d04352-eaec-40af-8d72-08fc442aaa48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cdeb5d5-3479-4646-93ff-54aaa35421ba",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3002f47-208e-4c57-9d86-270c62a9c5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29d48ac6-f510-49f4-9bf4-1e890c384cb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b9cadb-ef87-4421-bbfd-a86d85ff861c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "698c1ae3-49eb-43ac-a54a-40a7608d8a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb93a2d-47f0-4d60-bdf0-fa8aa989ba1a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "039dc884-30e9-4d03-b257-eda11f266c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0047530a-aa34-4634-a458-d877625f2d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a617d31-b4ce-4ee5-aa2a-88d00138f381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b98a0f66-ce2a-4b6c-a2d9-3e017288c124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e869f42a-a9c5-4896-aa8f-90fadede4657",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4aa35c-e534-4245-b7ce-ebba504b2539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12607502-f2a2-4b80-80a3-574f660b27f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a164e661-1307-491c-b8cf-ef3d125b50d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7c7fc78-31bf-48e8-bbe2-78dc9c1a8492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867bb37d-72ae-40ac-bd9c-4aaf735bb9a1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6954e394-8765-4dd6-b700-162efc494a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62dbae81-fee4-46f0-88c7-7c725265d649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049ca4e3-f699-411d-b0f4-0a30deac3fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "32daf234-e672-40b7-9421-b832c6498d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee0c9ad-d459-4e3a-ada1-23e310e198ca",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b47a742-22bf-44cc-b3c8-f5525bd2dac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed07d054-5859-44f0-bb52-4314ac64ad94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1827e5d6-60ef-4ecb-a7e1-419d41c730a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb4cb924-8c4f-4b32-92fc-1d73422d8e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f625dd95-5297-4f74-80d8-7c5c0481e8b7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7771c2c-7ecb-4034-bd8c-abc9efedc666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a46b509-6990-46a4-9617-f766e5451267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769aa2af-db3c-4d8f-97c0-5160b83d448f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b46fbcd-379e-4d5e-909f-177ef082ba01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe1f470-9c1d-4fdb-aea1-dfba41df3704",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3352d7a1-1b5a-4677-a9e4-cc63c65fcbce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04c8ca2c-6070-4397-80ab-ed0e31063800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb77c6f-d20d-4782-97f1-3b41ad7d1357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "480a096f-18db-4794-9061-629865088d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf508a31-735c-4953-bfbe-626c5d352165",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89b18ce-f695-407f-91ec-4f692e9fe488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4fbe1f0-e6a4-4f8a-a588-f12f78d7647b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac757ef7-faaf-431d-87e6-99fe8b2f599f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "109aac90-ec4b-4f39-8f89-7388c332c091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401633f3-e978-4785-8e51-168ee32ecccc",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec347fe-4cc9-4313-86b5-421fe912ff54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3c7d7b1-6b39-4770-9ddc-fa3704ab70df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da10e33-d505-4baf-92ca-bf1273100f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf83b96b-7bf2-4d31-8128-dd26cb39026b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f6a160-2673-4ed7-b2f8-5b699624ce55",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4523c84e-e427-4f46-9af0-364e0b54d7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6390582d-058a-4c68-89b9-af7e94201055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8549f0-158d-475c-af51-42a41acf5b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c9965a3-e92a-4e05-b0d3-cd431e8efc2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3148fe83-7dff-4de2-8c01-a9dafd75ac07",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ebb814-f783-415d-a41a-65f414a32d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "570093d1-1d3b-490c-b1e8-58aed5b271df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7aa40d2-2957-46a2-a0a6-ef9bc6f01a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f68774b-33e5-4d63-97ed-4b56642f2a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a8a76c-6046-4a3b-ad55-3d8fd8641429",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b2bd4e-72a8-42a0-ac54-c681b9ca928f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38cc56ad-4e5d-4357-a9dd-ed17152657a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b377b011-0afd-4ab9-8994-db9738e3d9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24864015-14b7-4dfc-b205-85e8ee2ca0fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2673a80d-8536-4b1b-99a9-16f91e3a4fb5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2aec549-7edc-4d1a-8099-5e7a04fc0280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a05d23e1-643a-464d-9dae-3e778cb0abbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38de9a6-a3ac-4c56-97d7-5fb143f5903e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1305c2fa-3081-4466-8ff6-d6566893fc68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40b74d1-2731-4cf1-88ba-e11ec31a8239",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50145986-a71f-4616-a239-71c5a58cbff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2a4faaf-ffce-4dc9-ae23-7809e0d4188e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928a785c-5d91-427c-98a8-b1bdae102d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fc88fb6-e449-4bf7-b194-ceddb9787a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c601144-c1a2-433c-8cc7-efdf0138e46b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c67bcbc-f25e-45c7-9521-7264954bedd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b8c45b-d525-4e82-8872-c42002d47399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b0ccdea-e682-4864-920b-5970b721f149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74bc3c17-cac4-42e9-b17b-ca9047cebf55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5467ea88-673b-4390-af22-2fdceee82147",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18420b8b-4dc3-4146-918f-b1120a2dda0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a56e08e-e75d-4ff7-a2ff-74bfb791d037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0393ccc4-3932-4df0-8a2d-789044302c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "324e7e23-9fcc-4d19-8363-7bfc81577468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c13f34-8190-48c5-b8b3-7b12c2bab536",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58adb812-4fa7-44a5-a78d-1342355b4938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "530654b2-b6e7-4b2c-b7d5-2ce7a6527fbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3d5d35-fb08-4026-8694-5cb908a700f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dff041f3-cfec-4f28-a1b6-60af78b4d05f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98abb232-8fa4-4741-a031-850761c0f06a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d66d62-1723-4ece-b938-2c6092298f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6131ee5-170d-4289-8bb8-8c0e9d56ec97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8aa139-07ab-4946-bc9c-877934ff9dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97ab62ac-8a83-462d-844d-d5f4139d0b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8252145c-84b5-4d10-a984-24957d997b5e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6d5c8c-6dd7-41c0-83f7-301fbe74b714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd13929b-2038-4ac6-9a12-0b13490ca2b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea77844-4244-4fcf-a9ea-75b63851ffeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27eda2b2-b86f-4256-80c5-c18ae426c088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c80804e-657c-422c-a826-d722e8d044c1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4762cfc9-1665-46e5-9e93-6561fac08d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea9eb04-8614-4cea-ab8b-bef28ebcdb89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e553628-7f76-4ffa-a93f-c763fb113824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c67302e3-0609-43f0-9ba7-3ad0776c01b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "812a903e-bb08-41db-91fa-6c426eca8a25",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4623dc0-6b5b-40be-9509-dcd6e22aad9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cca3aee7-27ef-4b87-9dce-3665f3b48ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e051dd-0d88-4f38-82d8-ddc839b0d74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ef32843-0e6c-4ff5-993f-382c4894cdf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e817e5c-8f60-4b74-8339-3adfef673883",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "980c2be6-56cc-4ff5-8946-6a52f16484d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c45b9758-1b84-49cb-9e6e-21911b5b11db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8cfb14f-cf52-4ac9-91cc-9c0a3092c9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f718626f-10a6-45ed-bf87-17416b93e12a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a76f3d2-ef35-463b-904e-294f79e634df",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73dd34ec-38ae-4bd2-b183-7410cbc76caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9c0987b-c8ce-41a9-b9b4-a146fb5295a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9797bd-1050-46ed-9bf8-e58e3465cab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9950c31b-7eda-4f4f-921b-717f77fad2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800f5004-4d22-4c2d-a90a-fdc6238c5d01",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5322788c-3f94-4424-9104-f55fc9213b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b91cf9b-91d1-4cb4-a9ea-6bb97c7552a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80db729-6a73-49b4-91fd-603f10b42fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fad980b-74e0-43b1-b232-1c7c832771a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53fdf5dd-4eff-4fd6-8016-5373e9d80ac9",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b5ddd7c-f0f3-4e27-a3c4-c34736ed629a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8784f80-9420-4e02-a99a-481bb9b71113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3988eed2-2265-4030-888f-f2c8d77192fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa5776da-e478-46fd-bd52-ba5d6b845296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2641ce-d186-4ac8-94f3-bba38f52dbde",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8854f101-d3e9-441f-8214-1e710b044c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492e44f7-ddd2-4a7c-a8bd-5d55338c03e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052405fd-0774-401d-bedc-0172b4229444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a177d81d-6c9d-44cd-a8be-b2b14e5fc4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b3d13b-a1ae-4978-b2f9-be6481ad186b",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb1f4f4-e62f-4909-a80b-8e4573c60224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf3b477-9b88-4f17-b830-8a3bb100d80a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79fa70eb-40df-40e4-b608-e27fd24a366a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f7ea78f-173f-44c2-b37a-198f912d691f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4deaceac-f095-4730-bce2-6c5eadf2e483",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3ce5a57d-b4a2-4f2a-9a3f-32f20cbf2bf6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba43c546-1ee7-42d2-b168-05388516876b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "94f7fa6b-acf2-4970-8b89-ff4559998700"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a18b0cf-d8e5-4937-8093-34f3ed4a328c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cbf2e771-abf5-4180-abcb-6db44dafb122"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1df90725-16aa-4d05-8f36-0237921ebce8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f37e4580-ba48-4bcb-ad7c-29663ef0103f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "49a25034-fa05-4330-921f-c3107dbe9006",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a09f1f61-92e0-4c18-b292-0287a1af7bf5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dbbaf1b7-f7ee-41d1-9197-5a999b35a90b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4e0d85d8-a071-4b93-b6b2-15ac36579cda"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c99001c-633d-4590-a953-3f556529061f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "220474bf-54b2-4b42-a5ba-7995c5fa4ef0"
            }
          }
        ]
      },
      {
        "id": "50bc4ee6-45da-4673-a343-690c2d4854bc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f0c07493-7b83-4eac-8c21-956f8ea4725f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ce4b3da3-8143-492c-9c41-cd4beedcfa26",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5f33499a-9800-4201-9eb0-65ddf266af2d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37ee997-7193-4373-bd74-ac67c33a23b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b126c028-e54a-422c-bdda-275701f452e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0382bcc0-c0af-424b-996c-db12e9f8d05f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "470a983a-2cc3-4783-91af-2abfa932d12d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e8073d2-b3bc-4779-ac49-03548bd41aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d944cb-fd22-4600-a6b3-ca6c4bf13694",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59f7a33-2ee9-4da4-b590-864c4882c32f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de9c05d8-08d7-4c37-91fc-fd01f6b8bf7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25d8115-e8c5-461e-ad26-5f503aa8cb11",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8e1990-4b99-425c-b28b-07f7bcd2123b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37575a95-def0-4515-a949-d19cdd212f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d81e066-df5e-458b-bfcb-029324583256",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c227b80-b981-4dd2-89ee-c60cabf50507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3171568b-6bc6-4b3e-b1f2-c62d4fd114a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59bf2f73-d73b-4e22-95c5-5609cb2acdca",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b96ab90-2b4a-4b8a-851f-ed89d2f02b84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faae2029-e2ed-49d8-b7a1-3b34ed42d544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6aae6c-6d16-4d7d-b8bb-b0c8b7da8e9b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5faadfb3-a379-4947-b6d4-94c4cf20cbb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15646d8f-2840-4b4d-9f76-87f24bea6a1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73207488-b12b-4de0-8def-01d2412bea40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d03aa312-e2bf-4c91-b636-1113aa175b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eebabf6-b68c-42f7-868e-82fa2b414ac1",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b402f13b-30e9-42d4-832f-3126979a3164",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3ea2672-9e01-4a38-9920-04c52f5bed6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a13b52-dae5-4613-a48a-2ffbd4031102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8796ba87-9a66-4864-a702-b876bacea128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4126bf0-1c09-4ea0-a8db-126dd817d3f4",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bfa84c8-ed2c-494a-b819-89bcc75e825e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "624409f8-c319-4f52-9f9f-9053e474da46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f4c1cb-21ba-4cc3-8b2c-85414fb11ace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9efe41e-22bf-46d9-9f89-d3c4280c3c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62062935-84d0-4d79-abfa-21b4d8074161",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38864e9c-2817-42b9-a280-36a3bf08a30d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce457309-3fae-406a-9219-e19801cfdf62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7e3868-a5c0-46e6-81d0-9a69f8c7e282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b42a454-4159-4364-9952-61d472af9994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25ea82c-67a7-45c6-b4ae-300572bbe69a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d932cb-453a-4497-8b7a-45d40777fbd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f18e6c66-900a-47dd-90bb-c681488b5185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "964aa745-70cb-4520-85f8-e0cbb664e296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67ffd8d5-2919-4366-9030-db36d522fec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f1ca6c-cfa1-48dd-99dc-6a88ee1bc7ff",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f569574a-eaa5-4d04-a0e9-eb720d2eded9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee48cea-2f0d-4a24-a87a-95135f23866a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c148f253-2689-42e4-b00d-46fb686a2117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c1e5e6-739f-4987-b187-d2534585ddbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7420dce9-166e-4c20-a840-1dfd60ce6d01",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb42b73-f57b-4fd8-9891-a4b8b52aa5ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32d6f09b-c6a6-4ec9-9872-037798d4377c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d14d75-d4d8-4e31-bf1b-544d617b29a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c966e433-3444-40a3-9343-d1ddb6d2f7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45685467-a1c8-4658-956f-3c3bf46eb081",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00050e53-2ec1-4854-b5ec-cf18794a0b45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c27213a-e9a7-4344-9362-646c43a51700"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1a8ec2-a984-4bfc-a432-b2229bac5f49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d8a17f3-28b8-4860-afbd-3ad21c8c01cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a451f77-28c8-4177-92d1-a711a394a2a6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d70df8-9314-40d3-a5d6-6ce9a1444834",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "309ac77b-80f2-49cb-b9fa-5abfd3bfbfdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8605a2d-5f9e-49c6-96b2-f89093d9fe37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d25b4a7-68aa-4550-ae34-1e91148b55a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "729cec4d-f580-4de0-8bcf-f59d5782bb2a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e688dca5-2dfc-4bd2-bed9-8003ef78c1d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8a06be2-8b3a-42a5-8c0a-14dd97236a2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93031c0-673f-42e0-8cff-d51acc7defa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34b964ed-9b6e-4711-bcb9-dc6f3d8209b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdeaa9ce-a863-4b2d-85da-b3814272d1cc",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49750fb5-8198-41b3-903d-a3739811d341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5b15a3d-8317-4a6b-b4d4-419c57162323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23ab9c0-46a4-40aa-97b9-0d1b1d418adb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3bc7208-1b07-4143-a08a-d37720622efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27802ebe-2905-4b42-9f4e-104db77abc0f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f53e4372-ddfa-4b16-8fb9-40ad96019bfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa90eb6-eddf-4934-b17f-2e5a6617123b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "421a9c8d-e1bf-4d82-a431-2a6daddf1aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bcb2e50-d2ff-4576-a1e9-e6d25814cfce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19f29eb-1602-45e8-9e46-c0516979328d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194f1b97-c3f0-4258-a1d1-edec25d23b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5d5098-41ca-4f71-b558-993fdb62af67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ba4f03-7a67-44c5-a4e2-4fc71a256bea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53bd0d30-9da3-4102-a523-cc8b2c5d4d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9749101-819e-4109-8607-271ba0c772a3",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de1de9a-6578-457b-b2a9-98a6b4b7b2ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db88aad9-635a-4e66-9733-832d9c39fb51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4066c24b-6e9d-4b1b-8a66-4e7f133a9e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "220baedc-1177-46d2-9b20-eaf0cccf02fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d12f4f-e902-48e4-93ed-807402765261",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f629e419-6c64-46f0-a485-9caebd37cc55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "828c451d-7905-47f2-99d0-4f57fb8f4810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "873a7110-860f-459d-88f3-1ff0ffdb207e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d46c52-7234-47ce-bc71-dc4d42efa1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6b81bf-ff67-416f-882d-0f0ea6796918",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad522fb-65b7-4cc6-ba8e-faf68759bbd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2796379-f549-4bc3-ae37-8eb60f28f329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6544561c-e915-45a2-b7bb-1c0d921de7e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ce0184a-7220-4991-84c8-9e40ceb6075b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1353c1b8-0eb1-42ac-bfeb-e83074befd53",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd9c213-db6d-4a4f-bdbf-25cd689ecbf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f546d6e0-72cf-440e-9a45-91a98af978e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea450d5-97f1-447d-a199-7186919c4e50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4670a4d5-ef34-4878-96e2-377c9bf9673f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec8ad4f-91ba-4081-b1eb-54000df86338",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11625171-5f49-41cc-a6bf-cfdac2ede3b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5877624-acbb-43b4-a963-4c9c3a21a6e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fddbc26-70a6-477a-ae57-e3ac8f91bb76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504798a4-402c-4f17-9aaa-0043e606f9a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9086b09-e611-41c2-a171-efd2ee7dbe0f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3a2f7e-ea08-489b-aa19-ce3118e98a87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b0a88ed-ac0f-46d3-8726-34385b2ac8c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99e36ac-b625-478b-af10-b64ba2df1222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4c487b-9fa9-48ea-b73f-ab513088e4be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "853305c7-feb3-40d6-9703-4be2ce975f9b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1437ea10-4818-4a24-a012-e8fe1a442784",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc0fc90f-4b01-4d7e-af84-5a3afcc08c9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a873e6-61fc-4249-bde5-9111ef0137df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39ce7707-a954-4348-9352-6fd1de88ee4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424864e7-03b3-48f2-bb10-c60e0eed2e74",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d323f0b5-8420-4b31-ae36-1ea21a751667",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b60b0d9e-289f-432c-9af6-7fd285016507"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a30dec-4143-4a5d-8a94-6dd5a04c2d5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "548b7303-96cb-41d4-b413-c1df92e9f5ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de03789e-5a3c-43e1-b2c6-5b9dc7616b88",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc0d30c-ac3e-49f1-aee0-8eee538f99ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "567cc539-aaaa-419a-afb1-bbe6d633dd25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f554e7-c792-4ddb-995c-8cfec77eac19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d77c149f-e063-4764-ba87-4dad0290cca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ea26fc-0bf5-4b68-bb7c-fa9efa1623b9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b8a60ca-958e-4060-a9f0-8f2c97011dbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7797dd55-759c-46e8-a120-d7d78947f055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffd4322-91cf-4ca3-8734-5e6cd5128441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f5f224d-8f34-4010-aa99-dfec8b7a9bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065667ec-e5c1-4f64-8ea7-00f554d55d72",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09a557d-69df-49c9-b693-7bc0323a2c5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efd2312b-d9a0-4cd6-b568-1519be766d9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc0b5ff4-bf02-4062-ba6c-27191ff07f14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b5b6f53-3783-410e-b64a-90b62065f639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf56af3-adc0-40b0-9e9d-a10e2edadbca",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3862e7c2-6125-49e7-9b55-72ad7787aa92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86513bff-09c2-448e-b029-9c847c49fe6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27da8f1-666f-4b12-82e3-d3718ce8413f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "788b625a-4dfb-4ff5-8508-e71c11667994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f45b073-f6b8-4611-b841-f4df7106998b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a60611-70e0-4531-ad3b-db1d5421a946",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdbb31f3-4552-4847-965e-b2a61f43908f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "841ed203-51d1-4115-acbf-2aa19f7760ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddaa7cd0-0c5d-4c92-9ad1-e2baa4e1b8ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f76b985c-27bb-4e78-8b8f-1678f963ce42",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78224834-25b7-4795-a63b-6ab1662d1aa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a490c078-d936-4d67-a36a-649b420f99be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f4cfea-3fe6-43dc-ad5d-261afda5cdc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a5e7e33-2219-47fd-840a-7aaaa0cc75cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c1b273-5f55-4061-b166-5fc863e5b6c2",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a08f83b-90e7-485e-aa84-c913bfcb436b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b93fe53-5254-4f33-bee4-eccdc7fd0397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6e8a8c-9058-42fe-b3b2-a5f41ed26428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94102f49-6874-4cb6-b6b7-d3819d771870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf01861b-2b1c-457e-81f7-ac39dca7d12e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376e4db1-84cf-44ac-b736-a7d35be4cf34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac3c0961-8165-47ee-9454-492471b67c60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa460f0-f721-4410-aa45-d5eea7674181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddcf7023-d4b1-4329-bfca-12ebf04885e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b5fa2a-de1b-4639-adf5-ceeeb8405c64",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3b2f8e-a30e-43fa-baf0-95270a4105f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb7fc14-3b85-4272-80ba-5e277e8de572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef4f1ad-1ea2-4e0e-82ee-1f346c013169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e2597fd-1745-498f-b8fe-ad017ab3ee74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53def593-2e76-47e0-8ccf-73ab9b1a61ab",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df9d47c-c10b-4aad-9877-f27981130459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e52fe7-30bf-417b-85f1-6efe1d39b7b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70077299-838c-4eeb-9fea-06354042b05b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c14e7c0c-9fc7-4024-acb1-9c953322cea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c6d120-58af-4801-914f-6dfe45a655c0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e999089-7bdb-470a-bdc0-8a5ba611cb77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d89d4d05-8160-41f5-b13a-4bfb3fd80e08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d048931-2f20-43fe-aecb-bbac5df1d065",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ddd3a1e-7b8e-4af9-ae5b-1038d9cf48f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777273c6-62e7-46d6-b18e-72707833c17c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99154b72-0257-444f-a910-8be6bc4643bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25fd9099-bd46-4ed4-9af3-85ab1e5248c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee35d799-038c-46f4-8e71-b06aeb9ca98d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4cb5edc-1359-4c0d-bdb1-c3323ad04b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a09cf5-53a2-443f-824c-b58912e70cf7",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a49eea5-b58c-435f-bb46-371dc2f28a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "910d0721-7d05-47be-938a-f1a4404f49ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc49a10-a6b4-4b86-bce0-40e6b42e6a7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ffe837d-c039-4430-aa97-147dc09ac2f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9969202-c290-4d89-9e06-c8d2bd9b5b6b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219ff0d2-4695-4c7d-b9c3-2403e3048974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51d6ac11-6758-4ed6-a1e8-bc463a4d2b4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66feb8d5-2f44-4474-a0dd-86bdd5200edb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5aae95c-903a-4ce6-b3c7-80c9752cc785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34f565a-a17e-4c6c-9aff-f2870d6419f3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaed5cb3-85e1-4eb2-993b-1e8d6124c918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa58724-b7f5-4e8c-9beb-10ba1e54dd5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "328d20f0-d141-413b-a840-45f1558d681a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2820af6-b6dc-47d3-9546-c1f1613624cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6987b447-fc6d-4519-ba00-371cf4646879",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29891f0d-28a2-491c-a79c-f0c12c2b4f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec44999-e7d6-4c9d-9b92-050291ee2135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89fde39-e145-405a-91cc-0a3d0afb62c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82a7d232-b94c-4b83-b0a4-48abe93d8f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc721f5-1853-49de-92ba-b54731e9fd59",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93c0b71-efeb-4c52-8bd1-a737ee5d20ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8400846-5616-4af4-ac50-056a89f35044"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32de3558-cfc5-4d69-9929-91f573548fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc40c6d9-8503-4aff-bc25-012d8e33a20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9343b4bb-8bdf-455b-931f-f64b9eac42c2",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a8e119-3591-42e1-9a71-3fc0c2f148a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eebc955d-211f-4db7-8860-90c20b3da6e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36456f91-a6c1-4434-91c0-60f380e13ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b7d9255-fdc4-49f7-be0a-31b99c91c9f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcbeee3a-99f8-442d-9638-d3eee0ee0978",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7589d040-f8ad-46c0-b6bc-0a6ed1ed59e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08d5a92-3ba6-4c2b-ac30-fb570939c668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11687b0b-299c-416c-b8de-86939d737cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb99660-3a36-4cca-ad23-3eb4b08d444e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629bb00f-2a4c-4fe4-9130-8c309cdea578",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bfacb1b-27d1-4c5c-b305-6ead27ac3cf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7b97983-199d-4c73-b6cb-dbe09fac7cc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e88211-d3d9-4595-a22b-cfcd89d63d7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "525db22f-819c-46fa-9634-01a070c5f242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670096f0-d820-4adf-93f4-82ec8c3b5296",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f397bd-3437-46de-8e96-6b62c9157a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c332a7aa-7255-474d-8328-48ef5af082a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "505c50f5-2ce7-4d5d-b0eb-06d210b57906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a9bcf7d-0946-4e06-ad5d-ee953e8ab299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5a0dfb-639a-49d9-aa84-0a1ccb2ad7ed",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b449dee-db23-4208-92fd-e0f32bddd155",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b4c64f-28ae-4ee1-b766-dae9a00d7250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc01e4e1-bc35-4351-a72b-e85e22a948c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c754ced-7c1c-49ce-8a46-292b80e24c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff54d23-bb0e-4317-8e62-31292c1f8eef",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f4d386-2d4c-4f1e-8fa2-4874ba852f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b2c11a4-abaa-4b9b-aeb7-f658418669fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7f0c87-e7e0-4d71-933b-4cf6eb08f501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b4b1157-7ebc-4d46-b059-50c7eda7b9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27da0adf-1220-4a61-b1bb-e1eae818a1ee",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3212605e-c51c-4688-9f93-414e7757f0b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e78808-6b14-4d15-bb05-15d04880c40c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ccf885-bd0b-46f5-b916-b4c30ea16a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47ca6330-d612-48c7-840b-0c580521bf5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3bcaced-007e-4acf-95b5-fd3f9185d579",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556262c0-1a9e-4581-9d60-2901aaa467a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e65e82-04dc-4176-8e07-54af0655ed54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f088b1ae-68fd-4261-80ca-1e7b69784202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3afce684-9e39-49a1-ad19-5b0e8308170f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3435faae-f2d5-4a8c-a951-e56cd69496ad",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6377330f-60d8-448e-883d-8011c6bb8224",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7676ee40-d016-402d-b53b-4ea6414275a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52c9a57-7fde-437b-866e-c2e14995ac74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d6cddb1-7c51-4b29-867d-68d3abc3631b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741be28c-70f5-4c54-9462-4ca395d0654c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b443cb-c52f-40eb-ac6c-87698b2352ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95a71fa-037e-4b92-b383-d8cb45a36b0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49033c58-9e83-4cde-a834-444aaee75368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30a275c4-8163-4f63-86e1-d62f436f5a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f8f26f-449c-451c-8553-0ce2f89c8c26",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6a1b01-9272-48f4-a09a-9b6bbf227c91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cd80d52-fcee-4851-a1d6-1113786aae50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21fcbc5c-dbe8-4717-9c93-3896a6321391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7880bcb8-9dda-4d67-a935-4efd5f0c233b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352ba3b3-9b56-409a-89ad-8057236cb78d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450998c9-cadb-49e1-8e48-f421c030e134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6fc2c3-a5c1-41fd-9752-68a1cc528626"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "949c8310-0ddd-4aa0-9bb9-343976c43b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9988c6b4-9516-4100-b71b-f1261ddf6b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e1ef07a-8896-4a4b-ac13-5122df042df0",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f3de84-4da0-4f56-a396-953a14234e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7098cee-2391-427c-889d-f59dc310c756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f9c1f5-07e3-418f-b74b-7c77b69b9409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74633d99-7848-4dc1-8581-c1d9eadeeb6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d75e81f-f1ed-45fb-8747-b7c4b4fe460e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a753453-6ce1-4951-b976-be55030657f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "872470f2-4783-4052-ad7c-d05d8309da91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b3ecde-e71d-412d-a6e3-f6aace3eca01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "644c071b-f397-45d7-b442-d4507d52ca11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f87c6c-bded-4558-8949-acc4b56c9aee",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3ee751-1397-472c-848b-d10f64d0a6d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54649a34-4d8a-418d-b90b-ffbcb1c65a5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9c685f-c961-4ff9-8cf2-0b45173e9ba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ba70798-6536-4509-90a9-cfe605211eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb8d225-136c-45b4-a2f2-6a2db0379957",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8847464-8c24-4335-b60e-aa08db1386d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c20250bc-25a9-47c6-a9c1-a582be32e4b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b7b88a-bfff-48a3-9fb1-2532337083cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d23dbf-1108-4ae5-8034-999a6b626d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f535c30d-ff14-4d4c-8ff2-58177d54a8f3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db264ae1-a4df-46a6-a966-b3a8cb206b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5517a9bf-a9d5-4e7c-a2cd-cd53060b4cf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42dd34f-4c0c-41c4-a1d6-2ccf0cff4886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e765938-b7fb-40a1-8f26-d6b9cfc81f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546f8fe8-1536-4ebe-a236-0d18715d7ffb",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b12da36-7d7a-4163-875c-e862aa3094e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d0a4b6-8d5f-4ef3-a885-f703f84fc266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ae9581-999e-43d1-b994-752a9c160a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5439d431-ac1e-43cc-8d47-412fde5398a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601f670a-b866-4e22-a23a-0965d440aa91",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4eb628-25e0-4a6f-9082-dc7e6d0a842d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f538b7d-9611-4a3c-a79c-81f6784cb38d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dae30d7-0e6e-4246-9c28-9b1e96acd649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f19f652a-9e8a-40b7-93ca-e50cefdaf12f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb21467e-924d-4bd2-9dc5-7aa49fd1dbf4",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9fc2237-290a-4bb0-b874-03f65ade6001",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b89efd0d-df97-4e2a-b712-9290f9fffc6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b59017-5292-4a05-9c72-903d2532db2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "878123d1-a665-423d-9376-76c7e230adf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6256599-15e1-4bfb-a485-eb63b8b61d8f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb470190-5763-4f24-9bf5-d150827baecb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67666e5c-a849-4daa-9510-7db11895ff50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be817c4-c270-42af-bdea-192b68fca65c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb071ae2-5de1-461c-a268-813c52f2e113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "954667b0-5b8b-433b-9b0c-da51d243fab1",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "544a53a0-1fc3-43ec-96ed-fb0a7611b6fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "349e4460-2776-4b29-b9f0-b356cf8f8235"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29740e1c-4c6e-40ef-b4ea-6aa7ad3b772e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fcd5da7-d062-44a7-b7da-932567c5f172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7acb4c9-1623-431f-b236-f5d12493a2ef",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb78623-63a9-4614-aa07-a3e8be1188bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cd2e2fa-75a0-4972-8c7d-b52ea864e389"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4556e257-3e76-4af4-b712-0f73b76b9a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "038487dd-3d51-4d2d-9513-97560099fe02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f5acb8-cba8-4fc4-ae4f-58c0840befc5",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b07192cb-ad60-4502-b806-759d421a450b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33833404-2ae3-4744-b660-e3f1ba54dea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34b3b6e-0d22-4f16-ac38-b0277b5a9ba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43209b12-96b7-4f5f-9067-fc8c26ae0c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f652067-1a5f-4410-a7e6-1286b09530fc",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1205268-28ef-4900-b19a-aca85f58b7ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5549dbb-7798-41ba-80de-568abdb33116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c45cb7-12fb-4e9d-9d2b-15ef779dd8db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae068988-dd31-4a45-b902-0f8b6aee737b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8abd2bfc-add1-4df1-bc6f-e31e11d47701",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369c9c3c-0b5b-44ef-b81e-873c137473df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77053dd0-1ef4-46a0-b24e-92ea3a54108e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee3a9f0-6d49-4cd2-81bf-421c646929f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbea9144-5b7a-457f-8d72-f26adac963ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0883eaeb-1459-4e02-9765-217f3eeb653a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fecc5e84-1c0b-4f7b-bc3b-82fb058e73ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3eb41ef2-a0d4-48be-833d-957e6e8d840a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c713fd5-59b1-49c1-844a-b4d2fa1290b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bd0a16e-71f2-4efd-8249-9e32185fc7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac00a1b1-c898-488a-a982-8a8b3e3eb42a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d866f7c-d30e-415c-9b04-2fd15b0861af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7f16880-4dc3-4279-a55d-a5a5e66fcc24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb99f5b-612e-469f-8ade-0c2b6974b433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f22542e4-fd10-4fd0-b620-cf8b483ee3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0da0c30-e3a0-4671-abe9-f120791f9b6a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5071b9db-7b60-4740-bff9-80e44db885fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f67c1469-271d-4581-bad6-234e25845251"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cce048a-65b9-4911-a726-9030313c6a9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a407116-9aa4-4995-a909-9aa4455f2480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84852413-d54c-4121-b89d-dad0c319c2e8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b332b4be-ad36-4835-992c-c51e2babd333",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe34009f-270a-43c1-abb0-6e9954909637"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7e210a-3b4f-48a4-b570-08c45ba7aded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "979bd899-0d6b-4a18-93fd-652edb4394f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c3cabc3-bb32-4ef7-a4d5-879a7f638d69",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85495986-1b83-4690-bf2f-ad61c3aae861",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9a70f11-782b-4387-8d2f-f9ca2fda3f5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc342ff-a7a6-457c-b1e4-f874bec18ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63d917fc-6ed0-4dda-92e0-e7ced78de2b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "122464da-0f05-4391-94df-8bc89a54dec4",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb98a63-df23-481a-8366-48b27e9ff89c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68d56425-51fe-4f60-8f15-ff4c3a0b12c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e87801-4f9a-4885-9320-ddb8d9acec4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b011e03-0ef5-4d4c-a595-afb1587d0691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2ea3aa-5c02-4c23-9584-ec28b3ed42b5",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b662b61b-0670-46be-bf65-a71a84419a7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8443bed-8de2-4109-b8d0-a50fed0e04a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b1afcd-9585-4f79-9eae-71f6351d9ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b57d91-4e17-40eb-9582-124953ff030a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b412e4ad-5736-417f-9414-c801175b974c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e4c7f1-cb89-42b6-8ede-78b3378fd0e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5832cc5-73e9-42f5-8feb-7c2d81fe9ae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b4ae01-98fe-4858-a883-b13eb325a63f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5631a4ca-7d1c-4473-ba78-d69493a64e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f30413b-6018-4ad7-a018-7e95233d8a16",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6cdb5a-06e8-4094-a45d-3c1c05b722fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d951f652-de46-4331-826c-dafcd7da6cd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca63c016-8921-4333-94a2-37020289d050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a46f828d-6bd6-4c08-9dea-de79b0825d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86e46ba-b8ac-4eb4-a954-13a7d8e9a1cf",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811e49b4-aa9b-48b7-a75c-db80b31bcc8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19e36b0c-76d6-4048-bc67-f24fddd6a893"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af37f59d-2b04-4899-834c-0ea7ea1ffb2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6dbd996-0396-4f63-9ca2-4f19a486172b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d687b4b-7754-48ee-9ac5-f30c2287f6d0",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7892df56-94b9-44a6-9b0a-2d91679b1250",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afaf92d5-f7d3-4642-a9fa-8cddc8d8f77b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d373f803-a9f3-4179-a9ee-ecfc8cdbe876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "828b9cbc-5c94-417b-9e54-c26e46f388df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "889fe809-9a97-4005-9b03-ade7ea6be0ad",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936dd438-feb4-4d4b-b47c-2bddf11c8ac0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dff2a37-c5fd-41b1-8c1f-228c658ceb51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c3d1e1-71b0-458b-b73b-2f66a97b0544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14c53e0e-68ee-4850-9384-28269ca4d59a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5ba854-7f93-4ef9-9cdb-9790eb7bc0b6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e717e2bd-83d7-4ad1-9fd2-dc862e4cc3c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98ce5bfb-4d49-43a5-992d-34e53d5cfb87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4c02d9-bd76-46f6-b800-f4115b97b57b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88586b12-9dd5-4488-8ec4-e044bc2e24e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c87a51-308e-4327-8bf0-8fb9e3b4dfcb",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288e7556-f1d3-4a7f-b480-4949caa11a80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39150971-9a09-43f2-829d-ac1405e4c12d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9529414c-6650-4133-92f8-768abdd71f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d15b0e-e7a8-4c59-a2bd-a8678308f520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e419f6-ac85-48b6-a20a-eed15d09f1bd",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f65752-365c-4426-a7b5-b10a51e73942",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34f31411-f4c0-4c42-94f0-3fc7a434a7d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09528934-772e-4a6f-b4cf-5e4c9b9aea02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28e121a1-1f14-4796-83e7-b185e777972f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e4458f-6f9a-4373-883b-933ec2f5fd39",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8f651f-b776-472b-9c33-0f75a89299ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f9bfc69-307f-4854-9873-c2465d798283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5408789-aa3e-4712-87fd-2317b351b91f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4d6c9c-dc3d-4617-8f13-da3ecced52d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ee83fd-566d-4e1a-b546-66990830bb96",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8b6d42-2032-4a56-aeeb-8aec48156a0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27ccd110-e2a1-4535-84fb-d1fab97331c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe53d211-08bb-4655-9442-7945a8bf0e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a478009-1eab-4d53-8b91-ada90030e0e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ae1e1b-b179-4513-81c5-0f5b8377f062",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b935bd-8936-42d1-8a6a-7560348ef5b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0794a3a-1a07-41d5-9711-9a654c53b86e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d08781-4d53-4b07-9c30-4a995ae20074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b76f8414-2f6e-401f-b97d-0bf6537206ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b859c562-13ed-4eaf-8b6f-4cb8853aeb22",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b64bd0d-fc55-41c9-b50f-eabbf621fdf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2739eda-6756-41fe-8e82-feb0e7a5b97c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07cc821f-4bd5-48ab-85ff-258f1d4b4043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1705bbb-be7c-4e25-8ccf-aa119ec1010e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b64c44-9e8e-494d-9c2d-8f9c99538c54",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbb789c-0893-406a-bda2-f82dc9eec779",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cfcf224-56b9-41fd-9f31-54404a79241a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76dcc3e7-77f4-4484-9370-af885e313c34",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f06e72d-aec5-4293-bd4a-2336a9373e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e0403d-d335-4783-97e4-871ee77a3e05",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6779ad58-4f09-4a3f-ad15-d33dddaf56cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3ea05e2-218b-472f-b8ce-6d22dfb719ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0568f64e-6fc3-4ae9-8cb5-e54751bf16de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7057af7-b383-49bb-ab65-52a4d7e924d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa020d0-946d-4b44-8477-4abf53d6b269",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5178a3b7-b0ed-4766-bb9a-a7563afe09c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee413849-ed74-48ba-b9e0-02acebf3a002"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a4cb45-0e58-46ce-b1e0-b25b19cfc5de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b52b5f-99fc-4f5d-a482-68a257802cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe97b8e2-fdee-4be2-901d-bb48970f1f3b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d0d4bc-d531-488c-b296-701d5d6b9b3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e073859-314d-499a-b722-394bc76113a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6432c9e4-6482-4f76-bdf1-f7d65bd4d9d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b092c181-d187-41f1-9ee7-af9806e9b6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5a51ad-e17c-40dd-96a9-3d7e9acb1f76",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a84f704-658d-4720-a8bb-feb3ac25e946",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbb67f50-73f7-47cc-9a99-30e7202722bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f94f472-ae8d-452f-9d0a-da6a29ff40cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3d77719-c074-4bed-b719-10f64d39f4bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a920eff9-a5f4-44c6-8264-1e2f5e4c3549",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ff87fc-6a7b-4ccc-84d1-2d4e4657ed8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "970ed560-8cc8-4bc0-8c35-4efd54697b02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4076346f-751f-4a26-88b6-04c35d87a36e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6260736f-296e-4cee-8709-173e5ab5418d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d9d4e20-0831-4b48-98c1-19323ec32f53",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68dc6368-820c-4480-bd9f-b5a042afc66d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6491c0e4-9ee8-4781-bbff-c4ac92ecb011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c45ac4-57e9-4f58-ae7d-51126afd76ee",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38b7a927-036c-4fcd-b124-fed0a9621617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8f87ee-c19a-474d-8c47-27596933b7da",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5b4c55-498e-4064-801c-83a2735deda7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa03f5b2-d6b2-4e09-94e4-3c14388f239e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "390c9b28-d042-442d-8f63-d7817d26a4f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a92ea78-3ac1-4d6c-a850-5ea33c43253d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9f35cbf-1b47-482e-b4d2-c313fdc06d72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1cac4901-28bd-499e-b500-db623d70adad"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dedaf28c-c1a5-40e0-a6da-48a65c432ac5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6937a0ac-ee1b-4020-8b20-733e08faf79a"
                    }
                  }
                ]
              },
              {
                "id": "ef5d7c7e-9842-4bc3-b629-1a74ca656c00",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11b9ed23-3ecf-48a5-8722-03a44c53c557",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e21c06-bc7e-4f98-95d9-45a31cb6c6ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "61e16b41-c50c-406a-86d6-81d8d53c45dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90343cd-7a64-435f-84db-3891fc722713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "109282c2-3c0b-4506-895c-1053babb6c9c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37d328ab-edf1-4d9b-a3ca-fc60bdb3e425",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e406daff-cb4e-451b-908b-651f629bc5ef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c71e65e0-22db-4760-b6a6-a0498e51c1d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5afb79e9-b834-4ea3-9d4f-57727b04c03e"
                    }
                  }
                ]
              },
              {
                "id": "c83b76a9-2050-42ba-80e0-50fe5ea397d3",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a7e8f894-d0c5-4039-a5b4-1dacb1f51f8e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7956c655-f57e-42d8-b2ea-f7672d8b9aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "cb51ab27-5d30-49fd-9c8a-b02ae8f09b54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1618cefb-13be-4a8e-a44a-bfcbe9ea5100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "775de1de-530e-4322-93f4-4195ecc034f7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1c9bbe1b-55f3-4590-914f-310544ef32eb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1f0c4b87-7c9d-46b9-a9b6-830fb62edfb7",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c59d73f4-292f-416e-8c9c-2665d68ae000",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "55d4f0e8-5b33-4a4d-829a-57a532bc27f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ca22b48-f007-4b5b-bc27-2951477e324e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e9da67a-7e29-4b86-957f-81a60c14f72b"
                    }
                  }
                ]
              },
              {
                "id": "da44b518-795a-4805-b27a-bf73d47d3bdb",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "95e4d896-901e-4edf-995d-fe759ab11d69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "02686abc-e51c-4c7e-b63e-37c60dd946fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba7ff2ac-f5e5-4130-93f9-645622eccf28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "676a020e-1143-409c-9afe-b1fbd3e8db37"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8728d82c-f202-4afd-b718-60c22bd932d5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0aae3180-29fb-44ba-a111-f4158a6ae766"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a13a31f3-7e1b-45de-accf-f7e55b312fb8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b2701d7-9daf-4bda-bdd4-18ceb36b7c1a"
            }
          }
        ]
      },
      {
        "id": "1511549a-b408-4dce-90f4-2a79380b0204",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "69a1f712-8926-4029-a167-70efa52032cd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f0cfdceb-0242-4e2f-89e3-48f9164f1519",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e708fcd4-b2be-42bb-9ee8-ba01ceebdb2d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7840688e-490c-4333-97c1-0571b422be1d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f6f6fe90-d522-4857-80f0-bdf3d02df8e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5de876-bdd7-4d73-8652-875d921be91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b752329b-38cd-490e-8bc1-b338840e3d5a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1410a782-ab86-4c1e-83e1-7c4cebde4cfd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c308aea-c659-4554-9088-182b9f5e8ef4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4539da8b-8770-46d3-a4b3-0789f3c24485",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88732936-39cc-4ac5-8c71-2f5cc4b12ee4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "64ff6099-dd67-4ab9-9966-6f4211150238",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "33fd91ab-c72d-449a-b599-088f84d46d2a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f6c6183-41d2-4788-9557-a6f8978d952b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2dc18231-1fca-485d-801f-6489ad1b5de1"
            }
          }
        ]
      },
      {
        "id": "0bbdd279-2826-4f6f-a8ad-d6beee43dee1",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4c090c0b-838a-473e-902f-beae533bf651",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5799e11f-8f77-4616-a6ad-141a9d200ec9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1eb87600-3ac2-48a4-bc83-62c97337a7d7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd97a40e-8e91-400e-b167-6f3bc613fde6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0a77353-7a10-49af-95cd-e3736e3a48a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9329d5-6be4-48b1-92d7-c0037efc40b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc090d67-12dc-4342-b706-1006dc9ac157"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce8cc246-3863-4464-baca-38eb2368a4db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea05dec8-3ef1-4c95-b361-8ffdf7bcd480"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b95e7fb1-40db-4e24-b71c-42dca68c0af5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88f8d9a1-1560-4542-8058-02376d34a177"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c0f1860-0ea0-4f39-9506-2f34502027b1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4a7ec5cf-c2be-4902-b482-907ae0e6290e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61ff7a7e-0adf-4734-bd33-43505964fd06",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f122151-84d4-4f4e-8f67-0851e72b6a63"
            }
          }
        ]
      },
      {
        "id": "69b0a855-fefa-44a7-b5ac-73b0cb78d153",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2e5c6c8b-10df-4fb3-9cdf-21ebb1584950",
            "name": "Negative Testing",
            "item": [
              {
                "id": "27ae4f13-6a33-45a1-be25-16b964a0eb74",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b37b091f-c30e-4ea4-921a-d252434f165e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1171c1bc-1bb7-45ff-b7ae-eac95df84edf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "305e6b4f-dc74-4572-9ca4-fc02b1781c39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e035d439-4a12-4fde-aec2-4549807574c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a1c18b3-e532-4b5b-b4bd-792e50b177f8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "beb79045-fddf-427a-8eb6-50a82101d9a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8158e2e-c8d4-4993-aeb6-0adb206e4167"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd908565-62bf-4017-a033-f9ee5dc011ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83225571-d233-440f-9653-668490c3808b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8ce5fec3-14bb-4e05-98ea-35c36731e5a6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d4987cc7-d4c4-4b7e-8cc2-d9a8ba9a7ca3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f9ef0044-dc37-4154-8a4d-7048a27cf32c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ca3f6ce-3986-4085-9c35-846be0fffe22"
            }
          }
        ]
      },
      {
        "id": "b8b1e026-97db-4d55-96b2-da600e94e5b7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5ba3ef63-ef2e-4b2f-9f73-5b0de6bd555c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "006b9303-4f30-4ee0-9751-84be2f2ad074",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b8a3ae6e-b237-4f2a-9805-1abfe4c54f05",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5318af9-3564-4306-a748-0dede4ffd533",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0ac2ea0-9681-48d7-80c3-721d6434bc95",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 72.59126984126985,
      "responseMin": 7,
      "responseMax": 724,
      "responseSd": 82.91994850632909,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1718843848128,
      "completed": 1718843874962
    },
    "executions": [
      {
        "id": "3d8a755a-50ce-4cbb-9a09-fcd82e872926",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c95715f1-ed58-41e5-aa52-7ca1c3b639d6",
          "httpRequestId": "fb54a61a-66c8-4e8e-901f-f76ecf99afba"
        },
        "item": {
          "id": "3d8a755a-50ce-4cbb-9a09-fcd82e872926",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5c792b3f-c9fd-4795-bef2-4b13df1d2391",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 0
        }
      },
      {
        "id": "ee91f764-e354-4e06-bd77-35b0f217690f",
        "cursor": {
          "ref": "37a053e2-0a7f-4fef-92dc-ffdeb5a3af21",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "824cdeb9-faaf-4bc2-bb6b-fc883f7ae8b7"
        },
        "item": {
          "id": "ee91f764-e354-4e06-bd77-35b0f217690f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a7d86a66-fc79-4f78-b925-20f8c155d326",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "68441eaa-4fd4-44c8-b51b-070c110edfa7",
        "cursor": {
          "ref": "e59b4376-4cbe-42c0-bfe7-d011eb3d6d6c",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1e792769-372c-4d9f-ab61-0f499c5e8f01"
        },
        "item": {
          "id": "68441eaa-4fd4-44c8-b51b-070c110edfa7",
          "name": "did_json"
        },
        "response": {
          "id": "021eb1c4-7f9e-4b62-9786-24f79b4ace6f",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17625946-d5bd-4a04-8c88-9c1c5849e73a",
        "cursor": {
          "ref": "1f120d31-f472-4f0e-9263-a2989feeca58",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cefe0c6e-f71f-4607-8e8c-89d4066cb15a"
        },
        "item": {
          "id": "17625946-d5bd-4a04-8c88-9c1c5849e73a",
          "name": "did:invalid"
        },
        "response": {
          "id": "0ee69e65-7106-4387-aab3-8bb5c59ebffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17625946-d5bd-4a04-8c88-9c1c5849e73a",
        "cursor": {
          "ref": "1f120d31-f472-4f0e-9263-a2989feeca58",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "cefe0c6e-f71f-4607-8e8c-89d4066cb15a"
        },
        "item": {
          "id": "17625946-d5bd-4a04-8c88-9c1c5849e73a",
          "name": "did:invalid"
        },
        "response": {
          "id": "0ee69e65-7106-4387-aab3-8bb5c59ebffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35de956-98ed-4fd9-9aae-32ab62918740",
        "cursor": {
          "ref": "4fc4bc9c-b407-4848-93c7-0937e21e9877",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9d92f9ee-4ecd-46a1-a7a9-35e8023d88ef"
        },
        "item": {
          "id": "e35de956-98ed-4fd9-9aae-32ab62918740",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "dcded1ed-8d9d-43a5-bfc3-c8f51128715d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 156,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a999ca-807e-4288-861e-3158c48839b7",
        "cursor": {
          "ref": "b77c8b03-73ed-48b2-8667-38f099fa5f03",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dcb96f5b-ffc3-42e2-a7a5-97e27e8c7a53"
        },
        "item": {
          "id": "45a999ca-807e-4288-861e-3158c48839b7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bbfa1d07-2383-41e4-9475-eab7ee8a25c7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 68,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d574b3e3-5661-4ca8-9978-e0ed031458d7",
        "cursor": {
          "ref": "3cbc04ea-0a04-465b-8eeb-2d9818feccc1",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "899cfe8e-655f-44aa-ba4b-ed3deb226c1e"
        },
        "item": {
          "id": "d574b3e3-5661-4ca8-9978-e0ed031458d7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ff9cc73b-e9c5-4e29-8c13-821a0b41a711",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23048bf-d4fa-49d4-bfec-b90c9d9dafe6",
        "cursor": {
          "ref": "5d5a528f-72fc-4911-addf-033a6637000a",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "edb04b93-c05a-4c52-85fe-5701a7f2a1db"
        },
        "item": {
          "id": "d23048bf-d4fa-49d4-bfec-b90c9d9dafe6",
          "name": "identifiers"
        },
        "response": {
          "id": "7b02f70d-8c47-49e2-973f-ecf5bcc683e2",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af15af3c-e449-440c-9da5-89f4956c3779",
        "cursor": {
          "ref": "67c2d250-71d4-44f2-bfbe-feb9c2059ec6",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ff416c04-16a0-4e69-85ff-b7fc12fbe463"
        },
        "item": {
          "id": "af15af3c-e449-440c-9da5-89f4956c3779",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "59975040-db66-431f-b51b-23eec9ec5360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d2eab0-a926-409c-bf14-eed1b9656e68",
        "cursor": {
          "ref": "1987c7ae-6622-4846-b179-ba88a483c63b",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7e025d27-89e8-488d-80bf-38cca4bfc436"
        },
        "item": {
          "id": "22d2eab0-a926-409c-bf14-eed1b9656e68",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "bda99f5a-1482-4b17-a10e-c087859d995f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fd12803-d32f-49ab-925b-db88f865fec0",
        "cursor": {
          "ref": "8d5b759a-5bb5-43d1-83f1-f42d019d9736",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2df17e82-81ee-48f3-adb1-a192352abdbc"
        },
        "item": {
          "id": "4fd12803-d32f-49ab-925b-db88f865fec0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "52324b2d-618f-4cf5-87f7-0cede0a4633e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e38165d-b624-44a2-86f6-702b046d9983",
        "cursor": {
          "ref": "20171721-f679-4e3e-b3ea-7268a1043a1f",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0fcff52b-fce9-45ac-8ee9-09b163ffc13f"
        },
        "item": {
          "id": "6e38165d-b624-44a2-86f6-702b046d9983",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "12e242d3-3450-4611-9ec2-71224b831432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0714eee6-b2fe-4c05-86b8-7750dafb9e97",
        "cursor": {
          "ref": "03b02085-0acf-435d-b90e-f96e50b93f3f",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a9ddb04d-05cc-486b-856e-8c8af58563d1"
        },
        "item": {
          "id": "0714eee6-b2fe-4c05-86b8-7750dafb9e97",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "73af58a6-7ef6-4d85-abda-d1feb9fd7466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "150dab64-79d2-4771-b337-6845b8c422cf",
        "cursor": {
          "ref": "6b1e851d-4a61-4809-89a2-e9810e043542",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c46467f4-4940-4d9b-9b4b-f9f73fb6c38e"
        },
        "item": {
          "id": "150dab64-79d2-4771-b337-6845b8c422cf",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "27acf16e-bfec-4224-a464-6ac26aa16a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6661b6fb-b88a-4cdc-a1de-c50825d7e2ac",
        "cursor": {
          "ref": "273f90b2-d4be-4c43-b017-9b2960efdfdf",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e3452a74-069d-4735-be3c-4ace402b4a60"
        },
        "item": {
          "id": "6661b6fb-b88a-4cdc-a1de-c50825d7e2ac",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "50d1c4c1-70bd-4854-bb54-b2025675b369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "381108ee-1f92-4209-9531-3c7c7213ccae",
        "cursor": {
          "ref": "0b567a1a-adfc-4b6c-8ff9-45b239fa8ef4",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f89894fb-8c20-4e6e-89b8-2cb25db17aba"
        },
        "item": {
          "id": "381108ee-1f92-4209-9531-3c7c7213ccae",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4fe3e014-e646-4baf-b4b6-4a20a4d5b02f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cdfe2b8-f049-4be7-90b3-043677c69373",
        "cursor": {
          "ref": "e1f439d8-0b44-476e-9709-cea491baa502",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c0aea631-0424-4df5-8b31-fb1953d443aa"
        },
        "item": {
          "id": "3cdfe2b8-f049-4be7-90b3-043677c69373",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "82976b89-9f16-4563-af19-a644cf31b2eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70137450-cfb9-4520-bd40-88a112d29759",
        "cursor": {
          "ref": "a97ea4e1-eecf-475f-9eb1-f4fbea3f20d0",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ef291c68-466c-45e7-ab91-041decdc0698"
        },
        "item": {
          "id": "70137450-cfb9-4520-bd40-88a112d29759",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "db57ac4d-0bcd-417d-b365-eff00af4e1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56475732-a266-4c48-94c2-70bbd8dda005",
        "cursor": {
          "ref": "3d095155-8369-47b0-bfb7-c64008d2991e",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "790725c4-ae11-49d8-a88f-d30083437eff"
        },
        "item": {
          "id": "56475732-a266-4c48-94c2-70bbd8dda005",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "87a558c9-2e47-45aa-b358-811575ace058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c4c4ff-b6b7-4591-b840-b35951f8e93f",
        "cursor": {
          "ref": "db1b923c-bb85-4212-bcd1-62f7daa4e652",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "348b2f91-da6c-4a9c-8d65-f443c1c8393e"
        },
        "item": {
          "id": "01c4c4ff-b6b7-4591-b840-b35951f8e93f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c846f704-fd99-48ec-8485-dd89b5d41db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ab1e0c-44e9-4662-b1ad-f5fbb86c056e",
        "cursor": {
          "ref": "916ffc20-2db9-458c-94ce-1f35abab965b",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "92a2db3e-0dfb-44af-a477-83470bead15c"
        },
        "item": {
          "id": "e4ab1e0c-44e9-4662-b1ad-f5fbb86c056e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b4a05336-8a20-448c-b9a4-f311d3b38bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c246041-6681-4f2c-881b-aa999d0c9d69",
        "cursor": {
          "ref": "a80fe3a0-bae1-49f9-ac87-814c433b06b7",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ba6be6ec-4b19-4b51-b6e3-e8da9af1bf85"
        },
        "item": {
          "id": "9c246041-6681-4f2c-881b-aa999d0c9d69",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "88dccf05-2a1b-48be-bf93-2da9adff6082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "133bc632-098a-415b-a0d9-b305a6a8c322",
        "cursor": {
          "ref": "31890f7f-1bb4-45ee-9b47-dbff19f9f7c8",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "343503cf-6922-4047-a577-6a3a448d2cc9"
        },
        "item": {
          "id": "133bc632-098a-415b-a0d9-b305a6a8c322",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "2823959e-8cf5-476b-b402-bc40e988e492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df62556f-ff9d-4048-a476-b932d1a0f2e7",
        "cursor": {
          "ref": "3b0066c9-1333-4bc1-aaee-0818e67ec066",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "73f747bf-b173-4443-8a22-11c37886333b"
        },
        "item": {
          "id": "df62556f-ff9d-4048-a476-b932d1a0f2e7",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "8c740bae-2867-41f8-82cb-f453c10d4c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5715f83-d5ca-4acd-933d-6f07fd43d40d",
        "cursor": {
          "ref": "eac52e11-b65b-494f-b862-6545e9bafeac",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f42b2c21-421a-4932-b15b-c251a942be87"
        },
        "item": {
          "id": "f5715f83-d5ca-4acd-933d-6f07fd43d40d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9ec40ed4-080f-4f24-a9c5-c1f409b69386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69fd97c4-5266-4c36-af5b-f70c3a1b02c4",
        "cursor": {
          "ref": "13d00a34-ad9d-42c7-9585-7ec5b47b54c8",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "937fa655-5408-4809-a7cc-bad9771b89fa"
        },
        "item": {
          "id": "69fd97c4-5266-4c36-af5b-f70c3a1b02c4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d2e02c3b-738b-4df7-8982-19823a665fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02fb252f-fb37-4afa-ad01-909bc3cc478a",
        "cursor": {
          "ref": "4be88383-eb64-4973-975f-bb87f63f843a",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "fd8c5492-34e7-4246-bad2-0598eebef773"
        },
        "item": {
          "id": "02fb252f-fb37-4afa-ad01-909bc3cc478a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0693b98c-07c5-4ce4-a69c-ab6a291dea31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396e146f-9e43-4260-bfd9-9bb51b3a8ee6",
        "cursor": {
          "ref": "d85f4c6c-4612-4e42-9b37-20388f2ce90d",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "34bbdee1-eab9-41fd-a8f0-65f8c776c658"
        },
        "item": {
          "id": "396e146f-9e43-4260-bfd9-9bb51b3a8ee6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "543e5ce6-48c7-49a6-bb7c-96f4324b2449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7bc8760-e90d-4813-9e07-895b6c8cd98d",
        "cursor": {
          "ref": "eb20a207-15cc-422f-89fa-5ccf0d66cdd8",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "61b03e44-f033-48a7-8a8f-2c5d252e0163"
        },
        "item": {
          "id": "c7bc8760-e90d-4813-9e07-895b6c8cd98d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "669b4bf6-685c-4ce9-8754-7dff0e2d40cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f52acd6-1da9-4aaa-91da-db6604caded7",
        "cursor": {
          "ref": "fd5caac1-cc98-4699-becf-b41bd0f8ee42",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "84833890-daa8-4aef-9a65-c34cecb2de42"
        },
        "item": {
          "id": "5f52acd6-1da9-4aaa-91da-db6604caded7",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e63a41c9-3b8e-430d-b03a-d2adfdec042e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00fbe2a3-0493-4953-ac1c-9183d2450797",
        "cursor": {
          "ref": "cdf665eb-0455-49e5-88ba-cd628a7d28a6",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c52d380c-e00a-47f9-a590-d3009c202686"
        },
        "item": {
          "id": "00fbe2a3-0493-4953-ac1c-9183d2450797",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "445cbf03-4952-4c0e-9a81-9b0ede0c25a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957e9304-58d2-41c5-8c65-92ddea566095",
        "cursor": {
          "ref": "bc947d2b-9eee-41dc-b479-7769078f0d11",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "708acc7b-73c8-443b-b934-dd35ecf3111a"
        },
        "item": {
          "id": "957e9304-58d2-41c5-8c65-92ddea566095",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c6fda2e8-fdd2-4274-8626-29dcabb5191e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d068378a-6391-4f4c-8f78-7333a11e1a62",
        "cursor": {
          "ref": "a202f94e-c637-4d07-a961-1561090b51c0",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f7e3c7f2-34ba-4732-804d-351ef5b411f7"
        },
        "item": {
          "id": "d068378a-6391-4f4c-8f78-7333a11e1a62",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b59745b1-43a8-48cf-8bee-a103dcfa945b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d7d24a-fcc3-4c75-aaed-8fe3cd08d789",
        "cursor": {
          "ref": "67e5b0f2-12d2-432b-a169-d5363bf33471",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f5cca3cc-3b0c-44e2-aaad-ac4a236ccd31"
        },
        "item": {
          "id": "79d7d24a-fcc3-4c75-aaed-8fe3cd08d789",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "01d7caf9-aa05-4649-8af8-505f42144ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110bd2ba-56f0-47b7-b9fb-6635f9443228",
        "cursor": {
          "ref": "6409aeb5-57fc-4d09-950f-93540475ca8d",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9b43ed13-e338-4e12-8b9a-1867385d9ec4"
        },
        "item": {
          "id": "110bd2ba-56f0-47b7-b9fb-6635f9443228",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6c428109-a762-4a3d-a9ef-e841c326dbb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fadbb78-ee1d-418b-b09d-0679ab99b3bc",
        "cursor": {
          "ref": "5583028e-52d3-470b-9a72-8b2ce6776a0b",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "007a9c68-9de5-459f-b23a-3038b6a28ca9"
        },
        "item": {
          "id": "5fadbb78-ee1d-418b-b09d-0679ab99b3bc",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "677f3a0d-1763-41b1-b4c3-9c849cd737c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8194df-436a-425e-9e17-d291f964d6b6",
        "cursor": {
          "ref": "22085aa7-9531-4a60-aaa2-d58fa4878e6f",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "426c6402-5282-4d2d-94e9-ec816a490d31"
        },
        "item": {
          "id": "1f8194df-436a-425e-9e17-d291f964d6b6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "aaf8e307-39dd-44d7-9712-08d8c4406ad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7c2489-5dde-4563-8d74-5955ac9f8cad",
        "cursor": {
          "ref": "dcc20d9a-0a52-4c82-9f5a-e2f0ba77fb45",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "083e7614-0a4f-4a28-9530-7bd474fa72a0"
        },
        "item": {
          "id": "8f7c2489-5dde-4563-8d74-5955ac9f8cad",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d9eb575e-5a42-40ff-b47f-b81d4edf97ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d76a003f-c760-496e-8652-3c14f2ba079e",
        "cursor": {
          "ref": "37e6edba-d55b-4fa7-b7b3-f734a125016f",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "41ee29e9-facd-4dc0-9b2d-7a9829377426"
        },
        "item": {
          "id": "d76a003f-c760-496e-8652-3c14f2ba079e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "cb1492ec-3c14-4eba-a02f-a77f4baa79a6",
          "status": "Created",
          "code": 201,
          "responseTime": 724,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "50dc8eb5-242a-4f8d-ab4a-d031b78e6e80",
        "cursor": {
          "ref": "3e24e8fe-9b17-49a6-a74e-8abcb77e38bb",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a6d24227-ed1a-4970-aee4-b1f5c89cff3f"
        },
        "item": {
          "id": "50dc8eb5-242a-4f8d-ab4a-d031b78e6e80",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6d7a53ba-1a59-4e7a-ad2f-218cb65a965c",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "27c616df-72c6-4741-bd2c-ae38cf1f7a3c",
        "cursor": {
          "ref": "e04e0db6-1de5-4a7c-9afa-6a8556a6496c",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "cf3db9ae-6c5b-4337-a0fa-94e533818fc2"
        },
        "item": {
          "id": "27c616df-72c6-4741-bd2c-ae38cf1f7a3c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "edb74669-ae84-4f67-8840-449850d0060e",
          "status": "Created",
          "code": 201,
          "responseTime": 357,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "9bf148d9-a710-480c-bd59-166de9c8aff9",
        "cursor": {
          "ref": "fdf17b63-0162-4132-9146-1d9c5b9985bd",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "abd82d7c-97c8-4969-96ae-52b12d06b120"
        },
        "item": {
          "id": "9bf148d9-a710-480c-bd59-166de9c8aff9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c2aacff4-a8ca-4f23-8a13-77ad7bc25d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52405bcf-f383-4029-9648-b8ee3d91e002",
        "cursor": {
          "ref": "6e86ad48-5b0d-4390-95c0-79fa5bc6bfc0",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "726a31dc-6882-4470-9a15-d5272f2b754a"
        },
        "item": {
          "id": "52405bcf-f383-4029-9648-b8ee3d91e002",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a104c7bc-d448-4ad6-8721-d30a8233bb15",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "55f5a852-1f07-48f0-a3b4-fd7c2cac35c8",
        "cursor": {
          "ref": "fdc6a66c-b525-4a9e-9cc2-f2a9c25f89c4",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6784d037-9031-4b3c-8af5-67821cb3b0e9"
        },
        "item": {
          "id": "55f5a852-1f07-48f0-a3b4-fd7c2cac35c8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2e9558b8-bc83-443b-af48-cf9ec85406c2",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "fe56a719-f3c4-4274-84dc-6efead5fbeb6",
        "cursor": {
          "ref": "60c0a29b-2505-4d89-8b7d-8e9257be4e1a",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e24d78cb-1924-41f9-8853-6f268ef22464"
        },
        "item": {
          "id": "fe56a719-f3c4-4274-84dc-6efead5fbeb6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "58f5e059-1a35-427e-872a-57d6f52e2802",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ac93c79b-fcb4-47e6-9807-568e227fd405",
        "cursor": {
          "ref": "de9257b7-91a5-4c9c-8619-dd13c36b3c31",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f1f9abfd-752d-424b-80a2-b2ace8ce7587"
        },
        "item": {
          "id": "ac93c79b-fcb4-47e6-9807-568e227fd405",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c98b87c3-5336-46d8-ac8f-311aa151567c",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "61b86e06-0266-4ef8-89e5-ade7eb392d4f",
        "cursor": {
          "ref": "38441cdf-1741-4f9d-b85e-f09e520e7629",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b8f9bbe9-868c-433a-9ed8-6d0774e36032"
        },
        "item": {
          "id": "61b86e06-0266-4ef8-89e5-ade7eb392d4f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f3dbeeef-949b-406f-9b2c-6a89830cdc72",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ca57f58d-8b8e-414e-a81c-e25802d393a5",
        "cursor": {
          "ref": "9386cfe4-58a2-459b-94e3-54e49d53dc91",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "25fe30a0-37cb-4e4e-9b0d-7c361216c980"
        },
        "item": {
          "id": "ca57f58d-8b8e-414e-a81c-e25802d393a5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0a98ee1a-e1ef-455a-8d7a-60b34ba0fe75",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "37ecdc34-91eb-40b8-8d09-8da0e6839e00",
        "cursor": {
          "ref": "759eeb16-5c28-4dc4-9acf-e72afd3b8524",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3a625cbe-929a-451d-ba0d-e805bb6bb9cf"
        },
        "item": {
          "id": "37ecdc34-91eb-40b8-8d09-8da0e6839e00",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "4665847b-6b5f-4143-b7c1-8bdc1025436a",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "b080afd5-5031-4e75-bcc5-6659b5018478",
        "cursor": {
          "ref": "e55cad00-6941-455f-a8ce-c7292a8a23e6",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2a8bc0c4-8299-4be7-a4cd-5b5db4b1cbd8"
        },
        "item": {
          "id": "b080afd5-5031-4e75-bcc5-6659b5018478",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ed2cadac-6981-4118-8f2a-0ed2e1e65d0a",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "7f92b774-29d8-4548-8a21-6531371a42ef",
        "cursor": {
          "ref": "fe333deb-faf8-4300-852e-69c4345c911b",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b886c2d0-bea0-4b69-b4fe-7e0d42bd4fc4"
        },
        "item": {
          "id": "7f92b774-29d8-4548-8a21-6531371a42ef",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a1cbe8a6-05a8-46f5-93bb-124cdd25eca4",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d31255c2-3d5e-4b63-9e1a-2df4d5451c80",
        "cursor": {
          "ref": "2871159f-0c45-4cac-b03f-8263fbd07a95",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8dc299ee-745f-4e2d-b6de-85d5f42d3542"
        },
        "item": {
          "id": "d31255c2-3d5e-4b63-9e1a-2df4d5451c80",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "efa8b260-d942-4657-a24e-36165a39bc9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d74a2f-4941-4883-b4ea-c3837cfaf0eb",
        "cursor": {
          "ref": "90c83b2f-7d84-43c3-b040-972b525bd671",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "383eccf1-e1bc-482f-bf5d-7d6e8d68bceb"
        },
        "item": {
          "id": "d1d74a2f-4941-4883-b4ea-c3837cfaf0eb",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4b4333bb-47f0-4bf0-ac5c-275ef0f1f2ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba2c061-ac15-4a37-9cba-d7327e46b633",
        "cursor": {
          "ref": "feb386e4-accd-455d-a164-99f5fc0dfaff",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "cf2e4bb4-27c8-4db6-aac7-9c47b5364fcc"
        },
        "item": {
          "id": "0ba2c061-ac15-4a37-9cba-d7327e46b633",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8c5de0dd-a1b8-4c59-8263-dd451b1b5602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9711ef61-0807-4ae3-be52-424b4dcba562",
        "cursor": {
          "ref": "dd2b6c68-31a9-4c9d-a1c0-e342316a01fc",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a9cdcb7b-284a-4513-aa3d-0e2125748167"
        },
        "item": {
          "id": "9711ef61-0807-4ae3-be52-424b4dcba562",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "16feeb25-6e32-412f-9bb3-18c286491b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ad9d8c-b6e1-4431-8f64-2e4d6ebc37bf",
        "cursor": {
          "ref": "85b94671-7182-4c75-aa06-63670a10f4f3",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c6d2d039-ef27-4ff7-9e84-ae93ac28cd94"
        },
        "item": {
          "id": "c6ad9d8c-b6e1-4431-8f64-2e4d6ebc37bf",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2e932afd-21b7-4bca-b443-79c7e04c8452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1adc8f11-285d-4ce5-b924-0718d42a2d82",
        "cursor": {
          "ref": "7b89f93c-256f-4218-a765-e27becb1d7a1",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b1555a1e-c783-4fa7-ba78-a8d194dbc020"
        },
        "item": {
          "id": "1adc8f11-285d-4ce5-b924-0718d42a2d82",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5fcd8668-980f-4429-a6f3-b6a558622701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acfb500e-98ee-408e-93f3-ab2c67c19ced",
        "cursor": {
          "ref": "71193acb-e753-4631-a621-fc887e7feac5",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "89135dd9-9876-4c79-bc2a-20037111911d"
        },
        "item": {
          "id": "acfb500e-98ee-408e-93f3-ab2c67c19ced",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0c51e4fb-702d-4bd6-864c-d31a86314eee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb2aa9a-c63e-446a-bdce-193315385962",
        "cursor": {
          "ref": "0fafd0e7-3618-4627-a8cd-c25ffaa5cf5f",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "38398fa0-ef8e-4f04-8634-526550fa3d05"
        },
        "item": {
          "id": "7fb2aa9a-c63e-446a-bdce-193315385962",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f1180d53-b200-4edf-a7f3-bc6fa87cb9af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f92b2b-d062-419f-8cf1-5d9be9f67f96",
        "cursor": {
          "ref": "911df564-08ee-4c22-a2f6-35bffa12e835",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "77e885d0-535c-494a-a3aa-e78aeeab2e52"
        },
        "item": {
          "id": "41f92b2b-d062-419f-8cf1-5d9be9f67f96",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "587828fd-fcd7-4e8f-82dc-c78e4386a58b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41b50d6f-8276-49ee-903b-7909c67626f5",
        "cursor": {
          "ref": "8bed4e58-a55d-43c9-8d2c-043e93266c5c",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d4d47d7f-46e0-4a44-b933-33143d97db69"
        },
        "item": {
          "id": "41b50d6f-8276-49ee-903b-7909c67626f5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "83039732-7b96-4d63-9c5f-6b85bb2327a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb37d63e-cb2a-4b9e-b095-c8f865666c0b",
        "cursor": {
          "ref": "15fd7c6c-7b35-49d3-938e-e1232c5eab36",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "68e8e042-b1bf-4369-9d45-ba5c2f73cba7"
        },
        "item": {
          "id": "bb37d63e-cb2a-4b9e-b095-c8f865666c0b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2d259a8f-64de-4efb-8011-6dd142ffd3fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a871b5-e395-4322-969a-36a3bd3770ce",
        "cursor": {
          "ref": "9a805c97-d461-4544-9ce8-28c4833dbcf1",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "cfed6602-fa8d-4650-b4ad-5b978ce644e6"
        },
        "item": {
          "id": "c8a871b5-e395-4322-969a-36a3bd3770ce",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c806006d-9ffb-48fc-840d-c024704f5f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a40658a-8a96-4eb1-8d74-6ca3dad0167f",
        "cursor": {
          "ref": "d898f673-e2e5-47f2-9a1b-b039a5d5eb88",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d55424a7-ce6e-4298-ae54-5a87ba9a1d86"
        },
        "item": {
          "id": "5a40658a-8a96-4eb1-8d74-6ca3dad0167f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "93aa179c-4415-4b14-b879-ed188246a8af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f83af517-868c-4daf-9575-7e7dbf347d74",
        "cursor": {
          "ref": "52d3220e-0107-464b-97c5-4550fab2a8bb",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1702446b-63bf-402e-a132-4e1d78a00d7a"
        },
        "item": {
          "id": "f83af517-868c-4daf-9575-7e7dbf347d74",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "52284997-8325-44de-9b32-ccce7be739fd",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "34c174ef-2211-4148-ad0a-558953b3edb5",
        "cursor": {
          "ref": "2006f7d3-af41-4534-9771-ccb866c6b8f9",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c03b2830-a702-44ef-84ee-069fe4d8271a"
        },
        "item": {
          "id": "34c174ef-2211-4148-ad0a-558953b3edb5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ff58eaee-5bac-4295-ba0b-9ea017fdd7b0",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "80490d1a-2b62-43bc-b512-b90b2e0c35f0",
        "cursor": {
          "ref": "9463f631-3bb9-4606-baa8-afe780375986",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d941e062-2c68-4e62-8ad8-57c8e21f274b"
        },
        "item": {
          "id": "80490d1a-2b62-43bc-b512-b90b2e0c35f0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d95cbef0-3e0f-4609-acfb-ad60706dc5fe",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a323802c-3ca8-409f-8963-2ef049d41de8",
        "cursor": {
          "ref": "5013a251-82ee-4782-87cf-c90d5a10c9e8",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "da2bcf70-608f-40bb-9486-1eb23acdbe79"
        },
        "item": {
          "id": "a323802c-3ca8-409f-8963-2ef049d41de8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f8a4697c-5c88-4320-9a5a-0959769f1ab6",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "cc620acb-2994-41fb-b156-252d9bd6ff04",
        "cursor": {
          "ref": "a7bd4cef-3f1a-41e1-b9f1-5023305398a4",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4ce919f9-087d-4c97-b7b8-bb6ca0d56c81"
        },
        "item": {
          "id": "cc620acb-2994-41fb-b156-252d9bd6ff04",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c276d46c-fcdd-455a-adc3-cdeb4611be54",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "99a086c8-1ea4-4056-b5a9-3f5e249a9c54",
        "cursor": {
          "ref": "880eb392-071d-4ce1-a9f1-28574ae0dfae",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "69cb1ffc-bfb1-41a0-a595-fdcd083bcd98"
        },
        "item": {
          "id": "99a086c8-1ea4-4056-b5a9-3f5e249a9c54",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "89e9b832-0d37-4471-8422-d413d8e7a4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84266750-a9cd-4f2a-8730-9b09f7b4461f",
        "cursor": {
          "ref": "828dcd92-addb-48bf-8ea5-8ac05a6cf0f0",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4367cca1-ca33-41ac-bd53-9dfc6f931e9b"
        },
        "item": {
          "id": "84266750-a9cd-4f2a-8730-9b09f7b4461f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9927e208-cd80-43b6-a5f3-24467eaa3a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4414fda-54b0-44d5-a17b-61e62a8ab210",
        "cursor": {
          "ref": "b0c5a8fd-92d6-4159-90e0-79e78ee06428",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "49c804fb-16f1-4168-9a02-fab3cf1beffd"
        },
        "item": {
          "id": "a4414fda-54b0-44d5-a17b-61e62a8ab210",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a7fc7d02-b7f2-48ec-a519-3f399fee260d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d550ced-98e0-46c1-80c1-435f68c834d9",
        "cursor": {
          "ref": "a5c70cb7-e5ea-4c72-9016-a15048ab5f3d",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "de34a300-f5bd-4937-95fd-e73a4c94544b"
        },
        "item": {
          "id": "8d550ced-98e0-46c1-80c1-435f68c834d9",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1dc10661-d571-4d88-9f69-6a08f67a9b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e064e37-da79-4aea-bb0e-be99cc3a9356",
        "cursor": {
          "ref": "34b87991-24bd-4c34-8e98-045143c226ef",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1b5f8531-ad5d-453c-8c90-f3ea16f14fa6"
        },
        "item": {
          "id": "7e064e37-da79-4aea-bb0e-be99cc3a9356",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c9906477-7e50-41b8-afec-188bcd471257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918f38c9-3899-42b3-9503-fb509f435637",
        "cursor": {
          "ref": "1bf086ad-091e-4854-bf49-bfbbcbbddd36",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "dbd83891-baf9-4f95-882c-a7dc47eefc14"
        },
        "item": {
          "id": "918f38c9-3899-42b3-9503-fb509f435637",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ee8ae512-98eb-4598-a239-cd521249be96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04eb3a18-fded-4feb-8025-9320cfbb7529",
        "cursor": {
          "ref": "3ed2e151-4dc4-4e14-bb73-08b3bf28d709",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "80e51391-9515-411a-9bf4-b612bc41dc8f"
        },
        "item": {
          "id": "04eb3a18-fded-4feb-8025-9320cfbb7529",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "50ed1e3c-9041-4db8-bef8-2df76e1a25a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2296172-1831-469c-88ca-01f30b90ca0b",
        "cursor": {
          "ref": "45844bcc-45cb-4a8d-9e9f-b2e9e4182c1c",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b51d4c40-ae8d-446e-8e2a-e2577d5a9b7e"
        },
        "item": {
          "id": "b2296172-1831-469c-88ca-01f30b90ca0b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "34e3333f-3021-47cb-8811-32687b1a3c38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b20955-8bd3-473d-a018-9beac956298a",
        "cursor": {
          "ref": "3172e068-cb08-4963-8217-e0602cb47390",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1ba3f142-efea-4b5c-8ef6-9c6572e02ca2"
        },
        "item": {
          "id": "e9b20955-8bd3-473d-a018-9beac956298a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "409b4929-1174-4d55-8da3-649606efe77a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4815f1-3dd6-4656-b2d6-63f9c1a903fc",
        "cursor": {
          "ref": "2ac153f4-c6c9-4adb-971c-f115f5783027",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3446eed5-a82c-4ebb-9bda-0e668ac6fdbb"
        },
        "item": {
          "id": "2e4815f1-3dd6-4656-b2d6-63f9c1a903fc",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a77616e6-aabf-400a-9e74-b4062472f84c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3216f81c-0280-40e1-afa7-63c18527cf72",
        "cursor": {
          "ref": "4347b4fb-3106-4e5a-8e28-26e854f1138f",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b4fb64a5-6578-4252-8217-3a1806d901e4"
        },
        "item": {
          "id": "3216f81c-0280-40e1-afa7-63c18527cf72",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4fcbda7a-c251-436f-8d87-2a1b32f48d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cec8ca3-c8c4-47ff-9fdd-48951bb07e33",
        "cursor": {
          "ref": "a5799df5-62b5-4be7-a0cc-77fc4f7c3a3d",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0c9a48af-345a-4085-bc88-21c2b39eb92e"
        },
        "item": {
          "id": "0cec8ca3-c8c4-47ff-9fdd-48951bb07e33",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "90484f32-5aec-4d90-8fd8-8a214dd190e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d025bdf8-4519-4d4a-bc18-fc7ee2557d8c",
        "cursor": {
          "ref": "51a615d6-9c5e-434b-82a1-ab857bf794c0",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e4a923ba-e622-4c39-9a84-9c70983c011e"
        },
        "item": {
          "id": "d025bdf8-4519-4d4a-bc18-fc7ee2557d8c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c06fa6fb-0062-4eea-92f5-4fbfe119aff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c384be5a-5e5e-427f-82fc-69ac4cc901cc",
        "cursor": {
          "ref": "4ee6ee86-ca8e-41be-ad77-7313fcbc7f25",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8c13d1bf-a37a-4152-b36f-ab7de985ae63"
        },
        "item": {
          "id": "c384be5a-5e5e-427f-82fc-69ac4cc901cc",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2b445c8e-8a1e-4c68-8841-7d0ef66191f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9759ee3c-27bf-46cc-9f12-6bab1f903f15",
        "cursor": {
          "ref": "38e9febd-63fa-4200-bf5f-eac44457cd77",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fb007418-93cc-49bb-b3ce-d14de369041d"
        },
        "item": {
          "id": "9759ee3c-27bf-46cc-9f12-6bab1f903f15",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9a73d975-e30d-4ccb-ba4e-4ea637befa78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ef2ffe-e6ad-4568-a82e-79e74dba8364",
        "cursor": {
          "ref": "f83053ed-7f9f-43c3-b5ff-9d6d27678a7b",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2e84727f-92ad-44ef-9203-86e7fc5d89b7"
        },
        "item": {
          "id": "b7ef2ffe-e6ad-4568-a82e-79e74dba8364",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "784a3df0-7169-40bd-9728-48d8356bafe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e0b79d-d190-4f66-bdea-7b6c7768b3af",
        "cursor": {
          "ref": "e1ed59e6-766a-4c00-a69d-3d7338cf3e37",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c55fda80-4de6-4181-beb4-f23da3030a94"
        },
        "item": {
          "id": "f1e0b79d-d190-4f66-bdea-7b6c7768b3af",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "40c22d87-b1c8-4ad3-93e1-9a69c57dbf7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff156afa-75a0-49e4-adc1-342ab598af24",
        "cursor": {
          "ref": "301377f1-90a4-4426-bc6d-6935c274fd56",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "324bd00c-65d7-4c06-967d-ed4766abd461"
        },
        "item": {
          "id": "ff156afa-75a0-49e4-adc1-342ab598af24",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "fa8de5d9-d0fe-4b62-a5c0-eb72b867fa25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a03eb277-c177-451f-b1fc-a4667af89edc",
        "cursor": {
          "ref": "e39fc0c8-82d6-410f-a1c7-897541df74e9",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "202cfa42-5518-46a8-b6af-cd4bcb695825"
        },
        "item": {
          "id": "a03eb277-c177-451f-b1fc-a4667af89edc",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1d4141de-1b21-42d1-9dfe-ec0c1d05605c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5a011d-21f1-46e9-af5e-8ef23e985d0e",
        "cursor": {
          "ref": "64fc323b-f06c-4f8a-a0bc-a94085cc4c07",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "04172399-bd74-4729-8d7e-6f478a1bffe4"
        },
        "item": {
          "id": "dc5a011d-21f1-46e9-af5e-8ef23e985d0e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d4e26e99-f937-43e6-afaa-2e0acdc39a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef2dc074-795e-499d-8a9a-144e77c2c7f7",
        "cursor": {
          "ref": "6b13bf79-7b4c-408a-b9cd-d0018671a538",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "99a1bebd-0b28-4e1b-9549-9274556dd737"
        },
        "item": {
          "id": "ef2dc074-795e-499d-8a9a-144e77c2c7f7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4509d572-8635-47cb-8b3a-7137d37cc2f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c95ae6-45f7-4905-8f8f-4496277e7159",
        "cursor": {
          "ref": "aed3e041-8baa-46a7-93a2-75ea034ffab3",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f067a231-ee8a-4af9-98ca-4d6899800201"
        },
        "item": {
          "id": "d9c95ae6-45f7-4905-8f8f-4496277e7159",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4f03bfb2-f71d-4020-be22-b9e9cb1511b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff09ae07-deb4-473f-83b9-b488e678f476",
        "cursor": {
          "ref": "bf486fe6-ce06-461f-8840-31bb4616e1e6",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3e5e9b2c-0ed1-4f71-8fd6-34de42eec763"
        },
        "item": {
          "id": "ff09ae07-deb4-473f-83b9-b488e678f476",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0898e13f-5ce3-4357-b98f-cec2f39c45d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d8a548-88b2-420d-aee0-63ad7a956f1f",
        "cursor": {
          "ref": "63d05640-7897-42a4-a508-d63d7748e09a",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e588ef6c-9245-4231-acc6-ac2e6554eefd"
        },
        "item": {
          "id": "d2d8a548-88b2-420d-aee0-63ad7a956f1f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "6bf8ffde-ef2e-4da4-bb4f-924a895be306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750b335c-61a8-47c5-8300-0026f4198d82",
        "cursor": {
          "ref": "d13f7eac-b734-48f7-a238-0f349bf2981c",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "185baf87-079f-4a39-a52d-f9cb6e06e83c"
        },
        "item": {
          "id": "750b335c-61a8-47c5-8300-0026f4198d82",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5c881955-a776-45f7-80a0-9a08f3043c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1a1225-54ea-402c-bf0f-0852cbaefe24",
        "cursor": {
          "ref": "deffe505-b29b-4b3d-bb6d-e36381a8279c",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "14a3174a-d020-40c5-acbd-7df89e317c39"
        },
        "item": {
          "id": "9f1a1225-54ea-402c-bf0f-0852cbaefe24",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "293d3183-2cf8-4049-8a36-c0f8c24c0428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d974469e-ca86-46e6-9512-5525275bacd2",
        "cursor": {
          "ref": "2d80414a-4395-4304-ad6d-5b6cef773f7f",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "dec9c508-dff3-4077-9b04-3ce7172dae0c"
        },
        "item": {
          "id": "d974469e-ca86-46e6-9512-5525275bacd2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d00bb92e-3ade-4642-8e61-65d24e26e2d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3237fba-53dc-470a-b540-8e48b4c2aaa9",
        "cursor": {
          "ref": "d5df79dc-dbf2-474a-8deb-a2e1e1a31737",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "440a4ab7-a5a0-478e-a6ab-c85257067323"
        },
        "item": {
          "id": "e3237fba-53dc-470a-b540-8e48b4c2aaa9",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a5c2beae-fd10-488a-8c2b-a952db826f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d623a18-aab2-4804-aaa4-8a05f939cbfd",
        "cursor": {
          "ref": "9205c690-d122-4141-8835-3d6d96b1e5b2",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9261a772-5a49-4f5c-a2ef-2843029fd7c3"
        },
        "item": {
          "id": "9d623a18-aab2-4804-aaa4-8a05f939cbfd",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "44b67df7-e70d-4727-af8f-d537039c62a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa117db-ccc9-4497-8733-2cc6d893bba7",
        "cursor": {
          "ref": "d4db227e-f330-4655-a547-d75fda678457",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "baddbae9-5077-40ea-b624-edc41dd69e3a"
        },
        "item": {
          "id": "0aa117db-ccc9-4497-8733-2cc6d893bba7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2682e8cc-b545-40bf-bd7c-541680a28ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68da46fa-be7f-464f-8261-b6c1ab298a84",
        "cursor": {
          "ref": "5510b87d-4cd6-4af0-9364-977b83a5c1c1",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6a55a23d-571d-4f8e-86a9-f5e66182738f"
        },
        "item": {
          "id": "68da46fa-be7f-464f-8261-b6c1ab298a84",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "036c33a4-b0f7-400e-ba20-21322a0bc87e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdae7d1-2d36-4c11-85ba-6754a7ec27b6",
        "cursor": {
          "ref": "6104c499-ac89-4d6f-bac6-16210d923d31",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4eba96eb-cbfb-47aa-96f1-1022d0855553"
        },
        "item": {
          "id": "1fdae7d1-2d36-4c11-85ba-6754a7ec27b6",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "91db5ebe-a883-4a34-84e8-d47ffe665983",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7517ab-4a86-4de1-be05-5fbe564304e5",
        "cursor": {
          "ref": "19156626-fc62-41da-b8d1-c11bab33ca31",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "72d03ca7-7bce-49ff-bf93-6578aa0e04b0"
        },
        "item": {
          "id": "fd7517ab-4a86-4de1-be05-5fbe564304e5",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "87f541a0-406c-4c37-822d-73fb4a3d55e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "62aed15c-a1fd-433d-b4bf-233ee1705c99",
        "cursor": {
          "ref": "5357278f-32c4-4f32-ac0d-0afa5352e078",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9f10d22d-31a8-4715-a8dd-a7111eb4487b"
        },
        "item": {
          "id": "62aed15c-a1fd-433d-b4bf-233ee1705c99",
          "name": "credentials_issue"
        },
        "response": {
          "id": "dff5e136-0ef5-4387-a130-217e741ddcee",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e683104e-e13d-4630-ad71-5d8e72e25e10",
        "cursor": {
          "ref": "fd701d05-8a2c-4f62-8bbf-180978172f26",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ab7da13c-8823-49e6-aa72-2ae2a02d32f4"
        },
        "item": {
          "id": "e683104e-e13d-4630-ad71-5d8e72e25e10",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4bacc888-eba1-472a-aa76-a4c03cacb291",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "911a30ff-def4-4b33-8dc2-957ef22a257b",
        "cursor": {
          "ref": "534d9cf9-d617-498d-a40d-43acc134a37e",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9b1add7c-e3ab-4708-956e-1a8076a96dd1"
        },
        "item": {
          "id": "911a30ff-def4-4b33-8dc2-957ef22a257b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "805f29dd-3cdd-43d9-aa49-f1e6952b3888",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b581a742-d910-4178-badd-adedb309c817",
        "cursor": {
          "ref": "64822d4b-8445-43ab-ada0-0eccdb0be5fd",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2b8621c3-4232-45e8-9714-5372de2ae0df"
        },
        "item": {
          "id": "b581a742-d910-4178-badd-adedb309c817",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a638d61f-52cc-413f-93f7-08850fe01782",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0c162f-79de-4aa6-b40e-31b7f3ca428e",
        "cursor": {
          "ref": "7d7e0ea5-d8cb-46bb-85a9-b89fc7877361",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1096031d-d120-4549-ad94-18803db653c1"
        },
        "item": {
          "id": "1a0c162f-79de-4aa6-b40e-31b7f3ca428e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f85be0ee-fbde-4c60-8918-d4fd53899e1d",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-20T00:37:43.118Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-20T00:37:43.118Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "482e9375-941d-47d3-b8e8-5bfeb9c59be5",
        "cursor": {
          "ref": "ee200c14-95f4-4934-a226-be67e8fe7053",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e376da17-7298-4489-95a6-e07b7008cee1"
        },
        "item": {
          "id": "482e9375-941d-47d3-b8e8-5bfeb9c59be5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "30551cc0-a4c6-4205-ac96-c17203d21e1c",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe1b32e-96bd-4ca0-9cde-71b3df8c0463",
        "cursor": {
          "ref": "8ed39434-b82f-45be-89df-4f2a6c89385b",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "da08f223-4453-4147-8d32-406163ef520c"
        },
        "item": {
          "id": "7fe1b32e-96bd-4ca0-9cde-71b3df8c0463",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b85d10c6-db24-4e9d-8d0b-6a68a10d4945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb2d562-823b-4195-8bd8-cde47c2b1138",
        "cursor": {
          "ref": "685072b0-543e-4ec3-a303-6b7bc5671177",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "981026e3-ead8-4974-9763-d9294ca8f7d1"
        },
        "item": {
          "id": "9bb2d562-823b-4195-8bd8-cde47c2b1138",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "37b25b8a-3363-4db4-871b-13d0239d1f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f7a759-f2f2-421b-b4cb-e10041902795",
        "cursor": {
          "ref": "d10025fb-4903-4e69-9af0-90313598fab3",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1cd73ea8-89c8-4892-9b54-a6cb403b037a"
        },
        "item": {
          "id": "d1f7a759-f2f2-421b-b4cb-e10041902795",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e07f9229-60f6-481a-8943-fad0ff781ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c10252e-68ba-4e54-a176-22fe04c2ee14",
        "cursor": {
          "ref": "0652b4dc-3f6b-439e-b13c-43b1d839c9e1",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d05079ee-9bbc-414a-904e-4f9f5df123ca"
        },
        "item": {
          "id": "7c10252e-68ba-4e54-a176-22fe04c2ee14",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f5e78138-0fec-477e-ab1d-104d51d2ce34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42fbc30e-68ad-4f17-99dc-887349b908c0",
        "cursor": {
          "ref": "dd026909-74f6-43ec-83f7-f5f35684133a",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1e5ce260-82b9-4a9e-a16b-e5ff5de4c071"
        },
        "item": {
          "id": "42fbc30e-68ad-4f17-99dc-887349b908c0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7eec0254-8507-46da-a6a0-c388c1b91336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8c53bb-85ad-4846-a768-622a0a6e631c",
        "cursor": {
          "ref": "e61405b6-91a5-423e-baf1-fea8d8c62d5c",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c83068b2-13ca-4605-90cc-68ad4b9dd8b8"
        },
        "item": {
          "id": "8c8c53bb-85ad-4846-a768-622a0a6e631c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e2328b48-a251-4658-b850-bb0bca377d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "990b3d54-7385-4512-81fb-4049f0fe5dc0",
        "cursor": {
          "ref": "dbf9fd3a-ed4b-45dc-916d-5eec2589e8eb",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a6294d95-f0a9-4e57-bb74-deafe8da555b"
        },
        "item": {
          "id": "990b3d54-7385-4512-81fb-4049f0fe5dc0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "885561f9-a5a4-49b2-a56e-2992e9cf304a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2603d947-ba81-4f08-8ead-b2e0bfdec420",
        "cursor": {
          "ref": "c9fbec0b-3669-45a0-8930-466764ba2cab",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d3d70064-57a0-4d63-8ebb-19de4c4de957"
        },
        "item": {
          "id": "2603d947-ba81-4f08-8ead-b2e0bfdec420",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2d85ba8c-9506-48e9-a5b8-71040594b20f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f155718-1e7b-4296-8ffd-c57d57518d8e",
        "cursor": {
          "ref": "8cbc68bb-a201-4e59-9d14-6f96f1b00f2c",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d67f4380-f55c-4efe-bf3a-e5a818deb6cd"
        },
        "item": {
          "id": "4f155718-1e7b-4296-8ffd-c57d57518d8e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ca90b448-768e-46ad-8684-dd5ab7753457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c3ba49-3b75-4891-b1ad-f9366f4ccaba",
        "cursor": {
          "ref": "49bb2632-f367-4913-952e-23dab749981b",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3ddb7a7a-f907-486e-a5b4-284224e2686c"
        },
        "item": {
          "id": "f6c3ba49-3b75-4891-b1ad-f9366f4ccaba",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2b1368a8-a6e7-4bc9-a229-508f975fc6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cdeb5d5-3479-4646-93ff-54aaa35421ba",
        "cursor": {
          "ref": "9b3c7e28-4b35-408e-bf0f-fab235384231",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "461ee5c2-c0f7-41f0-8920-6756c1c27bd6"
        },
        "item": {
          "id": "2cdeb5d5-3479-4646-93ff-54aaa35421ba",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c76dc18b-34e0-4c80-8e02-ec3547944604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb93a2d-47f0-4d60-bdf0-fa8aa989ba1a",
        "cursor": {
          "ref": "e97a5888-c83b-4582-bb68-0f56eef599b9",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8d44eca7-4f16-40f2-9dac-1a70c2e08f1c"
        },
        "item": {
          "id": "2eb93a2d-47f0-4d60-bdf0-fa8aa989ba1a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "687e7a92-cbf7-4600-b01b-e6b6085802b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e869f42a-a9c5-4896-aa8f-90fadede4657",
        "cursor": {
          "ref": "8529ee34-d318-47c6-a503-1e85d1b5bffe",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c6c2b2f5-db8f-4cd8-a3bd-60b59e6f8c3c"
        },
        "item": {
          "id": "e869f42a-a9c5-4896-aa8f-90fadede4657",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d57505d2-d2fe-4b3d-8de5-9856767f7cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867bb37d-72ae-40ac-bd9c-4aaf735bb9a1",
        "cursor": {
          "ref": "ba0b067b-68d2-4926-9eee-4e99b3719021",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "af4f375f-612f-4eed-979a-da9b64fd5548"
        },
        "item": {
          "id": "867bb37d-72ae-40ac-bd9c-4aaf735bb9a1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "eb8086a5-62c0-46ed-9da0-cf863a4d5651",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "bee0c9ad-d459-4e3a-ada1-23e310e198ca",
        "cursor": {
          "ref": "af0bb75f-04b1-41cf-921d-4f9f0feae2a0",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "910749b2-347c-4ac1-a903-9d9199952406"
        },
        "item": {
          "id": "bee0c9ad-d459-4e3a-ada1-23e310e198ca",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c9c45efa-3233-459f-9e32-2cb031c596f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f625dd95-5297-4f74-80d8-7c5c0481e8b7",
        "cursor": {
          "ref": "074bf86c-ee16-4dc3-800b-5543770710d0",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3010b16c-f228-45b8-8829-2baa90c403d9"
        },
        "item": {
          "id": "f625dd95-5297-4f74-80d8-7c5c0481e8b7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "636f265f-c2ec-4562-a6c9-e7976a2e5aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe1f470-9c1d-4fdb-aea1-dfba41df3704",
        "cursor": {
          "ref": "02521b18-d4df-41a7-86fd-a4acd473b5a2",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "b8dcf1d7-f8d4-4da6-8047-afaf3af0ebc3"
        },
        "item": {
          "id": "dfe1f470-9c1d-4fdb-aea1-dfba41df3704",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "378395ce-0597-4768-9b5b-e9ddd38f7c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf508a31-735c-4953-bfbe-626c5d352165",
        "cursor": {
          "ref": "4d9b187a-89a5-4d01-8fc4-a1963add02f8",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3895b573-1397-4d38-aa1a-db68af0ed3be"
        },
        "item": {
          "id": "cf508a31-735c-4953-bfbe-626c5d352165",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "02349b2d-0d33-4795-99b6-200f09e695a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401633f3-e978-4785-8e51-168ee32ecccc",
        "cursor": {
          "ref": "457e596f-3a2d-47a3-b019-0d15f5804cfd",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ecbde587-9c2c-46c0-af60-8fb99eac944a"
        },
        "item": {
          "id": "401633f3-e978-4785-8e51-168ee32ecccc",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6302abc4-878f-4fcf-a07e-b37e7cc04cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f6a160-2673-4ed7-b2f8-5b699624ce55",
        "cursor": {
          "ref": "0905745a-fef2-4736-b28b-133dd8f5b4a4",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3aafd9cc-e4d2-40c1-b3a6-5e33817c8e8e"
        },
        "item": {
          "id": "f7f6a160-2673-4ed7-b2f8-5b699624ce55",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8451b5c2-f8f1-46a0-83cc-ddfca387d873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3148fe83-7dff-4de2-8c01-a9dafd75ac07",
        "cursor": {
          "ref": "3e1b5d11-0fab-48a1-bd94-6d06419d164f",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "79b63b3c-ab76-4489-9715-a7a843f97624"
        },
        "item": {
          "id": "3148fe83-7dff-4de2-8c01-a9dafd75ac07",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "abd5a4f5-d052-4d80-a4cf-d4f358fb8e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a8a76c-6046-4a3b-ad55-3d8fd8641429",
        "cursor": {
          "ref": "20296310-4518-41ca-85c0-3e72d5ad8537",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "cbc3f6e5-a7d3-4ab1-bedb-44d63cc9b8e4"
        },
        "item": {
          "id": "05a8a76c-6046-4a3b-ad55-3d8fd8641429",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "597a5543-9c57-4119-bf5e-1a6d133959d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2673a80d-8536-4b1b-99a9-16f91e3a4fb5",
        "cursor": {
          "ref": "c154815e-740d-4680-ab28-4f92cd169687",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "62edd2cf-f32d-48de-b108-a4961ef90d3b"
        },
        "item": {
          "id": "2673a80d-8536-4b1b-99a9-16f91e3a4fb5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4ecd5bcc-1f5d-4323-a0ab-18ab123fb65a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40b74d1-2731-4cf1-88ba-e11ec31a8239",
        "cursor": {
          "ref": "4e6c7b87-dffd-443d-9a27-192668067571",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4b66ac78-9f92-4ba3-8a7a-86dac1afb9c6"
        },
        "item": {
          "id": "a40b74d1-2731-4cf1-88ba-e11ec31a8239",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9719c988-0d6c-4d7a-b33a-c48fa1573f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c601144-c1a2-433c-8cc7-efdf0138e46b",
        "cursor": {
          "ref": "79de6c17-0a1d-42a3-a945-5688e181aa49",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9d9ba11e-fea0-4845-8411-121e29fb45c2"
        },
        "item": {
          "id": "1c601144-c1a2-433c-8cc7-efdf0138e46b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fff0c33e-362b-4622-8be8-ca6d31bfa81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5467ea88-673b-4390-af22-2fdceee82147",
        "cursor": {
          "ref": "d1588155-53b4-4864-8575-3c1f4abd64e4",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0ce61334-2cfb-40d2-8b0d-86af1aa9471d"
        },
        "item": {
          "id": "5467ea88-673b-4390-af22-2fdceee82147",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7ff06a3a-6b78-442d-8222-a5a5a8f51fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c13f34-8190-48c5-b8b3-7b12c2bab536",
        "cursor": {
          "ref": "2ef39924-c45a-4692-803b-21dd631e5230",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3ad68f4f-6166-4afe-84df-4f3100f88fc0"
        },
        "item": {
          "id": "01c13f34-8190-48c5-b8b3-7b12c2bab536",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8676b935-41bc-450f-99e4-95133f52c1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98abb232-8fa4-4741-a031-850761c0f06a",
        "cursor": {
          "ref": "2a5e23bc-3d2a-491c-86d2-bfcf12a00dd2",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7cdcf5b8-6849-47d5-8a89-7d681c5b9b2d"
        },
        "item": {
          "id": "98abb232-8fa4-4741-a031-850761c0f06a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "dc671a5f-d9ce-4729-bb83-1c14c64b9658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8252145c-84b5-4d10-a984-24957d997b5e",
        "cursor": {
          "ref": "701c3872-9910-4a3f-a405-c7a6c2e32758",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "13ac4073-5d2a-4eb5-82ee-3cea2992ef78"
        },
        "item": {
          "id": "8252145c-84b5-4d10-a984-24957d997b5e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f9518171-85a5-47db-bc37-caad4582424e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c80804e-657c-422c-a826-d722e8d044c1",
        "cursor": {
          "ref": "948a3aa2-c16e-4a51-8c9c-2a23c1f07e44",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3808be69-1b25-42ec-aaa6-9b4eff7390a3"
        },
        "item": {
          "id": "8c80804e-657c-422c-a826-d722e8d044c1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "06492c83-3f40-48ab-a21e-7747f07f33ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "812a903e-bb08-41db-91fa-6c426eca8a25",
        "cursor": {
          "ref": "32eaa6c2-e571-4b25-aad3-903ec8213328",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "dface0ca-8364-45b0-9c1e-8fb8767794b5"
        },
        "item": {
          "id": "812a903e-bb08-41db-91fa-6c426eca8a25",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "84c81c59-da44-4374-a91a-ba90d680c216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e817e5c-8f60-4b74-8339-3adfef673883",
        "cursor": {
          "ref": "a8bc7d6b-4c11-4731-952b-fb65ae7c0bdc",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3237017d-b37f-4e2c-9f1d-eabade29daa1"
        },
        "item": {
          "id": "0e817e5c-8f60-4b74-8339-3adfef673883",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "53f14eda-a739-4b49-b011-964d9ec3271b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a76f3d2-ef35-463b-904e-294f79e634df",
        "cursor": {
          "ref": "7036a1e1-1a1f-4fb7-a3cd-55ebd4da5333",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d2a74795-90bd-4208-ab20-241174ff021a"
        },
        "item": {
          "id": "2a76f3d2-ef35-463b-904e-294f79e634df",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "1e82ecd4-153f-42bc-a4ce-ea433c9cde3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800f5004-4d22-4c2d-a90a-fdc6238c5d01",
        "cursor": {
          "ref": "3e95f1c9-743d-4287-9c08-c699b6645a36",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "40ab169a-31cc-493f-bf8f-ab4ddb99a410"
        },
        "item": {
          "id": "800f5004-4d22-4c2d-a90a-fdc6238c5d01",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "db318920-169d-4128-bc4b-c791864ede84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53fdf5dd-4eff-4fd6-8016-5373e9d80ac9",
        "cursor": {
          "ref": "077b0c37-cd59-44f2-8466-debc8f3286ab",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "93dc6f25-fc98-48d5-be91-1ac900083f41"
        },
        "item": {
          "id": "53fdf5dd-4eff-4fd6-8016-5373e9d80ac9",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "c44e6e22-40a0-4ed7-916f-9aba1888c72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c2641ce-d186-4ac8-94f3-bba38f52dbde",
        "cursor": {
          "ref": "05e15732-7d01-4099-8d39-0012b651741a",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "cace8e67-b7a7-4bb8-9e63-90406e543fdd"
        },
        "item": {
          "id": "9c2641ce-d186-4ac8-94f3-bba38f52dbde",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "4ebbaef5-47f9-4c20-9877-dce8e9d1bb39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b3d13b-a1ae-4978-b2f9-be6481ad186b",
        "cursor": {
          "ref": "4edb611b-f543-46aa-b285-839853fcf03a",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d8bd2961-4922-4255-a8c5-f46c1670bf6b"
        },
        "item": {
          "id": "78b3d13b-a1ae-4978-b2f9-be6481ad186b",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "5c50ff63-b093-407a-a9f7-72eaaf09d18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce5a57d-b4a2-4f2a-9a3f-32f20cbf2bf6",
        "cursor": {
          "ref": "dbda1c66-0f59-46cf-9294-46e8b88417ab",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d5a2e8cf-8702-44c0-a78d-6a2d5a0ba8a3"
        },
        "item": {
          "id": "3ce5a57d-b4a2-4f2a-9a3f-32f20cbf2bf6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "86465424-d824-4d11-8850-45e929de806c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f33499a-9800-4201-9eb0-65ddf266af2d",
        "cursor": {
          "ref": "fc751230-3cd8-4e7d-8002-1c75a4ccb396",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ab3dd5ed-92bf-4c5f-8f8e-975fa368dfbb"
        },
        "item": {
          "id": "5f33499a-9800-4201-9eb0-65ddf266af2d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "132b7990-091f-4e4f-aae9-749ee9538b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0382bcc0-c0af-424b-996c-db12e9f8d05f",
        "cursor": {
          "ref": "16e6e7d4-8d22-40df-ad4a-94e1025639b4",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "24491e9f-eb87-40c0-b391-0b4bbd7c530d"
        },
        "item": {
          "id": "0382bcc0-c0af-424b-996c-db12e9f8d05f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e4b4294b-070d-4c57-a38f-7958f68003f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d944cb-fd22-4600-a6b3-ca6c4bf13694",
        "cursor": {
          "ref": "4be3bc5f-73cb-49ff-ac95-bb0f4acf3cb4",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8f5d30fd-d75e-48c5-89c2-d5b6cffbabc2"
        },
        "item": {
          "id": "78d944cb-fd22-4600-a6b3-ca6c4bf13694",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d3fe9e3c-f0bc-4087-bd73-1f0d5a7c8efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25d8115-e8c5-461e-ad26-5f503aa8cb11",
        "cursor": {
          "ref": "ee3ce87c-1dfa-470a-a02c-de949947c442",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a2847686-5bc0-44b1-94f2-d82b2983c0e5"
        },
        "item": {
          "id": "d25d8115-e8c5-461e-ad26-5f503aa8cb11",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "965e082b-e0a9-4067-81eb-60c2820f760e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d81e066-df5e-458b-bfcb-029324583256",
        "cursor": {
          "ref": "26c291b7-6992-40be-8dea-708d59eb398a",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "09630678-9ab6-4ef8-8309-2414b576c5a7"
        },
        "item": {
          "id": "9d81e066-df5e-458b-bfcb-029324583256",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "59e56828-af07-403b-a867-8b8b5b3fe39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bf2f73-d73b-4e22-95c5-5609cb2acdca",
        "cursor": {
          "ref": "77aa8ad9-0cb8-4a03-869f-a0a53ac2d649",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e74ad758-9a39-4caf-a678-f63493402267"
        },
        "item": {
          "id": "59bf2f73-d73b-4e22-95c5-5609cb2acdca",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "64296ab4-2474-4927-8fd2-9cb3c57ab07f",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "af6aae6c-6d16-4d7d-b8bb-b0c8b7da8e9b",
        "cursor": {
          "ref": "80c90b85-d202-424d-a2f3-4c1256b53b69",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ee0b9983-d6b6-4d22-865d-46c872e7093a"
        },
        "item": {
          "id": "af6aae6c-6d16-4d7d-b8bb-b0c8b7da8e9b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7ba99762-c8f2-43f0-8137-1c58733cf885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eebabf6-b68c-42f7-868e-82fa2b414ac1",
        "cursor": {
          "ref": "be6c16b6-7008-4bf5-a868-0b2f9f961d56",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "183f443b-f8c2-4a23-adf7-a3e6f8704ebc"
        },
        "item": {
          "id": "8eebabf6-b68c-42f7-868e-82fa2b414ac1",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "11a4078e-a00d-49cd-ba29-fe30871e3517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4126bf0-1c09-4ea0-a8db-126dd817d3f4",
        "cursor": {
          "ref": "2cf304da-3bd9-4b98-b2dd-8f69f50a2320",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9468940c-0c53-42a2-9cd9-0e6099ebc9a8"
        },
        "item": {
          "id": "f4126bf0-1c09-4ea0-a8db-126dd817d3f4",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b61f0cc4-7b31-4c3d-9dfc-db276d0b12c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62062935-84d0-4d79-abfa-21b4d8074161",
        "cursor": {
          "ref": "b6c525d6-8ae0-4a4f-9185-eb9bc43ac6f7",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "cb767a79-8c96-4ec7-b15c-5b8917320737"
        },
        "item": {
          "id": "62062935-84d0-4d79-abfa-21b4d8074161",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f69db46b-1fb5-4ae5-a57f-130182c6413e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25ea82c-67a7-45c6-b4ae-300572bbe69a",
        "cursor": {
          "ref": "2f9190e5-9625-4bf7-8988-80ee778bf2a7",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2d9f9aea-0914-4874-b4fb-3167d333c04a"
        },
        "item": {
          "id": "d25ea82c-67a7-45c6-b4ae-300572bbe69a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5a5d9213-6b50-4e8e-bec2-8baeeb50b97c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f1ca6c-cfa1-48dd-99dc-6a88ee1bc7ff",
        "cursor": {
          "ref": "5d433793-2c3a-4afe-82c5-c388a731d712",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "741bd58d-6680-41f0-a923-4ad09ca72438"
        },
        "item": {
          "id": "e8f1ca6c-cfa1-48dd-99dc-6a88ee1bc7ff",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5ac90f31-988f-4690-a5dd-506dba404808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7420dce9-166e-4c20-a840-1dfd60ce6d01",
        "cursor": {
          "ref": "88cf65fb-64bb-4fd3-b6cb-429ee7c4bc2c",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "30101b55-eaff-4505-9da3-c2b0e11cc01c"
        },
        "item": {
          "id": "7420dce9-166e-4c20-a840-1dfd60ce6d01",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "05eb62f5-1820-42a6-a2b6-53f11988f7f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45685467-a1c8-4658-956f-3c3bf46eb081",
        "cursor": {
          "ref": "3792f69b-19fd-4c9d-9281-4fcfe097a568",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8f87b372-6b3f-4a9a-b16e-a9649b7a2044"
        },
        "item": {
          "id": "45685467-a1c8-4658-956f-3c3bf46eb081",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3427d5e7-3210-42ec-bb03-88a4b08eb8db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a451f77-28c8-4177-92d1-a711a394a2a6",
        "cursor": {
          "ref": "1105ea5e-a863-4e1e-8739-ee9fec11816b",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3dfce5af-2b95-4e90-81fe-1375e86efd00"
        },
        "item": {
          "id": "7a451f77-28c8-4177-92d1-a711a394a2a6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8a4c9b27-ff9c-4a31-a93f-f9c55ce17b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "729cec4d-f580-4de0-8bcf-f59d5782bb2a",
        "cursor": {
          "ref": "979db1a8-9ff8-4a82-a6d6-f900743c43b2",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d37dc8de-8e31-487f-829d-827c122c8400"
        },
        "item": {
          "id": "729cec4d-f580-4de0-8bcf-f59d5782bb2a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "425a06f3-3dcc-49a4-84d0-e2f0f9b2bba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdeaa9ce-a863-4b2d-85da-b3814272d1cc",
        "cursor": {
          "ref": "1896af59-f7d4-44b3-948c-09d0f00780ee",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "419723ef-04ca-44b1-9b13-5bd1e17454ab"
        },
        "item": {
          "id": "fdeaa9ce-a863-4b2d-85da-b3814272d1cc",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3effc763-4933-45c6-87e9-b70401146223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27802ebe-2905-4b42-9f4e-104db77abc0f",
        "cursor": {
          "ref": "cfd69c54-cf1c-4b95-97a1-24de925f3cdf",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "289330ef-095d-4501-b4c9-ac9d1c720d70"
        },
        "item": {
          "id": "27802ebe-2905-4b42-9f4e-104db77abc0f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "78090f14-c9cd-4d5f-98b0-11a3291b5cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c19f29eb-1602-45e8-9e46-c0516979328d",
        "cursor": {
          "ref": "82c2d6bf-e140-445d-9d94-598a332d56eb",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0ac7fca1-81d8-4419-adc8-ec1ee92e5284"
        },
        "item": {
          "id": "c19f29eb-1602-45e8-9e46-c0516979328d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "25deefcf-9209-4375-86bc-61d7f5af12e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9749101-819e-4109-8607-271ba0c772a3",
        "cursor": {
          "ref": "9179cede-524b-4b33-ba66-a4d1a336d5a6",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "51bb3d60-49c6-4a7d-a4bb-d5e52c7e59ec"
        },
        "item": {
          "id": "d9749101-819e-4109-8607-271ba0c772a3",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7d063476-8853-41f4-a4de-3759399d3ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d12f4f-e902-48e4-93ed-807402765261",
        "cursor": {
          "ref": "9f802324-af6e-41c0-a13b-30fd60292df4",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b6ea313b-fe4c-4c35-930e-9780c6168ed7"
        },
        "item": {
          "id": "47d12f4f-e902-48e4-93ed-807402765261",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "071f65c9-cb7f-4d4c-9030-364384590e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d6b81bf-ff67-416f-882d-0f0ea6796918",
        "cursor": {
          "ref": "d54c97e4-6fc5-4c72-bad0-7ddc40939344",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5d25acd6-83ce-47c4-bf2d-231832d7d3b1"
        },
        "item": {
          "id": "3d6b81bf-ff67-416f-882d-0f0ea6796918",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c5d1dd61-6c6a-4089-9a77-c9eceda9325e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1353c1b8-0eb1-42ac-bfeb-e83074befd53",
        "cursor": {
          "ref": "73d212bd-a7d6-4358-baac-b611a589a9ce",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8411ed06-4040-40dd-97fe-5b153e8bfb09"
        },
        "item": {
          "id": "1353c1b8-0eb1-42ac-bfeb-e83074befd53",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8ac8fc07-1b6b-4664-b065-4e4b71a1064f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec8ad4f-91ba-4081-b1eb-54000df86338",
        "cursor": {
          "ref": "ca22dad4-956e-4afc-abd8-56c8b1b91790",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "59883314-f1cb-43bb-b370-e039d344d5fb"
        },
        "item": {
          "id": "7ec8ad4f-91ba-4081-b1eb-54000df86338",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "666d0354-ae39-477c-86c0-e4074e1aabae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9086b09-e611-41c2-a171-efd2ee7dbe0f",
        "cursor": {
          "ref": "22f78e10-5309-44a0-9cc3-4fbff12dff03",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3884d8b1-5ee2-4848-9a3e-047f1d6ecc6c"
        },
        "item": {
          "id": "e9086b09-e611-41c2-a171-efd2ee7dbe0f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f078d8ce-2fc0-420a-bf9f-be27f4209317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "853305c7-feb3-40d6-9703-4be2ce975f9b",
        "cursor": {
          "ref": "6bb72337-c696-464a-a9c7-2703a212434b",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b051553c-92ef-4471-9565-161e0292d5b9"
        },
        "item": {
          "id": "853305c7-feb3-40d6-9703-4be2ce975f9b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "614477a6-c974-4a72-bc41-a4ff6419d8e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "424864e7-03b3-48f2-bb10-c60e0eed2e74",
        "cursor": {
          "ref": "d7fc349a-8ee2-44e0-9835-d9f5b136cef4",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cfd9ecd3-5f0d-44bc-afb1-5dee8ebb1ddb"
        },
        "item": {
          "id": "424864e7-03b3-48f2-bb10-c60e0eed2e74",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "95db3afa-f26d-441d-aedc-48b222cf2911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de03789e-5a3c-43e1-b2c6-5b9dc7616b88",
        "cursor": {
          "ref": "28ea02eb-5e8c-4067-b096-a3973eddd6b3",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2c8f617d-0cc0-47b9-89c6-94219dfa3e14"
        },
        "item": {
          "id": "de03789e-5a3c-43e1-b2c6-5b9dc7616b88",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "178689e5-2c1c-4c85-8c97-a7857751f469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ea26fc-0bf5-4b68-bb7c-fa9efa1623b9",
        "cursor": {
          "ref": "0119e843-9e9a-4c06-9a5c-04f636989e27",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1d45c390-b54d-4493-9899-04961ab1dca3"
        },
        "item": {
          "id": "b9ea26fc-0bf5-4b68-bb7c-fa9efa1623b9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "efc1dc87-9000-40ce-be68-bef080af6101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065667ec-e5c1-4f64-8ea7-00f554d55d72",
        "cursor": {
          "ref": "8559d58b-633c-44a7-849a-339f9a6035d9",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "fb4a17b6-f61d-4709-889d-8943e331b4a3"
        },
        "item": {
          "id": "065667ec-e5c1-4f64-8ea7-00f554d55d72",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0e65e057-4e16-4ad9-a3b1-120095bae7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf56af3-adc0-40b0-9e9d-a10e2edadbca",
        "cursor": {
          "ref": "c9fa4f4d-4791-44b1-bc51-6d5cb0760736",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b91ab2a6-46ae-4959-b2fc-b6f2f233c40f"
        },
        "item": {
          "id": "6cf56af3-adc0-40b0-9e9d-a10e2edadbca",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "04ea0277-2358-48e0-8683-5ea49b25d47e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f45b073-f6b8-4611-b841-f4df7106998b",
        "cursor": {
          "ref": "c783bbfe-a9c7-467b-8cf7-447ea81d01ae",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e28c1c5c-e777-48b9-8118-90b05e8125cc"
        },
        "item": {
          "id": "5f45b073-f6b8-4611-b841-f4df7106998b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e9fb9aa2-9519-4b9d-ad78-dd1af7c5fe29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f76b985c-27bb-4e78-8b8f-1678f963ce42",
        "cursor": {
          "ref": "3a0b1c8a-e1c0-4d74-95c6-1cc51de747b3",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a73b93f3-8971-47d9-8f29-780c57b98d62"
        },
        "item": {
          "id": "f76b985c-27bb-4e78-8b8f-1678f963ce42",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "0cc0b85a-e0e7-4314-9bbe-d7b5811efc14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c1b273-5f55-4061-b166-5fc863e5b6c2",
        "cursor": {
          "ref": "717484c7-f5c7-4b96-b3d3-c8a99932a2d0",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d8fa21b2-a730-4b1a-bebd-77947460553e"
        },
        "item": {
          "id": "51c1b273-5f55-4061-b166-5fc863e5b6c2",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d41781d5-4314-4461-bf81-583cbde3417a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf01861b-2b1c-457e-81f7-ac39dca7d12e",
        "cursor": {
          "ref": "ab6720ae-0d24-489d-808b-e5ae0288c2cb",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e73ba75a-8b38-445f-a089-e24f21a99d8f"
        },
        "item": {
          "id": "cf01861b-2b1c-457e-81f7-ac39dca7d12e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "245b437b-27e5-42f4-bc2f-a0c795c91c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b5fa2a-de1b-4639-adf5-ceeeb8405c64",
        "cursor": {
          "ref": "91757711-717b-41f2-aa52-eb0f3dd56314",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0ef0cf7f-8c07-4181-bf0f-28d69cfe0659"
        },
        "item": {
          "id": "c7b5fa2a-de1b-4639-adf5-ceeeb8405c64",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "77e860a7-3fd6-4697-a36d-f9efb37e63d3",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "53def593-2e76-47e0-8ccf-73ab9b1a61ab",
        "cursor": {
          "ref": "6787f25b-0c03-4c7e-8ef3-7a4e46647a7b",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2ecfe647-88c9-412e-941f-14d2f2bfa421"
        },
        "item": {
          "id": "53def593-2e76-47e0-8ccf-73ab9b1a61ab",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "908f27e6-b7c7-4d71-9f2c-ce8e43819395",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "34c6d120-58af-4801-914f-6dfe45a655c0",
        "cursor": {
          "ref": "79ea2267-ebb6-4434-9396-398a9bc7f2ac",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "182647d6-9475-4b4b-8885-b4f85818540c"
        },
        "item": {
          "id": "34c6d120-58af-4801-914f-6dfe45a655c0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b01d9acc-a375-4e69-89dd-fabd7652f679",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "777273c6-62e7-46d6-b18e-72707833c17c",
        "cursor": {
          "ref": "26afd504-e190-4e64-b636-593fc5eeec01",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e49b52bf-fb43-4889-be0e-94297db0552a"
        },
        "item": {
          "id": "777273c6-62e7-46d6-b18e-72707833c17c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "52556eb4-e29a-4779-b4dc-6851197f092d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a09cf5-53a2-443f-824c-b58912e70cf7",
        "cursor": {
          "ref": "76e2306a-a392-45bd-a1f6-1d221d37b73b",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a2d9a764-a8c4-437a-bdb8-22c4e953ea45"
        },
        "item": {
          "id": "30a09cf5-53a2-443f-824c-b58912e70cf7",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "64b685f7-19d7-45c3-9492-3b33beced7ed",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "c9969202-c290-4d89-9e06-c8d2bd9b5b6b",
        "cursor": {
          "ref": "029f407f-1303-49e5-a53e-111d2e4af511",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "4e868cb8-adb4-492a-aa6d-53134438f2c8"
        },
        "item": {
          "id": "c9969202-c290-4d89-9e06-c8d2bd9b5b6b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d857a641-b282-44ac-b7c9-6d609089a3c3",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "d34f565a-a17e-4c6c-9aff-f2870d6419f3",
        "cursor": {
          "ref": "bc864fe0-3858-4865-b86d-420d25665dc1",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "64fbb2cd-0b3b-40de-b210-8e9f6ab1bb6d"
        },
        "item": {
          "id": "d34f565a-a17e-4c6c-9aff-f2870d6419f3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0a641c70-9f47-4e03-9279-5c7eedf559d7",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "6987b447-fc6d-4519-ba00-371cf4646879",
        "cursor": {
          "ref": "75c5ce04-91c9-4be1-afe1-855942210110",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "84871ca5-1ec7-4276-bc48-484b7713e1c2"
        },
        "item": {
          "id": "6987b447-fc6d-4519-ba00-371cf4646879",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "40c97e48-ff6a-4af2-9964-7edbe441c393",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "6bc721f5-1853-49de-92ba-b54731e9fd59",
        "cursor": {
          "ref": "9901aa0d-f265-44e9-a932-ac294d991be4",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "fd07741d-61aa-4b48-84fc-c1f3f003dc06"
        },
        "item": {
          "id": "6bc721f5-1853-49de-92ba-b54731e9fd59",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "909e6803-47ff-4dec-8e7e-648a7659b9d3",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "9343b4bb-8bdf-455b-931f-f64b9eac42c2",
        "cursor": {
          "ref": "5fea015f-a608-410a-83c7-caa1d95d5fed",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2316783c-e520-402b-9997-10f03b85e043"
        },
        "item": {
          "id": "9343b4bb-8bdf-455b-931f-f64b9eac42c2",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "33ba9d2d-b9de-4572-8367-b2bff7de4f79",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "dcbeee3a-99f8-442d-9638-d3eee0ee0978",
        "cursor": {
          "ref": "c684fdf4-0ff8-4a99-ba13-306b8507e3bb",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "eca07b0e-bc65-4bb3-8201-0d612940eaf7"
        },
        "item": {
          "id": "dcbeee3a-99f8-442d-9638-d3eee0ee0978",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0544aea1-a8d3-47ad-8954-0257487af366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629bb00f-2a4c-4fe4-9130-8c309cdea578",
        "cursor": {
          "ref": "1c728ce4-27c4-40a4-a3ce-55f589b6d04c",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "fdde5bf0-9a82-4f08-a914-3d3b1c65cb58"
        },
        "item": {
          "id": "629bb00f-2a4c-4fe4-9130-8c309cdea578",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "27e4b3b4-3851-4455-bd00-7b8fa9d40608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670096f0-d820-4adf-93f4-82ec8c3b5296",
        "cursor": {
          "ref": "a24192e0-5f64-4049-8d2f-2556d1e9ae67",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5648147d-5ef2-4fe4-b893-b47447e846fc"
        },
        "item": {
          "id": "670096f0-d820-4adf-93f4-82ec8c3b5296",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c62acebc-68d5-424d-a4a5-8c31e02a9e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5a0dfb-639a-49d9-aa84-0a1ccb2ad7ed",
        "cursor": {
          "ref": "b430cb55-c9b6-49d3-8323-d4ccd7c35292",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2ec9b905-d6d0-455c-8a8d-c893d46fcab9"
        },
        "item": {
          "id": "9e5a0dfb-639a-49d9-aa84-0a1ccb2ad7ed",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e6659eb5-cbb8-4b79-8155-044c6a8e00d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff54d23-bb0e-4317-8e62-31292c1f8eef",
        "cursor": {
          "ref": "8d45a551-938c-4294-b71e-cce7537020eb",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "564358ac-2dc7-4b2a-9496-1a013c592759"
        },
        "item": {
          "id": "8ff54d23-bb0e-4317-8e62-31292c1f8eef",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ce0ca55f-dda6-48c0-b943-76fce8558d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27da0adf-1220-4a61-b1bb-e1eae818a1ee",
        "cursor": {
          "ref": "1b6a4b46-7517-4215-84b4-f358cddd58a0",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9785a491-2b58-491c-b1ee-e4aefa2fa0e8"
        },
        "item": {
          "id": "27da0adf-1220-4a61-b1bb-e1eae818a1ee",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ea8fa52e-93ad-4377-b17b-a0f1145e7f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3bcaced-007e-4acf-95b5-fd3f9185d579",
        "cursor": {
          "ref": "1eff1a94-e3ac-41ff-899d-5c30d9ea1082",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "675b2651-f405-4c5a-80dc-e0e749fe6b61"
        },
        "item": {
          "id": "c3bcaced-007e-4acf-95b5-fd3f9185d579",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "377b1125-9eeb-445c-93de-aedbf7ec6e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3435faae-f2d5-4a8c-a951-e56cd69496ad",
        "cursor": {
          "ref": "bf4d9dfa-d521-4191-a53f-93ec771d85c1",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "84eaa3b0-cf19-4f54-96e0-8a842720028b"
        },
        "item": {
          "id": "3435faae-f2d5-4a8c-a951-e56cd69496ad",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "512a83a9-113d-4736-a494-ed14705ca5f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741be28c-70f5-4c54-9462-4ca395d0654c",
        "cursor": {
          "ref": "376be07f-3791-4ec4-9ead-8c8a19217b9d",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b5f871de-a1a8-4c57-a391-a83d8feebaed"
        },
        "item": {
          "id": "741be28c-70f5-4c54-9462-4ca395d0654c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c72354ed-8b9c-4444-9f22-1c295eb32f22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f8f26f-449c-451c-8553-0ce2f89c8c26",
        "cursor": {
          "ref": "c7288ff5-cb06-4d32-866a-6f7cb57e4d13",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b0c666a7-a976-40e9-a7c4-342184da3df7"
        },
        "item": {
          "id": "36f8f26f-449c-451c-8553-0ce2f89c8c26",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2697a8b2-1e75-4a09-b05c-f50b4e851d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352ba3b3-9b56-409a-89ad-8057236cb78d",
        "cursor": {
          "ref": "9d51cb35-0ab8-4b89-b707-c5a91aa79e7b",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cbe47f14-aeb4-47b5-9bd1-a0afc4b3f5d7"
        },
        "item": {
          "id": "352ba3b3-9b56-409a-89ad-8057236cb78d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2d126573-ef6d-4a3d-b506-140e8680b9a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1ef07a-8896-4a4b-ac13-5122df042df0",
        "cursor": {
          "ref": "9d532101-071f-4d89-8ad5-7d2ae22b3744",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "25f2bcfd-1c04-4fb1-a75f-a238c6dbd601"
        },
        "item": {
          "id": "2e1ef07a-8896-4a4b-ac13-5122df042df0",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "81bb82fe-3b98-4a9d-b852-adea007fa74e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d75e81f-f1ed-45fb-8747-b7c4b4fe460e",
        "cursor": {
          "ref": "d2594331-0172-4e31-8fe9-a2cab844207b",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1c6bb85a-68bf-460c-830e-9054fac91e2b"
        },
        "item": {
          "id": "5d75e81f-f1ed-45fb-8747-b7c4b4fe460e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b066a7d4-3701-4bbb-9133-38b7b717737e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f87c6c-bded-4558-8949-acc4b56c9aee",
        "cursor": {
          "ref": "7c3b85ae-8ad9-458e-be39-db7ea167b66f",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "04a20689-22f2-4023-92b4-7ea7430bfda5"
        },
        "item": {
          "id": "e4f87c6c-bded-4558-8949-acc4b56c9aee",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4670712f-8993-413c-bdd3-c3918b3e6419",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "5eb8d225-136c-45b4-a2f2-6a2db0379957",
        "cursor": {
          "ref": "1c670acc-5949-462f-a9f2-067cda21c45a",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "6fd9f48a-e8e1-4932-87e0-d616dc34981f"
        },
        "item": {
          "id": "5eb8d225-136c-45b4-a2f2-6a2db0379957",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6208e363-4a75-4240-bb26-9c0e42420881",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "f535c30d-ff14-4d4c-8ff2-58177d54a8f3",
        "cursor": {
          "ref": "b0b23136-a00e-4a6d-980c-a51cc9e29704",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e53bae1a-d9a7-4fe4-a067-657e6cadec47"
        },
        "item": {
          "id": "f535c30d-ff14-4d4c-8ff2-58177d54a8f3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6eeb8d1f-c6ec-4998-8159-eec12cb982bb",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "546f8fe8-1536-4ebe-a236-0d18715d7ffb",
        "cursor": {
          "ref": "32598400-a60a-4679-b516-4f12e2239597",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "787cf885-15d7-4ac7-8e38-58f9afe1018c"
        },
        "item": {
          "id": "546f8fe8-1536-4ebe-a236-0d18715d7ffb",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "858642dd-d4a7-48bb-bd03-e0c296f2379e",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "601f670a-b866-4e22-a23a-0965d440aa91",
        "cursor": {
          "ref": "926e557d-9303-4d16-9594-e99100016452",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "56b68885-125f-41b7-a457-4824d6355cf6"
        },
        "item": {
          "id": "601f670a-b866-4e22-a23a-0965d440aa91",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "dd423b65-c1a3-437a-8ea0-11b3ab4ee453",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "fb21467e-924d-4bd2-9dc5-7aa49fd1dbf4",
        "cursor": {
          "ref": "d38bdc51-12e6-4119-8d7d-272387e7cb3e",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c7f0ba43-fdec-4b7a-9fd8-0722d8a9b881"
        },
        "item": {
          "id": "fb21467e-924d-4bd2-9dc5-7aa49fd1dbf4",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "48708204-f27f-4d73-aabe-85176de7fff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6256599-15e1-4bfb-a485-eb63b8b61d8f",
        "cursor": {
          "ref": "9c592845-d5dd-454f-b529-b60640fa0275",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a8d4c986-77ef-414c-8a94-ae030fe6d4a0"
        },
        "item": {
          "id": "f6256599-15e1-4bfb-a485-eb63b8b61d8f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a31d9516-8a34-4852-b241-f402d64f3e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "954667b0-5b8b-433b-9b0c-da51d243fab1",
        "cursor": {
          "ref": "7b604612-983c-4ad5-952a-4b53788d01b9",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7f191b6d-5a45-4cfc-86ea-e5d0825efdd1"
        },
        "item": {
          "id": "954667b0-5b8b-433b-9b0c-da51d243fab1",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1e6472fb-0191-46aa-ad85-81fa0f5578ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7acb4c9-1623-431f-b236-f5d12493a2ef",
        "cursor": {
          "ref": "3a1ef8e6-f326-4312-ac0b-942bd93332aa",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b4627f4a-1a38-4e9a-b0fe-15c89f96d399"
        },
        "item": {
          "id": "e7acb4c9-1623-431f-b236-f5d12493a2ef",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "50ed0a0d-70a6-47ac-a2cd-8e252527cb5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f5acb8-cba8-4fc4-ae4f-58c0840befc5",
        "cursor": {
          "ref": "5ab7a625-81fa-4b5d-b915-12237ae0b618",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e06b8584-6df9-4a5c-afb3-966d81ab75aa"
        },
        "item": {
          "id": "e9f5acb8-cba8-4fc4-ae4f-58c0840befc5",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7a5e2f6f-3fd2-4ad3-93f7-72ecf48a5a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f652067-1a5f-4410-a7e6-1286b09530fc",
        "cursor": {
          "ref": "aba285d9-819b-43eb-97c2-569aa22109d1",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "bf218d4b-3b7e-4a61-b138-729bdb19b029"
        },
        "item": {
          "id": "6f652067-1a5f-4410-a7e6-1286b09530fc",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "bea40ec4-c10b-4ee1-a37a-5539449ed554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8abd2bfc-add1-4df1-bc6f-e31e11d47701",
        "cursor": {
          "ref": "c72128bf-dfc5-4fdb-a950-6a7689c3d4af",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4b857b30-e3db-4cb1-aa38-c5bd7a1f89ff"
        },
        "item": {
          "id": "8abd2bfc-add1-4df1-bc6f-e31e11d47701",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2886a7c8-75b4-49ec-aba2-8c9c1bc5b895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0883eaeb-1459-4e02-9765-217f3eeb653a",
        "cursor": {
          "ref": "2ce90830-7d07-4fcf-98a8-29f6114df956",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3a422429-33b8-4c04-b78b-eab810c6171c"
        },
        "item": {
          "id": "0883eaeb-1459-4e02-9765-217f3eeb653a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f2724f16-4aaf-4df1-8477-16b3a6eb9fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac00a1b1-c898-488a-a982-8a8b3e3eb42a",
        "cursor": {
          "ref": "18131883-cc87-4c30-afcf-56c834e415cc",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "267dffdd-7ab3-4d64-9d00-4ffa60bc7490"
        },
        "item": {
          "id": "ac00a1b1-c898-488a-a982-8a8b3e3eb42a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b0360ec8-840f-4ab4-9633-fb53e4719a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0da0c30-e3a0-4671-abe9-f120791f9b6a",
        "cursor": {
          "ref": "bfc264eb-4a9e-49d9-96c6-6e2a84dd704c",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5148b463-c605-407a-b285-22e65f827b75"
        },
        "item": {
          "id": "c0da0c30-e3a0-4671-abe9-f120791f9b6a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4fcbd4e6-1d09-4f95-b90a-6aa15ebb0e58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84852413-d54c-4121-b89d-dad0c319c2e8",
        "cursor": {
          "ref": "edaf4a05-cef3-4bc1-80f2-104b32541898",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b470ed97-364d-4407-bf10-182a3e633e52"
        },
        "item": {
          "id": "84852413-d54c-4121-b89d-dad0c319c2e8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "70a16857-2148-45de-a360-cc30a21354a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c3cabc3-bb32-4ef7-a4d5-879a7f638d69",
        "cursor": {
          "ref": "acd076fe-79d7-4ee3-8f99-7d6a1514220f",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1ac2ee61-e4a6-48cc-856a-34af9d7c1bc8"
        },
        "item": {
          "id": "0c3cabc3-bb32-4ef7-a4d5-879a7f638d69",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b0b03ee6-49dd-4139-ae4d-2f485ee39638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "122464da-0f05-4391-94df-8bc89a54dec4",
        "cursor": {
          "ref": "98a7ad86-4f96-4270-8b98-59805ab2a040",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e02768dc-be5d-4544-be96-8e4866971f02"
        },
        "item": {
          "id": "122464da-0f05-4391-94df-8bc89a54dec4",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "845b5367-6578-4638-a68e-8d42b202c97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2ea3aa-5c02-4c23-9584-ec28b3ed42b5",
        "cursor": {
          "ref": "2f9fea9a-f6db-4866-8625-6846e39f21cb",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ad4fb250-dc0c-428b-99f9-29420cbc4b29"
        },
        "item": {
          "id": "ac2ea3aa-5c02-4c23-9584-ec28b3ed42b5",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b3f4938e-afc1-433d-b175-06f2c174ff0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b412e4ad-5736-417f-9414-c801175b974c",
        "cursor": {
          "ref": "1f737195-fe39-4d93-b621-fc743860e425",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "55d06d37-5860-48c1-9244-4f97f21ce77b"
        },
        "item": {
          "id": "b412e4ad-5736-417f-9414-c801175b974c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0a7d032b-eab7-4571-9137-d5c07c222798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f30413b-6018-4ad7-a018-7e95233d8a16",
        "cursor": {
          "ref": "55ab652c-5d3e-4792-b535-fe5c30547539",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e831e32b-98cd-499b-8aab-04433dc4ea6b"
        },
        "item": {
          "id": "7f30413b-6018-4ad7-a018-7e95233d8a16",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9711c522-d45e-4e27-b525-b001bffc9995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86e46ba-b8ac-4eb4-a954-13a7d8e9a1cf",
        "cursor": {
          "ref": "666b4839-ee99-459e-b2db-bcd8a3ee2fb9",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "bd14fd6c-75ae-471f-885e-caf6fe08bb47"
        },
        "item": {
          "id": "b86e46ba-b8ac-4eb4-a954-13a7d8e9a1cf",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "64ebd369-1a21-45a3-80c9-3edd085c4b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d687b4b-7754-48ee-9ac5-f30c2287f6d0",
        "cursor": {
          "ref": "87a5d65b-f9fa-4e7a-bf5b-64391560947b",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b27fd133-43d3-4f9f-9345-b2b82fec3506"
        },
        "item": {
          "id": "9d687b4b-7754-48ee-9ac5-f30c2287f6d0",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "689f18ae-c48b-4f8a-91bc-54923f94168f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "889fe809-9a97-4005-9b03-ade7ea6be0ad",
        "cursor": {
          "ref": "73274eaa-9801-4bb9-85d0-71552733e86f",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "51b52245-74df-4f3e-88a7-80c9549d4c68"
        },
        "item": {
          "id": "889fe809-9a97-4005-9b03-ade7ea6be0ad",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d2a840b8-05cd-423f-b78b-330ea351b4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5ba854-7f93-4ef9-9cdb-9790eb7bc0b6",
        "cursor": {
          "ref": "9f902d89-d0aa-4ac2-84c3-0989d4137d52",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "753a4ff8-048c-4a9f-97d8-fa10d1babf6c"
        },
        "item": {
          "id": "ab5ba854-7f93-4ef9-9cdb-9790eb7bc0b6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "35f7151d-bd97-4656-9753-09cf433b9703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c87a51-308e-4327-8bf0-8fb9e3b4dfcb",
        "cursor": {
          "ref": "f5229a04-1f80-4396-a60b-9c65b933f2fe",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4e9a6c9b-1d23-41c7-812b-c51933e50718"
        },
        "item": {
          "id": "f7c87a51-308e-4327-8bf0-8fb9e3b4dfcb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "629e1b9d-fae0-4c4a-9554-c66bc0e32dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e419f6-ac85-48b6-a20a-eed15d09f1bd",
        "cursor": {
          "ref": "cafef939-b16f-4d43-954f-35adc83a7841",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ab56d639-ae8d-45bb-99af-a90aee7b215e"
        },
        "item": {
          "id": "09e419f6-ac85-48b6-a20a-eed15d09f1bd",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4ac6ccec-a97d-4491-bff2-30a363482a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e4458f-6f9a-4373-883b-933ec2f5fd39",
        "cursor": {
          "ref": "5e6cca85-1faf-4d84-abce-6123e3a929d5",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8490fb7b-d082-4383-aa44-b7c21cc01dae"
        },
        "item": {
          "id": "b2e4458f-6f9a-4373-883b-933ec2f5fd39",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1f7150eb-17b9-49be-8124-9fd5aac863f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ee83fd-566d-4e1a-b546-66990830bb96",
        "cursor": {
          "ref": "25680e86-b8e7-444b-a162-ef3e4dd7a6b3",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2914eba4-e058-47d3-9575-cefd4de401d8"
        },
        "item": {
          "id": "c8ee83fd-566d-4e1a-b546-66990830bb96",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7890f45f-0a32-4da3-a24e-b5ac1b5a1909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ae1e1b-b179-4513-81c5-0f5b8377f062",
        "cursor": {
          "ref": "d1593576-5241-424c-81b0-152c0ede829d",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "984c8888-5119-45d1-87a0-262afbbebab5"
        },
        "item": {
          "id": "12ae1e1b-b179-4513-81c5-0f5b8377f062",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4fe43150-52ec-4d16-bfe1-9299b92d36ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b859c562-13ed-4eaf-8b6f-4cb8853aeb22",
        "cursor": {
          "ref": "ce758ddb-5e51-45fb-b822-f28c10aff661",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "03773711-cd9c-470f-aa38-fb5a4bb8de9e"
        },
        "item": {
          "id": "b859c562-13ed-4eaf-8b6f-4cb8853aeb22",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2b4566ff-0d9e-433e-834f-e9c8495260a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b64c44-9e8e-494d-9c2d-8f9c99538c54",
        "cursor": {
          "ref": "9e95988f-66d3-45b7-aebc-764ff318b356",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2dec1f53-85b5-4bde-aa2b-cfa796c733d0"
        },
        "item": {
          "id": "05b64c44-9e8e-494d-9c2d-8f9c99538c54",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "28fdd8ff-ae3b-49b4-87fd-a372ee628e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e0403d-d335-4783-97e4-871ee77a3e05",
        "cursor": {
          "ref": "d54f475b-44ae-4ec2-beb7-7aa5410898f1",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a99b34ad-bf6d-4e68-87d8-5e42aee89c07"
        },
        "item": {
          "id": "00e0403d-d335-4783-97e4-871ee77a3e05",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "02776f5c-4136-466f-a93b-2453fce1d66a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa020d0-946d-4b44-8477-4abf53d6b269",
        "cursor": {
          "ref": "2f3ea186-4d6a-467a-81f3-82bbf9301e66",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d293f689-5bbd-48ac-bbc8-dd658b0a8f04"
        },
        "item": {
          "id": "6fa020d0-946d-4b44-8477-4abf53d6b269",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f46e9c93-c644-4c6d-893d-529fe3c59e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe97b8e2-fdee-4be2-901d-bb48970f1f3b",
        "cursor": {
          "ref": "c249a3ee-d28a-49dc-906a-5b564c4be7d2",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "fdb1d864-efad-4599-8cbd-503a162ddd9b"
        },
        "item": {
          "id": "fe97b8e2-fdee-4be2-901d-bb48970f1f3b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0e9dcd86-8d92-4499-a04f-4486e86b07a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5a51ad-e17c-40dd-96a9-3d7e9acb1f76",
        "cursor": {
          "ref": "57abd6e5-36b8-4671-9cf3-38916d900adb",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "162f2be5-b540-4340-8903-da6092c01d5b"
        },
        "item": {
          "id": "cd5a51ad-e17c-40dd-96a9-3d7e9acb1f76",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ad5a3f86-366e-4c46-9535-9fd60746881e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a920eff9-a5f4-44c6-8264-1e2f5e4c3549",
        "cursor": {
          "ref": "40b6d3bc-b8b2-4fd8-9afe-9531e2778d49",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b6542a19-aa50-4ecb-a244-d86f0d702c5a"
        },
        "item": {
          "id": "a920eff9-a5f4-44c6-8264-1e2f5e4c3549",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b5909cc7-49a6-4b1f-88f9-1e3227b34e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d9d4e20-0831-4b48-98c1-19323ec32f53",
        "cursor": {
          "ref": "537df80e-fecf-4599-a59d-e3e3a359f44e",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "12a7e915-b54d-4aac-aeb3-410402909e1e"
        },
        "item": {
          "id": "8d9d4e20-0831-4b48-98c1-19323ec32f53",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0f4ba480-e1c7-43cb-a047-45a015ed9621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce8f87ee-c19a-474d-8c47-27596933b7da",
        "cursor": {
          "ref": "30a6da9c-409a-4015-ae90-e0160972f02c",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "94f61ec0-6006-4c00-91b7-7d62bc398acd"
        },
        "item": {
          "id": "ce8f87ee-c19a-474d-8c47-27596933b7da",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "edf57168-344d-4396-a14a-ddc9477b5398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b9ed23-3ecf-48a5-8722-03a44c53c557",
        "cursor": {
          "ref": "c594f1cd-d810-402d-be9d-8903bc0bcf6e",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "05547de9-0261-4a50-848c-3c1fb2f263a6"
        },
        "item": {
          "id": "11b9ed23-3ecf-48a5-8722-03a44c53c557",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5b33c1d7-1313-4346-9ac3-becb8560c55c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e8f894-d0c5-4039-a5b4-1dacb1f51f8e",
        "cursor": {
          "ref": "85f59483-f513-42d8-aa91-d10d0b1f3878",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "dfa0b90f-e1a1-4ff6-8aeb-c80ce4112229"
        },
        "item": {
          "id": "a7e8f894-d0c5-4039-a5b4-1dacb1f51f8e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "35a60599-b073-454f-baa8-8b968bfdb8b7",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "1f0c4b87-7c9d-46b9-a9b6-830fb62edfb7",
        "cursor": {
          "ref": "f997c751-a8ca-4692-9827-f9692b43c9f8",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ee6f986e-5891-42aa-99b7-68e9c8ab62e1"
        },
        "item": {
          "id": "1f0c4b87-7c9d-46b9-a9b6-830fb62edfb7",
          "name": "credentials_verify"
        },
        "response": {
          "id": "543584a3-0d3c-4ae4-8936-3a75ee70ddb0",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "da44b518-795a-4805-b27a-bf73d47d3bdb",
        "cursor": {
          "ref": "59cd9cd2-a1c1-4338-86d1-112f40e643ee",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "633d81bb-735b-44d4-9bb7-e1fb7486ba53"
        },
        "item": {
          "id": "da44b518-795a-4805-b27a-bf73d47d3bdb",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "230889e3-e6fd-4a85-90f8-c11b5b0b9f9a",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e708fcd4-b2be-42bb-9ee8-ba01ceebdb2d",
        "cursor": {
          "ref": "c835a283-abe8-4da5-a52e-a1939c477e72",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0993d8dc-5de7-4997-8630-4c96e47576ec"
        },
        "item": {
          "id": "e708fcd4-b2be-42bb-9ee8-ba01ceebdb2d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "048e1d10-08a6-43ba-8659-2b10cc1610ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e708fcd4-b2be-42bb-9ee8-ba01ceebdb2d",
        "cursor": {
          "ref": "c835a283-abe8-4da5-a52e-a1939c477e72",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0993d8dc-5de7-4997-8630-4c96e47576ec"
        },
        "item": {
          "id": "e708fcd4-b2be-42bb-9ee8-ba01ceebdb2d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "048e1d10-08a6-43ba-8659-2b10cc1610ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb87600-3ac2-48a4-bc83-62c97337a7d7",
        "cursor": {
          "ref": "29ea28ac-5df4-464e-9fe9-62581e946833",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e2809d29-46d9-4d5a-b912-72e00e4a3aca"
        },
        "item": {
          "id": "1eb87600-3ac2-48a4-bc83-62c97337a7d7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ca69be68-ffcf-48d6-bde5-7fb441958c54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b37b091f-c30e-4ea4-921a-d252434f165e",
        "cursor": {
          "ref": "fbff1b49-ed7c-4b84-8b3a-d4a0ff721dcf",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a390235a-9b13-4b91-862b-f643d963bc69"
        },
        "item": {
          "id": "b37b091f-c30e-4ea4-921a-d252434f165e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8d1ee432-0aec-45b4-964c-53593a3c874d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}