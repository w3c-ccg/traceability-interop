{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "79e083bc-34ec-427a-8cd4-90157db5a735",
        "name": "Clear Cache",
        "item": [
          {
            "id": "47f7330c-80d0-44a9-bfa7-5d64290e4ca3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9196e3e1-22b4-430f-9345-f9b35328cea6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e9ade7ec-619c-44cc-aabb-1975ce4e4534"
                }
              }
            ]
          },
          {
            "id": "b5504c3a-e8d9-417f-8a6f-0ceb64706fe1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e20bb241-5de6-430a-8af7-79786ff418d9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f07ee840-2323-4401-ae62-a3530530ce74"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "01864f33-49e7-46bf-9718-2a7ad1281f60",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "64093452-0996-431d-a851-a4c8249c19f5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "76bdb3b7-d8ba-4e89-abe4-fd277c09362d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0d7ec60-6365-4c47-bb65-ead4bea96d03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "196f5604-5db1-4672-beaf-c10aaedf4173"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ca589b76-475d-463a-9c9c-28ee6bf4084c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4eec5818-adf0-4b94-b3df-12dec8c3d7b9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a2aab625-701b-4c63-9380-1b646de44bcb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2b9c8af9-dd35-4abc-bfc3-13753a6bfdd4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cdec1fad-c944-4e1f-b1ba-76c254e5dbbe",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1d72b297-c48a-4238-9c62-acd33e3f3956"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a6a5960c-5e6e-4d37-8e4a-af8232ae418f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f6bcb623-bbc7-40f3-99ab-830c309b1121"
            }
          }
        ]
      },
      {
        "id": "232f539a-6b7c-4b04-9a64-c77d852849f5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "74e696be-5420-4eef-a8cc-91b70fe8d7e5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f1d84b54-d8ef-4eef-b128-05bc07bb0c67",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "041c639e-299d-4ab6-b0a1-ba76854fefba",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d2ddc86-4219-4fdd-a354-f5cd4551c2ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fcb7b5a7-334d-469e-ae76-40554ce19199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68bf36e-4066-4672-b9eb-c17660d49283",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da6fcf7-a4c6-42fa-a70f-d5e1049e3075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d373fef-c03c-4126-90d5-54d8b389c00b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196dc087-f90f-42b1-a5b4-8e129dbe04ab",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65cf3af2-8366-4541-923f-13f64b4bf310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8085c58c-2734-40ea-9fbc-1705520d1eac"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bb385e1f-1e9d-4192-873b-d5405c290da7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e371a0ea-d1be-4876-99a0-92d60eb7d4f0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878ad775-ef2f-407a-88ea-baace29b6b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67a14903-d0f7-4911-b066-8e3b8984c877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d747c3-4ff2-456d-81ae-b751ee4b7610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "734c7af1-517e-41a6-b6d3-c103c39e1d93"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a4f21ffd-e474-4d16-b20f-02e2b0890629",
            "name": "Positive Testing",
            "item": [
              {
                "id": "60db2a56-904b-4301-8b59-91d79db17e31",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "66a9b9b9-232d-4bf9-ab03-7f9f99de9c31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9d59036b-5e6b-4251-9791-ae625562d191"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d66e3b5-e5fc-4b1f-98e5-397482f6cf4a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "2d9f03ba-9795-429b-8237-9a6d1ecdce3b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6262adff-87b1-4d99-8c06-dc2a7dc4cf3d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5e36a011-2b84-4a17-a872-7c82a6dcfe68"
            }
          }
        ]
      },
      {
        "id": "5ad33c16-681f-4a09-b855-82c3de879f69",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3dc0d046-907c-42e9-b5a1-9271d36f854a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a8c3b62-2f86-4a92-b588-de91a85ddfc9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ef7b3696-53eb-4535-9959-493d7174108d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0748cffd-fd72-4181-b850-acc744ed6321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef7b189b-7a3d-4738-b8fb-e62ad7c1b71a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b76eb3-488f-429b-a280-771d8726f5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5c8e6ee-03ff-412e-a32a-1fd8c93840e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb15088-9acd-43f6-b7ad-b4df6507d503",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d258a4da-d6aa-475f-8841-4e6866857174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05678324-a71f-4fe8-a340-89e45224aa3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ea47b5-292a-4c26-9162-88880fe09f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87fce1a0-52e6-4c51-bda0-695c4568a4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5488f1ba-feb7-4221-a756-791913535296",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64bf250a-eb85-4763-98a2-f13d49f55ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc9f759-3a97-4e00-9c23-954a0624c5d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c2dc77-b4d3-4ebd-968c-e974c0003928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6872db3-2bb0-4d2c-af0a-1e3e30c18602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60bb5893-87ab-4998-b16b-b136dc825a12",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8384546-f14c-4160-905a-0b47b5890c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c1b5016-4247-4bad-9f4a-2bbd7718f9b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e8fd80-a2db-4b74-bf55-38d591a3ffb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f74f606-5da2-47bf-807e-fd009e74288d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f7b14e-50e6-47ac-bc63-fb63c99c632a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aaa9cb6-d96a-461c-be6d-8e83b40a352a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b3b27ec-ea9c-435f-9218-6b2fd89333de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a466d10b-26c6-4421-8e9c-4ddd50ab86b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f4b080c-205a-423f-abbd-67a125418244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39142ffa-ed2e-41c4-b210-0a635b26e9e4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40606f88-91a3-40b4-acd6-41cb8e3b8658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "062cb6f3-f6c9-4244-b5e3-2bd9ab533a3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d05f0d0-a941-4798-a6c1-8fab3dd62d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0abc4cc-c334-41f1-b95c-ec3340ed55b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e592fc3e-bf33-4ffd-9d96-be235a107336",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9c5722-561f-47db-8560-bb2541fa5d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab63f8e4-3965-4c3b-b411-8d1664ba156b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9345d132-c664-4563-b306-c09f3458f94d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7c39a00-ce87-40e1-bbbb-24639f31404c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1524931e-3501-4831-a7e9-721861c9ef0d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a117ea56-31b9-44a5-ab69-a9ac2ef3e376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f4f0b8-a492-4c44-974c-f390a3ff9377"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e142149b-e2b1-4472-9c3d-63251c085955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0f0a9cf-12f4-4938-aa76-ae9a88cf7157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90a02149-949d-47fa-a2d3-acde977377d3",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed08113-bf97-4722-8fa7-68d570f2f9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88426a2e-122b-454b-80b7-d77e4bac8335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13962aa6-62e9-43a7-8bd5-894d36a53b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90c522ee-f5bd-4f81-ade5-a193a774e4b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a06f3110-6ad7-4f83-86c7-77c76b67689c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c441cd90-cf09-4ea5-902c-26e5958b4fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e9f805-e266-4d65-88eb-975901a52c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b4cb55-a63c-40b8-9728-690e45170b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1143a8f-d745-4f1d-bbb0-eafbf561e7c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10901921-4bf1-4556-9b21-7086f8857130",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f29dbd-e624-4bdd-9efc-879e15a5e1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0334df13-ab16-4e3e-b9cf-1fb310c50046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b46b6e69-afaf-41ca-a86c-01b4e79bb6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5cd0cf2-7818-48b2-9e6a-a42025a701e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc69ff67-b543-49df-859e-0f9e24a2420b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef3a04b-f334-48e5-ab08-1f1d07179869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05cfea69-e804-4e48-9b5c-e1f7b3590699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea39428a-cff4-4f93-bc79-e1d8333737b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e6185ee-9921-4fc5-8b61-7147e761c9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce990d49-18b8-455a-b858-78682bc3c082",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b29d362-6da0-4b34-9617-7ceb923051b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48034a50-7cb3-4589-b455-ca876a1a95cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80959106-0372-409b-bb6a-c4f8d39532e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24b4bc3b-3706-43a8-af3f-55ff8adf23ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe096d24-2624-420a-8f2b-312eaf7d316a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6091cc-8dfa-4e1e-9f3c-c6cc0897a752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff4bb25-6769-4d90-9d7b-030e77a02bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfd2774-85df-4276-9eaa-53ff7ed2f462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a47a0320-fbf1-47bf-9610-62b7b2fc574c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48924c71-a039-4542-8b6a-fd19d19da736",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d142f6-8613-4b1f-9ff3-519df19cd562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8d2aaf8-b1bd-4953-87a8-f9765b07edd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60eba40c-7d6f-487c-945d-02c5049e590d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5cae8840-f2e4-4cac-bdbd-a989b2051c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd598909-cd7d-4559-ac61-9ca939835592",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a9fef6f-0bd9-4285-b129-217967cb10aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02698c9c-5a9d-42a8-8ba8-4014936dbe58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd36ac3c-0157-42f3-83a0-49e07a21d700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "470a5a5b-5631-400b-b8b7-3198c6fd7b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b3f772-ef95-4bc6-998d-89eac5429c43",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb742aa-a397-447d-9f31-8e11958e459c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "551dae2b-ba4c-407a-9491-7c0649f8ca43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b61a0a5-6411-4b9e-bd06-786270685e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d094c67-b406-4c61-b2a2-60ab6336ba27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69492a6-3a4e-49bf-b377-e95c2bf3e6cf",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e3831f-6286-40e0-bf98-bcd7fd6f5203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc045b98-b6a9-4364-8183-390cb1088b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f1536a-ebd7-4414-90af-62839a3cc629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "17341ff5-0491-432c-855d-ccd28281a728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0aef44-6202-49be-b203-1af1ee7b5518",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f54b9e-1772-4401-9bec-8e2080498151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc2af58-fa48-4c33-80fb-04a076d19907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b1fcc92-5698-4a51-a94f-b5b227c33c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "808c20af-7169-48d7-833c-86f3f20fcb2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef18628c-48bc-47c6-b487-d1a6356672f9",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "210635fe-74a1-4f2c-838e-07b81c9a3959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c74f6616-ec41-4d2c-8eed-36ab1795bcbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1380e14a-ebd8-4579-963d-3170f6c80202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8dceaa52-07f5-4d42-98b0-c646b79883e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd52084f-ae59-41a8-b9e6-1a8d88e33b5b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8cf2828-c95e-4b84-a43d-544de3d53efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cfc12d0-46ce-4af4-8d10-255be68d8b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7dace40-0f96-4039-98b6-1682e052abd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b07f152-324c-4398-80c8-27020b1d9f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45222bb-8f39-46f0-b2e5-b38cf7b5838a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "296a9f14-2bdc-4312-a7a1-c522d375a9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c4f5c2-19e7-42b5-9b31-ec22c21a8789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7068b00-9fea-4684-bbe5-1c274cae5021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0fcdb38-e786-433e-b1ca-758b7691f713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454f2025-4ec0-4a7a-8599-03edf3185c30",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270521eb-0e18-4e8e-a5b7-af92e4221968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6129f7d9-dbb3-46d3-b4b7-b94724d4eae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7eae1e0-b685-46d4-a3ea-abf723f42bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "954e2251-b94e-4327-a00d-fbcf52bc451c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ce3c08-540b-4233-b065-f9e4cd940860",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7276583c-4e21-421f-8c47-f402550c56cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e484d0c-e262-42fa-b9ec-5615ace8c8ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b72395c-27b3-41be-a113-50e6e317ad94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "daa3cfa5-817f-417f-bf53-4d3ca0bc3541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90425e38-3402-41cc-9358-2a58f08b47e9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc598ee2-2cfb-438a-a799-d9d364fc4c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44e7173d-b203-4c2e-af20-7be30f7ed5f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "456af6ac-3883-4b3f-aa7d-77f7e439f63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "231a2daf-9421-4e5d-887f-4069d8d1ddd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73bb0a2-a56b-44fb-a017-8848803d6f59",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4736fefd-bcc1-47d4-9faf-c7a63758d485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed158132-1984-4227-a073-68ddf811e04f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c9e7c7-8d93-4542-b173-09d8a1758865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c74b7e7-ba60-45c1-b57b-c9a2ee85d924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ccd10d-a98d-45bd-928c-b51c5c532013",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "118b1eca-be09-40e6-ba28-bfe2c7e0c142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04f3c926-3eb5-4c5b-a962-395876cdbd20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d8756f-1d0d-42d9-af97-62780ba61251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "42548a83-ef3a-43cf-81e2-75472bcf5073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd4b9cf-2c32-44d8-9d53-caf4798b3b7e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6edb3f-ad69-4eb1-9706-3b1be210b161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca5487c8-6cd0-443e-a551-e68bb6fca8c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7cced1b-e65c-4bff-8c86-4a8722dd8de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fdc6c1e-e305-4b7e-a852-ec2d46dc552c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a05206d-509d-4d31-81cf-28159b17d97c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f9ba37-1ae1-4da7-b48a-912a01dc631f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e022a8f5-c244-4be7-acc4-c818c257ed19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427d023c-e8fe-4308-a38b-cfbf2ed504d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed5a8ce-a764-4860-a3aa-eff8c97df842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6695ee3-6361-4fd7-a384-526f79e0281e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "183a635b-bbbc-4fb9-9234-e0eefb8b0599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "253f7671-8ac7-4f14-8100-e4abd4d27ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a76dd4d-1a24-4bcf-ab65-130a616c7f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0438783d-4d56-4187-a726-1a2d760e8406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1068d0c2-622f-46b9-b4fd-29abca961ef8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97fb8d62-5648-455a-9f53-db4798ca6937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f28cab-724c-40bf-9543-6f8cc35270e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c625f5e-1348-4c82-a372-bf0c34ae6b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9e8cfd0-df0b-44e6-8164-fe77618e63ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b0a9c60-b169-4d76-88b9-755697fead22",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b1f1a9-90b0-4488-8695-72f45147c6e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9f19c47-c593-4021-a720-cb78ad214695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1d6ee3-2965-444e-9541-f41f0fba94e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44090e44-9443-4ef9-81c5-301f44a8c6fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30389acd-af3c-4544-be83-ae5cba0e5819",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70c4e26-6f43-4563-ad61-74b4117b8b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b8b91e-2a9e-4d48-9ab8-980f722d550b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3302109-32b1-49fa-8a2b-9ebc495920f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "404aedfa-d2ab-46c6-b58c-f18cd141cd68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae72bd8-c129-4d0f-ae87-d3711ae8c521",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28961b0c-5711-49ce-a9a3-43dbb2aefc36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "647e1d9e-e3ad-4238-a415-19846d0cd88e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0e5e4f-a818-4d1a-bec9-23c55d292855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc6c9cc2-33a9-4a01-837e-8bc288af2428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6edb2520-72c8-44b6-aab7-785703ec7078",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1d83e5-42ea-4476-ad24-f451616af13d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd951a9-efef-43bc-86b2-e7b41f4c1fd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21c6048-eec1-4346-ac97-46360cf9944a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2c3bb75a-c753-43a0-a6be-d8e504842524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7d3866-8173-4205-8ca9-44d342a030a3",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac0e2d71-b2b4-456a-bdcf-02453855ddd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a0d4a96-4cb0-4e04-9964-b1ccb252dbc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd84657-9e82-4d01-930c-f775f1bdc55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e59f98b9-de4e-4e76-920b-e7df9b86a10a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae3aae1-929d-4260-bc8a-655f670c876e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "865e4f6c-a175-41ad-80ed-5502b241d09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42905ff1-ea4e-4ca1-a80c-133a9d05c392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb6ac6c-4df0-4169-82f5-b2b34af8d954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0b7906b-5d95-4444-977c-84bc4d08fe60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e403ff21-9d30-4d1a-9775-0eb51125fa97",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efbc439-a13e-4e1f-a68d-3839bec2745d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d3592e-5f44-4c6c-9f65-301ba2a22ce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13302beb-f06e-4091-952e-d3a8014e78fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "06783406-fe38-4e4b-8919-7ce7b86e69ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce7efc6-1e30-4fc6-ad2c-d2a15f314608",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ee64fa-7208-474e-b4fc-147fb62b0a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2715623d-ebfa-4f6c-8dd9-257fb5cd64b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49e579b-d6d9-43d5-a84f-e4768f7a4a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d7163e7-af54-475a-8e2d-2588cecb4aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a463f3-8ff5-438a-8278-e054d697ea56",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29664a08-bfdd-4700-b6e6-15b000a858b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83843522-65c4-4c13-881a-bbb996f39d1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd3e57f-486d-4945-a4c2-c4b873779472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c88f45b-81c7-4a0e-ae94-61d87f9e190e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc22058-00a6-4445-beed-f7af1f4ed4d0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cfd971a-2c8a-4c10-b515-c82eb1090cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1bacd22-635c-4c78-ad0d-ad98f9737a64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9b9c07-b956-4260-b32a-f5fc2553db74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "19e1b283-34f1-4340-92b2-eb2c23964364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac419ba-4326-4a55-9c04-60995b89cc37",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2148fe55-6602-4fcf-90e3-368a0f8eea6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e1743d0-63da-4574-8a6f-df9a6fbe9621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8061816-49c9-4fbf-aaaa-8b436330dc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "73825816-8337-4556-ad58-8dc04cb2a0e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68664cd-be2b-4372-9414-4ef5854ab1bf",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f951a9-1692-469c-a1f1-01319cefb368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9adc943-1ac6-46e0-a0c5-a4d9ccff534d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec776b0a-a4dc-4f39-93bc-7e4b59ee4f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dba42df4-a4d1-4f25-b7f3-d742ed2d62d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2004bea5-d689-4167-a27f-738f7b13d25a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48520c9f-b89b-4dd8-8911-fd78a02e696f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c189bfd9-d637-4e90-a3b7-78cbaf9ed1da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc171f0a-1c17-4545-997e-53d40e9cf94d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "31560a21-d92d-4603-beb6-16291c6d3590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33542391-e683-471c-9de9-954068d731de",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f168eebc-6646-4286-8e00-33f46947a631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25f5e997-511d-4b34-9be7-bcd98aa78715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2157e664-4a6e-4265-af0a-1677c69fb92f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8595b3a7-eadb-4839-96ad-48e3f5f345dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d35dee-03d9-48a7-b9f8-493df33d8d91",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a76a0e29-6543-49dd-b24d-596011d83cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d43c98a-ca70-4a85-9b98-7b22502754f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53466880-a862-4f19-9cd9-0553588b0333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "021c9c95-4a11-4a8a-adea-14854501254f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab328578-3f92-42be-922c-f115eecb9431",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9b1a8c-1237-40c5-8332-7ea1760d54dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32e2e197-1aab-4436-9ab8-70ed14cb08b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "205b6d72-bc11-4433-93e0-177e13f31fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5005417-09e0-4cea-ad1a-5b696b593539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea49640-63d2-4386-9a62-c4e8e83ac439",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b630383-9848-41a9-bceb-583b50f18b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "215d8931-b852-4149-a8e5-57ad6fc810ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b40dee-5ed6-458b-8b08-1307c71b04c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "16994dc9-5db7-4ff4-9b62-bbbe17d5e1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a129d98-ef5f-4acc-9817-a382bb673881",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3d16c4-cb37-4209-ab98-83701496443a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c65956b-2cbc-41f5-a9a9-0274bc01103d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b9fab35-3d7b-45a6-86f3-dd0268420c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c7492d1-dc50-4042-8cd7-d546235034f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10015ed-5d5c-4fa3-8a9f-f00e0861cd28",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4afbaa2-f8b9-4c64-b9ec-ca0387978ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5665e3e8-02b3-49d9-ac3b-bf18fcf03b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b03662-ff8a-4bd2-aaf5-9c068fdb23fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "141ebc0f-0430-448b-aae8-255c75aa3f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d20dbdff-fde1-442b-a7cf-e717c03a6911",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d01f280-707c-4647-828b-75911ce3bcf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff4251b-a434-480a-a5d5-547a4be18219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d6dc5d-c491-4509-902c-e991c8840c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb6ed6f-a944-4efb-a412-40620392db84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46374082-fe9a-4c9c-8828-b05fee9aa0e2",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d538b81-299a-45f1-938f-95f3f2e1da56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca84ec41-6a77-4b49-8f7a-ed0959f0a24a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e1d837-983f-4496-a65b-a2d053e03587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bbb079c-f3cb-48e1-8ce4-96e4220e45e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9005738e-5f6a-4bbf-bfbe-32cc547f1204",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d117bf1f-b82a-49bd-ba54-4040240bf3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7941a87e-8027-409b-a671-b03a90dfb401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a60885-a391-478d-8f63-34a1a76e0d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf1c3ac-827e-4168-a1fb-0591f8f62ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa34fbc-bf64-4c71-a953-2aa2c82eb74d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee16f02a-dcea-46a7-9f44-7dd6f39a6224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0ef53ce-89c8-459b-9923-9bff205d8d1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e787b58-5eb9-4b05-93ed-7d725fbffa92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f73a2677-f7a5-4f17-a0ab-0f98dd4fcbf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da3771f-521f-440f-b470-b4ad799e38aa",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38a4b23-2b6f-4858-97bf-377d6a78e612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "066b628d-e8cc-4a73-b863-7f114416bd21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570f5f87-8c4a-47bf-b42f-e8ddc7538c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75bd01f6-2a70-457c-b71d-1932272187ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38eb5b5-26ae-47e1-bea2-e0cb8ef80d95",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1987032f-92ec-4026-9da0-97328620c8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44c8e206-1d6a-44df-8da5-934a376a68cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7e8c15-3d3a-4b58-ac4a-6e8ea3f4d736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1c1240db-36b0-495a-a636-33fa32f9a92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea9959c-590e-4f7d-b7fd-4018d5aaeb49",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35614859-1045-4474-aa98-4cf0f896bb30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8ee02f-0a09-432a-84f7-1bf186d54918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045abb49-c149-4793-ac7b-8e1acbe9cf8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "55ef00b0-69d9-421c-9e46-3679522643c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9541b711-9d45-4247-94ca-b0eb163bad65",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da85f506-98f9-44cc-8878-dedfb5e16b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30faade4-bd06-4325-aa8c-f71c81d289b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f868ce-02b6-495f-9ba4-9b5a83885933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4c4a65f-6773-45a8-9f57-6e90042ba7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9216ba-2c1c-497b-9b19-cc4cf2867b08",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8856e12-ae18-4782-8171-e780ac20018c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "458a4822-9e25-404b-9a97-cf22715d65bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c11c2ad-d423-4ad0-888b-aa7b3ba4904e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffde088f-d08c-4e0a-9228-1c526be6551f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c29a6e3-1128-40b2-b0d6-8c108cd5985e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2208da-ee02-4bc1-abf0-f8da0f4e8e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39fd18d2-a1d0-4bdd-bdcb-607c39ed06f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec3fab4-3a79-4239-b362-10667712b59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2092bb0c-529f-4092-b6f0-28379fd91bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cce78a7-705b-441d-b3cc-161ec95277ff",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2104bd6-a258-400f-8fa9-33357d1fe60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06746ca9-0c99-431a-9b47-5a661424fc47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8519d44f-ec96-4182-948e-30c4929593e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "98fc6f14-8bb8-4b5f-808f-2b5df1a6c30c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e62d16a-8a57-4cc3-b336-3ad1ee083cbb",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f491ebbe-f4d2-4a90-8443-90d94d62fc32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c9137b0-8b14-4ab4-aed6-e738306ec4ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e754a605-87c8-4e7d-b8e4-8c0e9c2d6292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c5432da-7af6-4a61-8fe0-0384887f41d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ef13cb-f67d-489e-94da-28a9145c0f51",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca42d66-b779-4193-875e-1bf865a05300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60620caf-2447-403b-af89-22aa828bc07a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3e20ad-ccb7-49b5-985d-e8a238f39265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "87c70789-2156-4580-aea8-1b7acc5db670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfba836f-c35e-4211-b11f-c3b197c25205",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9cd8509-f569-4578-8e1c-9cf6d4861f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a9c969e-e23d-4c6a-a140-8212a76cfe03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8916e40d-4930-4ec8-b00d-2831d9bdc99b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef35b01c-38b2-4cbe-8384-d41805ac3177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6d17ae-8a3e-4152-aea0-b9d2a7310ac2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "778d97b4-0f3b-4f94-bd2c-ab51df0063f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "048dc3a3-ab56-4ad3-a707-0414273f48f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c80e94d7-9053-4d9f-8a3d-b11687aa7bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "83cbc4cc-3e94-48de-84f4-71bf4aed689b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba733602-84df-4c97-9ea1-45f55ac90756",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2468e06-2691-4110-95ed-bb3817336b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dadb5f9-12f0-443b-9e9e-2b3d5d8008e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed56c60a-c2eb-4f32-8de1-af576653555d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b562dfbd-39aa-4c9c-abfd-67e2b0bae94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0ed741-6d88-41f4-836f-8a4011c0923f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5456fc3a-56d5-420b-9e06-9078d7f4eed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8348ccb-5b26-4e4f-a5d6-45084b3d2738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678805d2-596f-4f9d-8815-9a8dff5b777b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b64a9cab-bdf0-44c2-b950-c1206429ab73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6caf000b-abe1-42d9-b04a-e338f48f7218",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "950fa66d-45d7-438e-90c6-2dab44d3caf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d339f9b-a25d-4a02-93c7-eba6074d9af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d46508d-94e5-48b5-a4e5-ca655321ff53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2a67a79-eb53-44f7-8ae3-8f2aceb9867f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a05571e-410e-461d-a179-66204571cb9a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f19f827-859b-47e8-8b38-72c2983b2585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bef43cab-4f1a-48cb-97b2-6f084fcb46ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a12fbb-89d7-41fd-bd78-32cf314b5dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "58329241-7f2e-4fea-8c7e-c7910b473fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef5c2ed3-01db-4227-b749-27346db24925",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b203ab39-c4e5-47f2-a2bc-259fde4ff43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2369a498-da7b-4113-89f7-1c411349edbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28471409-97b2-4af6-a459-19f3fab282da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d7bf44a-df28-458b-ad7d-29fcc874b623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b68217b-a131-4333-afe3-40d3ec659a35",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c8596f-d35e-4ff1-b48c-ee5e56bcf678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0dbb9af-3d22-45ea-bade-8d1a2e826ce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e3a8e5-00e5-4226-907a-e3bfc0e536f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "291f71c7-4270-4195-8745-082f6aab4462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68a69ab-f08a-4877-8434-284cfc5b4b89",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce91890-33e6-4196-b871-d67c8531b0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb53067-d235-4213-a18e-cc26e546d19c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cccc8b8-bcec-4a96-a3d7-4b27162d72ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e9bb8a3-89fe-4353-b38e-5468e7d85163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae286672-a929-48c8-bf7e-4f8797485f81",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb0b735-0ba5-4284-ab5b-afba70b23d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8914ec06-4b09-485f-938f-f317d7e8fdf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593cd26f-6f6c-4333-a36a-b6b224e8fab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d3175a5-0ec0-48c8-b9ed-8b9fb53e3d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d53fdd-274e-492b-b995-97ce01d49ba9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4bdbc53-6aa0-4f5d-b7ca-65b649146da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbba5655-14de-4f89-a546-029d56d52c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d9941a-4a2a-4a75-8e0a-8abb5d24b65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cdcf6b91-402d-4ecf-a203-3d971ca74446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce82b1e1-997e-4453-b9c3-c4e762c60160",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3033d1d-e59d-4f1e-b855-91adae9feb0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac116ee6-73d4-4519-929c-8be751333f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d7ee034-0b79-48db-b829-a6d2d4e854f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4626937-11a3-45fb-b51f-28982314972d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e18c914-2139-491b-a21f-94b159bcd9d7",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450b85e9-3961-4521-93e3-899fdefba555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146b0cb6-ad7c-4d79-8c28-e7252a7e816f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833ab96c-08c0-43cd-a777-fd6437d8cdb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11b5d81f-b11f-44dd-af74-298d180b2bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f2f34c-8039-400e-af96-ae4226434350",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea49ca2-773b-4d17-b301-52cb285097c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd5a601-d351-4dbb-9697-00266e7a7003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4770623-5446-4593-9ee6-82384ca28fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "041b6f1c-03ea-471d-8dcd-7209b1113313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53cd7842-de25-47d2-9e02-ec9dfdb068f6",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "678eaf72-5aec-4f11-a733-3f22877b4346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc8d5fce-b569-4eca-b91f-a1d3bda2ba04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b141eb-42d7-4db1-a877-681c6ed0dfcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f6ba81f-19cb-47c2-828b-603c0b639bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed13c93-03d6-4de6-870f-7e06f2224266",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "181f8e90-cf2d-493c-b161-94b8e7166669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e8a9509-125c-4074-a794-1a383f95871d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6fa0ac8-ef15-4777-aa6b-2092d04538bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1a4bc48-2654-46a8-9d8f-4675a7b96613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86269997-f7b6-4a4e-90ed-465b0d124ada",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7b7ddf-7bd4-4d34-ae25-af0f561c8add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a69d7e-48ec-46e4-9249-c3d121a6fff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f75543bf-2d44-4511-b47f-972c5f5886c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cfe634c1-0275-43fd-a715-b77e8e7df5e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106a59e9-7399-46e8-80c5-c05d4fd36af3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ebbec5-8843-41aa-b864-eebd8cf789d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f0eed99-f19b-4b3e-bc56-a9d37e2d797f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd8afe8-955c-497a-b1d6-b4e5d95cee06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dad93ad-ff1d-4c11-a56e-d56e1a9cb410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736aad0d-8578-4489-8285-c17e2122f19c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f244bdb-a987-4bb1-9902-a8f6aa88a60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95860cac-1bea-4fad-ae85-d4ac0d30a9a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7b83e6-9251-4fea-8773-bd03e0dcc7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c82aa362-682a-476f-9cf0-79aef55af9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d63bd8-eb83-438d-b2a4-341ec492e0b7",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61727937-21ba-40d7-bd67-161eb3b25378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ba55515-bf6e-42db-bb19-cf28bfcb0330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740b09e9-3b20-4169-ad68-30b878a19195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4637f1cd-07c0-4d1e-b274-ecd8b94a46c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3b0b90-d9fa-4f73-bfab-b6e4f13663ad",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9776253-5101-4c57-9f36-cf3e3f64a2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701f6390-9fa9-492c-986b-6c6578235bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b8e9da-ed6e-42ab-8ecc-5c61f2ad09bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e2e80db-e7de-4bb6-9109-a1a76ec8c84b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74df94be-d1d8-422d-977c-85721630ba97",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "083cc19e-3896-4b52-bade-3c31c1118c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d81bf50c-9813-4c69-bdfb-31062b8eb31f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5204ec4-8288-427c-8039-d6598cb23cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "686458f6-36a3-4b34-bb8a-7bc3c709beff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f66762a-752b-4d5a-a325-ce73150b41cc",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bad0c65-92db-44c8-a5ab-a3e57a1bf09c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03427262-4d8e-4fd9-bfb7-0a5cb3ebea87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a9358c-13b2-41d7-b6bb-5651ba40a6bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f11faeb4-dc59-4a0d-bb24-97ada3e7fcbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d4c8ed-fc8f-45b1-8511-c33e2c76a559",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f8e3de-825f-47f1-916c-aae334a4b052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "476b075d-3c16-4382-a5eb-7ee3fe33ca02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47463d5-1ee4-43aa-8245-1c9db0d06664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "63714da0-1cff-4215-bdec-8bc939261222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b854f4d-1bf5-405a-8bd4-3fa5eaf5fa5c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15bbfdf-92af-43ed-a0b4-8324ba4aee19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c13e5329-9c8f-4fa5-9253-c3dadae402cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea8aea5-552c-42cb-8abf-185146367d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed13a2bb-7de7-445e-bdf3-c7ce51454c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da37cc4-377b-4746-9549-0c5d78b62f4f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97f8f03-d638-43c3-b437-f86d131af7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c783b05-46ba-4371-a7cd-3a56cfa62c3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f408975-60df-481f-b553-ac71ebbe7316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f26dd1ab-bc78-49b2-9ef8-af83c28715c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526d894d-d871-4557-96b7-e90149740127",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfec460-06da-4823-8cbf-60292315d78e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7885f73d-7372-4303-94fd-f07a64ce97a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1ff03c-e904-4600-9b82-a52c29f7e982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b54a277a-36c0-4bf0-b741-f38c40315979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebdf2468-e2b4-42ec-a3bc-ce4c14f46afe",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a272a3c-c0e8-4b79-b58b-6cb40081fa8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d64fad-48f1-4d1b-8580-c997124e666e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8779b5-5fec-43fd-a904-f2ae33cfc1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b7cc853-a60e-4f53-b436-53c409a4d330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61362b2-bef4-44c3-9ed9-1c11fb671d0d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ff59af-da9c-4e41-a24b-2937a5660a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "74fe59d8-4164-4485-8252-9bb5eb0676cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a835b482-d991-43ab-9c0d-9c1d8482d01d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "91a2c2c6-6f62-4569-87fc-50c75f32907f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2f5b5730-4733-4341-aaa7-3552fd12e4e9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "26309264-f34f-4222-92c3-690b30644345",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "295a7bd6-8823-4c5f-9444-abb49a16c5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ca09ecd-b6d4-4c1e-bf02-0e8469a1610d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b3c116-2943-4d08-b1df-2d4c42052321",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9359742-4f5a-498b-ae55-55658e82e62f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38668b64-a772-4471-b00f-75b5f19cf306",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1738d553-8d14-4f2e-ae32-b8b66f7faf72"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e80dc3f-ec37-43b7-83ff-df3c132d1ab7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8874d8ab-04b9-4fdb-b723-b3a1b22ddf5f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b488adbd-2165-4a75-a0c4-45481ee021ac",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "914b1f98-bf43-4fa7-856f-5cdfc19aafb8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c2d84733-60e8-4020-9655-b8bbeb572389",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a15caa69-8d0d-4b1c-ac2a-5d7f624fce7e"
                }
              }
            ]
          },
          {
            "id": "0b5c273d-a4da-4c10-b1ee-1b4bf7d0326c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d40982e8-19b9-4fe8-8854-db1814535c1c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4ff98d7-211e-4393-915c-1b894839cf2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ef74422-0169-4857-b57e-001ce0e26253"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91834b5c-93d3-46a3-aa66-264d08b51035",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ebcee6aa-d8fa-40ab-9458-03c38873b6d1"
                    }
                  }
                ]
              },
              {
                "id": "f0be5038-3117-4434-a093-4bd6208a78d3",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d3377a3-7229-4822-8f05-02842ed19e31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7941d3a4-43de-487b-97fc-4ea11d0ddfca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2e69e76-026c-44d1-b600-1bc655429619",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4110f0d7-729f-408e-99fe-0f9f0a9754b4"
                    }
                  }
                ]
              },
              {
                "id": "a365ec5e-57cf-4bd1-ba4e-3479ad6eec90",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "639759b5-9791-4c91-b480-7e5c83ae1ba8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "47d4462a-6e94-42c9-8ffd-4155b72da467"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "249334cf-7a9e-43fc-8919-16c53aa34d48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "eb96d404-a225-4e4c-8f26-fccba21d1dfe"
                    }
                  }
                ]
              },
              {
                "id": "0143cf2f-3671-4ce1-94f2-aad7cb87966b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "21044b8a-e210-4f3e-94a2-30bfc65b1163",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b8552d9d-d7bd-4727-bc3f-31f93eff1656"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6e49308-895b-4885-95b3-b4a2d8acf25d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f2e0acc9-10f2-48a6-9dcf-1c351047e71d"
                    }
                  }
                ]
              },
              {
                "id": "d09a7bca-516e-4aa0-b55b-1adc1eaa5c07",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4eaedc59-5082-4314-bbd9-330276099291",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4596d91b-33b5-4340-bc23-21cb74ef9a1b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22af3826-cf2d-424a-8f91-620ad8751bb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "dbac8697-e0aa-4da1-9483-300417b6aeb0"
                    }
                  }
                ]
              },
              {
                "id": "36df66d4-2f25-4fad-871b-df56934a8310",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "82132bf4-9ae1-4467-9be0-8028152c5017",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe13c41b-57ee-45f9-8c60-f628b6e6961c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2c41a80-9187-4be8-990f-5a8a6c54a2b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c30ea802-63a3-4f67-80e6-c255b82836d3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6a73bdcf-c9af-4621-b6c4-b3409ec18117",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3a0c5246-0df9-45a6-a0dc-32c0f58671f8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f9d7bfe5-b251-4c19-9559-342dc7ac603c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "74c5236e-8d6f-4653-807b-5ac241a21b9f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce44c118-9b70-4dab-954d-5540b7d2af6e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a3c43c7d-fb7b-4948-a23d-838ea517a64d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "94fbd1e4-0da6-4536-9e78-9eea4d6e489a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "205225a5-410f-41e8-90e7-37660aa3525d"
            }
          }
        ]
      },
      {
        "id": "71f301e7-862d-4bd3-8148-9fd25510413d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6af6e81c-8ec5-43b4-981c-18eec6308e06",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8eafaf3e-35a8-461e-acf3-b5d8056da3a9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4336b6ae-5b2a-4fac-bbea-ae8be02e4b46",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a10ca1-0be2-4040-b308-0915f21d89c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83eb443b-85b6-4c68-9c69-653e3ca50a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be17e53-ab0c-4c2c-9276-060c08e1be91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb34aed0-b070-41f9-ab1f-701a257f535f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e17029-f103-41c0-ab71-8d2cb3aea0a6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6052401-7d75-4370-81c2-a4d5d4b1ec53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd209ae-7391-4044-8a1c-bde6d24c89e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001cef00-82f1-48ef-bc55-589af102b624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "536a0beb-4a93-4f26-a39e-6d086f2c1a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba6a7d6b-7019-4dff-afc9-59b16a2d1768",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17062ffb-09a2-4584-8aa0-20a4de351c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba748855-b107-44c3-a9c5-6cc3f0aec976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef5195a-6df1-4805-b3bd-a39179b88e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "03e70120-8934-4966-ba42-a48045991c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce81515-313e-4135-b4bc-08499f46cd72",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f3bfc4-7cb0-484d-b16b-b047a08c7a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8fd67c3-9102-4e56-b501-80575c18cf23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53486186-6ba9-496e-96d7-fa2bc9211698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cccf839-e08b-4660-8a25-b1206fae851b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0431b7-d496-4721-9727-fb52350fa871",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d335b920-de7c-463d-9aea-2c1ea93917d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f91b3e-8e55-4d49-a26c-b9b3edcc37ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d893da2d-4548-461a-ab15-447bd006591a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5b302a6-b923-44ff-8d2b-7baced82afa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d84808-32a2-4d22-b89d-f9acd7f9b7e4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2142909d-f43e-4a01-8a73-4ba1aaea1fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea11fce6-28c5-4679-85cd-c7163ea434ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c0dba5-39e6-4fcb-9eab-61adc298a02e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0052a52e-d77b-49e3-ab20-cb95a7061984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89287bf8-cfea-4b91-8e32-7f593a177eb5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77e101a-54d4-421c-bf4a-e9049ed916a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e84f7f9-eb69-49ef-ab2e-e19719aae135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081d0bec-3d46-49f5-9846-a397843d3894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4013083-027c-4b2e-94aa-74719ad60203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0673851d-db1e-433d-b1c1-07a0442abdbc",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819e8874-7aa4-490a-bd62-4ce9d9927205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c447e9-0455-40df-9874-6e14d6a69a69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8c8650-f8cd-481e-8270-1c5629a2bc3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9672f87-3f77-4561-af1b-ee1f84fd3825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07810062-24f3-41a6-9278-50faa261b18e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f371e0-f216-40cf-ac21-eeb640bed95d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "704fb45e-9882-49dc-a06d-659c0ae42f0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263e7a70-186b-41d6-890f-a1ac8c16a37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f511f77-d9d0-4009-8e17-737449236ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4ec144-bae9-4e92-bfd8-29b23a3bc113",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5734066-6666-4647-8fca-7b01b5a433bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66b7f769-e242-4921-8404-57caf250d372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0e2775-314a-47a0-ab6b-7a63079d1cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "70005324-8c6b-4719-8695-1fe0f3cf717b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3af819-f506-4790-9030-9cf1c4954102",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d150a7d-3160-4fc5-8b36-f5aec0ff0a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ed5ebae-3757-4940-8650-73ca9f0ed318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8d4696-44dc-4cec-a2fe-29622c9ccb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "29828a9a-a5a9-4b2b-8abb-f7f3abbdf49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a63c555-eca5-4c81-8062-7e7e0ab47528",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de93419-cc74-461c-9b9f-8b47956f6afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ac348a7-8972-4ff5-a6eb-f7dca7a824cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f5b6f0-eb54-4322-82c0-b6f1d015a022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cd6cfa9a-f4d6-467e-a028-08da874b17d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8ae11d-b125-4aa7-b522-42641b606cd1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a9f583-7ae6-4fbb-a32b-fa46e9412278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58289789-1698-44d1-8d00-f5cd17433451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9051276-b3f2-4a1f-aefb-35d8461ed8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "503d0ec4-a6eb-4569-ab7f-826453e945b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42297bba-19dd-4715-919d-b87a001307ac",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91128236-45d1-4550-a487-580cb6144807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43c86e2e-755c-4127-a987-e8da3feba55c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebbe7f2-76a0-4503-8fa7-7407cf1ecd36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7023afec-557c-48ad-8e1c-268c527b2744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8726d5-4106-42e2-a114-514868efc84b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "804788a3-39e9-4ca3-918d-4118e1f5b37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d1576c-06cc-4baa-995d-355e2429e4d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd806314-d6e7-4f8f-8ee0-c7151b85390c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f1057b-0a43-4c3c-b676-0e6a8ee787a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4e89584-c066-44f5-8a5e-5a91ce557a39",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a4ec64-ea0e-42ee-9302-7f8b2af6bab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d949ce6-bd8d-4e07-86b4-eb91b2f1f7b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31680eff-7c91-4753-b937-ce0c1000ab49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fe7b9b2-aa60-461d-b2eb-51418a49b8a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ecaf05-736e-486d-b6b9-0935cfa45286",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e4df1f-258e-4ebf-9a7c-b36b3dee8a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba7121e8-4430-485e-a427-9b5ad7353190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40a1d1d-d909-45af-bb0e-8527802cf917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf20c638-9fe0-46d4-b353-a95a441ddf2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa479c93-07f0-42c8-b41b-1c3480ba6c7b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2abce6-66c8-4ec9-85f0-a5f7cefb262c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f296064-d887-4dd0-9f7a-db3b5f43c6c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4927a461-91bd-4049-af4e-bed2437ecbdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b51720ae-10f8-4d70-932b-5170bd27146e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c96cbe-9595-4eca-95c4-2dd07e86e058",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f58a81-368d-4b7e-933b-7b0f4e27e2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4285248-8130-4d04-b472-1843844bac47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa1aa6d-9e92-4b77-9b68-6af72e7e4d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f2b5c6d-74f6-4bdc-9dfe-9dedcb55feb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84944257-b1c5-451e-8592-02ab1264a89c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d755f0ed-1227-4d83-a6e6-7a1741f016e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9063a6b1-49fe-476d-a2ea-543a8e86ba59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8f7995-6e75-4675-b696-4d9538712e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b819e3d-b41a-473a-8f15-f1166644ce8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db9ba48-0ebc-46b9-be43-bba4f05b27e4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf49bb0-3c48-4311-8077-c7aefbb5f7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d33d3e48-d9f5-4cf0-bbea-a7e797e9f14e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f869e762-27a6-46d9-b1ad-e3f1a29f9674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd8c61a0-627f-4ed7-a2f2-8362c043d8dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5288009-9ba4-4c54-afb2-e0339a314185",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0b1ea4-172e-4c1c-9441-b165b9dc1657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a97f22e-3d56-4c24-b840-5ce98d8f417c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64315cc-96b5-46e1-8eb5-42e2e9086978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bf6062c-dd3c-4e86-a387-421c4bd0a29a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e434df0-0eb4-4d24-8e77-5dc220544251",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b9040a-95b4-48cc-a702-c4b0a857e397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5490f1fe-69fb-42e5-a6e7-9da7870f9aff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae067df5-5d41-4232-afb8-75fedff99194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24314f2b-25cd-474d-ba0f-114f09eb6652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4400b414-dcef-4f48-ae85-35d8d25dfc9a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "881dfd4e-6ced-480a-8600-2f93b3d6f879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb3facd-1523-4ffb-83e2-9f29f773c74f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5144808-4464-4c4f-9896-a061150aace8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85057d15-e515-4f66-8add-ea50a82f1bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29cf90d-cf45-4066-b65c-59c715f026be",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01670dd3-90c4-46ce-8b6b-fdbd37eef724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c6adb56-1246-4ddb-8e65-0314f86ea4a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b8f3bcb-0a30-43c3-8926-03bed71c440b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d658a2a8-4e00-44b2-9cae-4d3a9a256165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff2b987-7eb2-46ac-8839-f3417bb27a76",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8c2019-4c4b-4370-ad6e-ffdebb9b424e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c06ac9-ebc7-4986-bf06-d4757d1472ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55c72d4-f61b-4994-bdb3-03bc56eec779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec62f3a9-c57e-4f98-8f52-28b1686c2d02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c16f94f-f74f-4239-92cf-2a573fd603c5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dcca216-366b-4896-926e-1dd8915d2a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "435ff71e-af18-4eff-b5b3-ad587273df47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81288694-6773-482a-a618-1949ac8a02c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2af6962b-01b6-4939-8070-7a7b94181668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb95c6b-3801-439a-b11d-8a9dea5c18c6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02553f7-23fa-4963-8efa-7ddda1f0796b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39941188-dbd6-47bb-b338-15c008b53309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99c21cd-29b9-4204-b275-3d872510aec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d724723-7e4a-400b-8046-ea98b60dccc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187e9d1a-9c95-4a7b-bc4e-f2f63eef3cc7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2686597f-0f69-41a1-8760-6f90e841c1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01c8ffae-0522-4ea0-9719-4402ad39533a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce367f3-355c-4357-b1a6-80d8f160782d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a76f781d-0c9e-45a2-9271-fe6a22a39a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eaf2055-6281-4071-8839-3ddd8ddd5667",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ecbb47-fed7-46c8-90b0-048194c519f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "880ce611-b5c0-4063-9e4d-e1c028868004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578005f8-422b-4a2f-8782-f8451066d866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c5a70c7-5099-4fec-8239-3d94513d01ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb03f6be-b45d-4178-9db0-1cc78f8d77f5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81f6e73-0775-4774-b97a-c4af4bd23861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad3e7d10-2f1b-4be2-9c74-0d455ab06791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c6ea97-3eb4-4401-b254-7697e0a39dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acdb2795-0037-4202-9bc5-003603dd4251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e613a7c8-ff54-4cd9-a4a1-70b8a9656c95",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63834807-e194-495a-ae75-e0be9e4ec1a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be841610-453a-412f-a200-62d3c4fe45dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a03f63-347a-4b12-b86d-cdb996534338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d19308dc-6922-4282-8232-8e5ec61e24cb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f3f6aaf8-5b98-4ed6-86d8-87a2f65c7a39",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0273f5d8-4fbd-496c-810b-e2c63907821d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "590b49f8-8952-4ea7-a6c1-e35faad2ce6e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca3dcbe-127a-475e-9713-a8f4cac1080e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f36fccd-7101-46ac-a44e-71a17d323c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88aab969-eda9-4b73-be2b-095227582118"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13db6e95-1062-41be-9fc3-2bc4987baadf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cffefc53-23af-4251-9a10-612b21544d4a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "84c2ee27-ea5b-4d5f-b45a-6837a218dc10",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b60389eb-fdd4-458e-91ed-ff5151a60edb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5cf4f7d-eea5-4729-afa3-29297571dadf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c985d449-ae86-461c-b616-5c9e4548ebf8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5282dc49-9272-4975-9410-183eb397abc0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87f0ac9c-18ba-4504-990c-644d2b51734c"
            }
          }
        ]
      },
      {
        "id": "4637c2f6-e1a5-47bb-9faf-1bbe2e3740b1",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "ff5796e0-777e-4e02-bb46-22a78bc58c24",
            "name": "Negative Testing",
            "item": [
              {
                "id": "64d86184-7c2c-4b8d-8f91-a23d1c4a442e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "251a04ad-d781-409f-bab9-7e75eccc158b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6785f3-1c6b-46ad-b637-3eb93c842b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66b71cf8-9759-4360-8d4f-ce2a95c706df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a20dbea-be93-41e9-91c3-00a01c8eab34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5719921e-191e-4339-82f1-983bebd16abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8970430b-b3d3-4bb5-a0cb-a9c9150b6661",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c7809d-1efa-4adf-bfb7-27ad1bc58a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aef6d7a-9a42-4faf-8ec2-0536afe6625b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7db3b7-5415-4920-89ff-4896e56b0d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e411decf-8c18-41af-b197-a515696550a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18892078-cefb-4e27-8417-b30e224f814e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe401b03-2144-4464-b27b-2959a7eef4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "239b906d-d9f2-4ec3-b980-fada99215b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd65393e-9a4f-4e9f-b2d5-2837be3cc547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1c674a-6def-440f-a30d-69f01a3ebf04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b68465-ba62-4c28-bd41-d9fac8ce9810",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b5412e-5414-498c-80bb-82a4872ba2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aee8a278-cffa-4fc0-ba43-4f47b01def7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77597fec-376c-4463-a45f-3e4617e13472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c130a862-fc1c-4a7f-bea7-aec802db9111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435cdcb9-4d9d-43cc-8084-de99c221994c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95997a38-833e-46aa-84e2-563a0eb9af69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d9e7384-0a20-49c0-97f7-a3e48788bc4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d16e68a4-25f1-4344-9aca-3bd0cee10181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4519d19-e657-463d-9d3d-363916a19776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d0c65b-5bc1-49f2-a370-4e7a7bb13997",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4bba62-fdc1-4bb4-8b8e-ef1fbb3dd5a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7927bfb-7f0b-446b-a487-f127d0b804bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4cecdc1-8ed1-4208-9ccc-f76e1c18a773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "02571fcc-5a1d-4e7a-b4aa-80d52f29f9b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1493fb-919f-412e-a344-6ea3843afba9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0e9185-496c-4343-a158-5e7fc0bfdff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eda83ed-1fd7-4aa9-a7b0-c0d5f2aace7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf16aa8f-ed06-4dc1-814d-f74e91a7afc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "edb97ed7-ef7b-4947-8667-2048ab165408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d0bfef8-65ec-46a8-a0f8-3cba09f29ef7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502caea9-d5d8-4bcd-b53a-c1f6368d33d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "061143cc-9991-43f0-b5be-1417f3bee056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c880e2a1-a9f3-4a85-89e3-b3fc66fd10d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53df61b9-dd8c-4c4f-9fb2-7049eab13cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "245a1dcc-997d-4b85-ae98-edaa3ac97665",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af7a83c-f4fe-42e0-a007-447fec4ebdfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03e863a6-e33d-4415-9904-472198a2bc1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd8b3b3-a4bf-4012-94e1-ff774d4b1c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cc6358a-996d-4dba-9e81-3e4826de82e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66bc607a-7b1a-45bf-97a8-fedad1b24e65",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0382a9-b6e6-4679-84e1-8eec90d49398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be0e317-3388-4d4f-88ac-3886a6ceab76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84d353f2-41d6-4839-8e5c-0d10f61af59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "612d5e9c-4d3e-4972-8f66-beab4f439519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d03d7c-d879-4b4c-a118-1a3e75557616",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0e13da-634a-401e-a69d-d4376fd50ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48647d69-db7f-4711-a234-9ac7ed44f844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64566ba0-8cef-4b7a-89b1-587d9965763a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e1e5a1fb-57f0-4972-a3e4-b2509f5844f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89fc543b-f24d-40e2-9afe-c40252b06d38",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8674532e-9c2c-4aa0-9d8b-e422dd2b6426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea554ac9-154e-4a76-bf3e-6c1da13391c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb8b029-0ab3-400f-b34e-e8e6975ed6f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1367deff-1716-45d7-a6e7-d8b2c585cff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18b0994-a785-4c32-9b15-d1e5d12130a4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebdd9ab-9883-4e09-adfa-45ad50cee40d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09fdb28b-5908-478a-9345-bd115e0bb545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc3a18dc-4d1c-4c84-89be-83581b0f1825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f146db4-7c93-4b76-8655-9338cb181c3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63db3d89-e9ec-40bc-b7eb-2ff4d9ce4bda",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2a2878-c35e-4cdd-ab37-ad81b62edc51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e84a50e-4918-4da9-beca-cd8b7cbbef85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66defba5-5fa5-4c96-8699-7f0e4fcd1799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cba7633-4881-4b1a-b461-730dd3b6be92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf97c51-ea03-4377-b5db-488ba8b1001e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6119df5d-d002-4d88-9faa-07e45a8e0e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76e2d659-6db2-431c-8a4f-48738e2d1deb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d28364-90a9-4b3a-83ed-3a761be9e8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "88fabbfb-4e93-4597-b5a7-4542b73ec467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0fc90f-8baa-4dc0-9be5-79e9b20eb829",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d458a0ae-1e82-4c06-a51b-9f99458a023e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65ac6361-958f-4c8e-8398-3b6c00c10482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999cc970-d8e4-4605-a0e3-6fa57a42b31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "22d6eaa3-67bd-4aa8-884a-5f0d6be941de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924c42c7-daec-4f11-ae2e-37275554ac92",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22930df1-9694-4c34-b16c-2f6ec11eb516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1f88ecf-6014-480d-94eb-3ce0f62d1ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192effa5-9b2f-4b8a-9646-fd1e70b8e227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "29b135f9-b1cd-4589-9387-b8a4660ed8ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db96bf2-8aa4-4120-b5f2-418cb662ca83",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d37a12b-2155-4f96-a691-9c8f007fd86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4021577-0a22-49de-bfa6-424c941b5624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565ddbfc-1257-4556-a815-ad358a003796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f30e06f1-9b31-46a3-9112-08cedd3b97af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580589b8-eab8-4eae-bf7b-3d752450a7f5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a90767-7424-4226-b5a8-e36fa296a893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff7b3c59-cf10-4dca-a942-263a0832d174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f56777b-7ae2-4f9a-b0df-3cdbc79b1146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ce994eb-f6ad-498d-8c57-51796b6540f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad9d781-a627-4d86-9cdc-10a6cce22d0d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738f8347-2250-450b-9211-ff15e887f904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db3ef463-7538-4366-841a-a2eb224e1896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08b7e9d-5564-4785-8512-63579a5f9957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b909a52c-0152-4108-ab62-94f4113fafa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9a9557-4d5a-46c2-97ca-e215869e14a5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d0ccf6-d807-4103-b691-1490cb990472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7649da7-0674-4e8e-ba17-fbd562dabd7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7769fc-e72d-4e76-bc08-d03d86181553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66448ad3-2cc6-4239-add3-13cba5a02ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac03fd4-9513-4077-9d47-eee32b7b375f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40933b98-2d8f-44c8-bd42-b89352154d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c585000-bb57-4482-bd28-a1a50de6d43d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341e266e-3ee8-4695-b85a-4bea66a33be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5fba9dc-527d-4793-9274-57c49f0056bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f651063f-efab-4f01-9bad-dfc6bf091cff",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f7c683-c827-40fa-9b67-d59f6268d7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c2a7c5-78b5-48c7-8f6f-9f98d2ee59c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ee09a5-5502-4ad7-b397-6e095e4c095a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d502f39-dc98-446c-aad5-dfb3f8782a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9caa64-c89b-4aa4-8bd4-22fceeeee80d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c88dd0-6641-4b1e-a0f4-db8af07e91c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc08267-c894-4410-95bb-9ad19ce19a99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c3716f-cae2-4224-81a4-623ebbfb2c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2bca8ac-53e1-4199-978a-ef99f58c991c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c37e2c-4ec2-4ebb-aa3c-7f88e01959e8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "735cd201-9a01-4625-a000-c53f0bc5625b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ca34888-6461-4780-894d-3980298474c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2b12da-947c-4365-aa35-93fc9c865d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d240c02-65dc-476e-819e-02c198694fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb7b8a0-55fa-43d8-9b73-21b4dfefa86a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adeccca2-330c-488b-9b5e-bf58291a549d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d983449-f6ad-43f2-86d5-a28d6d953bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7701f1-3c38-43fb-ad67-60582192b356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e00970c0-c562-44ac-be41-15dcedd11e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee60357-6c09-4b3e-bf2e-4bec7c9e3088",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60324ef0-b844-4c49-af41-b41b188e20ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8349a80-8cf3-4ab1-9849-c22e86e854d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb72c1f-829a-435f-9d6b-318b4709c428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a26d3447-d654-4c7f-bb43-000e5d8e7868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "982adceb-6e2b-4de7-be40-fb80d7a089e9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9377dc8-7a6a-4d4f-bf25-687909c73fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c658984-539e-4d39-9fee-51a81e048a48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51bb2dbf-4097-4060-a37b-4ee0b53b6a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56e88623-d451-492f-94d4-1dd3b7a91a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1aa6e2-75da-456a-bd8b-f744547fac72",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9a94b6-bccd-44eb-b8fb-f37b7712c012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292671ed-1dba-4f21-b886-779139ad3fd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce33f5ec-02be-4386-a8a4-c4c84289c54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38b0850b-81e7-42da-988b-0e1de08c3404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63486879-9304-45a1-81b9-c6308b4fc623",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf871f10-9fe7-4657-9322-99ee95b2938b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b7cb53-d754-4c64-af2d-41f451377f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3381e340-96c5-4329-8f31-234e7acd3b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a1c5617-112f-4cf0-9b97-ada8f104a6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9acc3cb-b192-4e02-b742-131e450aa8d2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a7e7fa3-8ae9-41b7-8cae-a05c7c883f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da6a0bff-b14e-4086-b0a2-fbb3680a3b5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50efc48e-1443-4651-bb91-02525584ab10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "942d4d93-2ca3-4301-8bff-b9ecfe987216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "121d6cad-b738-4bef-a0ff-15b47380c0dd",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdcb63f-dba7-47dc-a39c-dd8ce1e0fb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f535022d-c04d-4289-9541-58568c1735dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44db311a-17e5-4a71-9c72-6ad9a68042f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "449bf382-ae3c-4a44-a6d3-867ce11300c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc36532-aae6-47a4-af61-5c009abc576a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5f7d64-9923-4193-ac90-999cc51a56d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb28c6dd-3045-4354-9a40-1fa4903ae007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3254d777-7275-45e9-aa8f-8cfed6e164b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66621c5f-e6b0-46e9-ac20-fc3fbf52fda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91e8740-95e9-45db-9cf2-a7b70a1ef627",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a24530-b1f1-41cc-9b7a-0a3eb582814b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4be8ee-edad-4f2c-8b50-bf2fd9f42e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14782b9b-fc3d-4833-8e8a-2ab68f64b091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f3f4031-3016-4b7f-9cf0-483416cc0712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c6396a-ecbf-4da6-977a-22d407ba4fa6",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60e8c35-8ce6-4595-9d43-834fc3649cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb84e9a-4679-4d1b-8e89-ab6686d0d3c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f002fb20-ae86-46d4-b28a-ed3908836444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14a472cb-98cd-4228-a27b-2fe4021711eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895b896b-f473-4a8a-a433-08753de77884",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4a0d23-df11-499a-a56e-c9db6bb36504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3249e078-709e-4400-b40a-616cda2e10a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e4536e-1438-419f-9b03-1ce65b8de082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c9b782b-44cf-4aec-b902-c3d08b643114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a71cfa8-031c-4721-9c72-42a0d63822a3",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce46cb7-730a-4126-b509-879ff0b858cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb7f655f-b038-47d5-b758-cf6734bf6912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d6793c-7676-48a4-8b22-0142770f1a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a98b35c-e315-474b-8369-e4f29d8acc46"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d62d3a3f-74ec-4cf6-b18d-dcd566c91af7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "319cd977-7295-474a-8ad9-d109fe919063",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a132ed-3070-48d9-8e67-6dd86e1bdafb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6e4e34d6-c414-4609-a1e3-9dca005235ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8128a1-63e9-4ad1-91e1-aa45b743aa32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "06550f63-63f1-401f-ac05-4acf7bdcf0d9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "659159ff-5fc9-4dc3-b7bc-4da259485d1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7559392-fb40-486a-92ee-74f0a251fe67"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfb5f069-70b6-4543-8ff5-15d5fc85e771",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b910084-9caf-47ec-831e-8b35a39d8bd6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54e690ee-f937-4e4d-9ee4-edf5f83664b9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4def45cb-7590-4643-b1d1-0b695188df45"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3ea5dcb8-9c9a-4538-914b-207fc8b3928e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b79ab96f-3726-42b2-b9fd-dd132987d97d"
            }
          }
        ]
      },
      {
        "id": "6a9d5fee-4576-49d2-a6a8-febeaa75d40e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "222783e4-99f9-4814-8dbb-452fcbc8c3cf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6f419372-f64a-47c5-aa8e-5561f7804666",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "36fe463e-313f-43c6-bbdf-d5a5e7d95313",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f550453-de49-4931-8858-02ea29a3f1e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a286f432-5bb6-4bef-87bf-ba51e93bee6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1950008-a24b-4a1c-b5ba-1dc1216e8288",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9640ed-11d0-4796-8823-8a3d3ba70d47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18da646a-097f-4996-8aa7-3bd8b0dd2457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff808cf-f108-47dd-8359-84be30bcde7c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "316009d1-1955-41d3-bce7-59525ba0673e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c92fe3b7-ee81-447d-aa9c-6727935afdf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb840b2-da0f-4651-b87b-bd6d46bcaa04",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca8b173-218d-4d6b-9f47-eb75e34b9c96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a24c9ed-0976-459f-a2db-be5bec1b8e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43258a7a-743a-4658-a940-9de0e0902513",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f5cdd2-6905-49b5-8070-1e679d48820a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad96cd98-4ddf-4683-81ae-35543b8075f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e9964c-9097-4190-b138-8b5b6a638c6c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b69c3dd-cfee-436a-8a4d-034548656d57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5447ac2-0729-4090-9768-974baaba7749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6321d87b-7132-48ff-8354-cd4503a9986d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad87a289-2bfa-4857-87db-d17de0e9fd42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "718dd9aa-7cb3-4bf8-9050-991ff14ad368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fcc80e5-1e39-4323-b9c9-be110a1d1fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19557011-67d8-4c70-ae64-ea2ca6da5a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4e89c2-904b-4813-9a8b-8df1e32d4850",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f993f23-2d14-4903-8730-dd6b6d016a2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efd07627-5757-42c6-9433-879d5c5f4274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b70083-21be-4200-8e0b-dadc34504afa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f004681-5a0f-4cf9-87e1-0bd761688a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae3cfb7-ec67-4628-be36-cd4ce2d45fa2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01b666c-2a26-42c1-a62e-464297948bad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6da30fdd-a1ab-4c00-b3ae-8e04d7d4ee63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edac40f3-ac33-4533-8ffb-cfcf73ea03d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1af7ebae-a754-429f-a488-dd5a1d828715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0a96d5b-4de1-4dc4-a54f-d0ff375215c5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4197c184-75dd-4b41-8a65-b8e782fb9fda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57efad67-0338-498d-aac3-3dbf598066f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f665c6c2-6db5-46e2-93e5-b387d2a0b7d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53e95ed-9a7a-4754-99ec-8ea3951901ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84bb9626-29d9-4a00-8551-706d0aaef54d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12280e01-0e7e-46b7-9f50-9c34a96c8336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eabcd50d-1e08-4190-aac9-8422dfe13594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4e5132-8fda-4ff0-804f-d5ff4cd7b9de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c98d3d2b-2f9b-4342-a42f-6be8e8a1bb05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6ebd8a-2888-4cd5-acf3-8edf58a226cc",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb7818c-db45-4a8b-a334-f02ad0d8a1eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f3d78b8-4463-47f8-b79f-b0818e0adb59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68044784-d6aa-44e1-8d22-2fe725861a1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df81e004-f7bd-4680-8aed-6dd66922a53e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5802964a-2d42-4701-bdaf-1f7a903d4017",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e3b367-47aa-47fc-b468-07e9ce9ede5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60223468-5d6c-465c-bd46-0b80988c1424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ec6697-c0ed-4eb7-b682-7a645a1ae0d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "075d0300-a66d-4867-ae44-db8a5e0e440a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31b5a68-9bc4-4d97-8341-ae9277aba3f6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d78320-35ee-40de-9dcf-0d1c12886960",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c330b9cf-ba79-44b9-a78e-369a1c10b12e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2558a0db-7cd5-45b2-b755-d60a2b461c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8289ea0-b770-4c6e-9a85-1e8895441233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2996e08-cf9c-48ac-8922-5eb911307139",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87be98ec-1dd6-439a-80ff-331654e304c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "048d3b80-648d-4c1d-8c38-b094efe808c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "466cccc5-a4e3-4a43-9814-f16b97da15a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d045c1-cc81-454e-982e-b83f005be6b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5976fd6a-8d25-4ab4-acc4-f8d6afcd7d03",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42422d56-f929-4d7f-8f11-5628a8e5ccec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0bf1cfc-6c64-4b44-a15b-e400c61dbd45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8167f7-6dde-4c5e-a511-dd582d8db417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a283b85-0af5-408f-9efc-c2cde5f4d0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58aba72b-6e7c-4877-b01e-b335b0c147d7",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9d8cf8-c5e5-4fcc-b8ac-fbbb9e3f5a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22bc141e-808f-4e54-beb7-ea96cceff781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8cdaf19-8800-4a9c-b557-46e97969070a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2403c9e-799e-4684-adb1-76e9e5aac636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9cbe64c-c9cc-429d-b70e-2fd6aba2bdd8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5c8875-568f-4097-b208-a7552d1c3d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "238790b3-6c04-4f91-b305-9db1e5539b2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2af2e3-f4e9-4e2b-a6e9-e27947f3d3b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccb56470-5f4a-456c-9b45-8a7f9c9e1ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cb9986-d8ff-4de9-bb52-51885ed00c41",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86af4b01-fecf-4ada-ac5a-3da1b1e96d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebf2911e-a8bf-418c-b5a8-0522937e324b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f02bc33-24fc-4170-b1ef-56c69b29dfdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f80293d9-e1b3-48f0-9d97-e6ef2b7569ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9847cc22-d80e-45ff-a477-bab657d99766",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3915c1c-86cf-43fe-850a-69575827c77d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a10061bb-05f7-45d8-b61e-069660bbea6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5bb615-1aa1-4ddd-bebf-b730ec7ca556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87af5865-60f7-4cd3-950a-4ac31f3ce0e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51984b41-7481-4de1-bb94-83415932c792",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d57870-0a2f-470c-b3a8-c52c4ec7f615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c2f09e-6590-4826-9633-076205e964c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "704da39e-f712-4bbb-a486-8c85471e8ba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebead91d-26d9-4704-ba9f-092000653cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a79f9b7-168b-4bf2-a37a-1c95be45715a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb6b37b-9d2e-4b6b-9cff-db59891d61cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "445caf51-5783-442b-92d5-344e4afa6c35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3615ac7b-b36e-4cc5-b51f-d79af10eaff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc0a9666-3fb5-4bf7-8776-5f106e5c3a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da180de5-07ba-4b3d-9998-95e80cba8884",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82baf7f1-3f22-42df-9a1a-f2dbca836659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6f3dc3d-eb57-444c-bd3d-f09ff79b8102"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5948e61c-483f-42c6-8a10-2debf2e7a7d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0a3456a-4d8a-4d1b-a4b5-b090ffc8e57b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8778037f-e9a9-4ce4-9897-66b22a206046",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83534e98-b632-46b3-ba5a-ad01ef14bfc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6eff9a9-57ac-4199-992c-156ffb5f21a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c8aa43-699b-45f6-a2ab-eae9d0eadcbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4f7bf4e-4cb0-4fe9-a109-465a376592af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db576c34-1997-44fa-9b8e-a4739807e77a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6bbc32-85fe-4f74-9142-f4a574c31be5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cb5ef03-321d-4368-8620-93c6189a208a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0284a0fe-d660-4f1e-ac49-d4717785a0f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83d47db5-5705-443f-93e9-fe6b2e710081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae08187e-a612-4cfb-8f4d-5648c61b0f04",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f397c7ad-b7fb-44f3-85f1-a6f57ab1d20e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4c01380-f864-49b2-91d0-3e1a0576496c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9167be99-4e4a-4a28-9fa8-07ae46a3ffa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7ee6214-5cf8-4d55-97de-7d6330a88ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1e92af-c8e6-4178-aee0-bcc55d05e74b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bdb6145-9bb4-450c-b60d-edf4263f78a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ba0c05d-9f30-43ea-9e66-5cd4eb4b9d6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e3ae5b-2731-407f-8c75-52815e490619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d30b2a16-4cfd-4729-bff1-20bc3e5b55f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d153606-2224-441b-8224-bb51e7f9b501",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2236cc5b-d747-4ca5-8a91-2bfc828761c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee69bd06-0909-48c9-a98e-73d898e66ba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b167545-36a0-46a1-8523-b1763ec7bf9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae4e7596-8ede-45d4-ab84-a1b6d73778d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859a430a-d890-4d0d-8986-2e1cfebbb762",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "870f3104-dc0a-4708-b713-23e84157fa75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55cc8df5-312b-413f-9307-c1a2c81308ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5161af3-9440-4b2e-a262-65c82daea302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f03823-4c13-4b22-9e05-7095199fa3a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0018a4-1961-4de8-a2b5-325392ada92d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fde37e-1202-4fca-a79a-8f700a7f80f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cc86b09-19a6-487d-9c34-454446b5b9d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ca4b68-95b8-487e-8b38-00515f792ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45294090-3b11-4500-ae5c-543ae2b2a0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9e4aca-5df8-472d-b181-d87716c44fca",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ddbb1eb-4ad4-41ed-8968-f2442333d87d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03200bc2-eeed-49de-9db9-ad86daa36714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "383ee617-dc01-4cf2-a22b-4ccde2bbdb66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b56d1b2-d24a-4694-9d9f-ab31a3363cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e454618b-106a-4774-bd82-125649319b82",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0abb0bfa-322b-4580-a082-a03a91c946e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4061bc08-1850-4e38-93b9-19a01abac4ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f102d706-031c-4e33-bba1-596b34110f93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe18585a-1805-46c5-8688-bf01d296ef15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f06ca32-2fdd-4fb5-9f06-ac9692e66746",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f565087a-cedb-491c-aab4-a03032b80fdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73f78e4b-9caa-4e7e-bea6-dd08a984fe4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf15faa-248c-4700-bcaa-bc745beafaea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61a003e6-2b98-458e-98ba-fd55e7bbb6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7dbda0-e58d-4371-af65-fedfd41516ef",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72864269-4b10-49cb-9dd1-b7af9fad9484",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab8039b7-c661-483b-885b-cabbe80d3b2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "721c035a-582e-415c-a55e-43e6da6127df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f1bdc33-c4ce-43c0-bc2d-5d1e99a6e7b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73cbec51-2974-44d8-b1e8-06d0c1a478d5",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6fcc6d-f501-41eb-9dda-0caa2579de26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ea0ce14-27c1-431c-8d05-ff1070912494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "276833b2-ea2f-460b-a7fc-3b6a8a21b952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbb2ceac-3a10-4227-b6cb-aefcab466300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196d9af8-cbdb-4338-89a0-ba516eabcb64",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5000fe17-cd7c-4ec1-b96f-cf9561a9e22e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50657a09-a845-4cf0-b4ae-e8dcf61cd2ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f98b3a-030f-4a07-9c93-9a5f4afb646d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "513d5c71-7179-4aa9-8141-19fb5f69c4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d984a0a1-7462-4749-b29e-c68773e8d5e3",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0669d784-21dd-4478-baad-8260728cba7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fc86130-5e4f-44d9-ab3a-174f0f39565a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d2e8fe-599b-4397-8aef-4daafe810991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70d0318e-d355-49bf-a3f1-e9d3e2b7bf9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3d5eba-7b01-4d0d-9476-f57c8c908f42",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8ef38f-663e-435a-8f86-a0d6aab1e0b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f80ff88-ab84-4190-960e-dab064c7d7b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37e8f72-bd9e-4be1-9b44-97963c7543b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0183b34-d9d5-4bf1-8614-173ab17025e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca5529d-4983-437e-b9bf-be256ebe36cf",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d525ff7-5027-4b79-aed3-48b753ec50ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ecd885-e7ca-4c99-b723-6c8d3b45a92d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd553841-0cb8-4d1d-865f-1347ad73e134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb23bf21-9499-451b-bf55-0e72607b1275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c2cdc1-9641-4a7c-8e57-8be4ba070b39",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc09b219-8e4a-4181-ab4c-f2c40f5bc008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c69aee84-4f08-4b5d-b040-9585e0b9baa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f64d339-b3e3-4ad5-879e-ebee9bdf5811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84735e5b-2495-44ef-87c4-a390ece19c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42692ce-f3b1-4d34-bf49-7cd7ecd78cd3",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3844db35-a302-4d2a-ae52-682cd97283fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "382113c2-e1c8-463a-ba60-5c44ddb6d99e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c33f43-ee05-4da2-af02-637b0a69d5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f66a86d3-0496-4f74-81b6-9b27aaa75bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77340ecc-58d0-4e8d-bbe4-1dd505b98650",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38d1e9d-0c05-4cd3-b816-973c75cae49d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70607e00-74e9-458c-a774-9a3b5a08182e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "200fcde0-b016-474d-a7bb-f2839fc53962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72db5d27-5f47-4aa4-9f28-bbbde4544de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fea7477-b6cd-4709-b0f9-333b42b1ccad",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c93e6e-694d-426e-8733-d02504a87962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77d96866-78bb-4741-bf87-4edeb15a7d0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9515a383-cb01-429f-a5c3-58c2b21ccbe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27e65050-0b38-4322-a1f5-7150d266e140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16626fc5-c4ba-4de0-8a97-e4fa91231c22",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d4cb662-385e-49ee-b49f-7e84f17cb46c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf83f3fb-d299-426e-b313-f900a5740470"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72bddfa-cc74-42cc-9840-263f838fba01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c71e3e61-75ae-4056-8573-a89118f30751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f4828d-7144-4f8a-8fd0-aef67e89ea10",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "181cf8e4-5d89-431f-a8ab-b4bb28b96367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73d0deb9-f4c8-4e2e-aab4-187b8da7013d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6538959-666d-4863-9d98-838d900372ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dda6fbe-3490-493d-a528-9f9d4f176b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b7a216-6f50-4193-a81c-5b610a848cf4",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1ea74e-1c00-4482-b7a1-c51c978489b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7acf924-ddcc-491f-8eba-3bc0d0dc5b02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d1ffb0-2d97-4881-a29a-7bc477be4960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d3afd69-e0ed-4292-b7ea-aef44a82db6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7da8c7-1f5d-46ba-8c00-3ad2ebdf0069",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d171b21c-8c1c-420b-b67c-05be36c19738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b70ad690-d977-4954-8717-cb5f27c156ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a83ee92-0fe1-4e7b-9e71-41c74fbce8ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d7db934-9bf8-4b2d-8e14-193cb734e180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44b176c-a4f9-4030-b360-3b17de269938",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb961fd8-b514-4297-83b8-d45732b38e16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e7fa980-aa9c-4493-a03f-2f4cfb164874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a830dd9-f9bb-4511-973c-8cac97a25ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0d6af5f-3bc9-4db8-afda-b1aab8ba7903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3d74ee-7b83-4ec7-aa52-2930b4b68213",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35efcaff-abdf-45c1-9e34-6c4fec82ddf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6751d6a9-1e18-4cda-8c5b-1d9c6d285e1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc21ab9a-ed2e-4ba8-b7c4-c71f6b715bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa7a32c-237e-4bf2-ba41-1387ccd376d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f96d34-b7e0-4fd8-b7b1-87dcee5fa81b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94948c02-edfc-4a90-acb3-c9da70cc139c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb06a12-c042-4085-b625-b69697338227"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b62b9d-c311-418c-a678-d55fa82ddc12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe71aaf-631c-48e9-b0a0-8e85020397e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e42c43e-e61f-4f57-a19d-9bd57e76dc30",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6eafba-f61f-486f-814e-843b77584f85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "866eb0a0-a857-4c35-8007-92179663925e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4f7d9e-2052-4d27-919b-56b2eeed0f11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bb5d4e4-0400-4074-b282-b25084a8e075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52cfffaa-c757-4de0-91dc-420abf61b7aa",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a60595-9f7e-4bdb-b0fe-f7682ec6cfa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f242d160-c3fd-4d4a-a182-a3e0621cade7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50356087-dfa1-4dd0-8f94-9bf0914fd39b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "999ad556-7099-485d-b96b-95552d40d60b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff6ea37-0eaa-4487-bb24-f1ccfa7d9810",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0684f52f-12e2-458a-b907-a1a798167007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3742bd41-6a7d-47a3-88a5-16368ecedca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86bcd841-1398-42b8-b877-ecbba5f10025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3af54039-9767-44ab-9d04-1741c9b8a131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22151c8e-51fc-40d4-96cb-236e94a6dcdb",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9486e5c4-25a2-45d6-8dfb-2296b5da920d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ec75f4-376e-49b8-9225-b66efe2b13d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af100d7-323f-45ac-8e19-892d7b6dce91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e04bb8-f8d2-44f8-98d2-a4e4ad0a6051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3364c3-d838-492e-9020-70901f3af9de",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e999123-4aa3-4861-b8a8-46e49d39a3e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ea0dee-6526-45c9-8902-4ee27b776275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c787d62-a6a8-4068-af9a-dedcbdf642c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53c8e54-1e92-4e4c-a285-01f5b8ba7878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a781ff66-5935-408f-9843-1406df8e3ff5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ce9bf6-fb08-43a5-86f7-82c793a87608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7598b65-e2cf-428e-b932-816bf034feea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be43b797-0275-4a97-9f53-246d47b1e688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e338a2bc-67c6-41bd-8916-14d97c36e405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a333cb3b-d6cb-431d-8b84-ebd6a5b30b6b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f7f89a-2ecc-4faa-8563-0c55779a62bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d64f00-d795-46d7-9749-6fcef8b43a0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf697236-1511-447a-a9b7-49c5842374c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15f3608f-7934-43c0-982f-de7e17285bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57ed39f-e093-4973-bc5a-b760f43df506",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd41269c-3d6e-4a80-ab8c-f0003476bd2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf12f625-b93c-4994-952a-600b2dc43679"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c4ee3c-eae2-4aed-8331-b7280df717a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eca3fea-7bae-432f-ad52-2427be7627de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779e041a-921c-4d29-a179-b1ade581e3f0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16bd334d-cc85-4c4a-870e-e2b3dbe71267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ab45ac6-6932-47b8-a642-1ccd5a745cfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8413fd5-fb7d-4680-b174-b7c3cd9cf91e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4eb62d2-70f5-47ef-835a-40ed8ae0cc1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7554210e-05f9-44c6-ac40-b7157006d841",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f7c9885-fdd1-4174-86a6-2c0425ab7fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff06611-6ba3-476c-a4e6-689be81149a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f44827b-1c8a-4b61-bafd-f0def0521803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "764373b1-ebae-4492-bbc8-3ef9662b2087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9bf014f-a97f-444c-85c0-92bb0aa5ec6e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5c1c0a-e09a-4b37-a8c4-79564ab4d9df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d61719b2-0803-4f03-a38a-89f517606763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e313d6-9189-4362-af95-bcc4800454d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa77ae9a-eaeb-46f8-8bc5-c82ce677d33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8290e954-0476-4e97-9b7f-f3b9680f9c2b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e289ac80-9d80-440a-b3b2-cd4285bec931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e8b9734-75c5-4318-a558-4db4237dd49e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f54016-1cd3-4f5d-8e45-8b50a569d09d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa7fa84-7db0-41b6-9c1b-4b36175d1f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb36cfa7-b0ed-42a3-ae99-483422b524c3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043c4657-6a84-4f23-a186-93c6a8380cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "292e31c4-8292-4f25-8d15-54969d0f9366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e57ea9-02ad-433c-b9cc-1d76af45bae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6bf5e94-0271-47fb-b480-a1678c6aded7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5d553b-6980-4c32-9293-94157b5873c5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db82638-2eb1-4c72-ba9a-93f0b7cb2980",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01752c30-5ec2-410e-9fb7-f93f185264f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b4fd64-03f7-4297-aebb-9d8a4bfed16c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86999342-c1c0-4f7b-8eba-84542d03f6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44dbbfee-747f-4225-8070-4a281885aa46",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d90bcd0-a625-4371-a3ae-150927adbf83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f31de357-e982-4dc8-97aa-fac80936957d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67db1cc0-4a3d-4cde-9fbf-5a0aedb119b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a77bdb4-e760-4b11-8a3d-d0bc1692c8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61486507-a77e-4f17-b1ab-a0cf8b37fc66",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035aa022-736c-4f85-acc3-14a76f941cda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32df7bf2-33c5-4ba8-9999-ccdce5f5aade"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2a5c42-b198-4d69-9c6a-46bd8679132e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd97fd4d-5d16-4d36-b6a2-746fde3c8e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89616e73-db79-4015-a7a8-334526a191a6",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ad4f66-fd61-4bf5-9668-4d23222fa932",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20f99e9a-f7fb-49f3-b4c0-edc4f2a4565f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5b77d9-68a6-4a24-983b-e7fb9e859258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ea26b03-7942-44a8-ac9b-c1c305f9724d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fceaf085-c29f-4c00-923b-76434116b0f0",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db520129-0cd8-4006-af55-7db16dadf65f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "597afe6a-9a7b-4c14-9d92-e73716257e5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61591eb-dc3c-4e10-89f7-957209a5f5b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2111f7bc-86c1-41a7-a217-3002bf691a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e07601-9a67-4091-87e3-dfa24494f5f2",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53a9b54-35c7-4b2e-9692-e4b9bf99fd09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f38d3db-28b3-4628-bc9f-60450410aa08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0882ec1f-92bd-4e03-9669-9b1aed447051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39d79b50-9e2b-46c0-a77b-58fc90d7d1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90803596-74e2-41b1-80a3-ff45eb34a25d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a629c383-5b6f-4142-9f8a-071d3b92859c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42950539-9506-47a7-9ef2-219b4a07fd7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a455d8-6408-4e48-9602-9f205038c17f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40cf90d1-0603-4124-a516-cc6a976f1ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3687d8e1-970b-42ed-8f47-f56cc7706eb4",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398736d5-d51c-4b0a-b8fd-1000a758baa7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d61b1c43-8c09-46cc-a1ef-1e0a90c060c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9847c61a-d917-43aa-b186-f7173106781b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e0831a7-367c-4942-9d26-e3d5cea9bf47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1e667b-5868-49e9-bac9-5feaf8a03cd7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3c7113-e96e-47b0-9ce8-00ad324b6682",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adaee5d3-310e-4417-a933-e5a84a091a5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e343b7-403a-48be-b38f-d151e26c7cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79127954-37a2-4aa4-bc9d-4d3dca53b23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7fcba5-c748-4f39-bd86-6393a53a0b5c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c6b911-bd03-40f2-a464-cc27d2eed955",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09835005-e727-4946-8b84-d97329d10318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee0605f-ee18-4fcd-85f5-e650614f5baa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55a9379e-22a9-4593-b746-8b9b7eab54e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705ee231-9673-4a71-810a-aa25cdcfc704",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020191ae-8c7a-41fb-ac1a-3b3ea3b8270e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8604f6b2-50cf-4cd3-9606-2dd857e84af8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cb1530-348d-48ae-93c4-be7cf553b86f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f6fbcc2-5067-453f-a494-64a751f1a284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad8467a2-99e0-4ea8-87bd-264524036533",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c68d7ee-8cba-43a2-8d01-a9a962e9e406",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1501a3d1-93b3-4f05-9909-0788d9c14807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a08bacb-cf2f-425f-abc4-e9e2c911d1d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5dbdc0b-5ec3-41b1-8268-0d9d207e3b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef3d5c9-c3a0-47c5-9114-80c284ef360d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f4326b-798c-4350-83e0-aa0f3e1a0c6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46fbaf8b-4df9-4ac2-b153-704cc3a65cbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd248f0-9179-49d9-a236-8ce359396399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5de39cf-2a26-44a8-80d6-b661e8c02f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b794ff92-63fd-4787-b93e-20da0db52c42",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a87ec09b-1179-46be-b37d-58c9ab826e7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd57b06a-d395-4596-aec9-bfbbda492ad3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d071c4-efd5-41c6-a5a7-1b92c9dec860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59e4d613-3241-41ee-90b7-bfee30d75bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "649d2e65-7eb9-417b-8d86-ebe339474019",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd313c8f-c78e-421c-8241-aefe0b9d3761",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8374fa3b-4844-4482-b6f2-8c287abfc29f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a21d8d-d740-47a6-8d4d-c8965668911c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d1a275-a32c-4838-97c0-3b1edbf9a453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3389dcd2-3f8c-4c31-bfdc-9d3d254d925b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5c7b14-4be1-4454-b69f-6c21d32e0fc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "840d118a-091b-40c8-affb-fc67effd5d55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcffa94e-b7be-4ef6-991e-d215aec698a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d0e1d6b-a0ab-4363-8b0a-812359d9e47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7359195e-2053-44de-91c4-345018795452",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135b949f-c9f0-48ea-8bd8-7821a8f1168b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2aec780d-553e-41c7-91b2-51ae5a8d4de5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8f34fd-badc-43f9-a15b-a5e93b5a372e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d5bc511-319a-40c7-8bba-f246ae589887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f67806a-b9ca-41c5-a8c5-19c6d16c6bc3",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03d3a43-187e-4540-bf93-5fedcaf449a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57388e90-7dc3-46d6-949e-30f5609aab97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "033565f2-33c2-4180-b179-89b1477c5c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a014aa-b7e3-4ccb-bdd8-bd19409e1921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd97a6b-471c-414c-8c41-0657bd752c6d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0f4fd2-10da-4b19-9510-8d4f8dcf1685",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a59caaa-d6b2-454a-95aa-7ffed9038312"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4ebd4b-80c9-47b5-a4e2-c8c6791b49e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8f4d101-c955-4533-9537-7f2df8f02f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8179f2-b92b-4735-a591-2823880eb9c5",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aeabf08-5f7e-48ca-a1a3-2476340f3643",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3336da9-cea5-4d23-a3b4-8a8da7798863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "badb8990-9f76-456f-aea1-e72f76f9f0a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a45359b2-3436-40d7-a60d-3122898bf4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e17f60-8fd3-4d38-a90c-bbf4c7e30d13",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e860e7f5-400a-49dc-ad24-cb538514d226",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7c9420c-a6be-4222-b76a-e898b3c70b68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1c6709-170d-40ee-b9c7-4da24ffad8be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeae9951-a6fc-41e4-aaaa-dd0f8fc41269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968c77e5-0da6-4561-a4a1-cf7f7980caac",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d30e2f-9a9d-4dc5-b3ed-f2fc4010a956",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a841c51a-a103-43d0-afd8-ff56519d1b61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca59752c-b7b2-43a4-9ce1-eb9da6978659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15aca541-04c6-40a1-b60b-63ca6f84823b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4022fe4-713f-454f-90b8-3d4723dbe97e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b44356e-a7f9-4b7f-a1b7-d74a23617472",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ac8e723-725f-4849-9f8f-41c072def569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe5f7ed-5fee-4666-8e33-d013d5448bc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d115b219-6d82-4a40-a726-820f87e0339a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc1352a-3cf4-4666-bead-6a5643779835",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4d747b-2951-437d-bd3d-db28a06ff8b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c676c0c5-7da4-4ed3-9b90-841f64fe719c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c17d7eb-cc59-4abb-b067-fa7ab8fec228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2459cf47-1a7b-42b3-bc5c-6889960b36ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f80efd-846b-4a47-8b1f-400c032d97da",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6126ff3-c2c8-45dd-ac44-cc1d16c70fc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60dc09a2-371d-4126-bce4-29d400696186"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57e010f-ef0f-4d6d-9c21-faf9527c305e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ddfec0-9272-4d1e-a83c-620b54392c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6389dd8-ec5f-4cd3-ab25-5faa44f9d68d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd057b5-ff04-41fe-ad6e-580340006a67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dac7869e-be7f-407a-8e8d-0f8e98974add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81adb254-aa72-43e9-88e3-8f9819dbd6a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a815f62-b711-4fa9-8c86-898d1d198289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ae3264-4cfc-41f9-97b1-fa74f241371a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec93da8f-cd68-44f6-a3b9-fa8d481a7af5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3f3afbf-ef41-49c2-922f-035dfca43045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a5b4be-3abd-4e6f-a651-199e0f0ed670",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4a173f3-7de4-4d6e-87c2-ddae5bea9037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2cac5c-9af3-47a9-a0d2-38d2f5d5a172",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c0a1bf-20f6-4ae9-9f77-d3b9ebea42b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1692a37d-ad30-4341-871e-04f558ef6286"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb48ad9-8a34-49f3-89c8-ab9aba31d27d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a1e2fcc-41ce-4159-ac3d-0713f392cac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb75af8-528e-4ee0-96dc-98f7eba2ff56",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb0c8c5-38aa-4769-8bab-9db4652d14b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f82d1b3-b572-46c4-aea5-fc6ae0a360fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "392f1cfe-cbd9-4009-9660-9d3e626f9595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54286ad7-12ab-4c03-a0f9-0e85168c9ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87307c9f-b81d-48aa-8856-6d3536a088e3",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba8f361-ff42-440a-bc83-4f255c737400",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14510317-933b-486e-9914-75671d47ac02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9922d4-d6da-41fc-9be4-ec885d8e0411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "776345c5-09a1-4719-9859-e18c6d8748ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3cada4-aef0-4c53-a684-89201fcf895c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcae12bf-27cb-401d-9f0b-d6878433a580",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b5e8ded-0307-4eb5-9cb4-7fd0011a2360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "105a75f8-0e65-40da-bc56-256e2b29ee1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "518ee87f-e4b8-460e-b460-7a295aed8557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0426a4e5-3bcc-4f85-bf5d-ca637be7dc03",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c77d5c5-0360-4ab2-9e2d-0da3a0e1af97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "709cffa8-341f-451f-bf6a-779abab3a653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "743df4b5-4774-4822-9173-c37fb0db5077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b5db3a-9b6e-4736-898e-b84e679b6f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872c54b6-3288-4c0a-a146-8c9275a05109",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f970e542-3288-4240-9baf-73e629c85369",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e609d6dc-5325-4301-a662-97935da09514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab1086f-f334-4210-b8f7-1c89721f9503",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe46924a-04f3-4d14-a628-0165a89b8fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46520085-d81b-4db7-926e-47b69ad20d77",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426d3688-6c70-4323-b11d-f38e2a15a557",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8d019e6-15f2-462a-b5fb-4620e129284b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a34fa5-abc7-4e6f-ac42-1e65fee15a51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8be9f55e-28bf-4583-b2f3-4e1f502d34ad"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f956db6b-39b7-405f-99a5-2a3c850cf72c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "77fe03c8-38bd-43f3-8dbf-a9ef08a00dd3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a5d7d89-af47-4455-9f9b-53b63473ac3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8663bb9d-0bd3-4bef-9c2e-8e8d4dd2894a"
                    }
                  }
                ]
              },
              {
                "id": "24caf2bc-e2d2-41f5-8d18-47a469a05450",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "888c0ea9-0898-4d0c-b70e-469cb1e7b6df",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e19f35-6d31-4c26-ab04-1e9c789222e1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c09e9f88-63f9-4f62-b1ed-c2c61af88969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a842d10-734e-4a3f-9fde-9e3024232c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec06454c-eab9-4a1f-9347-c723dad2a9b2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a17ed8a-26cc-467c-8d80-54c3bc5d617b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95a26e81-ae6d-45e3-a86a-d4e046782406"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef4420f8-4924-4b01-b768-dcf4b2dc2e64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "883363b7-713c-409e-ad94-69c62dc1feae"
                    }
                  }
                ]
              },
              {
                "id": "24fe6e3e-1177-44ad-8264-6181da2adb97",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a4682773-16bf-4ea0-aa6b-328810207f04",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4ee376-4968-42d6-a762-0b0418dc038b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a5d80fc6-90ba-4885-8e72-94666c9d7172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a993cc7-899d-4ce3-90b8-b6f8da1e1091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ab6d548-2566-4462-adab-00d5e51f4a20"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f85244d4-f0bd-4474-b953-41b883bf5759",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b855eaf4-eef1-4305-831e-96433bc982d2",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d87e18a-a98f-4b3c-8166-b713bcb0141a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9d3e7cb4-4c2e-42ca-89cd-47599cbf9f2f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f065383-12c6-4f4e-b2ae-5d837b71eacf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e46a59e4-75df-4b97-8a91-baf0a0506fd9"
                    }
                  }
                ]
              },
              {
                "id": "7736512f-ea74-46ed-bb3b-2b81ba393405",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bfcc32f-5b62-4b3b-a255-c63b55b20d4b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b9931331-eac1-45a5-adc3-21eabc0c996e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa7d62d5-dd45-4100-8452-77e12385829c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a0a42d4-4ae7-4d81-b3f5-17cab9ca7df9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d11d53eb-e8ce-4957-b907-88fc47ecb824",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "609e8e19-1d5d-456c-bdc8-157ccfa15562"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0ea1e827-d9ea-429d-ad50-518604f7c80d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f905fbcf-e93c-4733-a0f2-c4c635fd9c75"
            }
          }
        ]
      },
      {
        "id": "ffaa8f24-2b5b-4197-a9b7-857e871e4984",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4c246848-7e84-4d37-8fdb-c81bc94a9956",
            "name": "Negative Testing",
            "item": [
              {
                "id": "694e1dae-dff0-4daa-a1ca-fc40970f6df0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7c1e70a9-6d70-4db3-974e-500407719f9d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc0c4584-3605-4a14-95ab-b78ca577fd16",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2a6fdae6-48ae-4bd9-9e99-a42ca705248b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8640d782-3fcd-4d65-92c4-d77a6c85a2eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f1ffc49-76a2-41b2-b29c-bc04b4d4de90"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9b1866b-2c9f-40b6-a262-685c923bf59f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9f904c9-0568-4b0d-a9bc-0807614f60d8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "69e17384-60d6-45fe-9edf-5b867544d7d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "add73d92-c039-41e9-b723-8bfe0ac3c122"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "694a6d27-ba26-450a-8425-8513d29b0119",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "91285cf2-c07d-4418-a970-1434f94b6592"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "abb64afc-bb66-493c-8c1a-02d07913c13f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "98fc93ae-648f-4f6d-ace6-7e6b417ba6d2"
            }
          }
        ]
      },
      {
        "id": "6f8a153e-dcb4-4a1c-8af5-6e555dc0a897",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "55a9ebdc-9b4c-4794-b0ed-f6857d564af0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a5206c27-6834-40e3-8871-aef6ceb0648f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5843fd25-ed07-4210-acf1-8872da99b8c3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed4d1a7-b030-4ad7-9048-57118373b624",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8b21f7e-af14-44a1-b714-7730405a3c57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69564247-f327-490a-b04a-abcfb57d7670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "687908d0-a514-4763-80be-61a35744aae4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3edb1f66-73c7-4015-ab86-9dad26cccfb7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "575f1cd1-dbc9-4d32-8eeb-eaa20832e461"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9531b4eb-7d4d-4d2c-b9b3-7f9abec60ec8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6279169e-079f-4496-8e38-11972184ae7c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a1c000a7-3a34-46bc-8095-a19cfda829a8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a8dda97f-151a-4b00-a8aa-9ed8ba436034"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8aab662e-e9fd-45e5-82f8-694c401a68cd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6cf2ce31-e59f-4f89-b29b-2a1d9fe90c94"
            }
          }
        ]
      },
      {
        "id": "64ab0f86-067e-46e0-a35b-c67bc9fc4062",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ae6fa107-470f-47ab-ab7d-3a07a05d9d35",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ab5d7bad-1656-4933-bbde-96257056ea5f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "81399634-1552-4144-b61a-6fbccaf48174",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb7a0cb8-f695-45b8-8a00-2d7d039b91b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3bb177d0-52e9-4b7f-a835-793a463eeafe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c48f59c9-7ab6-461c-b3c9-01824daffc22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb055e39-21a1-40df-b0ef-73c0afc0bb84"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76bd3614-79a5-471a-ac09-e9074bc64f09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c233044e-ceb5-48c6-aa1a-a03953be4863"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c968da8-3724-4d28-92ea-0254eadd20bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "edd6c78a-f850-4444-a0fe-89604eb8b22c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c862d6d-9056-43f7-b118-ea85bc4fd5ff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "41a70b3b-0745-44de-a1bd-285af190665b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d86cb4a0-40e6-41e6-86b2-c316d7289e7d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ab7d026c-c307-4748-af8f-f7f37e81717b"
            }
          }
        ]
      },
      {
        "id": "05a783c1-5245-44d3-953c-5ee99d637566",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a88d8654-a301-4af5-afab-932a5685da2d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54f000a1-accd-4f62-bb6b-a3a6856cf3f0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "280cd31d-9bb4-450d-bc73-985b4f02af38",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "76b23c6a-fcf2-4fb6-a02b-28915ac92682",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "046de7a8-1af8-472b-b06a-bab008d46ad5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 64
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 135.26056338028167,
      "responseMin": 10,
      "responseMax": 2019,
      "responseSd": 336.7854810940327,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1692059516111,
      "completed": 1692059566382
    },
    "executions": [
      {
        "id": "47f7330c-80d0-44a9-bfa7-5d64290e4ca3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "692bd339-fd2b-4a47-949b-0b149ead1d26",
          "httpRequestId": "3f0203d0-9b7e-4c54-a690-912338345766"
        },
        "item": {
          "id": "47f7330c-80d0-44a9-bfa7-5d64290e4ca3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "396cc68e-1d60-4418-9a08-274ea8e3f4f1",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "b5504c3a-e8d9-417f-8a6f-0ceb64706fe1",
        "cursor": {
          "ref": "f1a6ad29-d835-4da5-a440-f10e1e84541d",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cade9629-9db6-42c7-bedd-17227ac8ae5c"
        },
        "item": {
          "id": "b5504c3a-e8d9-417f-8a6f-0ceb64706fe1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b8068bdd-d939-49df-adf6-f49690a6fbd3",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "76bdb3b7-d8ba-4e89-abe4-fd277c09362d",
        "cursor": {
          "ref": "3cf98012-d2f0-47ce-9c95-11ad82e8673d",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3682ed4e-c211-4aa6-b6f7-9e76766cdb32"
        },
        "item": {
          "id": "76bdb3b7-d8ba-4e89-abe4-fd277c09362d",
          "name": "did_json"
        },
        "response": {
          "id": "47e33915-7232-4a98-9a40-899cea9a942a",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041c639e-299d-4ab6-b0a1-ba76854fefba",
        "cursor": {
          "ref": "f073120a-6944-4625-b206-399d62c9441d",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e7556ef3-b987-45db-bbc5-35b350a349a0"
        },
        "item": {
          "id": "041c639e-299d-4ab6-b0a1-ba76854fefba",
          "name": "did:invalid"
        },
        "response": {
          "id": "e2839708-4059-4ce7-b384-89538d4d9af2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041c639e-299d-4ab6-b0a1-ba76854fefba",
        "cursor": {
          "ref": "f073120a-6944-4625-b206-399d62c9441d",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e7556ef3-b987-45db-bbc5-35b350a349a0"
        },
        "item": {
          "id": "041c639e-299d-4ab6-b0a1-ba76854fefba",
          "name": "did:invalid"
        },
        "response": {
          "id": "e2839708-4059-4ce7-b384-89538d4d9af2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b68bf36e-4066-4672-b9eb-c17660d49283",
        "cursor": {
          "ref": "3824a66e-ec7b-4800-a363-21d1dc15c06d",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cdadfc98-c549-4360-852a-8c8b95ebb419"
        },
        "item": {
          "id": "b68bf36e-4066-4672-b9eb-c17660d49283",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "99dcbbc0-e088-41d0-ab5b-f1f457665ae2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 114,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196dc087-f90f-42b1-a5b4-8e129dbe04ab",
        "cursor": {
          "ref": "a718b8d3-879d-4aee-8495-85bb734a6aee",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "39b023f6-6c24-4724-bc17-28443137f3e6"
        },
        "item": {
          "id": "196dc087-f90f-42b1-a5b4-8e129dbe04ab",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "614a3e83-e967-4074-b80c-93daf305c684",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e371a0ea-d1be-4876-99a0-92d60eb7d4f0",
        "cursor": {
          "ref": "bce6b505-f020-4486-a562-99d4a5a7cc30",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e31f4c0e-0959-407e-be64-917d816b2100"
        },
        "item": {
          "id": "e371a0ea-d1be-4876-99a0-92d60eb7d4f0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ab512f5b-06e8-479b-99bb-d7a112e6a182",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60db2a56-904b-4301-8b59-91d79db17e31",
        "cursor": {
          "ref": "ff45f3a9-7c5a-4b4b-8a61-06546682e19e",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b110ebdd-4832-4892-9cfa-d7fa735d5b26"
        },
        "item": {
          "id": "60db2a56-904b-4301-8b59-91d79db17e31",
          "name": "identifiers"
        },
        "response": {
          "id": "3c0d786e-9ba4-4937-af38-910da5eb2a95",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7b3696-53eb-4535-9959-493d7174108d",
        "cursor": {
          "ref": "888a0471-814f-436b-af77-20eb3554cec0",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "aae54d58-dfa2-4597-b9cf-2e7e4169aad6"
        },
        "item": {
          "id": "ef7b3696-53eb-4535-9959-493d7174108d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d8c164d9-8123-4558-9e8a-594c1acebfa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb15088-9acd-43f6-b7ad-b4df6507d503",
        "cursor": {
          "ref": "0ef80c68-2c25-482f-a330-98e911b97bc8",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cecf0edc-b8a4-4dd1-81b2-8c4b0341d28e"
        },
        "item": {
          "id": "ecb15088-9acd-43f6-b7ad-b4df6507d503",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "18d74655-e6de-411f-9351-5c5b213eb41a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5488f1ba-feb7-4221-a756-791913535296",
        "cursor": {
          "ref": "2f91634f-7450-413d-8b94-94b4ade93c77",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7c62717b-9b66-4d84-bcfe-4e792c7216ef"
        },
        "item": {
          "id": "5488f1ba-feb7-4221-a756-791913535296",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "5175dffc-7017-471e-8b5a-8b66d07dc439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60bb5893-87ab-4998-b16b-b136dc825a12",
        "cursor": {
          "ref": "b5306260-432e-4b13-8a14-82ec9f50cec9",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "251232c2-89a0-488a-b96f-65d1830b209b"
        },
        "item": {
          "id": "60bb5893-87ab-4998-b16b-b136dc825a12",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e647fb05-fe3d-477b-b074-ff5fcdf19034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f7b14e-50e6-47ac-bc63-fb63c99c632a",
        "cursor": {
          "ref": "721ea0ba-8613-4f35-9742-1a0464808e95",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "45fc670d-7125-41e1-93ed-a01b446d232b"
        },
        "item": {
          "id": "06f7b14e-50e6-47ac-bc63-fb63c99c632a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "e0cf46d6-9bee-40ba-ab42-dfed5dc71ed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39142ffa-ed2e-41c4-b210-0a635b26e9e4",
        "cursor": {
          "ref": "3fa5852f-55cb-4194-851f-1d5fcb66ae34",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ea105141-97e1-4104-b979-c73e1a6409df"
        },
        "item": {
          "id": "39142ffa-ed2e-41c4-b210-0a635b26e9e4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1089c948-08c9-437b-99f4-4b93d95107f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e592fc3e-bf33-4ffd-9d96-be235a107336",
        "cursor": {
          "ref": "c801d3d2-cf3e-4bab-b3b0-7923a28e663a",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "409d01ad-f195-4e2b-b162-e4ad3040484d"
        },
        "item": {
          "id": "e592fc3e-bf33-4ffd-9d96-be235a107336",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5e97dd04-b54f-4e89-a3f4-0ee62daa4bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1524931e-3501-4831-a7e9-721861c9ef0d",
        "cursor": {
          "ref": "3f49e972-1202-47bc-b17a-854b7b296fba",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5af6b5ff-1bbc-4a92-a986-d01055f1fd3a"
        },
        "item": {
          "id": "1524931e-3501-4831-a7e9-721861c9ef0d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "22ee1996-95ce-407e-abf1-c4531c0468e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90a02149-949d-47fa-a2d3-acde977377d3",
        "cursor": {
          "ref": "6c48b15f-cd7a-45fa-b5b3-c91b4b02ed8d",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "10bff06b-e343-4c24-b7b7-5ba7c7b3d201"
        },
        "item": {
          "id": "90a02149-949d-47fa-a2d3-acde977377d3",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "54d99f5d-80e9-4d0f-ac75-7c123dee8ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06f3110-6ad7-4f83-86c7-77c76b67689c",
        "cursor": {
          "ref": "0a4a21b2-7c4b-442e-b18d-e34e2363fdfa",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a8a15360-e717-4309-acd3-5420624ac6cb"
        },
        "item": {
          "id": "a06f3110-6ad7-4f83-86c7-77c76b67689c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "66925fef-d14c-4495-a6a0-4168726ca814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10901921-4bf1-4556-9b21-7086f8857130",
        "cursor": {
          "ref": "ad5a71da-2aff-4bf8-924a-65f2635335e0",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1caa6343-23a3-488e-9bec-49248da247c9"
        },
        "item": {
          "id": "10901921-4bf1-4556-9b21-7086f8857130",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e2c25b88-5f2b-4772-9d6a-ff66156dcf64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc69ff67-b543-49df-859e-0f9e24a2420b",
        "cursor": {
          "ref": "2421aec2-cbbd-4161-b173-80e9932c1c80",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cc45aa47-58f9-48e1-9634-ac72934502ff"
        },
        "item": {
          "id": "cc69ff67-b543-49df-859e-0f9e24a2420b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d78b3d3c-dbcd-4c63-9e2f-4c458bd08197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce990d49-18b8-455a-b858-78682bc3c082",
        "cursor": {
          "ref": "60c7d704-b350-4cbb-b0d5-cb70a5764be1",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2d8689f4-6bdf-4383-8847-e8c8b006be74"
        },
        "item": {
          "id": "ce990d49-18b8-455a-b858-78682bc3c082",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ccaa1583-c2a0-4b8c-ac84-dd343164d809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe096d24-2624-420a-8f2b-312eaf7d316a",
        "cursor": {
          "ref": "fae46140-1463-402b-b46c-33049568f4b1",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ecf7dc94-57b1-4698-8212-262b88626bdd"
        },
        "item": {
          "id": "fe096d24-2624-420a-8f2b-312eaf7d316a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2feb4b2a-4258-47f9-adf9-1cfa5cc5a0ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48924c71-a039-4542-8b6a-fd19d19da736",
        "cursor": {
          "ref": "188b57c7-2a58-4107-8934-177fbff05638",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f12b697d-568b-4a2e-bb27-9520c4549903"
        },
        "item": {
          "id": "48924c71-a039-4542-8b6a-fd19d19da736",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6249cab3-f688-4d04-83d0-f7b21e5b69b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd598909-cd7d-4559-ac61-9ca939835592",
        "cursor": {
          "ref": "8c6a5fb8-c830-4af0-b80a-b7124aa7e6d7",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "cb77a078-beff-4047-8c58-538dcdbf120d"
        },
        "item": {
          "id": "bd598909-cd7d-4559-ac61-9ca939835592",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "dc285274-454d-4758-93f3-85bc6f95b460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b3f772-ef95-4bc6-998d-89eac5429c43",
        "cursor": {
          "ref": "a6693e02-feed-4a15-9455-db558c50dd4e",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "783fbe3a-68b8-4609-967b-c64f15c167e1"
        },
        "item": {
          "id": "b8b3f772-ef95-4bc6-998d-89eac5429c43",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c44ad701-f1f9-4945-b7d5-990ec17f9028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69492a6-3a4e-49bf-b377-e95c2bf3e6cf",
        "cursor": {
          "ref": "b7110636-651f-411d-ac22-fb1749345b63",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "da1a01c2-6e1f-45f4-85f1-60b602466d4f"
        },
        "item": {
          "id": "a69492a6-3a4e-49bf-b377-e95c2bf3e6cf",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e232fc76-c789-42ec-8956-d2548f952053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0aef44-6202-49be-b203-1af1ee7b5518",
        "cursor": {
          "ref": "1f7b294b-b3b2-44b1-af94-752bb77bba50",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8634a63b-154b-4ee9-b278-726a8fa741a8"
        },
        "item": {
          "id": "4e0aef44-6202-49be-b203-1af1ee7b5518",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3ad9bcdb-7981-43c8-93ec-0904ec68b4d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef18628c-48bc-47c6-b487-d1a6356672f9",
        "cursor": {
          "ref": "13fc9424-274f-401c-b3b3-042804a93aeb",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "409feef3-8860-4ab2-ae9b-f0dae63461e8"
        },
        "item": {
          "id": "ef18628c-48bc-47c6-b487-d1a6356672f9",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "41063ee8-d4d6-4988-86c2-1c4fd720391a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd52084f-ae59-41a8-b9e6-1a8d88e33b5b",
        "cursor": {
          "ref": "28819ce2-926e-41d6-b9f6-2f642f4e4a77",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2d417829-8c03-4593-bd02-123f9825f445"
        },
        "item": {
          "id": "fd52084f-ae59-41a8-b9e6-1a8d88e33b5b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "038eef73-5a49-4ca9-9d7b-996f79b5fe97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f45222bb-8f39-46f0-b2e5-b38cf7b5838a",
        "cursor": {
          "ref": "cd7c127d-dcd9-43bf-93f7-0821fed297fc",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ded7cbb4-4a48-4bbd-8530-018b8eab31b3"
        },
        "item": {
          "id": "f45222bb-8f39-46f0-b2e5-b38cf7b5838a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "21145adc-12fd-4757-8050-e5e8b6124784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454f2025-4ec0-4a7a-8599-03edf3185c30",
        "cursor": {
          "ref": "3186a01d-d3b2-49fb-ae9d-6698e263275d",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7713589b-59c6-4061-9f7c-d0c4002cc4e0"
        },
        "item": {
          "id": "454f2025-4ec0-4a7a-8599-03edf3185c30",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "41e51f58-03e5-4b1c-8175-6f17dff761c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ce3c08-540b-4233-b065-f9e4cd940860",
        "cursor": {
          "ref": "8d47a9f2-7121-48f1-a041-f78aba8a6272",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a9614c89-5efa-4f00-b217-0af34ef45515"
        },
        "item": {
          "id": "f0ce3c08-540b-4233-b065-f9e4cd940860",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "760c25e4-6303-44b2-afd5-5048654c8c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90425e38-3402-41cc-9358-2a58f08b47e9",
        "cursor": {
          "ref": "9af266e9-7d14-4a66-b86c-8029333faabb",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f5e993be-cf61-44fd-97b9-37f8282c6cbd"
        },
        "item": {
          "id": "90425e38-3402-41cc-9358-2a58f08b47e9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c2c83a63-6567-4434-990b-0aff0d861d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73bb0a2-a56b-44fb-a017-8848803d6f59",
        "cursor": {
          "ref": "7ca3b0aa-d0e5-46b7-9ab4-08ff3d6a4cc1",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c2a9ea0b-a56f-4fbc-b4b7-79eb64325f25"
        },
        "item": {
          "id": "e73bb0a2-a56b-44fb-a017-8848803d6f59",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e94ec923-141b-4c53-b959-86eca5a64919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ccd10d-a98d-45bd-928c-b51c5c532013",
        "cursor": {
          "ref": "af2e5502-6193-4916-8fdd-07007c98f6d5",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cc0a29c6-6427-454b-aad0-00f5f2a810d2"
        },
        "item": {
          "id": "09ccd10d-a98d-45bd-928c-b51c5c532013",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a2cb4fcb-eaf9-4b0e-a01f-8d8a3500148c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd4b9cf-2c32-44d8-9d53-caf4798b3b7e",
        "cursor": {
          "ref": "9b4ae708-9b37-4cac-8b65-fdf321b91672",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2aec24cc-2c6d-49aa-a6b9-3502766d7f22"
        },
        "item": {
          "id": "dcd4b9cf-2c32-44d8-9d53-caf4798b3b7e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "dfcba06a-c6e5-4966-89a2-4b06a5dbb8c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a05206d-509d-4d31-81cf-28159b17d97c",
        "cursor": {
          "ref": "33ba8178-bee9-483f-bc53-a423dc0d60c2",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0c6e3e17-fdf2-430c-aef5-0337b5ccfa8a"
        },
        "item": {
          "id": "1a05206d-509d-4d31-81cf-28159b17d97c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3d41bc64-a35e-4788-90d8-a982a3266d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6695ee3-6361-4fd7-a384-526f79e0281e",
        "cursor": {
          "ref": "fe2e598b-94b2-450a-b99d-6293447f0d66",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "77072f7a-19a6-46d6-b124-02542763b4fc"
        },
        "item": {
          "id": "d6695ee3-6361-4fd7-a384-526f79e0281e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "feb8c337-bee9-4de9-a224-556938f78fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1068d0c2-622f-46b9-b4fd-29abca961ef8",
        "cursor": {
          "ref": "72845f21-12ff-4fd8-808d-594397a27277",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7edd2b14-d214-4e27-b168-6f560518c93e"
        },
        "item": {
          "id": "1068d0c2-622f-46b9-b4fd-29abca961ef8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "fea3d01a-3f1c-4bb7-83ad-2addd63f65ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 171,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2b0a9c60-b169-4d76-88b9-755697fead22",
        "cursor": {
          "ref": "87bf4956-237a-4f4f-9c63-143e28f35986",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "90831e6a-d1fe-4e2a-90ad-b5ff2a34a58a"
        },
        "item": {
          "id": "2b0a9c60-b169-4d76-88b9-755697fead22",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "eb06f37e-ca6f-435d-82b2-bb1d99d18dfc",
          "status": "Created",
          "code": 201,
          "responseTime": 2019,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "30389acd-af3c-4544-be83-ae5cba0e5819",
        "cursor": {
          "ref": "33a22848-7ab7-4381-bebc-88ef61fc75f2",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3501d419-bb1f-492f-ba3e-1e1d9f6c93e1"
        },
        "item": {
          "id": "30389acd-af3c-4544-be83-ae5cba0e5819",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3d8b34d0-5e0e-4aa0-9386-df652c33543e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 122,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "5ae72bd8-c129-4d0f-ae87-d3711ae8c521",
        "cursor": {
          "ref": "3990b33c-edf3-48f4-9694-ac0cf27ddf0f",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b185cffc-ae80-434e-b0ad-e34e43bfe51a"
        },
        "item": {
          "id": "5ae72bd8-c129-4d0f-ae87-d3711ae8c521",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "925f6369-ab53-44c6-86aa-4d0fab5d772d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6edb2520-72c8-44b6-aab7-785703ec7078",
        "cursor": {
          "ref": "40c91454-3655-4894-96ef-3f3e316bac4e",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "91ada3df-a213-4710-abd7-d8b9eda624d6"
        },
        "item": {
          "id": "6edb2520-72c8-44b6-aab7-785703ec7078",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6d3c16bb-57d5-429d-8fa4-3346b75b41c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 132,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "eb7d3866-8173-4205-8ca9-44d342a030a3",
        "cursor": {
          "ref": "b926fb66-f778-4575-b46c-81dfc447262f",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b3cbb1d6-3895-4ad3-a85f-d3c3607aba10"
        },
        "item": {
          "id": "eb7d3866-8173-4205-8ca9-44d342a030a3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "972c4ff5-1421-46df-a37a-e1b7942fc2a7",
          "status": "Created",
          "code": 201,
          "responseTime": 1533,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "aae3aae1-929d-4260-bc8a-655f670c876e",
        "cursor": {
          "ref": "405c194c-9194-437a-b5fd-33e0819416cf",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "44172d11-501b-49e9-a119-a02ba1d20575"
        },
        "item": {
          "id": "aae3aae1-929d-4260-bc8a-655f670c876e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1a9de75a-325e-4137-8286-aa648b2200c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 121,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e403ff21-9d30-4d1a-9775-0eb51125fa97",
        "cursor": {
          "ref": "0abeb522-2787-419b-850a-433f8e33a7fb",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4b038315-3e92-416a-b4b7-0dc96afce67e"
        },
        "item": {
          "id": "e403ff21-9d30-4d1a-9775-0eb51125fa97",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2a36ace2-fa98-4bb7-b641-2cbb9aad7622",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1409,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8ce7efc6-1e30-4fc6-ad2c-d2a15f314608",
        "cursor": {
          "ref": "68398609-912c-4645-a8f1-6b506c350fcc",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d4375506-5bcc-4fd2-970c-883de68fa64e"
        },
        "item": {
          "id": "8ce7efc6-1e30-4fc6-ad2c-d2a15f314608",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b0d71a64-79b5-4b13-a9b5-f836dfb27415",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 193,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "72a463f3-8ff5-438a-8278-e054d697ea56",
        "cursor": {
          "ref": "25af192d-96cf-43b4-aca2-f13933985288",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2aa6f7bd-40f2-4d6e-8ef4-8929ea35d451"
        },
        "item": {
          "id": "72a463f3-8ff5-438a-8278-e054d697ea56",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "487ea4bb-1eef-4d57-bdc4-ad10e3a9c2dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 124,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ccc22058-00a6-4445-beed-f7af1f4ed4d0",
        "cursor": {
          "ref": "283d93af-3012-4bd0-bfd8-008dd95fc4a5",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "493ccf69-5fb6-4553-9e9a-447159506462"
        },
        "item": {
          "id": "ccc22058-00a6-4445-beed-f7af1f4ed4d0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "265b3101-7206-4705-bec8-fa56572ed0a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 108,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "cac419ba-4326-4a55-9c04-60995b89cc37",
        "cursor": {
          "ref": "bd22f079-9bcf-47d7-9b2c-8cc9cac2a4ed",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "113e5de5-2239-4fe2-b0c9-744cd41adf14"
        },
        "item": {
          "id": "cac419ba-4326-4a55-9c04-60995b89cc37",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "67f9b58c-e8e8-4d58-b673-8e41545e3a03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 121,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c68664cd-be2b-4372-9414-4ef5854ab1bf",
        "cursor": {
          "ref": "7e65bd36-4edb-4404-957d-e9e9e590a6e1",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "67964337-c558-4b76-a7cc-8b1aff5daf32"
        },
        "item": {
          "id": "c68664cd-be2b-4372-9414-4ef5854ab1bf",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2221039a-6945-41ad-a984-b2aa8f312b20",
          "status": "Created",
          "code": 201,
          "responseTime": 1405,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "2004bea5-d689-4167-a27f-738f7b13d25a",
        "cursor": {
          "ref": "b5386a62-fb68-46a2-be7c-2b00dd7ffb3a",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7ace906c-29d8-49b1-91a2-f71ed31db659"
        },
        "item": {
          "id": "2004bea5-d689-4167-a27f-738f7b13d25a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d5661eea-f7c0-4060-9b56-f18a2dec3478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33542391-e683-471c-9de9-954068d731de",
        "cursor": {
          "ref": "2fae7554-d4c2-41bf-8da1-55a9b4105596",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8a22721e-09a1-488d-9cc9-bfa3ff62ba65"
        },
        "item": {
          "id": "33542391-e683-471c-9de9-954068d731de",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2ed0ae32-4c87-4464-942c-f2edc3d34f29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d35dee-03d9-48a7-b9f8-493df33d8d91",
        "cursor": {
          "ref": "2b967918-4133-4436-a7f4-20d8ea242588",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8fc1356b-aaf4-4f24-a34d-51bf62ed8dc4"
        },
        "item": {
          "id": "55d35dee-03d9-48a7-b9f8-493df33d8d91",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "911ae0bd-ad73-46c1-9d5e-7473c3147618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab328578-3f92-42be-922c-f115eecb9431",
        "cursor": {
          "ref": "5fe910aa-7cc2-4025-8f9c-df41c66cc98f",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "cfcf14bc-6feb-4fea-8e91-bbb7f19efaa3"
        },
        "item": {
          "id": "ab328578-3f92-42be-922c-f115eecb9431",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c983f70f-61e8-45a5-ae09-8939ff95e71d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cea49640-63d2-4386-9a62-c4e8e83ac439",
        "cursor": {
          "ref": "b54353fe-d917-4532-abfc-1555e37439e6",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "0a1660d1-1075-4ebb-86f9-8d3b3a783fb4"
        },
        "item": {
          "id": "cea49640-63d2-4386-9a62-c4e8e83ac439",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6f96e1ba-6d8e-435e-8ddf-61430968fd93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a129d98-ef5f-4acc-9817-a382bb673881",
        "cursor": {
          "ref": "0964dc7a-5729-4722-8e33-926f04ef39a7",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6f81ca44-d794-4438-84c3-e9a4eae3a9a8"
        },
        "item": {
          "id": "9a129d98-ef5f-4acc-9817-a382bb673881",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a6da3f93-f949-47df-bbe1-3ef911b40cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10015ed-5d5c-4fa3-8a9f-f00e0861cd28",
        "cursor": {
          "ref": "a7a43cce-95b9-4da1-8e2c-018e103b74b7",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f2d40636-4d3f-4eda-8434-22b8e5077528"
        },
        "item": {
          "id": "d10015ed-5d5c-4fa3-8a9f-f00e0861cd28",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "72cc75de-35b5-4a5e-92fc-551e130407ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d20dbdff-fde1-442b-a7cf-e717c03a6911",
        "cursor": {
          "ref": "752638bd-017c-4d0f-bc67-6f36c593afbb",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "bf12b2f1-55f7-4287-b727-ee8ae914e29a"
        },
        "item": {
          "id": "d20dbdff-fde1-442b-a7cf-e717c03a6911",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7d4b8c8b-4387-437e-9a24-1ac5f888032b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46374082-fe9a-4c9c-8828-b05fee9aa0e2",
        "cursor": {
          "ref": "e39c1ce1-c514-4e0b-b820-be4ac1262616",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "df08bd43-3dbc-40fd-89f3-009ce8dfacf3"
        },
        "item": {
          "id": "46374082-fe9a-4c9c-8828-b05fee9aa0e2",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "30de037c-0a48-4eff-a6de-5ca87a01f3eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9005738e-5f6a-4bbf-bfbe-32cc547f1204",
        "cursor": {
          "ref": "7bfa97a3-5950-4f52-a62b-f90848f644fa",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e430125d-d102-45d5-bc87-1116da5a206e"
        },
        "item": {
          "id": "9005738e-5f6a-4bbf-bfbe-32cc547f1204",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "bdf8d529-8ce1-4f81-85a8-0366546bcf63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa34fbc-bf64-4c71-a953-2aa2c82eb74d",
        "cursor": {
          "ref": "8ec484ab-efbd-462a-a2e3-97b6eac15fca",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "52aef435-12d4-4c72-8255-9132e127134a"
        },
        "item": {
          "id": "efa34fbc-bf64-4c71-a953-2aa2c82eb74d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "eee20251-3763-4f1f-8e0d-f24dd816c71b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da3771f-521f-440f-b470-b4ad799e38aa",
        "cursor": {
          "ref": "3958a1c1-5b65-4f94-b3c3-7b74b3bcefc9",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "16753c79-4046-4430-be5c-fb58e3523b0b"
        },
        "item": {
          "id": "4da3771f-521f-440f-b470-b4ad799e38aa",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9a79bc03-b9ac-4c3b-95da-e485736d0aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e38eb5b5-26ae-47e1-bea2-e0cb8ef80d95",
        "cursor": {
          "ref": "2dd4e90e-e081-4076-9932-68ad60189eb2",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9df5d019-45db-4310-8d8d-2ec5985456f9"
        },
        "item": {
          "id": "e38eb5b5-26ae-47e1-bea2-e0cb8ef80d95",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "28b1dd9a-5b0a-4ab5-aa1f-1c298b1e8894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea9959c-590e-4f7d-b7fd-4018d5aaeb49",
        "cursor": {
          "ref": "4707751e-bc2c-42b2-873f-e786f2febe26",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "3584945e-efef-44d0-8e24-488cc23ccef3"
        },
        "item": {
          "id": "bea9959c-590e-4f7d-b7fd-4018d5aaeb49",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a612dec5-50aa-44c8-97a6-d6d2872e1c1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1241,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "9541b711-9d45-4247-94ca-b0eb163bad65",
        "cursor": {
          "ref": "fd94369c-a36e-4ef9-b21c-5a85daba7e81",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e1f81223-dc69-4460-b8a8-d9527bba6145"
        },
        "item": {
          "id": "9541b711-9d45-4247-94ca-b0eb163bad65",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6dd12265-5fe8-4b7b-a5c5-1d236fd74162",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1359,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "1d9216ba-2c1c-497b-9b19-cc4cf2867b08",
        "cursor": {
          "ref": "8a80fe25-263f-468b-977b-0a0a462914b0",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ed2c2c49-c704-4cd3-abc4-58ed3547364f"
        },
        "item": {
          "id": "1d9216ba-2c1c-497b-9b19-cc4cf2867b08",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f219c47e-8ed1-4515-9d51-ef4215abb0df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 253,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7c29a6e3-1128-40b2-b0d6-8c108cd5985e",
        "cursor": {
          "ref": "202e49cc-4f59-4fb2-8938-d9233787c248",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c2dfe360-4dc1-45ee-b8a9-0f1f2d62823c"
        },
        "item": {
          "id": "7c29a6e3-1128-40b2-b0d6-8c108cd5985e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "234f40ab-9faf-4ab4-b48a-e04e975b529b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1280,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "0cce78a7-705b-441d-b3cc-161ec95277ff",
        "cursor": {
          "ref": "95c91278-f475-4a4c-9bbd-5c06d7af03f3",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "850216bb-6a86-439b-b95d-a07ad8596bcc"
        },
        "item": {
          "id": "0cce78a7-705b-441d-b3cc-161ec95277ff",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "29a8dad1-335f-41d0-a1be-979b6a906fc0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7e62d16a-8a57-4cc3-b336-3ad1ee083cbb",
        "cursor": {
          "ref": "a0c16584-8024-4c3c-ae31-55f3b4f764d7",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "99663809-f767-4602-81da-2c90e1d0f049"
        },
        "item": {
          "id": "7e62d16a-8a57-4cc3-b336-3ad1ee083cbb",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "21395145-9b55-4ed3-9af1-20b06862278a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ef13cb-f67d-489e-94da-28a9145c0f51",
        "cursor": {
          "ref": "faa4b4fc-f660-407d-ad3e-7c1bf53b66cb",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6590881c-470d-4cca-96bb-a9320a66577b"
        },
        "item": {
          "id": "26ef13cb-f67d-489e-94da-28a9145c0f51",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b795594a-9394-4994-97d4-9fc512f18193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfba836f-c35e-4211-b11f-c3b197c25205",
        "cursor": {
          "ref": "898521bf-2be0-4789-82c9-e1fc4f491191",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3878bea6-82d8-4ea8-8548-a14a3de61638"
        },
        "item": {
          "id": "dfba836f-c35e-4211-b11f-c3b197c25205",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0ed70e87-c17c-4dd5-87fc-0bdeae783e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6d17ae-8a3e-4152-aea0-b9d2a7310ac2",
        "cursor": {
          "ref": "c3059839-072f-42ce-a6b4-e5e108ad6c29",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "fecb6a5d-8de4-4421-8e20-04d0200d7674"
        },
        "item": {
          "id": "8a6d17ae-8a3e-4152-aea0-b9d2a7310ac2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "84f4221c-c6c1-4f3f-a8c1-bcab934dba29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba733602-84df-4c97-9ea1-45f55ac90756",
        "cursor": {
          "ref": "ae8aee97-1b30-412b-a048-ba64fa6501dd",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a6008e24-3d21-4d1b-a06f-02881ac6eaf9"
        },
        "item": {
          "id": "ba733602-84df-4c97-9ea1-45f55ac90756",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "816153d8-6771-4cd7-93d3-d55b32208736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0ed741-6d88-41f4-836f-8a4011c0923f",
        "cursor": {
          "ref": "357aec8d-109e-404b-a8d1-94c79ed8fdbc",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "bb04e602-0dcd-4851-bb93-b41c7e1a8c18"
        },
        "item": {
          "id": "ca0ed741-6d88-41f4-836f-8a4011c0923f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "cf5f4203-c939-4db3-a4f4-eab7c3577b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6caf000b-abe1-42d9-b04a-e338f48f7218",
        "cursor": {
          "ref": "4988960c-1457-4b35-a4d2-cbaabaf0e0c8",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "759f8744-36c2-47b8-943a-e4288927d355"
        },
        "item": {
          "id": "6caf000b-abe1-42d9-b04a-e338f48f7218",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "89ea4c6a-b329-4015-9840-876644037aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a05571e-410e-461d-a179-66204571cb9a",
        "cursor": {
          "ref": "0a62a515-643c-4fdb-93b5-ab3071b61b95",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "71c7acac-5a23-4acd-9bdb-c9a59d6ecb61"
        },
        "item": {
          "id": "1a05571e-410e-461d-a179-66204571cb9a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "11b3176d-3ba5-4d09-b2ec-baa74b0857c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef5c2ed3-01db-4227-b749-27346db24925",
        "cursor": {
          "ref": "80683c6e-6700-4e51-95e5-eb9ad8d9f909",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e7647da1-745c-450e-9f97-24cd589da444"
        },
        "item": {
          "id": "ef5c2ed3-01db-4227-b749-27346db24925",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "037a69bf-2e67-424e-969c-7840757a88b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b68217b-a131-4333-afe3-40d3ec659a35",
        "cursor": {
          "ref": "f63af83a-cce2-42d0-a082-31b6f6639abe",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e25ef008-696e-4d83-8a6f-78254f4c02ec"
        },
        "item": {
          "id": "3b68217b-a131-4333-afe3-40d3ec659a35",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7b745b07-9d03-46ee-84fc-c9483939afd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b68a69ab-f08a-4877-8434-284cfc5b4b89",
        "cursor": {
          "ref": "1f63d417-7ae5-4046-ae8c-56cca668994c",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "633fb11b-c1be-4fd6-83fd-766a55af9c4f"
        },
        "item": {
          "id": "b68a69ab-f08a-4877-8434-284cfc5b4b89",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "76b5b6a2-dcfc-4045-a056-15244350aeab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae286672-a929-48c8-bf7e-4f8797485f81",
        "cursor": {
          "ref": "38c7b10b-b0a0-401c-b76b-6b079e36b3ad",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "21ef53a8-2eef-4735-804c-081faeb82fdd"
        },
        "item": {
          "id": "ae286672-a929-48c8-bf7e-4f8797485f81",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6ca88443-a2b8-4fd9-b04a-45bc0bd322d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d53fdd-274e-492b-b995-97ce01d49ba9",
        "cursor": {
          "ref": "ec703797-679e-42f4-a001-c0efbb0a4817",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d941b234-d7f6-4014-a456-6e148756ae34"
        },
        "item": {
          "id": "20d53fdd-274e-492b-b995-97ce01d49ba9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0fec634e-2da6-4f51-8b70-ef181d819792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce82b1e1-997e-4453-b9c3-c4e762c60160",
        "cursor": {
          "ref": "abe79045-0992-4b5d-93cc-9069c037cee2",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1d7427ce-ae8f-4ea3-8345-9a57e307830e"
        },
        "item": {
          "id": "ce82b1e1-997e-4453-b9c3-c4e762c60160",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "dae4b07e-8868-4f39-869e-dcbecb69fd87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e18c914-2139-491b-a21f-94b159bcd9d7",
        "cursor": {
          "ref": "291c6d19-c9c3-4ad9-8aa3-512e2d010d20",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a4668e55-63a5-424a-b451-741b3a8a9514"
        },
        "item": {
          "id": "0e18c914-2139-491b-a21f-94b159bcd9d7",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2d6edf19-f2a1-4164-ac0a-8a75531934c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f2f34c-8039-400e-af96-ae4226434350",
        "cursor": {
          "ref": "49f4109b-b747-4489-b22c-9300a3993157",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1072300c-6c93-452a-9374-c224446d28e9"
        },
        "item": {
          "id": "80f2f34c-8039-400e-af96-ae4226434350",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0d864ca4-70af-437f-99ab-1291525e5328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cd7842-de25-47d2-9e02-ec9dfdb068f6",
        "cursor": {
          "ref": "40ea0514-9f49-49cb-9f69-14f97904457c",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "209be5fd-410e-4a66-ba32-5b305d20dbf0"
        },
        "item": {
          "id": "53cd7842-de25-47d2-9e02-ec9dfdb068f6",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7785b3c6-4a4c-444d-96d7-fce1ce8e29a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed13c93-03d6-4de6-870f-7e06f2224266",
        "cursor": {
          "ref": "a760e9ba-026b-4eb1-a167-53eea5aebb94",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "721923d8-ba6b-4688-b67d-ed54f92c225e"
        },
        "item": {
          "id": "9ed13c93-03d6-4de6-870f-7e06f2224266",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1d450326-d933-4c8f-a34d-a3f5db0ffd4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86269997-f7b6-4a4e-90ed-465b0d124ada",
        "cursor": {
          "ref": "6f8a2b47-e454-4d1d-a4e5-8ecf445fee99",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e5837236-51f0-4643-aa14-4447d0c85ec0"
        },
        "item": {
          "id": "86269997-f7b6-4a4e-90ed-465b0d124ada",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4430a47e-f165-443a-bb82-0723c23080b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106a59e9-7399-46e8-80c5-c05d4fd36af3",
        "cursor": {
          "ref": "708cfd14-5d16-4dd5-8cac-267b56977f29",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e795d09c-47e8-4116-b401-b5437e8da858"
        },
        "item": {
          "id": "106a59e9-7399-46e8-80c5-c05d4fd36af3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "83c344f7-f7cc-4304-9f24-6bf60e06f0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736aad0d-8578-4489-8285-c17e2122f19c",
        "cursor": {
          "ref": "0bc15604-c42e-45f9-8a4a-2925a4910100",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "379cbc94-5987-403f-934f-b6bb23c5170e"
        },
        "item": {
          "id": "736aad0d-8578-4489-8285-c17e2122f19c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f1a346b4-3431-4d9e-8004-608822ec1411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d63bd8-eb83-438d-b2a4-341ec492e0b7",
        "cursor": {
          "ref": "8483a16f-a112-4b64-ac3c-ebd6ab3c64fe",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1cf363a4-49c1-4ee7-93ba-0d69aa6c51ff"
        },
        "item": {
          "id": "a6d63bd8-eb83-438d-b2a4-341ec492e0b7",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a191427f-5161-4467-a8d9-76bce5ee9d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3b0b90-d9fa-4f73-bfab-b6e4f13663ad",
        "cursor": {
          "ref": "934c3617-ac95-421b-b7fa-d9114cf14db0",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5091cd73-c52d-480d-841a-dcbdc9fede5c"
        },
        "item": {
          "id": "5a3b0b90-d9fa-4f73-bfab-b6e4f13663ad",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f5b3a1b7-29e8-4d9f-8b1b-92072786352a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74df94be-d1d8-422d-977c-85721630ba97",
        "cursor": {
          "ref": "6da25ab6-21e0-417b-bbfc-80a70d5443bb",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "91749754-5a39-45a1-b1c1-b329b7382b85"
        },
        "item": {
          "id": "74df94be-d1d8-422d-977c-85721630ba97",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d625a7ab-870a-45fb-af73-cc9138e14a90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f66762a-752b-4d5a-a325-ce73150b41cc",
        "cursor": {
          "ref": "71f9fdca-03ff-40a3-aa23-9689917732f5",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "27b38e58-5546-4511-b978-7225b712bb92"
        },
        "item": {
          "id": "1f66762a-752b-4d5a-a325-ce73150b41cc",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "78290378-ac4f-496e-b973-6e64a73e9cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d4c8ed-fc8f-45b1-8511-c33e2c76a559",
        "cursor": {
          "ref": "e1dbbb76-fb5d-4750-9abe-e7446df8d4c1",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3c59ced8-f9d7-4f43-b9e2-fdb204397424"
        },
        "item": {
          "id": "b6d4c8ed-fc8f-45b1-8511-c33e2c76a559",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1d9470d8-b6a8-406f-ba1a-18f36caaca91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b854f4d-1bf5-405a-8bd4-3fa5eaf5fa5c",
        "cursor": {
          "ref": "930ecba7-830f-4aa3-be13-c18fd2e3a921",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0d85de46-fefa-4f2e-b9e5-5f5047be376b"
        },
        "item": {
          "id": "3b854f4d-1bf5-405a-8bd4-3fa5eaf5fa5c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7a5b8665-c364-4bdb-a7ec-67d99c6ecc54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da37cc4-377b-4746-9549-0c5d78b62f4f",
        "cursor": {
          "ref": "2d6f6266-2a8a-476c-9ed6-1ef6a314b8e0",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f476edcb-3bdc-40b1-a1a0-996ff7176051"
        },
        "item": {
          "id": "6da37cc4-377b-4746-9549-0c5d78b62f4f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5ba9f353-14cd-4123-8c5c-3efabb46fbbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "526d894d-d871-4557-96b7-e90149740127",
        "cursor": {
          "ref": "cb8a2f1a-bc00-4412-af8e-8670c8c96e33",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f346ee75-fa9e-4aef-8ac4-0ac9a0ee9292"
        },
        "item": {
          "id": "526d894d-d871-4557-96b7-e90149740127",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "88d92f6d-4096-4cdd-afae-366546697ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebdf2468-e2b4-42ec-a3bc-ce4c14f46afe",
        "cursor": {
          "ref": "57b248eb-bbc1-46e4-b392-5641b75619fe",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0f3b850a-3b34-4870-bf0a-acff0d52d4e5"
        },
        "item": {
          "id": "ebdf2468-e2b4-42ec-a3bc-ce4c14f46afe",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "af0fa82d-edc5-4958-a4f3-287827bbd1c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61362b2-bef4-44c3-9ed9-1c11fb671d0d",
        "cursor": {
          "ref": "d3b44c1d-7137-432f-bb84-8352f5a8a3fc",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9eee01b3-8285-4e03-af71-ee657f0cd130"
        },
        "item": {
          "id": "c61362b2-bef4-44c3-9ed9-1c11fb671d0d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0c5b2884-4663-41f4-90c8-c8bf66e23f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26309264-f34f-4222-92c3-690b30644345",
        "cursor": {
          "ref": "95f1a751-3ee1-4f09-9090-486dbb52fdec",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "591d8e90-508a-4484-84ae-fdad0785d224"
        },
        "item": {
          "id": "26309264-f34f-4222-92c3-690b30644345",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "53d62f51-417b-4710-9701-19c10dc1a773",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40982e8-19b9-4fe8-8854-db1814535c1c",
        "cursor": {
          "ref": "bc877dda-d5d6-4f64-b4a2-63d7fc98ccb9",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6649542e-4c5a-42d8-a506-c02a1d3ee6a6"
        },
        "item": {
          "id": "d40982e8-19b9-4fe8-8854-db1814535c1c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "433dcd8b-21aa-4232-8bdc-b3386c140d63",
          "status": "Created",
          "code": 201,
          "responseTime": 1519,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0be5038-3117-4434-a093-4bd6208a78d3",
        "cursor": {
          "ref": "a7253c63-40b2-4ee5-bae8-34cf83998ec1",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "368a718e-21ff-469a-a752-c931088ec7c1"
        },
        "item": {
          "id": "f0be5038-3117-4434-a093-4bd6208a78d3",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "84e4e901-0643-4f11-8293-6e1d7f7bc94a",
          "status": "Created",
          "code": 201,
          "responseTime": 1459,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a365ec5e-57cf-4bd1-ba4e-3479ad6eec90",
        "cursor": {
          "ref": "92002727-04a1-4c46-a315-591f0046be8f",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "fb9383ff-8595-44df-852a-4a82d88c8777"
        },
        "item": {
          "id": "a365ec5e-57cf-4bd1-ba4e-3479ad6eec90",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0828097b-2064-4c58-9bb9-c01fed3dea71",
          "status": "Created",
          "code": 201,
          "responseTime": 1424,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0143cf2f-3671-4ce1-94f2-aad7cb87966b",
        "cursor": {
          "ref": "e030e436-1d90-4603-8a6c-abe7c2525248",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "26373182-73c9-4e0a-8d4f-5b26be747ca2"
        },
        "item": {
          "id": "0143cf2f-3671-4ce1-94f2-aad7cb87966b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "97d8d8d2-c342-4b20-a530-15af26e79601",
          "status": "Created",
          "code": 201,
          "responseTime": 1450,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09a7bca-516e-4aa0-b55b-1adc1eaa5c07",
        "cursor": {
          "ref": "4506b0d9-d91f-4916-bcd2-ab49dc8ec899",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1db82118-404b-4acb-884c-3b7e2bfed963"
        },
        "item": {
          "id": "d09a7bca-516e-4aa0-b55b-1adc1eaa5c07",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "19d7e4ef-1f09-44a1-929c-fdb652d51bc6",
          "status": "Created",
          "code": 201,
          "responseTime": 1379,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "36df66d4-2f25-4fad-871b-df56934a8310",
        "cursor": {
          "ref": "a0f0a13e-2453-4059-bbb4-5c00f575f1bc",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8a5014ee-9950-41ba-ad6c-227bb81a7494"
        },
        "item": {
          "id": "36df66d4-2f25-4fad-871b-df56934a8310",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d1caafa8-4113-4098-9713-046c85ea04e8",
          "status": "Created",
          "code": 201,
          "responseTime": 1487,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4336b6ae-5b2a-4fac-bbea-ae8be02e4b46",
        "cursor": {
          "ref": "c6938ac5-ac18-430b-b705-b7e0468b1264",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9dbd5cc2-67f5-4327-bd69-316ef673df88"
        },
        "item": {
          "id": "4336b6ae-5b2a-4fac-bbea-ae8be02e4b46",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ea838ff8-b347-4a9d-948b-b78c8c3779e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e17029-f103-41c0-ab71-8d2cb3aea0a6",
        "cursor": {
          "ref": "cbcb95c6-1cb4-449f-a69c-85bb9f175c96",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "752b40f3-0a04-4e03-b3ae-c9fa73eecb3c"
        },
        "item": {
          "id": "e6e17029-f103-41c0-ab71-8d2cb3aea0a6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7f8752b4-48b3-4682-85c2-8d15d7fa7992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba6a7d6b-7019-4dff-afc9-59b16a2d1768",
        "cursor": {
          "ref": "9bc41abc-e580-43f6-b49a-f77f8a1caae5",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a735624d-b33b-49e0-a921-fbd718acf3ee"
        },
        "item": {
          "id": "ba6a7d6b-7019-4dff-afc9-59b16a2d1768",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8af3f1c5-a712-4b4a-8928-233a1e6ce844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dce81515-313e-4135-b4bc-08499f46cd72",
        "cursor": {
          "ref": "fd489bbf-9535-4456-ac1a-ae0215457e86",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1a3ffd55-c4f2-4b88-bbc8-4ec0dc0549f4"
        },
        "item": {
          "id": "dce81515-313e-4135-b4bc-08499f46cd72",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ef885699-f0d9-452b-8ae1-d50f48182b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0431b7-d496-4721-9727-fb52350fa871",
        "cursor": {
          "ref": "3672d15f-f1b1-4fdb-9335-5c344e198c61",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "98bc2bbe-b21c-4f8d-8188-88282c14cd8e"
        },
        "item": {
          "id": "ff0431b7-d496-4721-9727-fb52350fa871",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3e49ace5-eb5b-4936-b589-564581f0fb18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d84808-32a2-4d22-b89d-f9acd7f9b7e4",
        "cursor": {
          "ref": "15beec69-bf75-4947-96f3-f1b1b44777da",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0bb3c3ca-120a-4847-b953-aa239f132aee"
        },
        "item": {
          "id": "f5d84808-32a2-4d22-b89d-f9acd7f9b7e4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ae3e9e25-44a8-4852-88a0-b3b5638bdc2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89287bf8-cfea-4b91-8e32-7f593a177eb5",
        "cursor": {
          "ref": "eb434e28-b595-4d84-bfc1-ff7db30d0b33",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d7badf93-ea6d-4637-a79e-ce95c1c45162"
        },
        "item": {
          "id": "89287bf8-cfea-4b91-8e32-7f593a177eb5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "60f0eb96-e072-4f21-82a5-b5ee95c00544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0673851d-db1e-433d-b1c1-07a0442abdbc",
        "cursor": {
          "ref": "7ef667d0-2c09-45ff-9fd5-7fe194ce9a86",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4f30b378-457d-408c-b5f2-7b9abd86162d"
        },
        "item": {
          "id": "0673851d-db1e-433d-b1c1-07a0442abdbc",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1d0e9c79-5ca5-4516-974f-472c76cf2562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07810062-24f3-41a6-9278-50faa261b18e",
        "cursor": {
          "ref": "4d6dead7-2c3e-4a6a-a24f-76fcc8606b58",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0e0170b6-56ee-4223-8efd-7998c0585701"
        },
        "item": {
          "id": "07810062-24f3-41a6-9278-50faa261b18e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "11823aab-1593-4f63-a738-57a7ad70c3bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4ec144-bae9-4e92-bfd8-29b23a3bc113",
        "cursor": {
          "ref": "cfdc232d-6a98-4845-906b-2d76ae7e5192",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ef1abc13-8c7c-44be-9673-1d3cbbbff43d"
        },
        "item": {
          "id": "aa4ec144-bae9-4e92-bfd8-29b23a3bc113",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c13185f8-a095-4029-af39-aa6bd0375199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf3af819-f506-4790-9030-9cf1c4954102",
        "cursor": {
          "ref": "70eb2941-9eed-4f0a-b6c2-3699ab3cd74e",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2c7cb417-76dc-4e05-839d-232ad516eae6"
        },
        "item": {
          "id": "cf3af819-f506-4790-9030-9cf1c4954102",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7887a0b6-0009-4fc4-b080-36fd4c5ce754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a63c555-eca5-4c81-8062-7e7e0ab47528",
        "cursor": {
          "ref": "a2bdce55-d441-4942-8771-3ff02c575588",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "cad2d235-e511-4e1a-bbb0-512e834c5fbe"
        },
        "item": {
          "id": "6a63c555-eca5-4c81-8062-7e7e0ab47528",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "73106852-f4f2-4a1e-bcf5-cf04b0ca520f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8ae11d-b125-4aa7-b522-42641b606cd1",
        "cursor": {
          "ref": "fb1c45d3-c47e-4ede-9a2b-1bdd88638c65",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "39554c30-0b74-4eb1-9e3e-586711909b06"
        },
        "item": {
          "id": "5f8ae11d-b125-4aa7-b522-42641b606cd1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "cf0cdfcc-52da-4e3e-96e1-079053b41dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42297bba-19dd-4715-919d-b87a001307ac",
        "cursor": {
          "ref": "9b04e809-5033-429f-94b2-8de9fc9dcb35",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c78f7dd8-5a05-4986-8395-6d5c818fc376"
        },
        "item": {
          "id": "42297bba-19dd-4715-919d-b87a001307ac",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "da321478-7902-4978-b072-5b99006d5380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e8726d5-4106-42e2-a114-514868efc84b",
        "cursor": {
          "ref": "82e0f4b1-e457-4fa8-81e7-266ce1a2ef06",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "364aa1cb-9e8f-4a0e-8f4a-a163f564f0dc"
        },
        "item": {
          "id": "5e8726d5-4106-42e2-a114-514868efc84b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e8db7fe3-e5c2-4c61-9b87-7987237a47d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4e89584-c066-44f5-8a5e-5a91ce557a39",
        "cursor": {
          "ref": "2cbde258-bec7-466d-8eb1-f9a335dce92e",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "20393b9b-1edb-4cf8-8c21-5c659e97c004"
        },
        "item": {
          "id": "a4e89584-c066-44f5-8a5e-5a91ce557a39",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9ac0cdce-16fc-44ae-b23f-77fc023946c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ecaf05-736e-486d-b6b9-0935cfa45286",
        "cursor": {
          "ref": "4522435b-77e9-4e73-9e4b-3e5f7ed6311e",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a80baabb-4560-40ee-88a5-80fa10d03605"
        },
        "item": {
          "id": "90ecaf05-736e-486d-b6b9-0935cfa45286",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ab2070f3-1e06-4463-952b-e1818299d2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa479c93-07f0-42c8-b41b-1c3480ba6c7b",
        "cursor": {
          "ref": "98acaa3f-89fe-4d15-8644-6715d1884ef8",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "930e6096-21a5-40e5-90fd-bb51443e2978"
        },
        "item": {
          "id": "aa479c93-07f0-42c8-b41b-1c3480ba6c7b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "87d17cc7-2db8-4fcd-8abc-5eab3a1f04b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c96cbe-9595-4eca-95c4-2dd07e86e058",
        "cursor": {
          "ref": "dbfddd99-640e-4ede-8470-f29265d85e7d",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b662234a-fed8-4ee6-8ef2-16d84a720a6e"
        },
        "item": {
          "id": "23c96cbe-9595-4eca-95c4-2dd07e86e058",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a0f65ec6-af6e-4da4-8b98-2b0fb6610233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84944257-b1c5-451e-8592-02ab1264a89c",
        "cursor": {
          "ref": "4f8bc350-25d9-4866-92fa-569dc8a76dbf",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e276a08a-1630-4e48-952e-8acb34d30cfc"
        },
        "item": {
          "id": "84944257-b1c5-451e-8592-02ab1264a89c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d5554a87-1363-49b9-b81d-3a83f4d0c640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db9ba48-0ebc-46b9-be43-bba4f05b27e4",
        "cursor": {
          "ref": "83ded5ad-b0b4-425d-a22b-241ad05fadd5",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "648eef8b-9e4d-45ca-b433-39e31fe72861"
        },
        "item": {
          "id": "9db9ba48-0ebc-46b9-be43-bba4f05b27e4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "27ff3127-5979-4e20-ad05-4fa600ca0fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5288009-9ba4-4c54-afb2-e0339a314185",
        "cursor": {
          "ref": "e390165c-4ad3-409a-9acc-a22be3362def",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9aa03648-4c8f-4fa7-bfcc-a02a427a3082"
        },
        "item": {
          "id": "d5288009-9ba4-4c54-afb2-e0339a314185",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3d9a927b-2b6d-4802-8c79-314c3eaa13c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e434df0-0eb4-4d24-8e77-5dc220544251",
        "cursor": {
          "ref": "868cb161-f75c-475e-aa64-0555e5f5b2d7",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f83f4d2e-51fd-42ae-8b98-c629324140bf"
        },
        "item": {
          "id": "5e434df0-0eb4-4d24-8e77-5dc220544251",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "73ab8ac9-d454-4d75-bb37-94b5b4c56e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4400b414-dcef-4f48-ae85-35d8d25dfc9a",
        "cursor": {
          "ref": "29178966-7006-4529-bef8-fece1d7715ca",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b3347785-ef1f-44fc-9bb8-1de690823e30"
        },
        "item": {
          "id": "4400b414-dcef-4f48-ae85-35d8d25dfc9a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "12f7484f-39af-4c85-8f16-d997ad139940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d29cf90d-cf45-4066-b65c-59c715f026be",
        "cursor": {
          "ref": "c529eb6c-4290-4070-9f9d-08c2c3044d24",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7e38865e-0e5f-4eeb-9cb7-29f210f78792"
        },
        "item": {
          "id": "d29cf90d-cf45-4066-b65c-59c715f026be",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6aa6980f-5151-41d8-984e-3f183273ccd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff2b987-7eb2-46ac-8839-f3417bb27a76",
        "cursor": {
          "ref": "f753bc5b-9812-4728-8c89-a24786cb95a5",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8b1e686a-f6a6-44bb-9760-5253f20bd49b"
        },
        "item": {
          "id": "4ff2b987-7eb2-46ac-8839-f3417bb27a76",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7ccb045f-4b3e-4787-86a2-92defdee73ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c16f94f-f74f-4239-92cf-2a573fd603c5",
        "cursor": {
          "ref": "4dce2182-d658-43e5-b6a4-262845ea445c",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "bfde4fc4-c7a2-45ac-9940-e3a7a5e074dc"
        },
        "item": {
          "id": "9c16f94f-f74f-4239-92cf-2a573fd603c5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "64b2452b-9759-439c-8dcd-e4d48e4b2aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb95c6b-3801-439a-b11d-8a9dea5c18c6",
        "cursor": {
          "ref": "c68c22b4-5f1a-4be1-b5a7-2283be7c36e3",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2e5a48f1-3f26-44d5-8299-9934388b6459"
        },
        "item": {
          "id": "7fb95c6b-3801-439a-b11d-8a9dea5c18c6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a618d58c-9753-48a5-b15e-a16ccbb487a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187e9d1a-9c95-4a7b-bc4e-f2f63eef3cc7",
        "cursor": {
          "ref": "f44bf3f9-0b21-4b89-8bfa-da9322faeb60",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e2160b99-18c9-4384-84fb-159ecbdc3508"
        },
        "item": {
          "id": "187e9d1a-9c95-4a7b-bc4e-f2f63eef3cc7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f70fd4ef-f3b6-4105-8c54-de6e7842919b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eaf2055-6281-4071-8839-3ddd8ddd5667",
        "cursor": {
          "ref": "2c3c184f-02a0-4da3-b2a4-6c9b0e8648d6",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e081ea58-4feb-4dbf-af04-4e14f18cd189"
        },
        "item": {
          "id": "1eaf2055-6281-4071-8839-3ddd8ddd5667",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "398821aa-f4e1-450e-8f3c-9bb2a0d436c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb03f6be-b45d-4178-9db0-1cc78f8d77f5",
        "cursor": {
          "ref": "b1e686bd-31f3-42cc-8583-5d1eff7e5db2",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f3fd5422-5099-4150-9b1a-c3ff06510588"
        },
        "item": {
          "id": "bb03f6be-b45d-4178-9db0-1cc78f8d77f5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "dc22698d-d2ac-4401-931f-0d4ef4cf030d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e613a7c8-ff54-4cd9-a4a1-70b8a9656c95",
        "cursor": {
          "ref": "79bd6e09-5c96-478e-9876-f8ec888c5dc6",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2d064db1-7947-488d-9c35-c415aa6665b1"
        },
        "item": {
          "id": "e613a7c8-ff54-4cd9-a4a1-70b8a9656c95",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "14e19110-85ac-4920-bdf1-23d355b0f8a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0273f5d8-4fbd-496c-810b-e2c63907821d",
        "cursor": {
          "ref": "9cfcf770-68a8-47f7-8a60-01ddc411e015",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9c4858f0-7bf0-4186-8cbe-78d0999cff80"
        },
        "item": {
          "id": "0273f5d8-4fbd-496c-810b-e2c63907821d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1ed8e587-6d35-493a-9a3c-a3d775da96eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251a04ad-d781-409f-bab9-7e75eccc158b",
        "cursor": {
          "ref": "9005d601-9830-4c2e-b6b6-36e5cd61aa09",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "79d19918-f734-422a-8334-8855b9cf3219"
        },
        "item": {
          "id": "251a04ad-d781-409f-bab9-7e75eccc158b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4714d726-1f50-4f03-8416-89117fe0da71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8970430b-b3d3-4bb5-a0cb-a9c9150b6661",
        "cursor": {
          "ref": "279a1e53-1956-4899-814b-34a16b370c23",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "dcaefe9d-51e4-418b-a34a-c7732bc1bc5e"
        },
        "item": {
          "id": "8970430b-b3d3-4bb5-a0cb-a9c9150b6661",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "81f662c9-25b4-49a7-b95d-606b83b6c8aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18892078-cefb-4e27-8417-b30e224f814e",
        "cursor": {
          "ref": "cdd3561c-a591-4061-a8aa-07fbf9c02b13",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "bedfce00-b2cf-41a9-a403-2401ea3f80e5"
        },
        "item": {
          "id": "18892078-cefb-4e27-8417-b30e224f814e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "eace86b0-8b7b-4236-8a87-f767b6c959ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b68465-ba62-4c28-bd41-d9fac8ce9810",
        "cursor": {
          "ref": "0fa29191-dcf7-479a-b8b0-1438176e2979",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "efc34ccf-4089-43d7-983a-43a3f1357f84"
        },
        "item": {
          "id": "64b68465-ba62-4c28-bd41-d9fac8ce9810",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "69fd5b2f-ef5f-48a3-89d9-11212519d753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435cdcb9-4d9d-43cc-8084-de99c221994c",
        "cursor": {
          "ref": "be4e995f-7c8e-49c6-8305-a3efbecc2d60",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e8ca1832-cd44-4b9a-83d0-0783ccbe02b6"
        },
        "item": {
          "id": "435cdcb9-4d9d-43cc-8084-de99c221994c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2a61c5f8-e7b7-426b-aff4-9bd06a4b4007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d0c65b-5bc1-49f2-a370-4e7a7bb13997",
        "cursor": {
          "ref": "a6f7cf67-a165-4e46-bb57-584fd1a35301",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5a7c7b84-e3dc-401c-ab4e-2af7ae899a7d"
        },
        "item": {
          "id": "d8d0c65b-5bc1-49f2-a370-4e7a7bb13997",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b9d0ce1e-7678-4675-a492-c79f53aecd68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1493fb-919f-412e-a344-6ea3843afba9",
        "cursor": {
          "ref": "897080da-d7e2-4ffc-99bd-acd8b759cb3f",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1c85d1b4-6eca-49a7-8cc2-b2ab3c099a16"
        },
        "item": {
          "id": "fe1493fb-919f-412e-a344-6ea3843afba9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2bb215b9-7bb7-4a71-8fd4-52cc378a5886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d0bfef8-65ec-46a8-a0f8-3cba09f29ef7",
        "cursor": {
          "ref": "959af1b8-c0aa-4a9a-b14d-fa188d238399",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c8900887-c938-47e8-9239-538e82873170"
        },
        "item": {
          "id": "4d0bfef8-65ec-46a8-a0f8-3cba09f29ef7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "72718267-9c71-4d6c-bbd1-9592ac8ae778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245a1dcc-997d-4b85-ae98-edaa3ac97665",
        "cursor": {
          "ref": "01aa8c0a-f46b-415d-aa49-9148da261a1e",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "18213fe7-9403-441a-b776-e108297b17f6"
        },
        "item": {
          "id": "245a1dcc-997d-4b85-ae98-edaa3ac97665",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "aa3aaa70-36f5-4667-8445-a184fd087bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66bc607a-7b1a-45bf-97a8-fedad1b24e65",
        "cursor": {
          "ref": "f4324d1d-60f2-481a-a27d-803f9927174e",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "45b30042-1b6d-4225-a58d-99840de1eaa2"
        },
        "item": {
          "id": "66bc607a-7b1a-45bf-97a8-fedad1b24e65",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "55c8c1ca-3969-43d7-a301-eee9e299e3bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d03d7c-d879-4b4c-a118-1a3e75557616",
        "cursor": {
          "ref": "3bbceeb9-f5aa-4285-98e2-56b31050d864",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "96f9535a-45bd-4e6a-a0cb-9006f713f1b3"
        },
        "item": {
          "id": "10d03d7c-d879-4b4c-a118-1a3e75557616",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "daef083e-226d-4ff7-be77-4c9b9e69061c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89fc543b-f24d-40e2-9afe-c40252b06d38",
        "cursor": {
          "ref": "4c9c5f56-58bd-47a4-9a81-88e4738639db",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6b076576-4073-458c-a892-b908c0a86f77"
        },
        "item": {
          "id": "89fc543b-f24d-40e2-9afe-c40252b06d38",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9cd4cdd5-435c-43bb-b775-87cfcd676bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18b0994-a785-4c32-9b15-d1e5d12130a4",
        "cursor": {
          "ref": "c8cfa990-5432-42fb-950a-28f2ee0dfee0",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "451b11b6-aabe-4e41-815a-45b73d348886"
        },
        "item": {
          "id": "d18b0994-a785-4c32-9b15-d1e5d12130a4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "44c3917b-c7d3-4464-8b6d-1a4f1783044b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63db3d89-e9ec-40bc-b7eb-2ff4d9ce4bda",
        "cursor": {
          "ref": "6a4e7394-b8ac-460c-a5b6-0bcd4f083bae",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0ca506c9-870f-472a-a526-6e9e0fcbec64"
        },
        "item": {
          "id": "63db3d89-e9ec-40bc-b7eb-2ff4d9ce4bda",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7dbcb265-f049-4851-a341-af72ea9b0825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf97c51-ea03-4377-b5db-488ba8b1001e",
        "cursor": {
          "ref": "89104b4a-9a7c-4d4f-bf7a-11f0a2263465",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0180a28c-71de-49aa-88b8-6674927335d6"
        },
        "item": {
          "id": "9bf97c51-ea03-4377-b5db-488ba8b1001e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a725b4ea-997e-40d5-98f5-b9c99564e254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae0fc90f-8baa-4dc0-9be5-79e9b20eb829",
        "cursor": {
          "ref": "96564b5e-d1a6-42c6-8da4-03d06d0ffefa",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1e1b76fc-a96f-4c10-85a9-dbd24c0dd66d"
        },
        "item": {
          "id": "ae0fc90f-8baa-4dc0-9be5-79e9b20eb829",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "15891e6f-5127-4195-a292-c74db4e2015f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924c42c7-daec-4f11-ae2e-37275554ac92",
        "cursor": {
          "ref": "c2a125f1-9d78-4b66-bf02-ed44d189b5b1",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d88a0435-0eaa-4914-aef0-19470d678ca0"
        },
        "item": {
          "id": "924c42c7-daec-4f11-ae2e-37275554ac92",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a5c70c7d-7a44-4584-879d-00e26ecd03e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db96bf2-8aa4-4120-b5f2-418cb662ca83",
        "cursor": {
          "ref": "fd964a05-2177-48b3-ac86-7046e026b5ef",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "314d6b85-21aa-4472-92d0-5ec089e0b984"
        },
        "item": {
          "id": "6db96bf2-8aa4-4120-b5f2-418cb662ca83",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5dca420f-d06a-46c8-8c4e-64cc000dea91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580589b8-eab8-4eae-bf7b-3d752450a7f5",
        "cursor": {
          "ref": "a739e164-da54-4834-931a-4ae90b0be119",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "136df60c-c736-4745-9999-bdf1ff1ca8f8"
        },
        "item": {
          "id": "580589b8-eab8-4eae-bf7b-3d752450a7f5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2f222f9a-d69b-4750-8ff1-db60f4fba9c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad9d781-a627-4d86-9cdc-10a6cce22d0d",
        "cursor": {
          "ref": "eb433582-fee3-44d2-8b15-26ac6c40b96b",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d24fccaf-82e7-4b91-9b30-ba4d86a316ce"
        },
        "item": {
          "id": "dad9d781-a627-4d86-9cdc-10a6cce22d0d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e214dfd1-8de9-4300-9477-3b56d5053590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9a9557-4d5a-46c2-97ca-e215869e14a5",
        "cursor": {
          "ref": "5794bfe4-8a48-43ae-bf92-3bf3f7cf1ab0",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2b85e7c9-025a-4df4-91c3-ae74b3001bba"
        },
        "item": {
          "id": "be9a9557-4d5a-46c2-97ca-e215869e14a5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1fcb9509-a5f7-4e73-843c-01da8ebdecec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac03fd4-9513-4077-9d47-eee32b7b375f",
        "cursor": {
          "ref": "ce2538b7-af5c-4389-8ed6-d5420558fed6",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ab836c9f-a4bf-4803-86db-894fb5064b20"
        },
        "item": {
          "id": "fac03fd4-9513-4077-9d47-eee32b7b375f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6a139df3-d569-4cfc-a262-54416826e986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f651063f-efab-4f01-9bad-dfc6bf091cff",
        "cursor": {
          "ref": "048569e0-31f4-4b82-b438-eb68ee62b2f0",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "957a4cca-1e92-43e5-b7bc-ddf2cbbabaa5"
        },
        "item": {
          "id": "f651063f-efab-4f01-9bad-dfc6bf091cff",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "eb25f133-332b-43be-a00b-055b78c3a7b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9caa64-c89b-4aa4-8bd4-22fceeeee80d",
        "cursor": {
          "ref": "e51f5cb3-b695-496a-98a9-9c597eeef2b9",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e841c8a5-75a3-414e-8805-92868a34eedd"
        },
        "item": {
          "id": "2d9caa64-c89b-4aa4-8bd4-22fceeeee80d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ffd04c7d-b2c5-4868-9aa7-4c1d6051ea11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c37e2c-4ec2-4ebb-aa3c-7f88e01959e8",
        "cursor": {
          "ref": "5f9a683d-0a9a-495b-99c4-f8ffaf0e5057",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ab799c05-c3eb-444d-9625-7c1e48239d7e"
        },
        "item": {
          "id": "63c37e2c-4ec2-4ebb-aa3c-7f88e01959e8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "25a43602-b52f-4129-a38b-79f5b2bc7dba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb7b8a0-55fa-43d8-9b73-21b4dfefa86a",
        "cursor": {
          "ref": "96500274-3b45-4505-aa0f-344d14e30e1d",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4e3bc9bc-dca6-4f5c-8b1d-1aa6813708af"
        },
        "item": {
          "id": "ecb7b8a0-55fa-43d8-9b73-21b4dfefa86a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b31fd51b-75d6-41ee-a68b-a6dd703db351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee60357-6c09-4b3e-bf2e-4bec7c9e3088",
        "cursor": {
          "ref": "608e4c67-2b38-40ce-b512-b9e94fca302d",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4168c3c9-5776-40de-9fb2-a8821fd74151"
        },
        "item": {
          "id": "aee60357-6c09-4b3e-bf2e-4bec7c9e3088",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "be2fd418-80e7-4933-b04a-e82de33a5780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "982adceb-6e2b-4de7-be40-fb80d7a089e9",
        "cursor": {
          "ref": "f43f4ece-81e2-4669-afe4-ae7eb6d909a6",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f2813b76-c804-4ef2-bcd6-6d50c60fee65"
        },
        "item": {
          "id": "982adceb-6e2b-4de7-be40-fb80d7a089e9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1fea5553-b9c6-41f5-ae1f-60320016c7b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1aa6e2-75da-456a-bd8b-f744547fac72",
        "cursor": {
          "ref": "c793a963-c738-4cd1-8ff8-4ee7d25ba486",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "91018899-f51f-4d7e-88d3-0b3d7c71f4e6"
        },
        "item": {
          "id": "7c1aa6e2-75da-456a-bd8b-f744547fac72",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "38565ebf-0ab2-4643-81d2-d8bf25039f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63486879-9304-45a1-81b9-c6308b4fc623",
        "cursor": {
          "ref": "eda42f57-0733-44f6-b707-691a6484d742",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bc3026f6-0ef8-428f-8aa5-c9982bcebceb"
        },
        "item": {
          "id": "63486879-9304-45a1-81b9-c6308b4fc623",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d39b8905-f1c3-4496-bb64-de8c463839bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9acc3cb-b192-4e02-b742-131e450aa8d2",
        "cursor": {
          "ref": "668d337d-04ab-40a8-a65c-2e99293fc6a7",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1e737b7b-3261-4e57-a0df-85920ae6698c"
        },
        "item": {
          "id": "a9acc3cb-b192-4e02-b742-131e450aa8d2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e39ac92b-6272-4a5c-952a-92162ce44fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "121d6cad-b738-4bef-a0ff-15b47380c0dd",
        "cursor": {
          "ref": "559f1d3b-be02-4a80-a0ed-61ca402642ed",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d7b362bf-09c4-4aff-99af-e436025f7c42"
        },
        "item": {
          "id": "121d6cad-b738-4bef-a0ff-15b47380c0dd",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "6edda681-0f6d-4434-895f-e3e53ad45098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc36532-aae6-47a4-af61-5c009abc576a",
        "cursor": {
          "ref": "a65e644a-3ab9-435d-bd55-da3648e7addd",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f55ed3bd-1655-4067-b52f-ecc14fea2d7f"
        },
        "item": {
          "id": "8dc36532-aae6-47a4-af61-5c009abc576a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "81febc64-6a71-4cbe-a5a3-f6926ba6727e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91e8740-95e9-45db-9cf2-a7b70a1ef627",
        "cursor": {
          "ref": "105c8835-11fa-4f70-8c0d-0aeb5324c8ce",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8d7a3f59-f31d-487e-b69f-c88feeafd68d"
        },
        "item": {
          "id": "b91e8740-95e9-45db-9cf2-a7b70a1ef627",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c4ca9df7-b8ad-45bb-bd9d-d101712227f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c6396a-ecbf-4da6-977a-22d407ba4fa6",
        "cursor": {
          "ref": "22bc5c37-db5f-40ff-9b34-dca56c73cb1f",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "284dfb9b-9116-4e63-9d77-b5815d51a7d1"
        },
        "item": {
          "id": "47c6396a-ecbf-4da6-977a-22d407ba4fa6",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "0ea10c6e-64a5-4a1f-b693-70bd8375bd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895b896b-f473-4a8a-a433-08753de77884",
        "cursor": {
          "ref": "78d73e0b-c95f-4945-afac-6e12011daf1f",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b2ae4b48-2b5a-4f10-984a-3b5f8c174d16"
        },
        "item": {
          "id": "895b896b-f473-4a8a-a433-08753de77884",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "a6d67a53-1fb0-4875-94d1-26eabb7c4f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a71cfa8-031c-4721-9c72-42a0d63822a3",
        "cursor": {
          "ref": "99a71ef8-86b6-437d-aa94-b61910a7e19b",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b09bd67f-79a5-4233-8b36-7406a18d9b1e"
        },
        "item": {
          "id": "8a71cfa8-031c-4721-9c72-42a0d63822a3",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "ffe43a85-361e-4cd9-a322-95679a6ef6b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319cd977-7295-474a-8ad9-d109fe919063",
        "cursor": {
          "ref": "eb7a7b81-176b-46c0-8c38-0bbc439021f6",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f4f56b49-b33b-4e83-8cf3-d05a992531bd"
        },
        "item": {
          "id": "319cd977-7295-474a-8ad9-d109fe919063",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c3fe8bfa-08c5-4637-83fe-fa1a61d64a9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36fe463e-313f-43c6-bbdf-d5a5e7d95313",
        "cursor": {
          "ref": "07bed05a-7cd1-43c0-bad1-f6de8551b610",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e0837b06-8863-491f-aef6-c2df35a371f4"
        },
        "item": {
          "id": "36fe463e-313f-43c6-bbdf-d5a5e7d95313",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "80a94984-7a4f-45ee-8fec-df9a24e212f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1950008-a24b-4a1c-b5ba-1dc1216e8288",
        "cursor": {
          "ref": "86daa720-1a57-48c1-b435-46e94ea60fc8",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "74954a64-f5ca-447c-8e1d-bb0fb30e014b"
        },
        "item": {
          "id": "f1950008-a24b-4a1c-b5ba-1dc1216e8288",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "28f83323-3733-4368-a432-c53d3eaff96e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff808cf-f108-47dd-8359-84be30bcde7c",
        "cursor": {
          "ref": "83ee550a-03d8-43a8-a35c-ef2e2b8cbe37",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a0244896-dd56-473b-8a48-703b80cac118"
        },
        "item": {
          "id": "fff808cf-f108-47dd-8359-84be30bcde7c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9e8750f2-97d4-4e03-9418-3c3e201d2ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb840b2-da0f-4651-b87b-bd6d46bcaa04",
        "cursor": {
          "ref": "64d4a4d5-2db1-452c-8763-d97dd89bfcfc",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "af3d887e-9c7a-4303-866a-777f54e449ef"
        },
        "item": {
          "id": "5eb840b2-da0f-4651-b87b-bd6d46bcaa04",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "42391503-582d-4cd7-bb9e-6db5f3553314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43258a7a-743a-4658-a940-9de0e0902513",
        "cursor": {
          "ref": "500086f6-1a5e-4a70-83f9-9828c423cc1a",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0d3dfc39-2086-46d4-bd2d-b44b353968c5"
        },
        "item": {
          "id": "43258a7a-743a-4658-a940-9de0e0902513",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d16579c0-0242-4e33-b775-8f1c2e9d3c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e9964c-9097-4190-b138-8b5b6a638c6c",
        "cursor": {
          "ref": "a8bb6561-b51a-4551-9ec0-b304554d6dbc",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "95adaf30-353e-4aed-b3a6-95b75a610a21"
        },
        "item": {
          "id": "08e9964c-9097-4190-b138-8b5b6a638c6c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cb9dfacd-e673-461d-930f-dcd1591e08c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "6321d87b-7132-48ff-8354-cd4503a9986d",
        "cursor": {
          "ref": "1d4f028b-831d-4829-afac-9fd72cf9f870",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2c37ffce-13e5-4eea-9322-03d062a50e49"
        },
        "item": {
          "id": "6321d87b-7132-48ff-8354-cd4503a9986d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "da53e270-7ebd-4dd2-988f-46c53c9385aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4e89c2-904b-4813-9a8b-8df1e32d4850",
        "cursor": {
          "ref": "bfc5d70e-4953-455f-81ff-bc391b9eaac3",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c7575331-d050-487e-807b-de6297772333"
        },
        "item": {
          "id": "1d4e89c2-904b-4813-9a8b-8df1e32d4850",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d90d1b45-d6bd-4721-a642-c44fcad6662a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae3cfb7-ec67-4628-be36-cd4ce2d45fa2",
        "cursor": {
          "ref": "07a5dc66-53a1-4d51-9ffb-031f8a5f4b61",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "444db020-f6d9-4808-a04b-0f8b3ed5379d"
        },
        "item": {
          "id": "cae3cfb7-ec67-4628-be36-cd4ce2d45fa2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "54e72b1f-fd5a-47f6-a19e-c2fc29db035b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0a96d5b-4de1-4dc4-a54f-d0ff375215c5",
        "cursor": {
          "ref": "3bd1f3a7-ffc6-4fcf-81bf-f46c6f4bb020",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0e38666b-404f-42c7-a665-3beab47bcfad"
        },
        "item": {
          "id": "e0a96d5b-4de1-4dc4-a54f-d0ff375215c5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0638c374-9793-45d2-98c9-2296de33a539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84bb9626-29d9-4a00-8551-706d0aaef54d",
        "cursor": {
          "ref": "fd509c87-aea1-43fe-8a1f-6c38175063d1",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "76314e46-1c16-4e10-9ce3-ffdda89a4922"
        },
        "item": {
          "id": "84bb9626-29d9-4a00-8551-706d0aaef54d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f32a2611-3e19-4ebd-9483-342d744c2a3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6ebd8a-2888-4cd5-acf3-8edf58a226cc",
        "cursor": {
          "ref": "94cb5382-4f82-45c4-abbd-a9aff6ee78fe",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "eb417810-ce26-44a1-bac7-2ea0fba66a6d"
        },
        "item": {
          "id": "7b6ebd8a-2888-4cd5-acf3-8edf58a226cc",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c02a24fe-a849-494d-af15-96ff0605c475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5802964a-2d42-4701-bdaf-1f7a903d4017",
        "cursor": {
          "ref": "facdbed0-e1f5-447d-9b87-abcaef37fa7f",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b8e5cf37-43cb-4e21-a925-4dfc9b12c372"
        },
        "item": {
          "id": "5802964a-2d42-4701-bdaf-1f7a903d4017",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "435744e0-f23d-47fe-97af-5b2a05827b47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31b5a68-9bc4-4d97-8341-ae9277aba3f6",
        "cursor": {
          "ref": "3a9b294c-b10b-496b-8156-40ec795289c7",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "7926fe9e-fbec-408c-b01e-f9d199b37b07"
        },
        "item": {
          "id": "d31b5a68-9bc4-4d97-8341-ae9277aba3f6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7a5d7a24-3e31-4a54-a693-529b1caa2ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2996e08-cf9c-48ac-8922-5eb911307139",
        "cursor": {
          "ref": "5ce42401-d806-4876-8393-a427504aef9c",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "554f634f-1a86-43a5-95ac-fa4697752a64"
        },
        "item": {
          "id": "f2996e08-cf9c-48ac-8922-5eb911307139",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ae8e7a75-4e28-461c-9eb9-6f57ddffd364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5976fd6a-8d25-4ab4-acc4-f8d6afcd7d03",
        "cursor": {
          "ref": "24d679e4-a36e-4ec7-b395-52b3c0f123db",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "716de23e-8274-441e-8f10-621809fde156"
        },
        "item": {
          "id": "5976fd6a-8d25-4ab4-acc4-f8d6afcd7d03",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "39c2fc3c-fba6-4d5d-a93f-dd815af92ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58aba72b-6e7c-4877-b01e-b335b0c147d7",
        "cursor": {
          "ref": "7e8c9d49-2b85-4639-90ac-b3b5f7e70dc6",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6d1ee879-223b-4e83-bd6b-df12418cf8e6"
        },
        "item": {
          "id": "58aba72b-6e7c-4877-b01e-b335b0c147d7",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3367b6cc-059e-4c31-bb0d-e28e3dbacdae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9cbe64c-c9cc-429d-b70e-2fd6aba2bdd8",
        "cursor": {
          "ref": "eff074b4-9b96-4d38-90d2-b19c35cd2de9",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "fa51a524-3609-4684-aa66-0997c428e148"
        },
        "item": {
          "id": "c9cbe64c-c9cc-429d-b70e-2fd6aba2bdd8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "60cae210-2509-451f-94dc-b1128fd6d447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30cb9986-d8ff-4de9-bb52-51885ed00c41",
        "cursor": {
          "ref": "6ae832af-8620-48b8-bca2-c87501415d18",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "701ed213-f6b8-4d4e-a72e-ae2047bba762"
        },
        "item": {
          "id": "30cb9986-d8ff-4de9-bb52-51885ed00c41",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "704d08d2-4b1b-4a82-8c71-a988474d273c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9847cc22-d80e-45ff-a477-bab657d99766",
        "cursor": {
          "ref": "7cef206d-f7e9-41a7-b29c-387acdb74532",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "35a4d659-aada-4573-b2d1-ba29d45877e7"
        },
        "item": {
          "id": "9847cc22-d80e-45ff-a477-bab657d99766",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3a010339-e28c-4ac8-b23e-a207b56b5347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51984b41-7481-4de1-bb94-83415932c792",
        "cursor": {
          "ref": "f50e22a9-ef8a-47cc-bf02-598101082f2b",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1bf664e3-57a9-46ca-a361-de7c5c2a3523"
        },
        "item": {
          "id": "51984b41-7481-4de1-bb94-83415932c792",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4a34e9ef-1862-441d-9078-899d80bb16a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a79f9b7-168b-4bf2-a37a-1c95be45715a",
        "cursor": {
          "ref": "b284297b-7fb9-4038-974f-3006afa547d4",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "35edf2cd-00b4-4fd0-9ee9-31dc82a902c4"
        },
        "item": {
          "id": "4a79f9b7-168b-4bf2-a37a-1c95be45715a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "698110eb-9084-41d4-b58a-e5180451f5c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da180de5-07ba-4b3d-9998-95e80cba8884",
        "cursor": {
          "ref": "6b5156ea-2279-4ac2-9af2-57dbaadd3429",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "cab0237e-4993-498c-983a-f93c90c576f0"
        },
        "item": {
          "id": "da180de5-07ba-4b3d-9998-95e80cba8884",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8903bb92-8230-4fe6-9e66-e8c10c671875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8778037f-e9a9-4ce4-9897-66b22a206046",
        "cursor": {
          "ref": "2805c081-47b1-4a5e-80fd-6e833c867e36",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "3dd7b857-f1a3-4180-a9db-3cbf2983305b"
        },
        "item": {
          "id": "8778037f-e9a9-4ce4-9897-66b22a206046",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0827ab53-86d9-4860-936b-be01a35e0bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db576c34-1997-44fa-9b8e-a4739807e77a",
        "cursor": {
          "ref": "f6973c9c-3d59-4d2b-9a18-2c1965ae37b9",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a5fe616c-0568-48ac-b472-c0a8a2def9f2"
        },
        "item": {
          "id": "db576c34-1997-44fa-9b8e-a4739807e77a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bf2e807b-3d5c-4825-989f-03d4abbf6cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae08187e-a612-4cfb-8f4d-5648c61b0f04",
        "cursor": {
          "ref": "3c32160d-0a83-4c49-be82-c41d3830247b",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "fd8dfeba-9ed2-43dd-8a6f-2cc0f1ca27e1"
        },
        "item": {
          "id": "ae08187e-a612-4cfb-8f4d-5648c61b0f04",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "8a3b8c9a-cf63-4ca1-afa3-b0c6a7146ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1e92af-c8e6-4178-aee0-bcc55d05e74b",
        "cursor": {
          "ref": "f091bdec-d3ef-4686-8483-8cb0d7b6970c",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c0bd4acb-869e-424e-88a2-732f752faf36"
        },
        "item": {
          "id": "eb1e92af-c8e6-4178-aee0-bcc55d05e74b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5a87f55a-3f03-4af2-8f6e-d72481da5e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d153606-2224-441b-8224-bb51e7f9b501",
        "cursor": {
          "ref": "5e783bb2-f051-45d2-907b-0139ec8f6319",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cb2cfa81-08d8-45be-af10-19de84cde768"
        },
        "item": {
          "id": "0d153606-2224-441b-8224-bb51e7f9b501",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2a2b2d87-837a-4d48-b1c4-c434a3c0783f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859a430a-d890-4d0d-8986-2e1cfebbb762",
        "cursor": {
          "ref": "e73dffac-2fe4-49f7-bab2-8509939e69d3",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3a1fad63-a4b1-454a-9309-58ca4b5b4df0"
        },
        "item": {
          "id": "859a430a-d890-4d0d-8986-2e1cfebbb762",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9f739b38-1c78-4ca9-a251-0919359d8a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0018a4-1961-4de8-a2b5-325392ada92d",
        "cursor": {
          "ref": "a95a3720-fb2a-4d37-8fb6-ebe1866c72e7",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "92951350-57b2-4fb1-9203-771ecc35c509"
        },
        "item": {
          "id": "8c0018a4-1961-4de8-a2b5-325392ada92d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c276d757-fedf-4367-aed1-bc7381ad9241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9e4aca-5df8-472d-b181-d87716c44fca",
        "cursor": {
          "ref": "a25648c5-019d-4ee7-8ce5-e9d5dd976b1e",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d34def00-cc7b-450c-9ae3-ddcb38d1dc1e"
        },
        "item": {
          "id": "6d9e4aca-5df8-472d-b181-d87716c44fca",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4e083766-3f0f-4e46-8ebb-3bfe371e6811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e454618b-106a-4774-bd82-125649319b82",
        "cursor": {
          "ref": "162d1ac2-88a8-4b7f-b703-767ab22967b0",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "db6db993-2144-4c1a-9a3c-9da056e83092"
        },
        "item": {
          "id": "e454618b-106a-4774-bd82-125649319b82",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "8c65164f-100b-4009-91fc-7aef26e789e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f06ca32-2fdd-4fb5-9f06-ac9692e66746",
        "cursor": {
          "ref": "05a8efc7-0bc9-41c3-ba6d-b931caa9a223",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7faa057b-64f6-4087-a31f-4fd10f3a66a2"
        },
        "item": {
          "id": "2f06ca32-2fdd-4fb5-9f06-ac9692e66746",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "44503d27-0e34-4016-a448-76f9ba609541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea7dbda0-e58d-4371-af65-fedfd41516ef",
        "cursor": {
          "ref": "d624eff6-b773-41c7-85a4-e10d58ace373",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1fb1f0d0-251a-464c-866b-7b7dcbca741c"
        },
        "item": {
          "id": "ea7dbda0-e58d-4371-af65-fedfd41516ef",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0d67e347-4be8-4c8c-81ea-a482b7f09175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73cbec51-2974-44d8-b1e8-06d0c1a478d5",
        "cursor": {
          "ref": "16f1e478-8eb5-42a3-8093-0d3c19f31e10",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "edc0f77f-82c9-4e7e-89cb-a2590ff46e2c"
        },
        "item": {
          "id": "73cbec51-2974-44d8-b1e8-06d0c1a478d5",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "afcdaaf8-43d8-4048-a29b-a18d1442163b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196d9af8-cbdb-4338-89a0-ba516eabcb64",
        "cursor": {
          "ref": "e8c96789-2eb5-4a49-979b-786414b95438",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f463e48d-5f30-4096-8315-f3d83476649d"
        },
        "item": {
          "id": "196d9af8-cbdb-4338-89a0-ba516eabcb64",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "92c2ff02-73cd-4876-846b-e240721d8ac1",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "d984a0a1-7462-4749-b29e-c68773e8d5e3",
        "cursor": {
          "ref": "59ec6f2b-3e08-4fbb-acb1-1b1ee82e3b99",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1a6f6504-9d1d-4b8b-9bf3-5d60ff51e389"
        },
        "item": {
          "id": "d984a0a1-7462-4749-b29e-c68773e8d5e3",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "fa78f245-3531-48d2-b65e-88e13b820d31",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "2a3d5eba-7b01-4d0d-9476-f57c8c908f42",
        "cursor": {
          "ref": "cb33b011-c1f4-4980-b7d7-0462d3d1df4e",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "520c0e81-f550-42a2-882b-45764de0ff4e"
        },
        "item": {
          "id": "2a3d5eba-7b01-4d0d-9476-f57c8c908f42",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "eca70ce1-e416-4b20-9997-4ab480778ede",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "9ca5529d-4983-437e-b9bf-be256ebe36cf",
        "cursor": {
          "ref": "40b51a24-3070-4410-ac76-022ed8e94999",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f4927ba4-b19c-404d-8197-4ec6c03c56a1"
        },
        "item": {
          "id": "9ca5529d-4983-437e-b9bf-be256ebe36cf",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0a9eec46-8269-47b3-8017-23c874218817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c2cdc1-9641-4a7c-8e57-8be4ba070b39",
        "cursor": {
          "ref": "0b9f296f-8839-4689-bcc8-c9027f0c1c75",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "8f233283-ccf1-458c-8606-3b41d884a61f"
        },
        "item": {
          "id": "e3c2cdc1-9641-4a7c-8e57-8be4ba070b39",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e4aeab33-1852-48ab-a0dc-20870499d110",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "c42692ce-f3b1-4d34-bf49-7cd7ecd78cd3",
        "cursor": {
          "ref": "a132d3a0-3ceb-442b-9902-0876ac0240ef",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9e1ef60c-0c35-4900-8715-eb40a2d25890"
        },
        "item": {
          "id": "c42692ce-f3b1-4d34-bf49-7cd7ecd78cd3",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2a3d0bf9-b3a4-4a9d-8e34-3f48ec7c6d48",
          "status": "OK",
          "code": 200,
          "responseTime": 1207,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "77340ecc-58d0-4e8d-bbe4-1dd505b98650",
        "cursor": {
          "ref": "7972e66d-ba8c-4bc7-96c5-8d2a49edbdab",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6d6a54bf-141c-4639-af5e-66b91b23fd51"
        },
        "item": {
          "id": "77340ecc-58d0-4e8d-bbe4-1dd505b98650",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "16707143-8b82-4541-b5dd-1e34c7d9014f",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "5fea7477-b6cd-4709-b0f9-333b42b1ccad",
        "cursor": {
          "ref": "04f3539c-fedd-4124-95ad-a609b28012a9",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "826bdfee-49ca-4be6-8c10-35efd37cbf63"
        },
        "item": {
          "id": "5fea7477-b6cd-4709-b0f9-333b42b1ccad",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a0f4a176-1cce-486e-9cd6-046374335c6b",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "16626fc5-c4ba-4de0-8a97-e4fa91231c22",
        "cursor": {
          "ref": "7a9cc016-f55c-4561-bb78-b8b57ce1abf3",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "155c6555-5837-4622-80fc-6f2b03f36c48"
        },
        "item": {
          "id": "16626fc5-c4ba-4de0-8a97-e4fa91231c22",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0b24200d-08d5-401c-acd7-160f350e21df",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "03f4828d-7144-4f8a-8fd0-aef67e89ea10",
        "cursor": {
          "ref": "0ecc750e-e06d-4088-86cf-dfb0b4bc5b6d",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "14db15f3-6d2d-4826-ac5e-93188e5b43da"
        },
        "item": {
          "id": "03f4828d-7144-4f8a-8fd0-aef67e89ea10",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7b40ee53-9077-483f-ad26-500ca070a171",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "f6b7a216-6f50-4193-a81c-5b610a848cf4",
        "cursor": {
          "ref": "5824d5f1-b431-4f02-b59a-3062fa207f8d",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7367a66e-fe1b-4a2f-86d7-2d57ca4ce5d4"
        },
        "item": {
          "id": "f6b7a216-6f50-4193-a81c-5b610a848cf4",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "204d2dac-f235-4a4f-8875-e14864adce50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7da8c7-1f5d-46ba-8c00-3ad2ebdf0069",
        "cursor": {
          "ref": "0f08d763-e4a9-40fe-8716-01c8665919f1",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3a2f4573-6373-4dae-81ef-886716db1cf8"
        },
        "item": {
          "id": "1d7da8c7-1f5d-46ba-8c00-3ad2ebdf0069",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b8b9becf-cd13-4393-8e84-77ed836f20e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44b176c-a4f9-4030-b360-3b17de269938",
        "cursor": {
          "ref": "ad20eaca-05f6-42ca-8593-01c16f6d477b",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "85ca04bc-dd45-46ac-bfb5-25f2f828bb6d"
        },
        "item": {
          "id": "f44b176c-a4f9-4030-b360-3b17de269938",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1254546c-3325-4054-ab49-20b675d38e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3d74ee-7b83-4ec7-aa52-2930b4b68213",
        "cursor": {
          "ref": "8297da66-206d-4fe1-9fb8-d2a640cdef15",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "48c6c9f4-4c54-45a0-8678-634f28c30cb3"
        },
        "item": {
          "id": "6a3d74ee-7b83-4ec7-aa52-2930b4b68213",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "22354c0f-454e-44ab-a2ec-5f9fa1724b88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f96d34-b7e0-4fd8-b7b1-87dcee5fa81b",
        "cursor": {
          "ref": "73dda2b1-873e-421d-a19e-506d22bab20c",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b531fccc-e10e-42ca-b188-759626b9e4e2"
        },
        "item": {
          "id": "75f96d34-b7e0-4fd8-b7b1-87dcee5fa81b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6e3cbcc7-5e9b-4290-9525-b7948e0da874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e42c43e-e61f-4f57-a19d-9bd57e76dc30",
        "cursor": {
          "ref": "4046cff1-3414-4d6b-b2ef-d84f113be693",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "afab2345-0d54-45d3-975f-77dd5fd4bf8e"
        },
        "item": {
          "id": "4e42c43e-e61f-4f57-a19d-9bd57e76dc30",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "51218340-ebdb-4483-9ce1-95690a5cc3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52cfffaa-c757-4de0-91dc-420abf61b7aa",
        "cursor": {
          "ref": "a92af720-2490-4069-b312-2171557a18a9",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1bf032d2-7f73-4d81-957e-79da212607f8"
        },
        "item": {
          "id": "52cfffaa-c757-4de0-91dc-420abf61b7aa",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "787988e9-56d9-4be7-977a-689ea5bc64db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff6ea37-0eaa-4487-bb24-f1ccfa7d9810",
        "cursor": {
          "ref": "84ce5eaf-a539-47c3-9327-d3d78020cc85",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ba51ea3e-d963-4b66-b9ae-fc2a3410f00f"
        },
        "item": {
          "id": "6ff6ea37-0eaa-4487-bb24-f1ccfa7d9810",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4f41ab4c-e88e-4d90-b8fe-a0170a0c079d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22151c8e-51fc-40d4-96cb-236e94a6dcdb",
        "cursor": {
          "ref": "671c380b-704c-4db6-9312-5821a66b2e4c",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "68eeac10-cb9c-4ae9-91d4-857076bff166"
        },
        "item": {
          "id": "22151c8e-51fc-40d4-96cb-236e94a6dcdb",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ebbfc881-70d6-4bd9-9aa9-23ed3ebfb223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3364c3-d838-492e-9020-70901f3af9de",
        "cursor": {
          "ref": "fe7204c4-aa54-4a4c-8d38-c8d3d3122fe7",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ea0d27bc-8c18-482c-bb8b-f9973f41a1e1"
        },
        "item": {
          "id": "9a3364c3-d838-492e-9020-70901f3af9de",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "3a6f94fa-587e-40c4-a3ee-e999c79bdcdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a781ff66-5935-408f-9843-1406df8e3ff5",
        "cursor": {
          "ref": "65d9feda-3f82-4936-8ee7-623d4b835caf",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "23da15d6-66d7-435a-9791-642aebc9a2a6"
        },
        "item": {
          "id": "a781ff66-5935-408f-9843-1406df8e3ff5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "65317e82-9d99-4dce-9c66-1cdc5f9b1442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a333cb3b-d6cb-431d-8b84-ebd6a5b30b6b",
        "cursor": {
          "ref": "4a2a2666-e84c-4f5c-ae35-39ee6976041d",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "43e48b06-2319-45ae-b975-da71aaa26de2"
        },
        "item": {
          "id": "a333cb3b-d6cb-431d-8b84-ebd6a5b30b6b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9d7c6047-990c-433d-b7b9-1df9f506ef4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57ed39f-e093-4973-bc5a-b760f43df506",
        "cursor": {
          "ref": "c4125a77-a81c-4a80-9fe2-6f3140d9ae74",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4f1d6f6d-88af-4a2c-8f7c-782b91f38766"
        },
        "item": {
          "id": "a57ed39f-e093-4973-bc5a-b760f43df506",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3c9194f7-fabe-4223-842c-27cabcedddd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779e041a-921c-4d29-a179-b1ade581e3f0",
        "cursor": {
          "ref": "a769d19b-e414-4dcb-b5cd-e9226946f46a",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c61bea31-c398-42f2-888d-f6a252979d4d"
        },
        "item": {
          "id": "779e041a-921c-4d29-a179-b1ade581e3f0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "590e4578-1b70-4ea2-b9b8-f7d2be972b38",
          "status": "OK",
          "code": 200,
          "responseTime": 1175,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "7554210e-05f9-44c6-ac40-b7157006d841",
        "cursor": {
          "ref": "e04af9a8-4974-4435-8cd2-c9912908fe48",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0d6c7797-aab0-485d-8cdc-dd9a7a1ec180"
        },
        "item": {
          "id": "7554210e-05f9-44c6-ac40-b7157006d841",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "667af77a-f230-4f83-93be-e0fe0dcb8dce",
          "status": "OK",
          "code": 200,
          "responseTime": 1186,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "f9bf014f-a97f-444c-85c0-92bb0aa5ec6e",
        "cursor": {
          "ref": "245b3f2a-f8cb-4a5f-ac72-1e2353dda16f",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f50f9f82-1684-4cdb-8dbc-e5b303d195f9"
        },
        "item": {
          "id": "f9bf014f-a97f-444c-85c0-92bb0aa5ec6e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "36beee68-5cd3-4906-b805-88794b769fd2",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "8290e954-0476-4e97-9b7f-f3b9680f9c2b",
        "cursor": {
          "ref": "30c8b107-3d68-408f-ad2e-14be6a394bcc",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "adcec049-0bf4-4201-89d4-128dabdd0d96"
        },
        "item": {
          "id": "8290e954-0476-4e97-9b7f-f3b9680f9c2b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "75bf5d22-c740-43e4-8be8-431f7a4220cd",
          "status": "OK",
          "code": 200,
          "responseTime": 1100,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "fb36cfa7-b0ed-42a3-ae99-483422b524c3",
        "cursor": {
          "ref": "08a15c5c-8192-4fa6-8847-8b74bcf0c68a",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7fa2c0ce-887e-45e5-a9f0-48df86180259"
        },
        "item": {
          "id": "fb36cfa7-b0ed-42a3-ae99-483422b524c3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "16774003-abd0-46f9-ae54-26799726d065",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "5a5d553b-6980-4c32-9293-94157b5873c5",
        "cursor": {
          "ref": "89700b33-6e7f-4f75-9552-f8b1aeb73e0d",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7caa4aac-2fe7-489c-99e9-fee3d64bf0e0"
        },
        "item": {
          "id": "5a5d553b-6980-4c32-9293-94157b5873c5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a8297581-b74c-4090-89bd-d5dae50096eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44dbbfee-747f-4225-8070-4a281885aa46",
        "cursor": {
          "ref": "290e362d-14b2-4aee-a983-fda643c66a43",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d801e460-27b9-41d2-9738-0b154611312b"
        },
        "item": {
          "id": "44dbbfee-747f-4225-8070-4a281885aa46",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d1babfe1-5283-4b54-ad79-1c5a8ae87fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61486507-a77e-4f17-b1ab-a0cf8b37fc66",
        "cursor": {
          "ref": "9c4b6d09-fc5f-4d2c-9b75-00eaffd165c4",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4a435849-6fe9-4f18-bbc5-d91ebbaf84aa"
        },
        "item": {
          "id": "61486507-a77e-4f17-b1ab-a0cf8b37fc66",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "75a02018-6b13-4eed-9d27-ccb394e9e2e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89616e73-db79-4015-a7a8-334526a191a6",
        "cursor": {
          "ref": "ae39f38b-5505-46d9-adaf-ef861e970e4a",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "055b0b26-d1c9-419e-8ff8-0e90abc6b07c"
        },
        "item": {
          "id": "89616e73-db79-4015-a7a8-334526a191a6",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5267b01e-fdc1-4cb3-8f61-691adcd55676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fceaf085-c29f-4c00-923b-76434116b0f0",
        "cursor": {
          "ref": "5daa78a1-087d-4097-b2eb-d30db279aa62",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4dcc90e8-8c9e-48f0-a780-3b08eae31029"
        },
        "item": {
          "id": "fceaf085-c29f-4c00-923b-76434116b0f0",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a0428378-7f84-4abf-a3aa-d4b4fa38fb36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e07601-9a67-4091-87e3-dfa24494f5f2",
        "cursor": {
          "ref": "7cb8b63a-7df5-421e-8615-99c6c9fd205e",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e08f6e09-cc0e-4ae6-b8ea-e8bad425452d"
        },
        "item": {
          "id": "63e07601-9a67-4091-87e3-dfa24494f5f2",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b4636476-6590-4322-8a3c-dd59e626ecb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90803596-74e2-41b1-80a3-ff45eb34a25d",
        "cursor": {
          "ref": "f3bb8fc4-24be-40ba-86d7-9949302e1986",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9f571cf4-4ac0-4fae-b9ad-271bda02b1e3"
        },
        "item": {
          "id": "90803596-74e2-41b1-80a3-ff45eb34a25d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "62299857-3ba8-4bdf-996f-869966134145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3687d8e1-970b-42ed-8f47-f56cc7706eb4",
        "cursor": {
          "ref": "14b693b6-6ea8-4435-a54a-abb0c0802467",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "468a1172-7f9e-4c77-bbdb-2b453497b51c"
        },
        "item": {
          "id": "3687d8e1-970b-42ed-8f47-f56cc7706eb4",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c2a2ec50-a87b-4720-bf75-e64eee22ad57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1e667b-5868-49e9-bac9-5feaf8a03cd7",
        "cursor": {
          "ref": "9d30fbb4-95b7-4184-b456-8052eaef05a9",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "025ef5c9-ce48-413e-908f-06f4eccd1f01"
        },
        "item": {
          "id": "2f1e667b-5868-49e9-bac9-5feaf8a03cd7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3da803dd-7991-4c99-81c8-d04938301756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7fcba5-c748-4f39-bd86-6393a53a0b5c",
        "cursor": {
          "ref": "31a923d4-5670-4514-b036-60831708bd01",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "7b5b0939-901a-499f-bc72-1d83c031231e"
        },
        "item": {
          "id": "7f7fcba5-c748-4f39-bd86-6393a53a0b5c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "39fa88d5-35b7-4757-8af1-29d63b0082ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705ee231-9673-4a71-810a-aa25cdcfc704",
        "cursor": {
          "ref": "bd41be24-0b62-46e5-9679-172f053a98d0",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c641006f-cf1d-4578-be6e-79d14b127fde"
        },
        "item": {
          "id": "705ee231-9673-4a71-810a-aa25cdcfc704",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "79b2844e-e75f-4b2a-bb8d-bed7064ebebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad8467a2-99e0-4ea8-87bd-264524036533",
        "cursor": {
          "ref": "8f23dd7d-e607-4adf-bcaa-34c3799ddc8b",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6ce67b2c-f055-4b14-ac8e-52670c7a8357"
        },
        "item": {
          "id": "ad8467a2-99e0-4ea8-87bd-264524036533",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "0503f808-11f8-41e4-88b1-b2946c112c6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef3d5c9-c3a0-47c5-9114-80c284ef360d",
        "cursor": {
          "ref": "bcbeef64-6051-4081-aaef-ae5291ebc308",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "181cf323-3c0c-4fdf-bf10-37f43f86320f"
        },
        "item": {
          "id": "7ef3d5c9-c3a0-47c5-9114-80c284ef360d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "28627603-e514-4e51-a1c6-ebfd308e3a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b794ff92-63fd-4787-b93e-20da0db52c42",
        "cursor": {
          "ref": "512dc46c-930f-41c9-a96a-355a3e777196",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "c8b705a9-24e8-4c62-9f79-6e2367e306d3"
        },
        "item": {
          "id": "b794ff92-63fd-4787-b93e-20da0db52c42",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "5754bdb6-f5e7-4067-938d-e4b3bc6e5293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "649d2e65-7eb9-417b-8d86-ebe339474019",
        "cursor": {
          "ref": "2cf1e5b0-14d7-4592-9025-823143b2de85",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "f48cd874-16b7-4fbe-96a3-fd39c814153b"
        },
        "item": {
          "id": "649d2e65-7eb9-417b-8d86-ebe339474019",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5465387d-4b56-43fe-8a92-2a24c914dc5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3389dcd2-3f8c-4c31-bfdc-9d3d254d925b",
        "cursor": {
          "ref": "aaf7681e-75ae-4c40-9282-e2794ab958b5",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "fb37da6f-1906-4f96-baee-25d0807d66d6"
        },
        "item": {
          "id": "3389dcd2-3f8c-4c31-bfdc-9d3d254d925b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "bd2a7df7-ba87-4d45-b393-8d3720df7d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7359195e-2053-44de-91c4-345018795452",
        "cursor": {
          "ref": "bf209c94-2546-4901-8e53-41ab81c9c412",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "360b455e-be9f-4b6a-b891-c28ccaecb375"
        },
        "item": {
          "id": "7359195e-2053-44de-91c4-345018795452",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "efaaa1cd-18b1-45fa-8541-1fc0ba5c5377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f67806a-b9ca-41c5-a8c5-19c6d16c6bc3",
        "cursor": {
          "ref": "a38193cb-2a1e-49a0-8b9c-619a6939fdc8",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "16c2ba29-87eb-4614-b583-b02898a6d48f"
        },
        "item": {
          "id": "2f67806a-b9ca-41c5-a8c5-19c6d16c6bc3",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "fe16579b-62d6-4120-b4a1-b605977cfd29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd97a6b-471c-414c-8c41-0657bd752c6d",
        "cursor": {
          "ref": "7315fb75-b507-47b2-9e93-b3b08a566b35",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "7df633da-4713-43b0-9c2c-47a190f60e94"
        },
        "item": {
          "id": "4cd97a6b-471c-414c-8c41-0657bd752c6d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "39b8533f-4331-414e-8123-50a9940d0a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8179f2-b92b-4735-a591-2823880eb9c5",
        "cursor": {
          "ref": "8103a24b-6eb0-4ed4-9414-4a13e9a8efd6",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "2de934bc-525c-40eb-9325-e0c2d229154a"
        },
        "item": {
          "id": "8e8179f2-b92b-4735-a591-2823880eb9c5",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6eb118e6-5471-4004-aa5e-3d02f9227c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e17f60-8fd3-4d38-a90c-bbf4c7e30d13",
        "cursor": {
          "ref": "f0c1980c-26e8-42ef-814c-45e58c793d67",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "6ed2d817-9e2e-4058-b71e-163cf7376192"
        },
        "item": {
          "id": "b4e17f60-8fd3-4d38-a90c-bbf4c7e30d13",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9651eb68-5bc9-467f-903f-ecb92df16ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968c77e5-0da6-4561-a4a1-cf7f7980caac",
        "cursor": {
          "ref": "6578f98c-0316-45d7-adc6-a0ab4b925ce0",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "d1c6cdf0-db46-4c2c-af90-48a0eeb66edd"
        },
        "item": {
          "id": "968c77e5-0da6-4561-a4a1-cf7f7980caac",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "473e80a0-b67c-494b-aecc-f6d25bcea211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4022fe4-713f-454f-90b8-3d4723dbe97e",
        "cursor": {
          "ref": "1d0f7aba-9483-4b70-bcd4-b8417ff40384",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "70ee98f3-834c-4c1a-a4cb-b6f177fd19a3"
        },
        "item": {
          "id": "b4022fe4-713f-454f-90b8-3d4723dbe97e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "42747030-7c46-4796-9a2f-5edbb46c0e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc1352a-3cf4-4666-bead-6a5643779835",
        "cursor": {
          "ref": "f7ab9083-63b5-472e-9afc-bbc3b9a007f8",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "be625d55-8d2a-4f9b-a0d2-82b8380e5c44"
        },
        "item": {
          "id": "ffc1352a-3cf4-4666-bead-6a5643779835",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9d174c73-6025-41d4-9687-7a8aa7423323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f80efd-846b-4a47-8b1f-400c032d97da",
        "cursor": {
          "ref": "fc9edc10-10a1-45d8-bd90-50dfa4c74773",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "fcb04339-37a1-4a1b-8d93-b23c70d36cd1"
        },
        "item": {
          "id": "42f80efd-846b-4a47-8b1f-400c032d97da",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "00c377cc-0a19-4208-acc8-09e0baf5cfb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6389dd8-ec5f-4cd3-ab25-5faa44f9d68d",
        "cursor": {
          "ref": "a5dd569c-b2bd-4d1e-8cb7-a1d5f569a724",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "ec2a37cd-8b74-46cf-8205-cd9f173266fb"
        },
        "item": {
          "id": "e6389dd8-ec5f-4cd3-ab25-5faa44f9d68d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e458dec9-8426-42a6-8973-e14a77ec4712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ae3264-4cfc-41f9-97b1-fa74f241371a",
        "cursor": {
          "ref": "bd40dabb-22ea-4bbe-b7d0-6ad0e852d328",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "d6fd4b7b-b3fb-43fb-bc2e-e131ab602a6f"
        },
        "item": {
          "id": "b8ae3264-4cfc-41f9-97b1-fa74f241371a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9067d304-8d62-4448-9307-fd2413d09719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2cac5c-9af3-47a9-a0d2-38d2f5d5a172",
        "cursor": {
          "ref": "f6a2bea0-ebd1-4776-95af-5430b1d97027",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "497bc3e6-1dcc-4c95-ad5f-d667aa0c38bf"
        },
        "item": {
          "id": "fe2cac5c-9af3-47a9-a0d2-38d2f5d5a172",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "83754996-c973-4bc0-a22c-ee593d01f5e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb75af8-528e-4ee0-96dc-98f7eba2ff56",
        "cursor": {
          "ref": "1e21e570-638d-4d4f-b09c-5f9fcae8e6c4",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "081bce57-e5cb-4bec-9d37-573a32c7f534"
        },
        "item": {
          "id": "0eb75af8-528e-4ee0-96dc-98f7eba2ff56",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "544ecb19-3c23-45ae-9aa2-8bcb40a67c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87307c9f-b81d-48aa-8856-6d3536a088e3",
        "cursor": {
          "ref": "a988c29e-852a-45b7-a502-18d276ab54b0",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "1e78fbbe-af01-44ba-bad1-672d9c6dc029"
        },
        "item": {
          "id": "87307c9f-b81d-48aa-8856-6d3536a088e3",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "388b736d-5611-44d0-baca-f3caae3f37a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3cada4-aef0-4c53-a684-89201fcf895c",
        "cursor": {
          "ref": "33b0540e-e6e3-4084-92c6-1c531f81685a",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "1254eef7-188a-4c08-92fc-3981c7f0f3de"
        },
        "item": {
          "id": "5d3cada4-aef0-4c53-a684-89201fcf895c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9955a264-d9ed-407a-b694-7b9b5c5bb74f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0426a4e5-3bcc-4f85-bf5d-ca637be7dc03",
        "cursor": {
          "ref": "bf769a3d-61ec-4644-aaf6-2516d75bf807",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "8a36e37d-28bd-4fd7-ba6f-f1b9df40e67c"
        },
        "item": {
          "id": "0426a4e5-3bcc-4f85-bf5d-ca637be7dc03",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9546edbe-77f7-4c4a-a550-19bd861e2e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872c54b6-3288-4c0a-a146-8c9275a05109",
        "cursor": {
          "ref": "cbec2fc5-f3eb-4316-a684-2f7c781404bb",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "daa5009a-30c6-4733-896f-93f042df54d8"
        },
        "item": {
          "id": "872c54b6-3288-4c0a-a146-8c9275a05109",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "503b81b3-1a11-4c12-930b-23f7ebd37ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46520085-d81b-4db7-926e-47b69ad20d77",
        "cursor": {
          "ref": "831578c5-8f2f-4f1e-be58-01d472b495b8",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "d1950d99-38f6-4e6e-a23a-9d3458bc1c30"
        },
        "item": {
          "id": "46520085-d81b-4db7-926e-47b69ad20d77",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6a1667c9-bff1-4dcd-86bd-97052f3493d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "888c0ea9-0898-4d0c-b70e-469cb1e7b6df",
        "cursor": {
          "ref": "b55e7ed6-ec6f-4240-a763-fd10fa188742",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "096f6d10-4709-43d2-814e-f2defc4c7f2a"
        },
        "item": {
          "id": "888c0ea9-0898-4d0c-b70e-469cb1e7b6df",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6dd43223-2955-4b8f-8f47-738a639d08c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4682773-16bf-4ea0-aa6b-328810207f04",
        "cursor": {
          "ref": "81af7829-4dee-4546-935f-bb04e636fba8",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "50f634db-613d-490c-8a1f-5a4881b1bb71"
        },
        "item": {
          "id": "a4682773-16bf-4ea0-aa6b-328810207f04",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3745ac59-577b-4d55-b73f-a592cdddda05",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "b855eaf4-eef1-4305-831e-96433bc982d2",
        "cursor": {
          "ref": "c0393554-e7a5-443e-95de-ff1b33940e54",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "e5c1fd0b-8966-4fc5-a14a-8d0773e5f6e5"
        },
        "item": {
          "id": "b855eaf4-eef1-4305-831e-96433bc982d2",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7845a13b-006d-4730-bc95-10a93287deaf",
          "status": "OK",
          "code": 200,
          "responseTime": 1294,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7736512f-ea74-46ed-bb3b-2b81ba393405",
        "cursor": {
          "ref": "31787907-35a7-43b8-8ee1-cbba909577f4",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "642bd360-e2e3-473d-af25-f3993bb615cd"
        },
        "item": {
          "id": "7736512f-ea74-46ed-bb3b-2b81ba393405",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d23864ef-7b2c-441c-a830-61c1a3c47b16",
          "status": "OK",
          "code": 200,
          "responseTime": 1191,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1e70a9-6d70-4db3-974e-500407719f9d",
        "cursor": {
          "ref": "6ec2d0f6-829f-41af-baf6-cc8ec415e8b5",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "3201768d-9f8e-4e96-8986-8143039aea69"
        },
        "item": {
          "id": "7c1e70a9-6d70-4db3-974e-500407719f9d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9b9fd7f6-d526-4dab-8192-64ee9ec4ced7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1e70a9-6d70-4db3-974e-500407719f9d",
        "cursor": {
          "ref": "6ec2d0f6-829f-41af-baf6-cc8ec415e8b5",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "3201768d-9f8e-4e96-8986-8143039aea69"
        },
        "item": {
          "id": "7c1e70a9-6d70-4db3-974e-500407719f9d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9b9fd7f6-d526-4dab-8192-64ee9ec4ced7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5843fd25-ed07-4210-acf1-8872da99b8c3",
        "cursor": {
          "ref": "09b99dce-e6fa-4691-b3cb-540f06bd7496",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "84686e38-8656-4c33-8b16-4d7ff1e76e86"
        },
        "item": {
          "id": "5843fd25-ed07-4210-acf1-8872da99b8c3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "80fbed19-c88e-4484-94a3-a7b23f7d9281",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81399634-1552-4144-b61a-6fbccaf48174",
        "cursor": {
          "ref": "4706b379-34e2-4776-bf78-9cce29eee715",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "3b84e8aa-66fd-4350-8773-faf6d54de36c"
        },
        "item": {
          "id": "81399634-1552-4144-b61a-6fbccaf48174",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "3c6bdea9-e29f-4881-8dd2-d2b7b204bed5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}